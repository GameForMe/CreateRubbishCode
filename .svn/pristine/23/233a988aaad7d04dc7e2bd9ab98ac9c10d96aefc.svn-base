#ifndef AUTOUPDATEUI_H__
#define AUTOUPDATEUI_H__

#include "cocos2d.h"
#include "cocos-ext.h"
#include "AssetsManager/AssetsManager.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class AutoUpdateUi : public CCLayer
	//, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	enum EUpState
	{
		EUS_CheckUrl =0,
		EUS_DownloadingZip,
		EUS_Unzip,
		EUS_Success,
		EUS_Finish,
	};
public:
	AutoUpdateUi();
	~AutoUpdateUi();

	//static AutoUpdateUi* create(AssetsManager* mgr);
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(AutoUpdateUi, create);

	//virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName){return NULL;}
	//virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	static AutoUpdateUi* createFromCCBI(CCObject* pOwner,AssetsManager* mgr);

	void showUpConfirm(int size);
	void updateProgress(int pct);
	void showProgressState(int nState,bool bNeedRestart =false);

	void showErrorCode(int state);

	void hideTimer();
	void showTimer();

	void setAM(AssetsManager* mgr){_am = mgr;}
private:
	void setDisplayType(int type);

	void setStateText(int state);
	void setErrorText(int error);

	std::string getDisplaySizeString(int size);
private:
	CCNode*			_noticeNode;
	CCLabelTTF*		_size;

	CCNode*			_progressNode;
	CCSprite*			_progressSp;
	CCLabelTTF*		_progressTitle;
	CCLabelTTF*		_targetVer;
	CCLabelTTF*		_progressByte;
	CCLabelTTF*		_progressPct;

	CCNode*			_progressRoot;

	CCProgressTimer*		_progressTimer;

	AssetsManager*	_am;

};


#endif // AUTOUPDATEUI_H__
