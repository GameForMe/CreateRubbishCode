#ifndef TRADINGUI_H
#define TRADINGUI_H
#include "cocos-ext.h"
#include "UiInterface.h"
#include "ListItem.h"
#include "VerticalList.h"
#include "TradingMgr.h"
#include "CoverButton.h"
#include "NormalLayer.h"
#include "ListControl.h"
#include "FrameSprite.h"
#include "GridAlignNode.h"
#include "TradingBuyRightItemList.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class TradingUILayer;
class TradingUI :public UiInterface
{
public:
	TradingUI();
	~TradingUI();
	virtual CCNode *openUi();
	TradingUILayer *getUiLayer();
};

class TradingUILayer :public NormalLayer
					 ,CCScrollViewDelegate
					 ,CCTextFieldDelegate
{
public:
	TradingUILayer();
	~TradingUILayer();
public:
	class BuyLeftBtnList : public ListItem
	{
		enum eNodeTag
		{
			NT_Icon = 0,
			NT_Tiao = 1,
			NT_Select = 2,
		};

	public:
		BuyLeftBtnList();
		virtual ~BuyLeftBtnList();
		virtual CCSize getContentSize();
		virtual void onTouch(CCTouch *touck);
		virtual void onSelectChanged(bool select);
		virtual float getItemHeight();
		void setShowInfo(const TradingData data);
		void setSelectEnable( bool select );
	private:
		CCSprite *_SelectSprite ;
		CCSprite *_BlankSprite;
		int m_noneclassId;
		int m_towclassSize;
		bool m_professionClass;
		bool m_lvClass;
		int _equipNum;
	};

public:
	static TradingUILayer* createFromCCBI(const char* szFile,CCObject* pOwner=NULL,UiInterface* holder=NULL);
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(TradingUILayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual void scrollViewDidScroll(CCScrollView* view);
	virtual void scrollViewDidZoom(CCScrollView* view);
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	//当用户启动虚拟键盘是的回调
	virtual bool onTextFieldAttachWithIME(CCTextFieldTTF *pSender);
	//当用户进行输入是的回调函数
	virtual bool onTextFieldInsertText(CCTextFieldTTF *pSender, const char* text, int nLen);
	//当用户关闭虚拟键盘时的回调
	virtual bool onTextFieldDetachWithIME(CCTextFieldTTF * sender);
	//当用户删除文字时的回调
	virtual bool onTextFieldDeleteBackward(CCTextFieldTTF *pSender, const char* text, int nLen);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onwoyaogoumaiBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onwoyaochushouBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onwoyaolingquBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onsousuoBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void ongoumaiBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onzhiyeBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onHelpBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	//void onOkHelpBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onzhiyequanbuBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onzhiyezhanshiBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onjiageBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onzhiyefashiBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onzhiyedaoshiBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onzhiyetongyongBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onquanbulingquBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlv2quanbuBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlingquBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlvBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlv21BtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlv22BtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlv23BtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlv24BtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlv25BtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void onlv26BtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent );
	void refreshScrollView(bool bForce = false);
	void showFrame( eTradingFrameTag ft);
	void onSearchChanged();
	void updateBuyLeftBtnList();
	void updateBuyFinalItemRightList(bool isHave);
	void updateBuyItemRightList(int btnIndex);
	void updateSellLeftItemList();
	void updateSellRightItemList(bool setOffset = true);
	void updateGetItemList();
	void setPriceButttonImage();
	void UpdateCommonYuanBao();
	void UpdatePushSellNum();
	void onOkBtnPressed( bool isOk, int count);
	void CloseButton();
	void ClearClickScrollView();
	void SetAllButtonPriority();
	void InitBuyRightText();
	void HideSelfButton();
	void SetLoadingImage();
	void SetDelayShow(bool value);
	void ClearBuyLeftBtnState();
	void setClickButtonState();	
	void SetSearchButtonState();
	void DeleteAllGetItemList();
	void PushGetItemListByItem(tagTradingGetItemDataMsg *item);
	void DeleteGetItemListById(INT64 n64_serial);
	void updateGetItemState(DWORD dwUpRoleID,INT64 n64_serial,tradingState nState);
	void DeleteSellRightItemById(INT64 n64_old_serial);
	void setSellRightTouchEnabled();

	bool GetBuyRightTouchMove(){return m_pBuyRightTouchMove;}
	void SetBuyRightTouchMove(bool value){m_pBuyRightTouchMove = value;}
	void SetBuyRightTouchMove(float dt);

	bool GetSellRightTouchMove(){return m_pSellRightTouchMove;}
	void SetSellRightTouchMove(bool value){m_pSellRightTouchMove = value;}
	void SetSellRightTouchMove(float dt);

	bool GetSellLeftTouchMove(){return m_SellLeftTouchMove;}
	void SetSellLeftTouchMove(bool value){m_SellLeftTouchMove = value;}
	void SetSellLeftTouchMove(float dt);

	eTradingFrameTag getFrameTag(){return m_eCurFrame;}
public:
	CCScrollView * getSellRightScrollView(){return m_pSellRightScrollView;}
	CCScrollView * getSellLeftScrollView() {return m_pSellLeftScrollView;}	
	CCNode*		getSellRightContainer(){return m_pSellRightContainer;}
	void SetSellRightItemClickEnable(bool value);
	void SetGetUIRedPoint();
	void UpdateGoldText();
	void ClearAllGetUIRedPoint();
	void HideGetButton();
	void SetGetNum();
	LabelFT* getProfessText(){return m_pNewProfessText;}
	LabelFT* getLevelText(){return m_pNewLevelText;}
public:
	static	int									m_ScrollViewIndex;
	int											m_LastScrollViewIndex;
private:
	cocos2d::CCLabelTTF*						m_pCommonYuanBao;
	LabelFT*									m_pNewCommonYuanBao;
	cocos2d::CCLabelTTF*						m_pGoldText;
	LabelFT*									m_pNewGoldText;
	cocos2d::CCLabelTTF*						m_pSellPushNum;
	LabelFT*									m_pSellNewPushNum;
	cocos2d::CCSprite*							m_pPriceArrow;
	cocos2d::CCSprite*							m_pDelaySp;
	cocos2d::CCNode*							m_pYuanBaoCCNode;
	cocos2d::CCNode*							m_pGoldCCNode;
	CCPoint										m_ProfessBtnPt;
	CCPoint										m_LevelBtnPt;
	CCPoint										m_PriceBtnPt;
	CCPoint										m_ProfessPagePt;
	CCPoint										m_LevelPagePt;
	CoverButton*								m_pLevelButton;
	CoverButton*								m_pPriceButton;
	CoverButton*								m_pProfessButton;
	CCControlButton*							m_pSelfOneGetButton;
	CCControlButton*							m_pSelfAllGetButton;
	CCControlButton*							m_pSelfBuyButton;
	cocos2d::CCSprite*							m_pSelfGetRedPoint;
	cocos2d::CCSprite*							m_pOneGetRedPoint;
	cocos2d::CCSprite*							m_pAllGetRedPoint;
	cocos2d::CCLabelTTF*						m_pProfessText;
	LabelFT*									m_pNewProfessText;
	cocos2d::CCLabelTTF*						m_pLevelText;
	LabelFT*									m_pNewLevelText;
	cocos2d::CCLabelTTF*						m_pPriceText;
	cocos2d::CCLabelTTF*						m_pChoseText;
	cocos2d::CCNode*							m_pSearchText;
	CCTextFieldTTF*								m_pSearchTextField;
	//FrameSprite *								m_pTradingHelp;     //说明界面
	int											m_nMaxInputNum;
	int											m_nCurInputNum;
												 
	VerticalList<BuyLeftBtnList>*				m_pBuyLeftList; 
	CCNode *									m_pBuyLeftContainer;
	CCScrollView*								m_pBuyLeftScrollView;
	CCPoint										m_BuyLeftBeginPt;

	CCNode *									m_pFrame[T_TradingTabNum];
	std::vector<CCControlButton*>				m_vTradingButton;
	eTradingFrameTag							m_eCurFrame;

	CCNode*										m_pProfessPage;
	CCNode*										m_pLevelPage;
	CCNode*										m_pPageCCNode;

	ListControl*								m_pGetControl;
	cocos2d::CCLabelTTF*						m_pGetNum;
	LabelFT*									m_pGetNewNum;

	CCControlButton*							m_pSelfBuyBtn;
	CCControlButton*							m_pSelfSellBtn;
	CCControlButton*							m_pSelfGetBtn;

	CCNode*										m_pBuyRightTalk;
	CCLabelTTF*									m_pBuyRightText;
	LabelFT*									m_pBuyNewRightText;
	CCNode*										m_pBuyRightClassify;
	CCNode*										m_pBuyRightContainer;
	CCScrollView*								m_pBuyRightScrollView;
	GridAlignNode*								m_pBuyRightGridAlignNode;
	CCNode*										m_pBuyRightContainerLayer;
	bool										m_pBuyRightTouchMove;
	
	cocos2d::CCLabelTTF*						m_pSellRightText;
	bool										m_pSellRightTouchMove;
	cocos2d::CCSprite*							m_pSellRightItemBlank;
	CCNode*										m_pSellRightContainer;
	CCScrollView*								m_pSellRightScrollView;
	GridAlignNode*								m_pSellRightGridAlignNode;
	CCNode*										m_pSellRightContainerLayer;

	bool										m_SellLeftTouchMove;
	CCNode*										m_pSellLeftContainer;
	CCScrollView*								m_pSellLeftScrollView;
	GridAlignNode*								m_pSellLeftGridAlignNode;
	CCNode*										m_pSellLeftContainerLayer;

	CCNode*										m_pBuyRightFinalContainer;
	CCScrollView*								m_pBuyRightFinalScrollView;
	GridAlignNode*								m_pBuyRightFinalGridAlignNode;
	CCNode*										m_pBuyRightFinalContainerLayer;
};

#endif

