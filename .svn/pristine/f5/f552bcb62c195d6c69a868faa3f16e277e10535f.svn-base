#ifndef BATTLEMODEUILAYER_H_
#define BATTLEMODEUILAYER_H_
#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"

using namespace cocos2d;
using namespace cocos2d::extension;

const static std::string BATTLE_IMG_COMM[] = 
{
	"heping-convention",

	"hanghui-convention",

	"quanti-convention",

	"zudui-convention",

	"shane-convention",
};

const static std::string BATTLE_IMG_HIGH[] = 
{
	"heping-click",

	"hanghui-click",

	"quanti-click",

	"zudui-click",

	"shane-click",
};

class BattleModeUi : public UiInterface
{
public:
	BattleModeUi();
	~BattleModeUi();

	CCNode* openUi();
};
class BattleModeUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	enum eBattleMode
	{
		BM_Guild=1,				// 帮会模式;
		BM_All,				// 全体模式;
		BM_Peace,		// 和平模式;
		BTN_Guild,
		BTN_All,
		BTN_Peace = 6,
		BM_Team = 8,  //组队模式
		BTN_Team = 10,
		BTN_Justice = 11,
		BM_Justice = 12,
	};
	struct BM_BUTTON
	{
		CCControlButton* bt;
		CCLabelTTF * des;
	};
	typedef std::map<int, cocos2d::CCPoint> Bm_Pos_Map;
	typedef std::map<int,BM_BUTTON> Bm_Map;
	BattleModeUiLayer(){}
	~BattleModeUiLayer() {}
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(BattleModeUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

	//界面初始化加载时执行
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	//界面退出后执行
	virtual void onExit();
	virtual void onEnter();
	bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void peaceModePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void allModePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void guildModePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void teamModePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void JusticePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void send_NET_SIC_change_pk_value(int state);
	void make_map(int state, CCControlButton* bt, CCLabelTTF* ttf);
	void update_Pos();
private:
	CCSprite *_frame;
	Bm_Pos_Map mPosMap;
	Bm_Map mMap;
};

#endif //BOUNDING_H