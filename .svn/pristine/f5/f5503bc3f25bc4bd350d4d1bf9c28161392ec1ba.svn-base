#ifndef LOGINPROTO_H_INCLUDE
#define LOGINPROTO_H_INCLUDE
#include "Base.h"
#include "tagDWORDTime.h"
#include "AvatarAtt.h"
#include "RoleDefine.h"
#include "buff_define.h"
#include "role_att_protocol.h"
#define X_TICKET_NAME				612
#pragma pack(push, 1)

enum
{
	E_ProofResult_Account_No_Match				= 1,	//此帐号非法(帐户不存在或者密码不对,密保错误)
	E_ProofResult_Account_In_Use				= 2,	//此帐号当前已经在使用
	E_ProofResult_Account_Freezed				= 3,	//此帐号被停用
	E_ProofResult_Wrong_Build_Number			= 4,	//版本号不对
	E_ProofResult_Disabled						= 5,	//此帐号已经被封停
	E_ProofResult_Queue							= 6,	//开始排队	
	E_ProofResult_Mibao_Error					= 7,	//密保错误
	E_ProofResult_Wrong_Type					= 8,	//非法验证策略
	E_ProofResult_Proofing						= 9,	//正在验证或已经验证完成

	E_SelectWorld_Server_Full					= 11,	//该服务器当前拥挤
	E_SelectWorld_Server_Suspended				= 12,	//该服务器当前阻塞
	E_SelectWorld_Server_Maintenance			= 13,	//该服务器当前维护
	E_SelectWorld_Failed						= 14,	//出现异常，选择失败
	E_SelectWorld_Short_Time					= 15,	//间隔时间太短,请稍候重试
	E_SelectWorld_No_Select						= 16,	//你已经选择成功,不可再选
	E_SelectWorld_GameWorldName_Wrong			= 17,	//非法的游戏世界名

	E_ProofResult_Forbid_MemberCenter			= 18,	//您的会员中心账号已被封停，请联系客服
	E_ProofResult_Forbid_GMTool					= 19,	//您的游戏账号已被封停，请联系客服	
	E_ProofResult_Forbid_CellPhone				= 20,	//您的账号已被锁定，请联系客服
	E_ProofResult_Forbid_MiBao					= 21,	//您的账号已经挂失密保卡，请完成解绑后登录
	E_ProofResult_Ip_Full						= 22,	//同IP下账号登陆过多
};

enum										// 人物创建、删除、选择相关的错误代码
{
	E_JoinGame_AccountOnline			=	1,
	E_JoinGame_VerifyCodeError			=	2,

	E_CreateRole_RoleCreating			=	11,
	E_CreateRole_RoleEnumNotDone		=	12,
	E_CreateRole_RoleDeleting			=	13,
	E_CreateRole_RoleNumFull			=	14,
	E_CreateRole_NameExist				=	15,
	E_CreateRole_NameInvalid			=	16,
	E_CreateRole_SafeCodeInvalid		=	17,
	E_CreateRole_InWorld				=	18,
	E_CreateRole_RoleLoading			=	19,
	E_CreateRole_RoleEnumNotSuccess		=	20,

	E_DelRole_RoleNotExist				=	21,
	E_DelRole_RoleDeleting				=	22,
	E_DelRole_RoleEnumNotDone			=	23,
	E_DelRole_RoleCreating				=	24,
	E_DelRole_SafeCodeIncorrect			=	25,
	E_DelRole_InWorld					=	26,
	E_DelRole_RoleLoading				=	27,
	E_DelRole_LeaveGuild1st				=	28,	// 请先脱离帮派
	E_DelRole_InDelGuardTime			=	29,
	E_DelRole_RoleChangeNaming			=	30,

	E_EnumRole_RoleEnumed				=	31,
	E_EnumRole_RoleEnuming				=	32,
	E_EnumRole_InWorld					=	33,

	E_SelectRole_RoleEnumNotDone		=	41,
	E_SelectRole_RoleCreating			=	42,
	E_SelectRole_RoleDeleting			=	43,
	E_SelectRole_RoleNotExist			=	44,
	E_SelectRole_InWorld				=	45,
	E_SelectRole_RoleLoading			=	46,

	E_Account_Reward_Receive			=	47,
	E_Account_Reward_Receive_Limit		=	48,

	E_SelectRole_Not_Join_Game			=	49,
	E_SelectRole_VerificationError		=	50,	// 验证码错误
	E_SelectRole_RoleChangNaming		=	51,
	E_SelectRole_RoleInDelGuard			=	52,
	E_CreateRole_RoleChangNaming		=	60,
	E_CreateRole_RoleCancelDelGuardTime	=	61,

	E_DelRole_RoleCancelDelGuardTime	=	70,
	E_DelRole_RoleInLeavePractice		=	71,

	E_ChangeRoleName_InWorld				=	80,
	E_ChangeRoleName_RoleEnumNotDone		=	81,
	E_ChangeRoleName_RoleCreating			=	82,
	E_ChangeRoleName_RoleDeleting			=	83,
	E_ChangeRoleName_RoleLoading			=	84,
	E_ChangeRoleName_RoleChangNaming		=	85,
	E_ChangeRoleName_RoleNotExist			=	86,
	E_ChangeRoleName_NameExist				=	87,
	E_ChangeRoleName_InDelGuard				=	88,
	E_ChangeRoleName_Cant60Days				=	89,
	E_ChangeRoleName_OutOfYuanBao			=	90,
	E_ChangeRoleName_BagPasswordError		=	91,	
	E_ChangeRoleName_RoleCancelDelGuardTime	=	92,


	E_CancelRoleDelGuardTime_InWorld				=	110,
	E_CancelRoleDelGuardTime_RoleEnumNotDone		=	111,
	E_CancelRoleDelGuardTime_RoleCreating			=	112,
	E_CancelRoleDelGuardTime_RoleDeleting			=	113,
	E_CancelRoleDelGuardTime_RoleLoading			=	114,
	E_CancelRoleDelGuardTime_RoleChangNaming		=	115,
	E_CancelRoleDelGuardTime_RoleNotExist			=	116,
	E_CancelRoleDelGuardTime_NameExist				=	117,
	E_CancelRoleDelGuardTime_NotInDelGuard			=	118,	
	E_CancelRoleDelGuardTime_RoleCancelDelGuardTime =	119,

	E_SerialReward_not_init			=		130,		// 序列号礼包没有初始化完成
	E_SerialReward_SerialNotExists	=		131,		// 序列号礼包不存在
	E_SerialReward_BagNotSpace		=		132,		// 礼包没有足够的包裹空间
};

enum EThirdVerifyType{
	ETVT_ANDROID = 0,					//Android空白工程
	ETVT_37Wan = 1,						//37玩
	ETVT_Baidu= 1001,					//baidu
	ETVT_Gaea= 1002,					//盖亚
	ETVT_360 = 1003,					//360				
	ETVT_YYB_WX = 1004,					//应用宝
	ETVT_YYB_QQ = 1005,					//微信
	ETVT_HaoJie = 1006,					//好接
	ETVT_Quick_RXSBK= 1101,				//Quick SDK――热血沙巴克 - android
	EETVT_1SDK_RXSBK= 1102,				//易接 SDK――热血沙巴克 - android
	ETVT_1SDK_CYSC= 1103,				//易接 SDK――赤月沙城 - android
	ETVT_GJiaMin= 2000,					//G家
	ETVT_GJiaMax= 3000,					//G家
    EETVT_1SDK_IOS_MSBY= 6001,          //易接 SDK―― 魔神霸业 － ios
};

enum EPlatformType
{
	EPlatformType_GJia= 0,			//G家
	EPlatformType_37Wan = 1,		//37玩
	EPlatformType_YYB = 2,			//应用宝
	EPlatformType_360 = 3,			//360
	EPlatformType_Baidu= 4,			//baidu
};

//! SDK票据认证消息
struct NET_C2L_proof_sdk_ticketid : public s_net_cmd
{
	DECL_NETCMD(NET_C2L_proof_sdk_ticketid);
	char	szTicketid[X_TICKET_NAME];		// 票据
	INT		nType;							// 渠道类型
	EThirdVerifyType	eType;				// 验证方式
	unsigned int	dwCurVersionID;					// 当前版本ID
	unsigned int	dw_world_name_crc;				// 游戏世界名的crc
	char	szCode[MAX_MD5_ARRAY];			// 校验码
	char	szUserid[X_MAX_CHAR_LEN];		// 用户id
};

struct NET_C2L_proof_sdk_ticketid_result : public s_net_cmd
{
	DECL_NETCMD(NET_C2L_proof_sdk_ticketid_result);
	DWORD	dwErrorID;						// 是否有错误
	char	szUserid[X_MAX_CHAR_LEN];		// 用户ID
	char	szCode[X_MAX_CHAR_LEN];			// 用户ID
};

struct NET_C2L_proof : public s_net_cmd
{
	DECL_NETCMD(NET_C2L_proof)
	char	szUserName[X_SHORT_NAME];	// 用户名			test123
	unsigned int dwType;			// 验证方式				1
	unsigned int dwCurVersionID;		// 当前版本ID		1.0.0.0的crc
	unsigned int dw_world_name_crc;	// 游戏世界名的crc	诸神之怒测试服
	char	szPsd[MAX_MD5_ARRAY];	// 密码					111111
	char	szGUID[X_LONG_NAME];	// GUID值				
};

struct NET_L2C_proof_result : public s_net_cmd
{
	DECL_NETCMD(NET_L2C_proof_result)
	unsigned int dw_error_code;					// 错误码
	int	 bGuard;							// 防沉迷
	unsigned int	dwIndex;						// 等候序列号
	unsigned int	dwVerifyCode;					// 登陆服务器发送给客户端的验证码，连接GameServer时要用到
	unsigned int	dw_account_id;					// 帐号ID
	//unsigned int dw_ip;							// GameServer IP 地址
	char			sz_ip[X_MAX_CHAR_LEN];			// GameServer IP 地址
	unsigned int dwPort;							// GameServer 端口号
	unsigned char special_account;
	char	dw_ThirdID[X_MAX_CHAR_LEN];							//平台ID
	INT		n_ThirdType;						//平台类型
};

struct NET_L2C_queue : public s_net_cmd
{
	DECL_NETCMD(NET_L2C_queue);
	unsigned int	dwPosition;						//! 位置
	unsigned int	dw_time;						//! 剩余时间
};

struct NET_SIS_synchronize_time : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_synchronize_time)
	unsigned int dw_time;
};

//判断客户端是否加速
struct NET_SIC_speedup_timescale : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_speedup_timescale)
	float m_value;
};



struct NET_SIC_join_game : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_join_game)
	unsigned int	dw_account_id;		// 帐号ID
	char			dw_ThirdID[X_MAX_CHAR_LEN];							//平台ID
	INT				n_ThirdType;						//平台类型
	unsigned int	dwVerifyCode;		// 登陆服务器发送给客户端的验证码
	char		deviceId[X_MAX_CHAR_LEN];		//设备号
    int         appId;              //appid
    char        appVersion[X_MAX_CHAR_LEN]; //appVersion
    char        szChannelType[X_MAX_CHAR_LEN];          // 渠道 [2016-1-8 by willing]
    int         nOSType;                    // 运行操作系统类型 [2016-1-9 by willing]
};

struct NET_SIS_join_game : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_join_game)
	unsigned int		dw_error_code;
	unsigned char nGMPrivilege;		// GM权限
};

struct NET_SIC_enum_role : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_enum_role)
	DWORD	dw_world_name_crc;
};

struct NET_SIS_enum_role : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_enum_role);
	unsigned int	dw_error_code;
	unsigned int			dwSafeCodeCrc;
	tagDWORDTime	dwTimeReset;
	tagDWORDTime	dwTimeLastLogin;	//上次登录时间
	unsigned int			dwIPLast;			//上次登录IP
	unsigned int			dw_ip;				//本次登录IP
	int n_num;
	int b_need_verify;		//是否需要验证
	int dwYuanBao;
	unsigned char bySimpleInfo[1];
};

struct NET_SIC_create_role : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_create_role);
	wchar_t szRoleName[X_SHORT_NAME];
	EPreChapStatus	eStatus;
	tagAvatarAtt	AvatarAtt;
	EClassType		eClassType;
};

struct NET_SIS_create_role : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_create_role);
	unsigned int dw_error_code;
	unsigned char bySimRoleInfo[1];
};

//------------------------------------------------------------------------------
// 选择角色
//------------------------------------------------------------------------------
struct NET_SIC_select_role : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_select_role);
	unsigned int dw_role_id;
	unsigned int dw_verification_code_crc;	// 验证码crc
};

//-----------------------------------------------------------------------------
// 去新地图
//-----------------------------------------------------------------------------
struct NET_SIS_goto_new_map : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_goto_new_map);
	unsigned int dwMapID;
	short	lineId;//线路
	float nPos[3];
	float nDir[3];
};

//-----------------------------------------------------------------------------
// 返回人物初始属性
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_att : public s_net_cmd
{
	NET_SIS_get_role_init_state_att& operator=(NET_SIS_get_role_init_state_att& other)
	{
		memcpy(this, &other, sizeof(NET_SIS_get_role_init_state_att));
		memcpy(Buff, other.Buff, other.nBuffNum * sizeof(tagBuffMsgInfo));
		return *this;
	}
	DECL_NETCMD(NET_SIS_get_role_init_state_att);
	tagAvatarAtt	Avatar;							// 外观
	tagAvatarEquip	AvatarEquip;					// 装备外观
	tagDisplaySet	DisplaySet;						// 外观显示设置
	int				nAtt[ERA_End];					// 当前人物属性
	//int				nAttPointAdd[X_ERA_ATTA_NUM];	// 玩家投放到各个一级属性中的值
	int				nLevel;							// 等级
	INT64				nCurLevelExp;					// 当前升级经验
	//int				nCredit;						// 信用度
	//int				nIdentity;						// 身份
	int				nVIPPoint;						// 会员积分
	unsigned int			dwState;						// 状态标志位
	unsigned int			n64RoleState;					// 玩家独有状态标志位 -- 需广播给周围玩家
	unsigned int			dwRoleStateEx;					// 玩家独有状态标志位 -- 只须自己知道
	ERolePKState	ePKState;						// PK状态
	int				iPKValue;						// PK值
	//unsigned int			dwRebornMapID;					// 复活地图ID
	//Vector3			vRebornPoint;					// 复活点
	//int					nRebornPos[3];
	unsigned int			dwGuildID;						// 帮派id
	unsigned int			dwActTitleID[3];					// 当前激活称号ID
	int				nBuffNum;						// 状态数量
	//int			bHasLeftMsg;					// 有留言
	EClassType      eClassType;                     // 专精职业
	//EClassTypeEx    eClassTypeEx;                   // 英雄职业(未开放)
	//unsigned int			dwMasterID;						// 师傅ID；
	//short			n16PetPocketNum;				// 宠物栏数量
	//int				nTotalMasterMoral;				// 总师德值
	int				nKillNum;						// 杀人数
	//ECamp			e_role_camp;					// 角色阵营
	//ECamp			e_temp_role_camp;				// 角色临时阵营
	//short			n16_exbag_step;					// 包裹扩充阶段
	//short			n16_exware_step;				// 仓库扩充阶段
	unsigned char			byRoleHelp[ROLE_HELP_NUM];		// 角色帮助数据
	//int				n_achievement_point;			// 成就点数
	int				n_total_recharge;				// 充值累计
	//unsigned int			dw_destory_equip_count;			// 摧毁装备次数
	int			n32CurExploits;					// 荣誉点
	//int			bIsPurpureDec;
	int			nEquipRating;
	//int			nCoolDownReviveCD;			
	int				nVIPLevel;
	unsigned int	dwVIPExp;						//【ji：】VIP经验
	//short			n16PetXiulianSize;				// 宠物寄养栏数量
	int				n_sign_level;					// 签到等级
	unsigned int   dwSpouseID;						//配偶ID
	unsigned int	nMeiLi;							//魅力值
	unsigned int			nInstanceData;					//副本是否打过了
	unsigned int	dwRedZuiFlag;					//红唇标记
	wchar_t			sz_role_name[X_SHORT_NAME];		// 名字
	unsigned int	dwSilverBoxTime;				//白银宝箱最后免费开启时间
	unsigned int	dwGoldBoxTime;					//黄金宝箱最后免费开启时间
	INT				m_Fusion_Exp;
	INT32			nGongFaBenison;					//功法祝福值
	INT				nWorldLevel;					//世界等级
	//unsigned int    enemyId;						//击杀自己的玩家ID
	tagBuffMsgInfo	Buff[1];						// 状态列表
};

struct NET_SIS_select_role : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_select_role);
	unsigned int dw_error_code;
	unsigned int dw_role_id;
};

//-----------------------------------------------------------------------------
// 获取本地玩家初始结构
//-----------------------------------------------------------------------------
struct NET_SIC_get_role_init_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_role_init_state);
	ERoleInitType eType;					// 客户端需要得到数据类型
};

//-----------------------------------------------------------------------------
// 返回角色选择界面
//-----------------------------------------------------------------------------
struct NET_SIC_return_role_select : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_return_role_select);
};

struct NET_SIS_return_role_select : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_return_role_select)
	unsigned int		dw_error_code;		// 错误码
};

//-----------------------------------------------------------------------------
// 延迟
//-----------------------------------------------------------------------------
struct NET_SIC_get_delay : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_delay);
};

struct NET_SIS_get_delay : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_delay);
};

//! 角色认证消息
struct NET_C2L_proof_third : public s_net_cmd
{
	DECL_NETCMD(NET_C2L_proof_third);
	char	szGUID[SZGUID_CAP];			// GUID
	EThirdVerifyType	eType;				// 验证方式
	unsigned int	dwCurVersionID;					// 当前版本ID
	unsigned int dw_world_name_crc;				// 游戏世界名的crc
	char	szCode[MAX_MD5_ARRAY];			// 校验码
};

//获取服务器离线池数据
struct NET_SIC_get_leave_exp : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_leave_exp);
};

//-----------------------------------------------------------------------------
// 提取离线池经验
//-----------------------------------------------------------------------------
struct NET_SIC_pickup_leave_exp : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_pickup_leave_exp)
	short		n16Type;
	short		nLeaveTime;
	//DWORD	dw_safe_code;
};

struct NET_SIS_pickup_leave_exp : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_pickup_leave_exp)
	INT			nExp;
	INT			nDice1;
	INT         nDice2;
	FLOAT		fMulriple;
	tagDWORDTime dwStartTime;
	unsigned int	dwError;
	INT16		n16Type;
};


//-----------------------------------------------------------------------------
// 离线经验上线提示
//-----------------------------------------------------------------------------
struct NET_SIS_leave_exp_clueon : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_leave_exp_clueon)
	INT				nOfflineExp;			// 离线经验
	INT				nOfflineFlowerExp;		// 送花得到的经验
	DWORD			nLeaveTime;				// 离线时间
	INT				nOfflineDoubleExp;		//双修得到的经验
	INT				nByRedEnvelope;			//离线池抢红包经验
	INT				nAddOfflineSelf;		//离线池自增经验 
	INT				nOfflineSelf;			// 增加的经验
	INT				nOfflineMaxExp;			//离线池最大经验
	INT				nOfflineCoin;			//需要的元宝数
	bool			bOffLineIsOpenUI;		//是否弹框
	tagDWORDTime	startTime;

};
//-----------------------------------------------------------------------------
// 角色更名 gx add
//-----------------------------------------------------------------------------
struct NET_SIC_change_role_name : public s_net_cmd 
{   
	DECL_NETCMD(NET_SIC_change_role_name)
	unsigned int		dw_role_id; 
	wchar_t				sz_new_role_name[X_SHORT_NAME];  
	unsigned int		dw_safe_code;
}; 

struct NET_SIS_change_role_name : public s_net_cmd 
{   
	DECL_NETCMD(NET_SIS_change_role_name)
	unsigned int		dw_error_code;  
	unsigned int		dw_role_id; 
	unsigned int		dw_change_time;
	wchar_t				sz_new_role_name[X_SHORT_NAME];  
}; 

struct NET_SIC_UNAME_PWD : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_UNAME_PWD)
	unsigned int	dwAid;
	char szUserName[X_SHORT_NAME];
	char szPwd[X_SHORT_NAME];
};

struct NET_SIC_heartbeat : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_heartbeat)
	tagDWORDTime sendTime;
};

struct NET_SIS_heartbeat : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_heartbeat)
	tagDWORDTime sendTime;
};

struct NET_SIC_EnterForeground : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_EnterForeground)
	BYTE isEnter;
};

enum enumRepetLoginType
{
	ERLT_repetLogin,
	ERLT_synchronize,
};

struct NET_SIC_repet_login : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_repet_login)
};

//引导初始化
struct  NET_SIS_role_activity_state : public s_net_cmd
{
	DECL_NETCMD( NET_SIS_role_activity_state);
	UINT64 nActivity_State[2];				//人物等级最多为100级，定义为两个64的进行存储
};

//引导值更改
struct NET_SIC_role_activity_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_role_activity_state);
	UINT64 nActivity_State[2];               //人物等级最多为100级
};

//月卡使用情况
struct NET_SIS_role_month_card_state:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_month_card_state)
	int day;
	int state; //1为成功，2为已经使用
};

struct NET_C2S_MonthCardBegin : public s_net_cmd
{
	DECL_NETCMD(NET_C2S_MonthCardBegin)
};

struct NET_SIS_MonthCardBegin : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_MonthCardBegin)
	tagDWORDTime dw_month_card_time;
};



#pragma pack(pop)


#endif
