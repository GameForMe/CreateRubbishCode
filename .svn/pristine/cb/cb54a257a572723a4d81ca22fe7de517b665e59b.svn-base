#ifndef __STR_NUM_PAD__
#define __STR_NUM_PAD__

#include "cocos2d.h"
#include "cocos-ext.h"
using namespace cocos2d;
using namespace cocos2d::extension;
using namespace std;

#define MAX_KEYPAD_NUM 10

class StrNumPadFrame;
class StrNumPadDelegateInterface
{
public:
	StrNumPadDelegateInterface();
	virtual void onFinished(int num, int srcNum) = 0;
	virtual void onCancel(int num) = 0;
	virtual void insertNum(int num) = 0;
	virtual void deleteNum() = 0;
	virtual void onConfirm() = 0;
	virtual void onClose() = 0;
	bool isPwdStr() {return m_isPwd;}
	void setPwdState(bool isPwd){ m_isPwd = isPwd;};
protected:
	bool m_isPwd;
};

class StrNumPadPwdDelegate : public StrNumPadDelegateInterface
{
public:
	StrNumPadPwdDelegate();
	StrNumPadPwdDelegate(CCLabelProtocol* pLabelPro);

	virtual void setTargetLabel(CCLabelProtocol* pLabelPro,string* pSrcstr,string pDefault = "");
	virtual void onFinished(int num, int srcNum);
	virtual void onCancel(int num);
	virtual void insertNum(int num);
	virtual void deleteNum();
	virtual void onConfirm();
	virtual	void onClose();
private:
	string m_pDefaultStr;
	string* m_pStrContent;
	CCLabelProtocol* m_pLabelProtocol;
};

class StrNumPadMgr
{
public:
	static StrNumPadMgr *getInstance();

	StrNumPadMgr();
	~StrNumPadMgr();
	void open();
	void close();
	bool isOpen();
	StrNumPadFrame* getFrame();
	void refreshRandNumNodePos();
	void setPositionByContent(CCNode *node);
	void attachToDelegate(StrNumPadDelegateInterface *del);
};

class StrNumPadFrame
	: public CCSprite
	, public CCTouchDelegate
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:

	StrNumPadFrame();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(StrNumPadFrame, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	void onBtnNumPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnConfirmPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnDeletePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void refreshRandNumNodePos();
	void attachStrNumPadDelegate(StrNumPadDelegateInterface* pDelegate);
	void deleteStrNumPadDelegate();
private:
	StrNumPadDelegateInterface* m_pDelegate;

	int m_arrTag[MAX_KEYPAD_NUM];
	CCPoint m_numOldPos[MAX_KEYPAD_NUM];
	CCControlButton* m_pNumBtn[MAX_KEYPAD_NUM];
};

class StrNumPadLoader : public cocos2d::extension::CCSpriteLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(StrNumPadLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(StrNumPadFrame);
};



#endif

