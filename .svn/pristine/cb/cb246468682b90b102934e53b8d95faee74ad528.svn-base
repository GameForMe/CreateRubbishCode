#ifndef _MASTERPROTO_H
#define _MASTERPROTO_H
/*
	师徒系统消息以及相关相关数据定义
	gx add 2013.11.15
*/
#include "BaseDefine.h"
#include "CmdAdapter.h"
#include "RoleDefine.h"
#include <string>


#define INVALID_MASTER		0
#define MASTER_MIN_LEVEL	50//收徒最小等级
#define MASTER_CHUSHI_LEVEL 60
#define PRENTICE_MIN_LEVEL	10//拜师最低等级
#define PRENTICE_MAX_LEVEL  59//拜师最高等级
#define FUK_PRENTIC_CHECK_MAX 49 //最大拜师等级
#define MASTERPRENTICEFORBIDTIME (0) //48小时
#define MASTERPRENTICEBREAKCOST	(10)
#define MAX_PRENTICE	5//一个师傅同时拥有的徒弟人数上限
#define CALLINMASTERITEMTYPE 2400014 //召请符类型

#pragma pack(push,1)

//请求回应
enum 
{
	EMASTER_REFUSE = 0,//拒绝
	EMASTER_ACCEPT = 1,//接受
};

//师徒榜显示标志
enum
{
	EMASTER_HIDE  = 0, //隐藏
	EMASTER_SHOW	= 1, //显示
};

//类型
enum eMPMemberType
{
	EMPMT_PRENTICE = 0,
	EMPMT_MASTER   = 1,
	EMPMT_BROTHER = 2,
};

//师德声望等级
enum EMasterReputation
{
	EMREP_NULL	 = 0, //无	
	EMREP_MENTOR = 1, //良师益友
	EMREP_TALENT = 2, //德才兼备(出师徒弟数量达到1个)
	EMREP_ABROAD = 3, //桃李满门(出师徒弟数量达到3个)
	EMREP_LOFTY	 = 4, //一字之师(出师徒弟数量达到5个)
	EMREP_SAINT	 = 5, //先圣先师(出师徒弟数量达到8个)
	EMREP_END
};
//用于向客户端交流
struct tagMPMember
{
	unsigned int	dw_role_id;
	unsigned char	byLevel;
	unsigned char	bOnline;
	EClassType eClass;	  
	unsigned char	bySex;//gx add
	eMPMemberType eMemberType;
	DWORD   dwZhanli;		//战斗力
};

//师徒榜数据(服务器发给客户端)
struct tagMasterPalcardSim
{
	unsigned int dwMaster;
	unsigned int dwGraduates;
	bool bOnline;
	unsigned char byLevel;
	EMasterReputation eReputation;
	EClassType eClassType;
};

// 拜师帮简易
struct tagMasterRecruitSim
{
	int nLevel;
	int bOnline;
	unsigned int dwRoleID;
	EClassType eClassType;
};


//师德与出师徒弟数量映射
const static unsigned int g_ReputationOfGraduates[EMREP_END] = {0,0,1,3,5,8};
//师德与可收徒弟数量映射
const static unsigned int g_PrenticeMaxNumber[EMREP_END] = {0,1,2,3,4,5};

//出师人数->师德声望
#define GetReputionOfGraduates( Graduate, out_Rep )\
	do{\
	(out_Rep)=EMREP_MENTOR;\
	for(INT32 n=EMREP_END-1; n>=EMREP_MENTOR&&(Graduate); --n){\
	if(g_ReputationOfGraduates[n]<=(Graduate)){\
	(out_Rep)=(EMasterReputation)n; break;\
	}\
	}\
	}while(FALSE)

enum
{
	E_MakeMaster_You_ForbidOp = 1,		//操作失败，您刚解除师徒关系，在接下来的48小时中将不可以进行收徒和拜师。
	E_MakeMaster_You_HasMaster,		//操作失败，您已有师傅，同时只能拥有一位师傅。
	E_MakeMaster_Your_OutOfLevel, //操作失败，拜师的等级必须要在1~25级之间。
	E_MakeMaster_Master_ForbidOp,	//操作失败，目标刚解除师徒关系，在48小时中将不可以进行收徒。
	E_MakeMaster_Master_OutOfLevel, //操作失败，目标等级必须≥30级
	E_MakeMaster_Master_MaxPrentices, //操作失败，目标的弟子太多不能再收更多的徒弟了。
	E_MakeMaster_Master_Refuse,		//XXX暂时不愿意收您为徒。
	E_MakeMaster_Master_Suceessful, //XXX向XXX行过拜师之礼后正式归入其门下
	E_MakeMaster_Master_MinOfLevel, // 操作失败，师傅等级必须大于自己的等级
	E_MakeMaster_Master_Has_Graduates, //  已出师的角色，不能再拜师

	E_MakePrentice_You_ForbidOp,	//操作失败，您刚解除师徒关系，在接下来的48小时中将不可以进行收徒和拜师。
	E_MakePrentice_Your_OutOfLevel, //操作失败，收徒等级必须≥30级
	E_MakePrentice_Prentice_ForbidOp, ///操作失败，目标刚解除师徒关系，在48小时中将不可以进行拜师。
	E_MakePrentice_Prentice_HasMaster, //操作失败，目标已有师傅。
	E_MakePrentice_Prentice_OutOfLevel,//操作失败，目标的等级必须要在1~25级之间
	E_MakePrentice_Your_MaxPrentices, //操作失败，您弟子太多不能再收更多的徒弟了。
	E_MakePrentice_Prentice_Refuse,	//XXX暂时不愿意成为您的弟子。
	E_MakePrentice_Prentice_Successful, //XXX向XXX行过拜师之礼后正式归入其门下
	E_MakePrentice_Prentice_MaxOfLevel,  // 操作失败，徒弟等级必须小于自己的等级
	E_MakePrentice_Prentice_Has_Graduates, // 已出师的角色不可以被收为徒弟

	E_MasterPrenticeBreak_OutOfMoney,	//金钱不足，不能解除师徒关系
	E_MasterPrenticeBreak_Error_Npc,	//Npc没这功能

	E_ShowInPanel_Successful,		//登记成功
	E_ShowInPanel_Your_OutOfLevel,	//操作失败，只有≥30级的角色才可以登记收徒。
	E_HideInPanel_Successful,		//成功取消登记
	E_HideInPanel_You_NotRegister, //操作失败，只有登记收徒的角色才可以取消登记。

	E_CallInMaster_Master_Refuse,	//召请师傅时，师傅拒绝
	E_CallInMaster_Success,			//召请师傅时，师傅同意
	E_CallInMaster_No_Master,		//召请师傅时，没有师傅
	E_CallInMaster_Master_Offline,	//召请师傅时，师傅离线
	E_CallInMaster_No_Item,			//召请师傅时，没有召请符

	E_JoinRecruit_AlreadyIn,
	E_JoinRecruit_OutOfLevel,

	E_LeaveRecruit_NotIn,

	E_CallInMaster_In_Intance, //不能副本召请师傅
	E_CallInMaster_In_Prison, //师傅在监狱不能被召请
	E_CallInMaster_You_In_Prison,//在监狱不能被召请师傅
	E_CallInMaster_In_guild_war,//师父在帮会战
	E_CallInMaster_MapLimit,

	E_MasterTeach_Prentice_offline,//传功徒弟不在线
	E_MasterTeach_Prentice_full,//该徒弟今日已被传功

	E_MasterPrentice_OutSafeArea,//试图建立师徒关系的玩家不在安全区内
	E_MakeMaster_MasterIsPrentice,//试图拜师的对象还是别人的徒弟
	E_MakePrentice_NotMaster,//试图收徒的人还不是师傅

	E_MakeMaster_MasterBusy,//师傅正在处理玩家的拜师的请求
	E_MakePrentice_PrenticeBusy,//徒弟正在处理玩家的收徒的请求

	E_MakeMaster_ToConfirm,//邀请已发出，等待师傅确认
	E_MakePrentice_ToConfirm,//邀请已发出，等待徒弟确认
	E_AddMaster_Level_Lack,		//出师等级不足 需达到65以上
	E_AddMaster_You_NoMaster,		//出师操作失败，您没有师傅。
};




//拜师
struct NET_SIC_make_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_make_master)
	unsigned int dwMaster;
};


//转发请求给师傅
struct NET_SIS_make_master_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_make_master_extend)
	unsigned int dwPrentice;
};


//师傅回应
struct NET_SIC_make_master_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_make_master_extend)
	unsigned int dwPrentice;
	unsigned char byAck;	//EMASTER_REFUSE or EMASTER_ACCEPT
};
//师傅同意时，真正拜师成功
struct NET_SIS_make_master_result_to_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_make_master_result_to_master)
	unsigned int dwPrentice;
};


//拜师结果
struct NET_SIS_make_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_make_master)
	unsigned int dwMaster; //师傅 RoleID
	unsigned int dwError;
};

//发送师徒所有数据,不包括自己
struct NET_SIS_master_and_prentices : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_master_and_prentices)
	unsigned char byNumber;
	tagMPMember stMember[1];
};

//收徒
struct NET_SIC_make_prentice : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_make_prentice)
	unsigned int dwPrentice;
};

//转发给徒弟
struct NET_SIS_make_prentice_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_make_prentice_extend)
	unsigned int dwMaster;
};

// 徒弟同意时，真正收徒成功
struct NET_SIS_make_prentice_result_to_prentice : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_make_prentice_result_to_prentice)
	unsigned int dwMaster;
};

//徒弟回应
struct NET_SIC_make_prentice_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_make_prentice_extend)
	unsigned int dwMaster;
	unsigned char byAck; //EMASTER_REFUSE or EMASTER_ACCEPT
};


//新徒弟资料
struct NET_SIS_new_prentice : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_new_prentice)
	tagMPMember stMember;
};

//收徒结果
struct NET_SIS_make_prentice : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_make_prentice)
	unsigned int dwPrentice;
	unsigned int dwError;
};

//广播
struct NET_SIS_role_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_master)
	unsigned int dwMaster;
	unsigned int dwPrentice;
};

//师徒榜
//struct NET_SIC_get_master_placard : public s_net_cmd
//{
//	DECL_NETCMD(NET_SIC_get_master_placard)
//};
//
//struct NET_SIS_get_master_placard : public s_net_cmd
//{
//	DECL_NETCMD(NET_SIS_get_master_placard)
//	UINT16 u16Number;
//	tagMasterPalcardSim stMPlacardSim[1];
//};


//师德值和毕业数
struct NET_SIS_master_moral_and_gradates : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_master_moral_and_gradates)
	/*unsigned int	dwMasterMoral;
	unsigned int	dwGraduates;*/
	unsigned int dwMasterID;
};

//徒弟毕业了
struct NET_SIS_prentice_graduate : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_prentice_graduate)
	unsigned int dwPrentice;
};

//师徒决裂
struct NET_SIC_master_prentice_break : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_master_prentice_break)
	unsigned int dwNpcID;
	unsigned int dw_role_id;//徒弟主动解除关系：roleid=INVALID_VALUE；师傅主动解除关系：roleid=徒弟ID；
};

struct NET_SIS_master_prentice_break_error : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_master_prentice_break_error)
	unsigned int dwError;
	unsigned int dwNpcID;
};

struct NET_SIS_master_prentice_break : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_master_prentice_break)
	unsigned char byMasterOP;
	unsigned int dw_role_id; //转发给师门所有其他人 roleid 脱离师门
};

//设置是否在师徒榜显示自己
struct NET_SIC_show_in_master_placard : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_show_in_master_placard)
	unsigned char byFlag;// EMASTER_HIDE or EMASTER_SHOW
};

struct NET_SIS_show_in_master_placard : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_show_in_master_placard)
	unsigned int dwError;
};


//师傅删除角色
struct NET_SIS_master_delete_role : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_master_delete_role)
};

//徒弟删除角色
struct NET_SIS_prentice_delete_role : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_prentice_delete_role)
	unsigned int dwPrentice;
};

//召请师傅
struct NET_SIC_call_in_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_call_in_master)
};

//转发给师傅
struct NET_SIS_prentice_call_in : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_prentice_call_in)
	unsigned int dwPrentice;
};


//师傅回应
struct NET_SIC_prentice_call_in : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_prentice_call_in)
	unsigned int dwPrentice;
	unsigned char byAck;
};


//召请结果
struct NET_SIS_call_in_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_call_in_master)
	unsigned int dwError;
};

// 加入拜师榜
struct NET_SIC_join_master_recruit : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_join_master_recruit)
	unsigned int	dw_role_id;
};

struct NET_SIS_join_master_recruit : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_join_master_recruit)
	unsigned int dw_error;
};

// 离开拜师榜
struct NET_SIC_leave_master_recruit : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_leave_master_recruit)
	unsigned int	dw_role_id;
};

struct NET_SIS_leave_master_recruit : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_leave_master_recruit)
	unsigned int dw_error;
};

// 查询拜师榜信息
struct NET_SIC_query_page_master_recruit : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_query_page_master_recruit)
	int n_page;
};

struct NET_SIS_query_page_master_recruit : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_query_page_master_recruit)
	int	n_page; // 总页数
	int n_cur;	 // 当前页数
	int n_num; // p_data有效个数
	int b_register; // 我是否登记
	tagMasterRecruitSim p_data[1];
};

// 出师
struct NET_SIS_say_goodbye_to_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_say_goodbye_to_master)
};

struct NET_SIC_say_goodbye_to_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_say_goodbye_to_master)
	unsigned char byAck;	//1 = OK or 0=NO
};
//gx add 2013.12.06 师傅给徒弟传功
struct NET_SIC_Master_teach_Prentice:public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Master_teach_Prentice)
	unsigned int dwPrentice;//徒弟ID
};
struct NET_SIS_Master_teach_Prentice:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Master_teach_Prentice)
	unsigned int dwPrentice;//徒弟ID
	unsigned int dwAddExp;//传功一次徒弟得到的经验值
	unsigned int dw_error;
};
//师徒上下线之间的消息发送 gx add 2013.12.13
struct NET_SIS_Master_Login:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Master_Login)
};
struct NET_SIS_Master_Logout:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Master_Logout)
};
struct NET_SIS_Prentice_Login:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Prentice_Login)
	unsigned int dwPrentice;
};
struct NET_SIS_Prentice_Logout:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Prentice_Logout)
	unsigned int dwPrentice;
};
struct NET_SIS_Brother_Login:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Brother_Login)
	unsigned int dwBrother;
};
struct NET_SIS_Brother_Logout:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Brother_Logout)
	unsigned int dwBrother;
};

//出师协议
struct NET_SIC_add_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_add_master)
};
//出师协议回包
struct NET_SIS_add_master : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_add_master)
	DWORD dw_error_code;
};
//end
#pragma pack(pop)
#endif