#ifndef CHECKBUTTON_H
#define CHECKBUTTON_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class CheckButtonLoader;

class CheckButton : public CCSprite , public CCTouchDelegate
{
	enum eNodeTag
	{
		NT_Sign = 0,
	};

	friend class CheckButtonLoader;
public:
	typedef std::function<bool(CheckButton*)>	CheckPolicy;	

	CheckButton();
	~CheckButton();
	CREATE_FUNC(CheckButton);
	bool init();
	virtual void onEnter();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	
	void simSelected(bool sel,bool sendEvent =true);

	void setCheck(bool check);
	bool isCheckd() const { return _isCheck; }
	void SetTouchEnable(bool isenable);
	void setCheckSignSprite(const std::string &spriteFrame);
	CCSprite *getCheckSignSprite();
	void setTouchProprity(int proprity) { _touchPriority = proprity; }

	void setCheckPolicy(CheckPolicy cp){_checkPolicy = cp;}

	bool isEnable()const{return _isenable;}
public:
	c_signal<void, CheckButton*, bool> signalStateChanged;

protected:
	bool _isenable;
	bool _isCheck;
	int _touchPriority;
	CCPoint _touchPt;
	CheckPolicy _checkPolicy;
};

class CheckButtonLoader : public cocos2d::extension::CCSpriteLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(CheckButtonLoader, loader);
	virtual void onHandlePropTypeInteger(CCNode * pNode, CCNode * pParent, const char* pPropertyName, int pInteger, CCBReader * pCCBReader);
	virtual void onHandlePropTypeString(CCNode * pNode, CCNode * pParent, const char* pPropertyName, const char * pString, CCBReader * pCCBReader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(CheckButton);
};

class MultiSelectButtonGroup
{
public:
	typedef std::function<bool(void)>	CheckPolicy;	
	MultiSelectButtonGroup();
	~MultiSelectButtonGroup();

	void setCheckGuard(CheckPolicy one){_checkPolicy = one;}

	void addCheckButton(CheckButton * checkButton,bool isSelect);
	void removeCheckButton(CheckButton * checkbutton);
	void clear();
	//int getMax(){return _max;}
	//int getCurr(){return _curr;}
public:
	void onCheckStateChanged(CheckButton* btn,bool select);//{MutilGroupRefresh evt;evt.cur= xxx;evt.max = this->max;SEND_EVENT(&evt);}
public:
	std::vector<CheckButton*> _btns;
private:
	//bool isFullCheck()const{return _curr >= _max; }
	//void increaseCheckNum(){CC_ASSERT(_curr < _max);++_curr;}
	//void decreaseCheckNum(){if (--_curr <0)_curr =0;}

	CheckPolicy _checkPolicy;
private:
	//int _max;
	//int _curr;
};

class MutexCheckButtonGroup
{
public:
	MutexCheckButtonGroup();
	virtual ~MutexCheckButtonGroup();
	void addCheckButton(CheckButton *checkButton);
	void removeCheckButton(CheckButton *checkButton);
	void clear();
	bool isBtnInGroup(CheckButton *checkBtn);
	void selectNull();
	void setCurSelect(CheckButton *Select){if(Select != _curSelect)_curSelect =Select;}
	CheckButton * GetCurSelect(){return _curSelect;}
protected:
	void onCheckStateChanged(CheckButton *btn, bool check);

public:
	c_signal<void, CheckButton*, bool> signalBtnCheckChanged;
private:
	std::vector<CheckButton*> _btns;
	CheckButton *_curSelect;
};

#endif //CHECKBUTTON_H