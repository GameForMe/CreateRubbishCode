#ifndef SKILLLISTITEMUI_H
#define SKILLLISTITEMUI_H

#include "cocos2d.h"
#include "TouchSprite.h"
#include "Signals.h"
using namespace cocos2d;

struct SkillItemData
{
	unsigned int id;
	int replaceId;
	std::string iconName;
	std::string name;
	int level;
	int curSkill;
	int maxSkill;
	int LvItem_3to4;
	int LvItem_6to7;
	float cd;
	int mp;
	int nextLevel;
	bool activity;
	std::string desc;
	std::string nextDes;
	std::string dropTest;
	bool canUse;
	int lv;//学习技能需要的等级
	int isMononmer;// 是否单体攻击
	int	isNeedBook;// 是否需要技能书
	int isAtive;//1是主动技能 0是被动技能
	int orderingRule;
};

class SkillListItemUi : public CCLayer
{
	friend class SkillUi;
public:
	CREATE_FUNC(SkillListItemUi);
	SkillListItemUi();
	virtual ~SkillListItemUi();
	bool init();
	void setCheck(int index);
	void setCheck(int index, bool check);
	void setSkillName(int index, const char *name);
	void setSkillLevel(int index, int level);
	void setSkillIcon(int index, const char *frameName);
	void setSkillSkill(int index,SkillItemData data);
	void setEnable(int index, bool enable);
	void setAutoEffect(int index, bool state);
	void setAtive(int index, int state);//1是主动技能 0是被动技能
	void setLv(int index,int state,int level,int nextRoleLevel,bool enable);//设置学习/修炼/突破等级
	void setNeedBook(int index, int state);// 是否需要技能书
	void itemSelected(TouchSprite *item, bool v);
	void setData(int index, const SkillItemData& data);
	SkillItemData *getCheckData();
	bool touch(CCTouch *ptouch);
	void selItem(size_t index);
	bool getSkillIsNoLearn(int);
	short getSkillIdUnderPoint(CCTouch *ptouch);
// 	//如果技能自动释放 加入特效显示;
 	void runAnimation(int index);
 	void stopAnimation(int index);
	std::string getSkillIconName(int index);
	int getSkillId(int index);
	//new player guide
	CCRect getItem0Pos(int nIdx);
	int getCheck(){return _selectedIndex;}

	void setSkillPoint(int index,int nCur,int nMax);
private:
	CCProgressTimer *initHProgressBar(CCSprite * sprite);
SIGNALS:
	c_signal<void, SkillItemData&> signalItemSelected;
public:
	const static int ITEMS_NUM = 9; //最大技能个数 add by XSea 2014.6.17 修改此值要同时修改SkillManager const int MAX_SKILL_NUM = 9
protected:
	TouchSprite *_items[ITEMS_NUM];
	CCSprite *_iconNormal[ITEMS_NUM];
	CCSprite *_iconLight[ITEMS_NUM];
	CCSprite *_skillIcon[ITEMS_NUM];
	LabelFT *_skillName[ITEMS_NUM];
	LabelFT *_skillLevel[ITEMS_NUM];
	LabelFT *_skillCondition[ITEMS_NUM];//学习条件
	LabelFT *_skillAtive[ITEMS_NUM];//主动被动
	LabelFT *_skillLv[ITEMS_NUM];//学习需要等级
	LabelFT *_skillFull[ITEMS_NUM];//角色某某级 | 技能已满级
	LabelFT *_levelWord[ITEMS_NUM]; //“级”字
	LabelFT *_skillNeedBook[ITEMS_NUM];//是否需要技能书
	CCSprite *_progress[ITEMS_NUM];
	CCProgressTimer *_progressTimer[ITEMS_NUM];
	CCSprite *_itemMask[ITEMS_NUM];//学习&未学习
	SkillItemData _itemData[ITEMS_NUM];
	LabelFT*	 mpSkillPoint[ITEMS_NUM];
	int _selectedIndex;
	//自动的释放技能显示特效;
	CCSprite* _skillAutoEffect[ITEMS_NUM];
};

class SkillListItemUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SkillListItemUiLayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
};

class SkillListItemUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(SkillListItemUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(SkillListItemUiLayer);
};

#endif //SKILLLISTITEMUI_H