#ifndef BROADCAST_H
#define BROADCAST_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"
using namespace cocos2d;
using namespace cocos2d::extension;

class BroadCastUiLayer;
class CheckButton;

class BroadCastUi
{
public:
	static BroadCastUi *getInstace();
	BroadCastUi();
	~BroadCastUi();
	void open();
	void close();
	bool isOpen();
	BroadCastUiLayer *getUiLayer();
	void setMessage(const std::string &msg);
	void setPlaceHolder(const std::string &text);
	c_signal<void, bool, std::string> *getBtnSignal();
	void emitBtnSignal(bool isOk, const std::string &str);
	void setEnableEdit(bool enable);
	void setMaxInputNum(int maxInputNum);
public:
	c_signal<void, bool, std::string> *_signalBtnPressed;
private:
	std::set<std::string> _usedPlistFile;
};

class BroadCastUiLayer
	: public CCLayer
	, public CCTextFieldDelegate
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class BroadCastUi;

	enum eNodeTag
	{
		NT_Frame = 0,
		NT_Title = 0,
		NT_Input = 1
	};

public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(BroadCastUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	//当用户启动虚拟键盘是的回调
	virtual bool onTextFieldAttachWithIME(CCTextFieldTTF *pSender);
	//当用户进行输入是的回调函数
	virtual bool onTextFieldInsertText(CCTextFieldTTF *pSender, const char* text, int nLen);
	//当用户关闭虚拟键盘时的回调
	virtual bool onTextFieldDetachWithIME(CCTextFieldTTF * sender);
	//当用户删除文字时的回调
	virtual bool onTextFieldDeleteBackward(CCTextFieldTTF *pSender, const char* text, int nLen);

	void onBroadcast(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onClose(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	inline void setMaxInputNum(const int maxInputNum){_maxInputNum = maxInputNum;}
	void SetAnroindKeyBoardClose(){	if(_inputText != NULL){_inputText->detachWithIME();}}
protected:
	void setPlaceHolder(const std::string &text);
	void setText(const std::string &text);
	std::string get_last_text(std::string str);

protected:
	CCSprite *_frame;
	CCTextFieldTTF *_inputText;
	CheckButton* m_send_world;
	CheckButton* m_send_guild;

	bool _enableEdit;
	int _maxInputNum;
	int _curInputNum;
};

class BroadCastUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(BroadCastUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(BroadCastUiLayer);
};

#endif