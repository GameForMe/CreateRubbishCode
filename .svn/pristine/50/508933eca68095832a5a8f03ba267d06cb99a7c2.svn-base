#ifndef MONSTER_H
#define MONSTER_H

#include "Role.h"
#include "BSAnimate.h"
#include "AnimationCache.h"

#include "RoleInfoProto.h"

//4方向，2方向镜像来的
enum eMonsterAnims
{
	MA_ATTRACK = 0,
	MA_RUN = MA_ATTRACK + 2,
	MA_STAND = MA_RUN + 2,
	MA_NUM = MA_STAND + 2
};

//镜像8方向，5方向镜像来的
enum eMonsterAnims5
{
	MA_ATTRACK5 = 0,
	MA_RUN5 = MA_ATTRACK5 + 5,
	MA_STAND5 = MA_RUN5 + 5,
	MA_NUM5 = MA_STAND5 + 5
};

//真8方向
enum eMonsterAnims8
{
	MA_ATTRACK8 = 0,
	MA_RUN8 = MA_ATTRACK8 + 8,
	MA_STAND8 = MA_RUN8 + 8,
	MA_NUM8 = MA_STAND8 + 8
};

//技能特效8方向
enum eMonsterSkillAnims8
{
	MA_SKILL8 = 0,
};

class Monster;
class MonsterDeadAnimation : public CCObject
{
public:
	MonsterDeadAnimation();
	~MonsterDeadAnimation();
	static MonsterDeadAnimation *getInstance();
	void runAnimation(const CCPoint &pos,Monster* pMonster = NULL);
	void setType(int type);
protected:
	void animationCallback(CCNode *node);
private:
	int _type;
};

struct ChangeMonsterName;
class Monster: public Role
{
public:
	Monster();
	virtual ~Monster();

	virtual CCPoint getHeadPos() const;
	virtual void update(float dt);
	virtual void initFsm();
	virtual void runStandAni();
	virtual void runRunAni();
	virtual void runAttrackAni();
	virtual void runAttrackedAni();
	virtual void runSitAni();
	virtual void runDeadAni();
	virtual bool isDead() const;
	virtual void stopAni();
	virtual void setAlpha(bool alpha);
	virtual bool loadAnimate(unsigned int id = 0);
	virtual int getRoleDir();
	void setScale(int scale);
	void setRealDelete(bool del) { _realDelete = del; }
	bool getRealDelete() const { return _realDelete; }
	bool isBoss(){ return _monsterType == 1 ? true : false; }
	int getMonsterType() const { return _monsterType; } //怪物类型 0=普通，1=世界boss，2=精英 //add by XSea 2014.11.13
	void setCreatureNameColor(Eaiaction type);
	void setColorPoisoning(unsigned char r,unsigned char g,unsigned char b);
	void setColorHoc();
	void delColorHoc();
	void setMonsterChat(std::string desstr,int count,bool isRotation);
	void runHeightenEffect(const std::string &animFile,eRoleZorderNum layerTag,eNodeTag effectTag);
	void stopHeightenEffect(eNodeTag effectTag);
	void runTransmitEffect_UP(const std::string &animFile,float y);
	CCSprite * getBody() { return _body;}
	void runShenshouSkill(float dt);
	bool isShenshou();
	void updateStandChat(RoleManager::Npctalk,bool);
	void updateFightChat(RoleManager::Npctalk,bool);

	void luaUpdateMonsterChat(std::string chatText);

	virtual void destroyFsm();
	virtual void runCreatureSpreakPaoPao(int msgId,float ntime);

	virtual bool isAnimationFinished()const;

	void updateMonsterName(ChangeMonsterName* pEvent);

	virtual bool changeState(unsigned int mask, const Telegram& telegram) override;

	void on_owner_name_return( unsigned int role_id, const std::string& name);

	virtual void playHitSound();
private:
	bool isLoadAnimByAvator()const;
public:
	virtual void updateAnimConfig();
	void updateTalk(float fdt);
protected:
	CCScale9Sprite *_monsterChat;
	LabelFT* _mChatLabel;

	CCSprite *_body;
	CCNode *_entity;
	CCSprite *_shadow;

	CCSprite *_weapon;
	CCSprite*	_wing;

	CCSprite *_skill;
	//AnimationCache::AnimateList _anims;
	bool _realDelete;
	int _monsterType;	//怪物类型 0=普通，1=世界boss，2=精英
	bool _owner_name_got;

	//AnimationCache::AnimateList _skillanims;
	int _nDirType; //0为4方向（2方向镜像），1为假8方向（5方向镜像），2为真8方向
	float _mStandTime;
	float _mFightTime;
	float _mstandlast;//持续多久消失
	float _mFightlast;//持续多久消失
	float _mIsSpreakLast;
	bool _mIsStandLast;//是否开始待机持续消失
	bool _mIsFightLast;//是否开始战斗持续消失
	bool _mIsSpreakPaoPao;
	float _mContinueTime;//多久消失血量减少气泡
	RoleManager::Npctalk talkinfo;

	bool _mtalkLast;  //持续多久消失
	float _mtalkStandLast;

	//沙城城主的动画
	//AnimationCache::AnimateList _bodyAnims;
	//AnimationCache::AnimateList _weaponAnims;
};

#endif //MONSTER_H