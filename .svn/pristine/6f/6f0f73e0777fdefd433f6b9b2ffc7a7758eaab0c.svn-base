#ifndef STALLMGR_H
#define STALLMGR_H
/**
 *	@file		StallMgr.h
 *	@author		gx
 *	@date		2013/6/25
 *	@version	
 *	@brief		摆摊管理类
 */
#include "Stall_define.h"
#include "StallProto.h"
#include <string>

using namespace std;
class StallMgr
{
private:
	tagStallGoodsInfo m_LocalStallGoodsInfo[STALL_MAX_DISPLAY];//存放本地玩家的货架信息
	tagStallGoodsInfo m_RemoteStallGoodsInfo[STALL_MAX_DISPLAY];//存放远程玩家的货架信息
	unsigned int m_RemoteSellerID;//记录远程卖家ID
	bool b_InStatePreStall;//本地玩家是否在预备摆摊中
	bool b_InStateStall;//本地玩家是否在摆摊中
	string m_StallTitle;//本地玩家的货架标题
	unsigned int m_LocPlayerID;//额外再保存一份本地玩家的ID
	//临时记录成员
	tagStallGoodsInfo m_TempGoodsInfo;//临时记录的待上架商品，服务器返回消息成功后录入货架
	unsigned char m_TempUnSetGoodsIndex;//临时记录待下架的商品，
	string m_TempStallTitle;//临时记录待设置的货架标题
	//log记录
	vector<tagStallGoodsLog> m_SoldGoodsInfo;//记录本次摆摊中卖出的商品信息
	INT64 m_TotalIncome;
public:
	StallMgr();
	~StallMgr();
	static StallMgr* getInstance();
	void Init();
	void Destroy();
	void Reset(bool bSelfRefresh = false);
	/*摆摊者相关函数声明*/
	void PrepareBaitan();//响应背包UI上的摆摊按钮
	unsigned int OnServerStall_Start(s_net_cmd *cmd);
	void StallSetGoods(INT64 n64_serial,INT64 nPrice,unsigned char Index,unsigned int typeID,short num);//本地玩家商品上架
	unsigned int OnServerStall_SetGoods(s_net_cmd *cmd);
	void StallUnSetGoods(unsigned char Index);//本地玩家商品下架
	unsigned int OnServerStall_UnSetGoods(s_net_cmd *cmd);
	void StallSetTitle(string inputStr);//设置摊位标题
	unsigned int OnServerStall_SetTitle(s_net_cmd *cmd);
	void StallSetFinish();//商品上架完成，确认进行摆摊，响应另一个摆摊按钮
	unsigned int OnServerStall_SetFinish(s_net_cmd *cmd);
	void StallSetClose();//收摊
	unsigned int OnServerStall_Close(s_net_cmd *cmd);
	/*购买者相关函数声明*/
	void GetAllGoodsFromSeller(unsigned int roleID);//从卖家获得货架商品信息
	unsigned int OnServerGetAllGoods(s_net_cmd *cmd);
	void BuyProduct(unsigned char index,short num);//购买商品
	unsigned int OnSeverBuyProduct(s_net_cmd *cmd);//发给购买者
	unsigned int OnServerBuyMsg(s_net_cmd *cmd);//摆摊者，接收交易信息
	unsigned int OnServerBuyRefresh(s_net_cmd *cmd);//更新摆摊者的货架信息，也更新购买者购买界面的商品信息
	/*类辅助函数*/
	inline bool IsPlayerInStallState() {return b_InStateStall;}//判断玩家是否处于开始摆摊状态下
	tagStallGoodsInfo* GetStallGoodsInfo(unsigned int uRoleID);//根据角色ID获取本地玩家或是待交易买家的货架信息
	vector<tagStallGoodsLog>* GetStallGoodsLog() {return &m_SoldGoodsInfo;}//获取本地玩家卖出的log记录信息
	INT64 GetTotalIncome()	{return m_TotalIncome;}//获取玩家实时收益元宝数
	//lzz 获取摊位招牌信息
	void update(float dt);
	void getStallName(unsigned int roleId);
	unsigned int onGetStallName(s_net_cmd *cmd);
private:
	std::list<unsigned int> _needGetStallName;
};

#endif