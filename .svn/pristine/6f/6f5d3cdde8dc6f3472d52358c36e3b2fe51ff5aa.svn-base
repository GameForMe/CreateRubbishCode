#include "SBKSDSuccessUI.h"
#include "UiLoader.h"
#include "CommonClient.h"
#include "CCLabelChange.h"
#include "ItemNode.h"
#include "GameEventDefine.h"
#include "SBKSDManager.h"
#include "UiManager.h"
#include "AnimationCache.h"
#include "BSAnimate.h"
#include "UIUtil.h"

SBKSDSuccessUI::SBKSDSuccessUI()
{

};

SBKSDSuccessUI::~SBKSDSuccessUI()
{

}

CCNode* SBKSDSuccessUI::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["SBKSDSuccessUILayer"] = UiLayerLoader<SBKSDSuccessUILayer>::loader();
	nodeLoaders["ItemNode"] = UiNodeLoader<ItemNode>::loader();
	CCNode* uiNode = readUiFromCCBI("sbkfubentongguan",nodeLoaders,_loadSpriteSheet);
	return uiNode;
}

/////////////////////////////////////////////////////////

SBKSDSuccessUILayer::SBKSDSuccessUILayer()
	: m_exp(NULL)
	, m_coin(NULL)
	, m_expTeam(NULL)
	, m_expLabel(NULL)
	, m_coinLabel(NULL)
	, m_expTeamLabel(NULL)
	, m_item1Name(NULL)
	, m_item2Name(NULL)
	, m_item3Name(NULL)
	, m_item1Label(NULL)
	, m_item2Label(NULL)
	, m_item3Label(NULL)
	, m_get(NULL)
	, m_item1(NULL)
	, m_item2(NULL)
	, m_item3(NULL)
	, m_sureButton(NULL)
	, m_getLabel(NULL)
	, m_successSprite(NULL)
{

};

SBKSDSuccessUILayer::~SBKSDSuccessUILayer()
{

}

SEL_MenuHandler SBKSDSuccessUILayer::onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

SEL_CCControlHandler SBKSDSuccessUILayer::onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName)
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onSureBtnPressed", SBKSDSuccessUILayer::onSureBtnPressed);
	return NULL;
}

bool SBKSDSuccessUILayer::onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode)
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_exp);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_coin);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_expTeam);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(ItemNode*, m_item1);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(ItemNode*, m_item2);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(ItemNode*, m_item3);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_get);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_item1Name);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_item2Name);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_item3Name);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCControlButton*, m_sureButton);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_successSprite);
	return false;
}

void SBKSDSuccessUILayer::onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader)
{
	CC_ASSERT(m_get);
	m_getLabel = Helper::replaceLabelTTFWithLabelFTAndRemove(m_get);
	CC_ASSERT(m_item1Name);
	m_item1Label = Helper::replaceLabelTTFWithLabelFTAndRemove(m_item1Name);
	m_item1Label->setVisible(false);
	CC_ASSERT(m_item2Name);
	m_item2Label = Helper::replaceLabelTTFWithLabelFTAndRemove(m_item2Name);
	m_item2Label->setVisible(false);
	CC_ASSERT(m_item3Name);
	m_item3Label = Helper::replaceLabelTTFWithLabelFTAndRemove(m_item3Name);
	m_item3Label->setVisible(false);

	m_item1->setClickable(false);
	m_item1->setVisible(false);
	m_item2->setClickable(false);
	m_item2->setVisible(false);
	m_item3->setClickable(false);
	m_item3->setVisible(false);

	m_sureButton->setVisible(false);
}

void SBKSDSuccessUILayer::onSureBtnPressed(CCObject* pSender, CCControlEvent pCCControlEvent)
{
	CLOSE_UI(WCT_ShenDian_Success_UI);
}

void SBKSDSuccessUILayer::onEnter()
{
	NormalLayer::onEnter();
	REGISTER_EVENT(shendian_success,SBKSDSuccessUILayer,setData);
}

void SBKSDSuccessUILayer::onExit()
{
	NormalLayer::onExit();
	UNREGISTER_EVENT(shendian_success,SBKSDSuccessUILayer,setData);
}

void SBKSDSuccessUILayer::setData(shendian_success* trans)
{
	SBKSDManager* sbkSDManager = SBKSDManager::get_singleton_ptr();

	const SBKSDManager::check_data& data = sbkSDManager->getData();

	auto itor = data.find(trans->check_point);
	if (itor == data.end())
	{
		CC_ASSERT(0);
		return ;
	}
	CC_ASSERT(m_exp);
	m_expLabel = CCLabelChange::create(1.0,0,itor->second.reward_exp,false);
	m_exp->runAction(m_expLabel);
	CC_ASSERT(m_coin);
	m_coinLabel = CCLabelChange::create(1.0,0,itor->second.reward_jinbi,false);
	m_coin->runAction(m_coinLabel);
	CC_ASSERT(m_expTeam);
	m_expTeamLabel = CCLabelChange::create(1.0,0,trans->exp_team,false);
	m_expTeam->runAction(m_expTeamLabel);

	AnimationCache::AnimateList anims;
	AnimationCache::createDefList(1, anims);
	AnimationCache::getInstance()->getSinEffect(0,"E1_112", anims);	
	BSAnimate* animste = anims[0];
	CC_ASSERT(m_successSprite);
	m_successSprite->runAction(CCRepeatForever::create(animste));

	this->scheduleOnce(SEL_SCHEDULE(&SBKSDSuccessUILayer::showSureButton),1.5f);

	m_getLabel->setVisible(!trans->is_first);
	m_item1->setVisible(trans->is_first);

	if (trans->is_first)
	{
		m_item1->setScale(3);
		m_item1->setDataId(itor->second.item_first_pass_id[0]);
		m_item1->setNum(itor->second.item_first_pass_num[0]);
		m_item1->runAction(CCSequence::create(/*CCDelayTime::create(0.5),*/CCScaleTo::create(0.3f,1.0f),CCCallFunc::create(this,callfunc_selector(SBKSDSuccessUILayer::showItem2)),NULL,NULL));

		m_item2->setScale(3);
		m_item2->setDataId(itor->second.item_first_pass_id[1]);
		m_item2->setNum(itor->second.item_first_pass_num[1]);
		m_item2->setVisible(false);
		m_item2->runAction(CCSequence::create(CCDelayTime::create(0.3f),CCScaleTo::create(0.3f,1.0f),CCCallFunc::create(this,callfunc_selector(SBKSDSuccessUILayer::showItem3)),NULL,NULL));

		m_item3->setScale(3);
		m_item3->setDataId(itor->second.item_first_pass_id[2]);
		m_item3->setNum(itor->second.item_first_pass_num[2]);
		m_item3->setVisible(false);
		m_item3->runAction(CCSequence::create(CCDelayTime::create(0.6f),CCScaleTo::create(0.3f,1.0f),NULL,NULL));
	}
}

void SBKSDSuccessUILayer::showSureButton(float dt)
{
	m_sureButton->setVisible(true);
}

void SBKSDSuccessUILayer::showItem2()
{
	m_item2->setVisible(true);
}

void SBKSDSuccessUILayer::showItem3()
{
	m_item3->setVisible(true);
}