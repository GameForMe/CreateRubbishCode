#pragma once

#ifdef _WIN32
#ifndef WIN32_LEAN_AND_MEAN
#	define WIN32_LEAN_AND_MEAN
#endif
#if !defined(NOMINMAX) && defined(_MSC_VER)
#	define NOMINMAX // required to stop windows.h messing up std::min
#endif
#include "windows.h"
#else
#include <sys/time.h>
#endif

#include <algorithm>

namespace profile_util
{

class cc_timer
{
public:
	cc_timer();
	~cc_timer();

	void reset();

	unsigned int get_milliseconds();
	unsigned int get_microseconds();

private:
#ifdef _WIN32
	DWORD mStartTick;
	LONGLONG mLastTime;
	LARGE_INTEGER mStartTime;
	LARGE_INTEGER mFrequency;
	DWORD_PTR mTimerMask;
#else
	struct timeval start;
#endif
};

}; //namespace cc_engine