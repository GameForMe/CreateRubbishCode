#include "SecondVerifyUI.h"
#include "SecondVerifyMgr.h"
#include "UiLoader.h"
#include "UiTools.h"
#include "f_string_util.h"
#include "CfgReader.h"
#include "World.h"
#include "UiManager.h"
#include "ToolTip.h"
#include "CommonClient.h"
#include "GameEventDefine.h"
#include "f_string_table.h"
#include "LabelEx.h"


SecondVerifyUi::SecondVerifyUi()
{
    
}
SecondVerifyUi::~SecondVerifyUi()
{
    
}

CCNode* SecondVerifyUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["SecondVerifyUiLayer"] = UiLayerLoader<SecondVerifyUiLayer>::loader();
	nodeLoaders["LabelEx"] = LabelExLoader::loader();
	CCNode *uiNode = readUiFromCCBI("anquansuo", nodeLoaders, _loadSpriteSheet);
	SecondVerifyUiLayer* layer = dynamic_cast<SecondVerifyUiLayer*>(uiNode);
	layer->refershUiByVerifyState();
	return uiNode;
}

void SecondVerifyUi::refershSecondVerifyUi()
{
	CCScene *scene = World::getInstance()->getScene();
	SecondVerifyUiLayer *t_node = dynamic_cast<SecondVerifyUiLayer*>(scene->getChildByTag(WCT_SecondVerifyUi));
	if (t_node)
	{
		t_node->refershUiByVerifyState();
	}
}

SecondVerifyUiLayer::SecondVerifyUiLayer()
{
	m_pNodeMain = NULL;
	m_pNodeSetVerify = NULL;
	m_pNodeForceUnLock = NULL;
	m_pFtUnsetSafeLock = NULL;
	m_pFtsetedSafeLock = NULL;

	m_pFtForceRequsetTime = NULL;
	m_pFtForceSuccessTime = NULL;

	m_pBtnSetVerity = NULL;
	m_pBtnForceUnlock = NULL;
	m_pBtnVerity = NULL;
	m_pBtnResetPwd = NULL;
	m_pExSetVerifyDes = NULL;
	m_pExFroceUnLockDes = NULL;
}

SecondVerifyUiLayer::~SecondVerifyUiLayer()
{

}

bool SecondVerifyUiLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
{
	if (isTouchOnNodeContent(m_pNodeMain,pTouch))
	{
		return true;
	}
	return false;
}

SEL_MenuHandler SecondVerifyUiLayer::onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

SEL_CCControlHandler SecondVerifyUiLayer::onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName)
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", SecondVerifyUiLayer::onCloseBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onSetSecondVerityBtnPressed", SecondVerifyUiLayer::onSetSecondVerityBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onForceUnlockBtnPressed", SecondVerifyUiLayer::onForceUnlockBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onVerityBtnPressed", SecondVerifyUiLayer::onVerityBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onResetPwdBtnPressed", SecondVerifyUiLayer::onResetPwdBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCancelForceUnlock", SecondVerifyUiLayer::onCancelForceUnlock);
	return NULL;
}

void SecondVerifyUiLayer::onCloseBtnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	CLOSE_UI(WCT_SecondVerifyUi);
}

bool SecondVerifyUiLayer::onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode)
{

	return false;
}

void SecondVerifyUiLayer::onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader)
{
	m_pNodeMain = this->getChildByTag(0);

	m_pNodeSetVerify = m_pNodeMain->getChildByTag(1);
	m_pNodeForceUnLock = m_pNodeMain->getChildByTag(2);

	Helper::getLabelFTByParentAndTag(m_pNodeSetVerify, 1);
	Helper::getLabelFTByParentAndTag(m_pNodeSetVerify, 3);

	m_pFtUnsetSafeLock = Helper::getLabelFTByParentAndTag(m_pNodeSetVerify, 2);
	m_pFtsetedSafeLock = Helper::getLabelFTByParentAndTag(m_pNodeSetVerify, 4);
	m_pBtnSetVerity		= dynamic_cast<CCControlButton*>(m_pNodeSetVerify->getChildByTag(5));
	m_pBtnForceUnlock	= dynamic_cast<CCControlButton*>(m_pNodeSetVerify->getChildByTag(6));
	m_pBtnVerity		= dynamic_cast<CCControlButton*>(m_pNodeSetVerify->getChildByTag(7));
	m_pBtnResetPwd		= dynamic_cast<CCControlButton*>(m_pNodeSetVerify->getChildByTag(8));
	m_pExSetVerifyDes	= dynamic_cast<LabelEx*>(m_pNodeSetVerify->getChildByTag(9));
	if (m_pExSetVerifyDes)
		m_pExSetVerifyDes->set_text(STRING_TABLE["second_verify_ui_set_verify_des"]);

	Helper::getLabelFTByParentAndTag(m_pNodeForceUnLock, 1);
	Helper::getLabelFTByParentAndTag(m_pNodeForceUnLock, 2);
	Helper::getLabelFTByParentAndTag(m_pNodeForceUnLock, 3);
	m_pFtForceRequsetTime = Helper::getLabelFTByParentAndTag(m_pNodeForceUnLock, 4);
	m_pFtForceSuccessTime = Helper::getLabelFTByParentAndTag(m_pNodeForceUnLock, 5);
	m_pExFroceUnLockDes	  = dynamic_cast<LabelEx*>(m_pNodeForceUnLock->getChildByTag(9));
	if (m_pExFroceUnLockDes)
		m_pExFroceUnLockDes->set_text(STRING_TABLE["second_verify_ui_force_unlock_des"]);
	
}

void SecondVerifyUiLayer::onEnter()
{
	NormalLayer::onEnter();

}
void SecondVerifyUiLayer::onExit()
{

	NormalLayer::onExit();
}

void SecondVerifyUiLayer::refershUiByVerifyState()
{
	//获得是否已经设置了安全锁
	SecondVerifyState pState = SecondVerifyMgr::getInstance()->getSecondVerifyState();
	bool isLock = ( pState == SV_Verify_ForceUnLock || pState == SV_Verify_ForceAndVerifyed || pState == SV_Verify_ForceAndSysLocked);//是否冻结
	m_pNodeSetVerify->setVisible(!isLock);
	m_pNodeForceUnLock->setVisible(isLock);

	if (!isLock)
	{
		SecondVerifyState t_sysState = SecondVerifyMgr::getInstance()->getSecondVerifyState();
		bool isNotSetVerify = t_sysState == SV_Verify_UnSet || t_sysState == SV_Verify_ServerProtectedTime;//是否设置

		m_pFtUnsetSafeLock->setVisible(t_sysState != SV_Verify_Success);
		m_pFtsetedSafeLock->setVisible(t_sysState == SV_Verify_Success);
		string t_str = "";
		if (t_sysState != SV_Verify_Success)
		{
			if (isNotSetVerify)
				t_str = "second_verify_unset";
			else if (SV_Verify_Seted == t_sysState)
				t_str = "second_verify_unverified";
			else if (SV_Verify_SysLocked == t_sysState)
				t_str = "second_verify_sys_locked";
			else if (SV_Verify_SysLocked == t_sysState)
				t_str = "second_verify_error_server_protected_time";
			m_pFtUnsetSafeLock->setString(STRING_TABLE[t_str.c_str()]);
		}
		else
		{
			m_pFtsetedSafeLock->setString(STRING_TABLE["second_verify_verifyed_success"]);
		}
		
		m_pBtnSetVerity->setVisible(isNotSetVerify);	
		m_pBtnForceUnlock->setVisible(!isNotSetVerify);
		m_pBtnVerity->setVisible(!isNotSetVerify);
		m_pBtnResetPwd->setVisible(!isNotSetVerify);		
	}
	else
	{
		tagDWORDTime curr = SecondVerifyMgr::getInstance()->getRequestForceUnlockTime();
		string t_str = "";
		DwordTime2DataTimeChina(t_str,curr);
		m_pFtForceRequsetTime->setString(t_str.c_str());
		curr = SecondVerifyMgr::getInstance()->getSuccessForceUnlockTime();
		DwordTime2DataTimeChina(t_str,curr);
		m_pFtForceSuccessTime->setString(t_str.c_str());
	}

}

void SecondVerifyUiLayer::onSetSecondVerityBtnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//ToDo 检测是否已经设置了安全锁 没有 则打开设置界面
	if (SecondVerifyMgr::getInstance()->getSecondVerifyState() == SV_Verify_UnSet)
	{
		SecondVerifyMgr::getInstance()->openVerifyTipUIByType(SV_Tip_SetPwd);
	}
	else if (SecondVerifyMgr::getInstance()->getSecondVerifyState() == SV_Verify_ServerProtectedTime)
	{
		ToolTip::getInstance()->push(STRING_TABLE["second_verify_error_server_protected_time"]);
	}
}

void SecondVerifyUiLayer::onForceUnlockBtnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	SecondVerifyState t_type = SecondVerifyMgr::getInstance()->getSecondVerifyState();
	//ToDo 强制解锁点击
	if (t_type == SV_Verify_SysLocked)
	{
		SecondVerifyMgr::getInstance()->openVerifyTipUIByType(SV_Tip_LockedSys);
	}
	else if (t_type != SV_Verify_UnSet)
	{
		SecondVerifyMgr::getInstance()->openVerifyTipUIByType(SV_Tip_ForceUnlock);
	}
}
 
void SecondVerifyUiLayer::onVerityBtnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	SecondVerifyState t_type = SecondVerifyMgr::getInstance()->getSecondVerifyState();
	switch(t_type)
	{
	case SV_Verify_Seted:
		{
			SecondVerifyMgr::getInstance()->openVerifyTipUIByType(SV_Tip_VerifyPwd);
			break;
		}
	case SV_Verify_SysLocked:
		{
			SecondVerifyMgr::getInstance()->openVerifyTipUIByType(SV_Tip_LockedSys);
			break;
		}
	case SV_Verify_Success:
		{
			ToolTip::getInstance()->push(STRING_TABLE["second_verify_success"]);
			break;
		}
	}

}

void SecondVerifyUiLayer::onResetPwdBtnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	SecondVerifyState t_type = SecondVerifyMgr::getInstance()->getSecondVerifyState();
	if (t_type == SV_Verify_Success || t_type == SV_Verify_Seted)
	{
		SecondVerifyMgr::getInstance()->openVerifyTipUIByType(SV_Tip_ResetPwd);
	}
	else if (t_type == SV_Verify_SysLocked)
	{
		SecondVerifyMgr::getInstance()->openVerifyTipUIByType(SV_Tip_LockedSys);
	}
}

void SecondVerifyUiLayer::onCancelForceUnlock( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	SecondVerifyState t_type = SecondVerifyMgr::getInstance()->getSecondVerifyState();
	SecondVerifyMgr::getInstance()->openVerifyTipUIByType(SV_Tip_CancelForceUnlock);
}
