//------------------------------------------------------------------------
//
//  Name:   BossPKUi_new.h
//  Date:	2016.1
//  Desc:   新版boss界面
//  Author: LH
//
//------------------------------------------------------------------------

#ifndef BOSSPKUI_NEW_H
#define BOSSPKUI_NEW_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiTools.h"
#include "UiInterface.h"
#include "RoleInfoProto.h"
#include "BossCardUi.h"
#include "FrameSprite.h"
#include "ItemNode.h"
using namespace cocos2d;
using namespace cocos2d::extension;


struct SELECTPAGE;
class BossPKUiLayer_new;

class BossDropItem_new : public CCNode	//BOSS掉落物品类
{
public:
	BossDropItem_new(int itemID);
	~BossDropItem_new();
	bool isTouched(CCTouch* touch);							//是否点击到
	void setPosition(CCPoint ccpoint);						//对ItemNode进行坐标操作
	int getDropItemID() const { return _nItemID; }			//获取物品ID
	CCPoint getDropItemPos();								//获取ItemNode中心点世界坐标
	void addToParentBg(CCNode* node);						//把物品添加到Parent
	
private:
	ItemNode* _itemNode;									//物品ItemNode
	int _nItemID;											//物品ID

};


class BossDieUiItemFrame_new;

class BossDieUiItem_new : public CCNode
{
	friend class BossDieUiItemFrame_new;
public:
	enum eItemChildTag
	{
		BCT_Portrait = 1,							//BOSS图像1
		BCT_BossLevel =2,							//BOSS等级LABEL
		BCT_BossName = 3,							//BOSS名字
		BCT_BossTime =5,							//BOSS刷新时间LABEL
		BCT_TransferBtn = 6,						//传送按钮
		BCT_Select =7,								//选择框
	};

public:
	BossDieUiItem_new( int bossID, int flushTime );
	~BossDieUiItem_new();
	BossDieUiItemFrame_new * getUiFrame() { return _uiFrame; }

	bool					 updateFlushTime( float dt );  // 如果需要重新排序scrollview，返回true

	void					 setBossID(unsigned int m_nBossID);
	unsigned int			 getBossID()    { return m_nBossID; }

	int						 getBossLevel()		{ return m_nBossLevel; }
	int						 getFlushTime()		{ return m_nFlushTime; }
	GameActionNode *		 getPlistNode()		{ return _Plist;		}
protected:

	BossDieUiItemFrame_new *	_uiFrame;
	GameActionNode *			_Plist;
	unsigned int m_nBossID;
	int m_nFlushTime;
	int m_nBossLevel;
	int m_nHour;
	int m_nMin;
	int m_nSec;
	LabelFT* _levelLabel;				//BOSS等级
	LabelFT* _flushTimeLabel;			//刷新时间
	CCSprite* _bossBGSP;				//BOSS图像

};

class BossDieUiItemFrame_new 
	: public CCSprite
	, public cocos2d::extension::CCBSelectorResolver
	, public CCTargetedTouchDelegate
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class BossDieUiItem_new;
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(BossDieUiItemFrame_new, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	virtual void onEnter();
	virtual void onExit();

	void onBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

protected:
	BossDieUiItem_new *_item;
};

class BossDieUiItemLoader_new : public CCSpriteLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(BossDieUiItemLoader_new, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(BossDieUiItemFrame_new);
};

class BossPKUi_new : public UiInterface
{
public:
	BossPKUi_new();
	~BossPKUi_new();

	virtual CCNode * openUi();	//打开Boss界面
	BossPKUiLayer_new * getUiLayer()	{  return _pLayer; }

private:
	BossPKUiLayer_new * _pLayer;
};

class BossPKUiLayer_new			//BOSS界面层
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	enum bossPkTag
	{
		//底层:
		BPK_CHALLENGEBG = 1,		//挑战界面背景
		BPK_BOSSDESCONTENT=30,		//BOSS描述显示大小

		//界面背景层：
		BPK_BOSSDES = 0,			//BOSS描述label        
	};

	enum EPageTag	// 当前显示世界还是野外
	{
		PAGE_SHIJIE  =			3,
		PAGE_YEWAI =			11,
	};
public:
	BossPKUiLayer_new(){}
	~BossPKUiLayer_new(); 
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(BossPKUiLayer_new, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char * pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char * pSelectorName);

	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual void onEnter();
	virtual bool ccTouchBegan(CCTouch * pTouch, CCEvent * pEvent);
	virtual void onExit();

public:

	void initBossUiItem();	//初始化Item
	void update( float dt );

	void setSelectPage(SELECTPAGE* sel);
	void updateItemPos(EPageTag PageTag);
	void UpdateHighLight();

	void setBossDes( int bossID );										//设置BOSS描述，并更新选中特效
	void setBossDropItemName(int itemId, int index);	
														
	EPageTag getCurrentPageTag()	{ return _currentPageTag; }
	BossDieUiItem_new * getItemFromBossID( int BossID );
	CCNode * getScrollViewNode()	{  return _scrollViewNode; }


	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);				//关闭按钮
	void onShiJieBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);	
	void onYeWaiBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);	

	
private:
	void createDropItem(int dropIndex,int dropID);					//根据物品ID创建BOSS掉落物品,dropIndex为1-6(最多6个掉落物)
	EPageTag getDefaultDisplayPageTag();
	static bool sortBoss(BossDieUiItem_new * infofirst,BossDieUiItem_new * infosecond );
	static bool sortPage(const pair<EPageTag , BossDieUiItem_new *> & infofirst,const pair<EPageTag , BossDieUiItem_new *> & infosecond );


private:

	CCSprite * _bgSprite;							//界面背景
	EPageTag _currentPageTag;
	CCScrollView *_scrollView;
	CCNode *_scrollViewNode;
	float _itemInterval;		// scrollview中item的纵向间隔

	std::map<int, int> * _bossIDMap;					//存放界面上的BOSSID
	std::vector<BossDropItem_new*> _dropItemVec;		//存放目标BOSS掉落物
	std::map< EPageTag, CCNode * >	_containerMap;
	std::map< EPageTag, std::list<BossDieUiItem_new *> >	_BossItems;
	
	BossDieUiItem_new * _CurrentSelectItem;
	BossDieUiItem_new * _LastSelectItem;

}; 
#endif //BOSSPKUI_NEW_H