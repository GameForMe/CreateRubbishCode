#include "NoticeBoardUi.h"
#include "UiManager.h"
#include "UiLoader.h"
#include "UiTools.h"
#include "UiManager.h"
#include "World.h"
#include "BaseDefine.h"
#include "CfgReader.h"
#include "CCEGLView.h"
#include "ActivityMgr.h"
#include "UiResourceMgr.h"
#include "AudioPlayer.h"
#include "AudioProto.h"
#include "ChatUi.h"
#include "StringMgr.h"
#include "ClientUpdate.h"
#include "Login.h"
#include "LoginUi.h"
#include "UIUtil.h"
#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
#include "wzolJni.h"
#endif


NoticeBoardUi *NoticeBoardUi::getInstance()
{
	static NoticeBoardUi instance;

	return &instance;
}
NoticeBoardUi::NoticeBoardUi()
{	
	IsListLoad = false;
	m_verticalList = NULL;
	_scrollView = NULL;
}
NoticeBoardUi::~NoticeBoardUi()
{
	
}
void NoticeBoardUi::destroy()
{
	if(m_verticalList != NULL)
	{	
		delete m_verticalList;
		m_verticalList = NULL;
	}

	if(_scrollView != NULL)
	{
		_scrollView->release();
	}
}
void NoticeBoardUi::LoadNoticeListOnce()
{
	if(IsListLoad)
	{
		return;
	}
	NoticeBoardUiLayer* uiLayer = getUiLayer();
	if (uiLayer != NULL)
	{	std::string noticeText = uiLayer->getActBroad();
		if(noticeText == "")
		{
			return;
		}
		CCNode* ContainNode = uiLayer->GetContainerNode();
		if(ContainNode != NULL)
		{
			_scrollView = createScrollViewWithContent(ContainNode);
			_scrollView->retain();
		}
		
		if(_scrollView != NULL)
		{
			m_verticalList = new VerticalList<NoticeList>;
			m_verticalList->addToScrollView(_scrollView);
			m_verticalList->setMinSize(ContainNode->getContentSize());
			CCLog("ShowServerList:tip =%s",noticeText.c_str());
			NoticeList *notice = new NoticeList;
			notice->setData(noticeText);
			m_verticalList->addItem(notice);
			m_verticalList->updateDisplay();
			uiLayer->updateData();
			IsListLoad = true;
		}
	
	}
	
	
}
void NoticeBoardUi::open()
{
	if (getUiLayer() != NULL)
	{
		return;
	}
	CCNodeLoaderLibrary *ccNodeLoaderLibrary = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();
	ccNodeLoaderLibrary->registerCCNodeLoader("NoticeBoardUiLayer",UiLayerLoader<NoticeBoardUiLayer>::loader());
	cocos2d::extension::CCBReader *ccbReader = new cocos2d::extension::CCBReader(ccNodeLoaderLibrary);
	CCNode *node = ccbReader->readNodeGraphFromFile((CFGReader::instance()->get_profile_string("Art","UI","") + "noticeboardui.ccbi").c_str());
	CC_ASSERT(node != NULL);

	_plist = ccbReader->getLoadedSpriteSheet();
	UiResourceMgr::getInstance()->retainPlistFile(_plist);

	ccbReader->release();
	CCScene *scene = UiMgr::getInstance()->getCurScene();
	CCSize winSize = CCDirector::sharedDirector()->getWinSize();
    //node->setPosition(ccp((winSize.width-UI_WIDTH) / 2.0f, (winSize.height - UI_HEIGHT) / 2.0f));
	scene->addChild(node, WZ_POPUI, WCT_NoticeBoardUi);

	if(node != NULL)
	{
		NoticeBoardUiLayer *uiLayer = dynamic_cast<NoticeBoardUiLayer*>(node);
		CC_ASSERT(uiLayer != NULL);
		uiLayer->updateData();
	}
}

void NoticeBoardUi::close()
{
	NoticeBoardUiLayer *layer = getUiLayer();
	if (layer != NULL)
	{
		UiResourceMgr::getInstance()->releasePlistFile(_plist);
		_plist.clear();

		CCScene *scene = UiMgr::getInstance()->getCurScene();
		CCNode* node = dynamic_cast<CCNode*>(scene->getChildByTag(WCT_NoticeBoardUi));
		scene->removeChildByTag(WCT_NoticeBoardUi);
		if (node != NULL)
		{
			node = NULL;
		}
	}
}

NoticeBoardUiLayer *NoticeBoardUi::getUiLayer()
{
	CCScene *scene = UiMgr::getInstance()->getCurScene();
	if(scene == NULL)
	{
		return NULL;
	}
	else
	{
		return dynamic_cast<NoticeBoardUiLayer*>(scene->getChildByTag(WCT_NoticeBoardUi));
	}
}

///////////////////////////////////////////////////////////////////////////////////////////

cocos2d::SEL_MenuHandler NoticeBoardUiLayer::onResolveCCBCCMenuItemSelector( CCObject *pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler NoticeBoardUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onOkBtnPressed", NoticeBoardUiLayer::onOkBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", NoticeBoardUiLayer::onCloseBtnPressed);
	
	return NULL;
}

void NoticeBoardUiLayer::onNodeLoaded( cocos2d::CCNode *pNode, cocos2d::extension::CCNodeLoader *pNodeLoader )
{
	_frame = NULL;
	_container = NULL;

	_frame = (CCLayer*)getChildByTag(0);
	CC_ASSERT(_frame != NULL);
	_container = _frame->getChildByTag(1);
	CC_ASSERT(_container != NULL);

	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 0, true);
	setAllChildernButtonPriority(this, -1);

#ifndef	WIN32
//	WzolJni::getInstance()->openWebView();
#endif
}

void NoticeBoardUiLayer::onOkBtnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_8);
	NoticeBoardUi::getInstance()->close();
#ifndef WIN32                                                                                                                                                                                                                                                                                                                                                                                                
//	WzolJni::getInstance()->removeWebView();
#endif
}
void NoticeBoardUiLayer::onCloseBtnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_8);
	NoticeBoardUi::getInstance()->close();
#ifndef WIN32                                                                                                                                                                                                                                                                                                                                                                                                
	//	WzolJni::getInstance()->removeWebView();
#endif
}
bool NoticeBoardUiLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
{
	if (_frame == NULL)
	{
		return false;
	}

	NoticeBoardUiLayer *layer = NoticeBoardUi::getInstance()->getUiLayer();
	if (layer == NULL)
		return false;

/*
	if (isTouchOnNodeContent(this, pTouch))
	{
		return true;
	}
	NoticeBoardUi::getInstance()->close();
	return true;*/
	CCPoint framePoint = _frame->convertTouchToNodeSpace(pTouch);
	const CCSize &frameSize = _frame->getContentSize();
	CCRect frameRect(0.0f, 0.0f, frameSize.width, frameSize.height);
	if(frameRect.containsPoint(framePoint))
	{
		CCLog("-----------------NoticeBoardUiLayer::ccTouchBegan 1");
		return true;
	}
	else
	{
		if(ClientUpdate::getInstance()->_currentScene == ST_LOGINSCENE)
		{
			LoginUi *ParentLayer = Login::getInstance()->GetLoginUi();
			if(ParentLayer != NULL)
			{
				CCNode* ParentFrame = dynamic_cast<CCLayer*>(ParentLayer->getChildByTag(0));
				if(ParentFrame != NULL)
				{
					CCLayer* ParentFrameLayer = dynamic_cast<CCLayer*>(ParentFrame->getChildByTag(1));
					if(ParentFrameLayer != NULL)
					{
						CCNode* NoticeButton = ParentFrameLayer->getChildByTag(71);
						if(NoticeButton != NULL)
						{
							if(isTouchOnNodeContent(NoticeButton, pTouch))
								return true;
						}

					}
				}
				
			}
		}
		NoticeBoardUi::getInstance()->close();
		return false;
	}
	return true;
}

void NoticeBoardUiLayer::onExit()
{
	CCLayer::onExit();
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
}

NoticeBoardUiLayer::NoticeBoardUiLayer()
	
{

}

NoticeBoardUiLayer::~NoticeBoardUiLayer()
{
	_frame = NULL;
	if(_container !=NULL)
	{
		_container->removeAllChildren();
	}
	_container = NULL;
}

void NoticeBoardUiLayer::updateData()
{

	CCScrollView* tempscrollView = NoticeBoardUi::getInstance()->GetNoticeScroll();
	if(tempscrollView == NULL)
	{
		return;
	}
	CCLog("add succeed");
	_container->addChild(tempscrollView);

}

std::string NoticeBoardUiLayer::getActBroad()
{
	std::string strRet = StringMgr::getInstance()->getTip();
	return strRet;
}

NoticeList::NoticeList()
{
	CCLabelTTF *label = createLabel("");
	label->setTag(NTT_Text);
	_node->addChild(label);
	getLabel(NTT_Text)->setPosition(ccp(OFFFLINEEXPUI_NAME_POSX, 0.f));
}

NoticeList::~NoticeList()
{

}

cocos2d::CCSize NoticeList::getContentSize()
{
	return _contentSize;
}

void NoticeList::setData( const std::string &text )
{
	//getLabel(NTT_Text)->setString(text.c_str());
	//updateContent();
	//return;

	//CCLabelTTF* pLabel = getLabel(NTT_Text);
	//pLabel->setString(text.c_str());

	CustomLabel* pCustomLabel = CustomLabel::create();
	pCustomLabel->setAnchorPoint(ccp(0.5f, 0.5f));
	pCustomLabel->setContentSize(CCSize(440.0f, 0.0f));
	//pLabel->setString("");

	std::string ctext = text;
	pCustomLabel->SetFontSize(16.0f);
	pCustomLabel->SetMargin(2);
	pCustomLabel->SetFontName("");
	pCustomLabel->SetString(ctext);
	_contentSize.height = pCustomLabel->getContentSize().height;
	_contentSize.width = pCustomLabel->getContentSize().width;
	_node->setAnchorPoint(ccp(0.5,0.5));
	_node->setContentSize(_contentSize);
	
	UIUtil::childNodeAlign(_node,pCustomLabel,eha_center,eva_center,CCPointZero);
	
	
	
}

CCLabelTTF * NoticeList::getLabel( eNonticTextTag tag )
{
	return dynamic_cast<CCLabelTTF*>(_node->getChildByTag(tag));
}

CCLabelTTF* NoticeList::createLabel( const std::string &text )
{
	CCLabelTTF *label = CCLabelTTF::create();
	label->setFontSize(16.0f);
	label->setAnchorPoint(ccp(0.5f, 0.5f));
	label->setString(text.c_str()); 
 	label->setColor(ccc3(243, 255, 55)); //公告字体颜色 vvv
	label->setDimensions(CCSize(440,0.f));
	return label;
}

void NoticeList::updateContent()
{
	float height = 0.f;

	CCLabelTTF *label = getLabel(NTT_Text);
	if(label != NULL)
	{
		float tmpHeight = label->getContentSize().height;
		if(height < tmpHeight)
			height = tmpHeight;
	}

	_contentSize.height = height;

	CCLabelTTF *last = getLabel(NTT_Text);
	if(last != NULL)
	{
		_contentSize.width = OFFFLINEEXPUI_NAME_POSX + last->getContentSize().width;
	}
}
