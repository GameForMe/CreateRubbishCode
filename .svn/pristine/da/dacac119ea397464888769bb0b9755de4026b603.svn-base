#ifndef UPDATEHELPER_H
#define UPDATEHELPER_H

#include "cocos2d.h"
#include "AutoUpdateUi.h"
#include "AssetsManager/AssetsManager.h"


USING_NS_CC;
USING_NS_CC_EXT;

struct StartUpdate;
//class UpdatePanel;

class UpdateNode 
	: public CCNode
	, public cocos2d::extension::CCBSelectorResolver
	, public AssetsManagerDelegateProtocol
{
public:
	typedef std::function<void(bool)> update_finished_f;

	CREATE_FUNC(UpdateNode);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName){return NULL;}
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
private:
	void onOK(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onCancel(CCObject * pSender, CCControlEvent pCCControlEvent);
public:
	UpdateNode();
	virtual ~UpdateNode();
	
	bool				init();
	virtual void			onEnter();
	void				setFinishedFn(update_finished_f fn) { m_finished_fn = fn; }
	void				set_ask_if_need_update(bool ask) { m_ask_if_need_update = ask; }

	void				set_end_game_func(std::function<void()> func){m_end_game_fn= func;}
    
    bool    fast_check_update();

private:
	void						after_enter();

	AssetsManager::ErrorCode	check_update();
	void						update_resource();
	void						try_update(bool show_panel);
	void 						on_start_update(StartUpdate* evt);
	void 						ask_if_update_now();
	void 						try_update_without_ask();

	void						call_finished_fn();

	virtual void 				onError(AssetsManager::ErrorCode errorCode);
	virtual void 				onProgress(int percent);
	virtual void 				onSuccess();

	AssetsManager*				_assertsMgr;
	AutoUpdateUi*				_updateView;
	update_finished_f			m_finished_fn;
	bool						m_ask_if_need_update;

	std::function<void() >		m_end_game_fn;
};

#endif //UPDATEHELPER_H