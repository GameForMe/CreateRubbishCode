#ifndef PACKAGEMANAGER_H
#define PACKAGEMANAGER_H

#include "ItemDefine.h"
#include "BaseDefine.h"
#include "item.h"
#include "Signals.h"
#include <string>
#include "cocos2d.h"
#include "GameActionNode.h"
#include "ItemNode.h"
#include "MessageBoxUi.h"
#include "MirValuableBookUi.h"
#include "GambleProto.h"
#include "f_event_system.h"
#include "GameEventDefine.h"
#include "PackageProto.h"
#include "client_common_define.h"
using namespace cocos2d;

struct s_net_cmd;
#define PACKAGE_EXTEND_ITEM 1400069
#define EAUIP_CHISE_NEED_YUANBAO 5//打孔需要的元宝或礼券数
#define AUTO_EQUIP_NUM	20//需要自动换装的物品id gx add
#define MAX_PACKAGE_JINGBI 9999999999	//金币上限
static std::vector<unsigned int> autoequipidarr;
//#define BOX_KEY_COPPER 1400121 //开启铜宝箱需要的铜钥匙
//#define BOX_KEY_SLIVER 1400122 //开启银宝箱需要的银钥匙
//#define BOX_KEY_GOLD 1400123  //开启金宝箱需要的金钥匙
//#define BOX_KEY_SUPER 1400124 //开启至尊宝箱需要的至尊钥匙
#define KUNGFU_TYPE		14//标识功法类型
#define MAX_KUNGFU_EQUIP_LEVEL	16//功法最高级别
#define CONSUM_REPLY_DATA_FLAG	13//标示脚本数据消费返利
#define	MAX_CONSUME_REPLY_NUM	4//消费返利档数 gx add 2014.2.4		【J】5档2014.12.12
#define SIGN_SCRIPT_DATA_FLAG	3//每日签到脚本索引

#define LEVEL_UP_MATERIAL_NUMBER 9   //装备升级材料种类数
#define LEVEL_NAME  3                //装备总的级别数
const int open_condition_num = 3;

enum ePackageItemType
{
	PIT_INVALID = -1,
	PIT_OTHER = 0,
	PIT_YaoPin = 1,	//药品
	PIT_SuiJiShi = 2,		//随机
	PIT_Equip = 3,		//装备
	PIT_QiangHuaMat = 4, //强化材料
	PIT_XiangQianMat = 5,	//镶嵌材料
	PIT_IndentifyMat = 6,	//鉴定材料
	PIT_UpLevelMat1 = 7, //装备升级材料	金刚石
	PIT_UpLevelMat3 = 8,	//万年神玉
	PIT_UpLevelMat2 = 9,	//朱雀火焰等
	PIT_BagExtand	 =	10, //包裹扩充
	PIT_SKILLBOOK = 11,//技能书
	PIT_Repair = 12, //修复耐久
	PIT_LuckYou = 13,//祝福油
	PIT_Kungfu	= 14,//功法 gx add 2014.01.20
	PIT_ChangeName = 15,//改名卡
	PIT_Box = 16,//宝箱
	PIT_Box_ForSure = 17,//确定类型宝箱
	PIT_KungfuExp	= 18,//功法经验珠
	PIT_DropMoney	= 19,	// 掉落金钱
	PIT_GoodManCard = 20, // 好人卡
	PIT_LiHua = 21, // 礼花
	PIT_Forging = 22, //锻造
	PIT_Mystery = 23, //神秘宝箱
	PIT_MysteryYuanBao = 24, //神秘宝箱元宝
	PIT_MaPai = 25, //马牌
	pIT_ChangeGuildName = 26,//行会改名卡
};

enum eOpenBehaviour
{
	e_open_null = 0,
	e_online,
	e_revive,
	e_recharge,
	e_level_change,
};

struct MysteryShopUiData 
{
	int ItemId;
	int nPrice;
	int nTipType;
	int nMoneyType;
	int nQuality;
	int nCanbuyNum;
	int nItemNum;
	int nIsNotice;
	int nIsBind;
	int nIsLimit;
	MysteryShopUiData()
    {
        memset(this, 0, sizeof(MysteryShopUiData));
    }
};
struct MysteryBoxUiData  
{
	unsigned int PlayerId;
	unsigned int ItemId;
	unsigned int nQuality;
	unsigned int num;
	MysteryBoxUiData()
    {
        memset(this, 0, sizeof(MysteryBoxUiData));
    }
};
struct WuxueData  //武学数据
{
	unsigned long long n16Index;// 源头ID
	unsigned long long n16IndexTar;//目标ID
	int num;
	EItemConType conType;
	EItemConType destConType;
	short src;
	short dest;
	WuxueData(){memset(this, 0, sizeof(WuxueData));};
};

struct bindingItemData//绑定与不绑定物品合并所需的数据
{
	unsigned long long srcItemId;
	short num;//移动物品的个数(0表示全部移动)
	EItemConType eConType;//容器类型
	EItemConType destEConType;//目标容器类型
	short n16PosDst;//物品移动的目标位置
	short src;
	short dest;
}; 

struct ItemTypeData //物品类型属性
{
	static ItemTypeData INVALID_TYPE_DATA;
	ePackageItemType type;
	bool putawayBool;
	unsigned char byQuality;//物品品质
	unsigned char byTipsBtnIdx;
	short spcialType;//gx add 0:金币，1：药品，2：普通装备，3：高级装备，4：杂物，5：宝物
	short stackNumber;//gx add 该物品最大堆叠数 
	int typeId;
	int cdTime;
	int bAutoSell;
	int useTime;
	int level;	
	int canSell;//gx add 该物品是否可以出售
	int period;//物品时效 
	int dwCompose_id;
	int profession;
	int recommendedPrice;  //推荐单价
	int oneclassId;
	int towclassId;
	int bottomPrice;  //最低价格
	int maxPrice; //最高价格
	unsigned int special_value_1;//特殊物品的其他含义。如，技能书对应的是技能ID 。。gx add
	unsigned int dwPrice; //价格
	unsigned int goods_kind;
	bool isFaceDeal;// 是否可以面对面交易
	std::string name;
	std::string desc;
	std::string icon;
	std::string moveSound;
	std::string pickSound;
	std::string useSound;
	ItemTypeData()
		: useTime(0)
		, level(0)
		, spcialType(-1)
		, stackNumber(1)
		, canSell(0)
		, period(-1)
		, special_value_1((unsigned int)INVALID)
		, byTipsBtnIdx(-1)
		,putawayBool(false)
		,recommendedPrice(0)
		,oneclassId(0)
		,towclassId(0)
		,bottomPrice(0)
		,maxPrice(0)
		,isFaceDeal(true)
	{
		type = PIT_INVALID;
		cdTime = 3000;
	}


	bool is_magic_soul()const{return type ==PIT_Kungfu || PIT_KungfuExp == type; }
};

struct EquipTypeData  //装备类型
{
	int typeId;
	std::string name;
	std::string profession;
	std::string pos;
	std::string equipDesc;
	std::string LevelName[LEVEL_NAME];
	EEquipPos posIndex;
	EItemQuality equipQuality;	
	bool gemHole;   
	short nEquipType;//标识装备类型，用于区分普通装备或是功法装备
	//装备品质
	int level;
	int jewel_limit;
	int durability;
	int bySex;
	int luck;
	int stuffNum[LEVEL_UP_MATERIAL_NUMBER];
	int explodeId;//用于判断装备是否能够分解，小于0则不能分解
	int profession2;
	int isAutoExplode;
	//有无宝石孔
	int minUseLevel;
	int maxUseLevel;
	unsigned int levelUpId;
	unsigned int stuffId[LEVEL_UP_MATERIAL_NUMBER];
	int showTest;
	int equipSign;
	int equipGrade;
	int referLv;
	int qualityLv;
	DWORD suit_id;
	int quality_modify;
	EquipTypeData()
		:typeId(0)
		,levelUpId((unsigned int) -1)
		, level(0)
		, durability(0)
		, bySex(0)
		, luck(-1)
		, nEquipType(0)
		, profession2(10)
		, explodeId(0)
		, gemHole(false)
		, isAutoExplode(1)
		, equipSign(0)
		, suit_id(INVALID)
		, equipGrade(0)
		, referLv(0)
		, qualityLv(0)
		,quality_modify(0)
	{
		memset(stuffNum, 0, sizeof(int) * 3);
		memset(stuffId, (unsigned int) -1, sizeof(unsigned int) * 3);
	}

	bool is_specail_magic_soul()const{return quality_modify>0; }

	bool is_special_forge_equip()const{return posIndex== EEP_Spcial_Finger_ZZ||posIndex== EEP_Spcial_Finger_JL||posIndex== EEP_Ilu_Weapon;}
};
struct KunfuTypeData  //功法类型
{
	std::string kungfuName;
	unsigned int typeID;
	int nExp;
	int explevelup[MAX_KUNGFU_EQUIP_LEVEL-1];
	KunfuTypeData():kungfuName(""),typeID(0),nExp(0)
	{
		memset(explevelup,0,sizeof(int)*(MAX_KUNGFU_EQUIP_LEVEL-1));
	}
};
struct EquipBaseAttr
{
	enum eEquipBaseAttr
	{
		EBA_Null = -1,
		EBA_ZAtcMin = 0,
		EBA_ZAtcMax,
		EBA_FAtcMin,
		EBA_FAtcMax,
		EBA_DAtcMin,
		EBA_DAtcMax,
		EBA_WFangMax,
		EBA_WFangMin,
		EBA_MFangMax,
		EBA_MFangMin,
		EBA_Life,
		EBA_Mana,
		EBA_Hit,
		EBA_Miss,
		EBA_Baoji,
		EBA_MianBao,
		EBA_Num
	};

	int data[EBA_Num];

	EquipBaseAttr()
	{
		memset(data, -1, sizeof(int) * EBA_Num);
	}

	int get_val_by_era(ERoleAttribute att_type)
	{
		eEquipBaseAttr idx = EquipBaseAttr::convert(att_type);
		if (idx!=EBA_Null && idx < EBA_Num)
		{
			return data[idx];
		}

		return 0;
	}

	static eEquipBaseAttr convert(ERoleAttribute attr)
	{
		switch(attr)
		{
		case ERA_ExAttackMin: return EBA_ZAtcMin;
		case ERA_ExAttackMax: return EBA_ZAtcMax;
		case ERA_InAttackMin: return EBA_FAtcMin;

		case ERA_InAttackMax:return EBA_FAtcMax;
		case ERA_ArmorEx:return EBA_DAtcMin;
		case ERA_ArmorIn:return EBA_DAtcMax;
		case ERA_ExMaxDefense:return EBA_WFangMax;
		case ERA_ExMinDefense:return EBA_WFangMin;
		case ERA_InMaxDefense:return EBA_MFangMax;
		case ERA_InMinDefense:return EBA_MFangMin;
		case ERA_MaxHP:return EBA_Life;
		case ERA_MaxMP:return EBA_Mana;
		case ERA_HitRate:return EBA_Hit;
		case ERA_Dodge:return EBA_Miss; 
		case ERA_Crit_Rate:return EBA_Baoji;
		case ERA_UnCrit_Rate:return EBA_MianBao;
        default:return EBA_Null;
		}
		return EBA_Null;
	}

	static ERoleAttribute convert(eEquipBaseAttr attr)
	{
		switch(attr)
		{
		case EBA_ZAtcMin: return ERA_ExAttackMin;
		case EBA_ZAtcMax: return ERA_ExAttackMax;
		case EBA_FAtcMin: return ERA_InAttackMin;
		case EBA_FAtcMax: return ERA_InAttackMax;
		case EBA_DAtcMin: return ERA_ArmorEx;
		case EBA_DAtcMax: return ERA_ArmorIn;
		case EBA_WFangMax: return ERA_ExMaxDefense;
		case EBA_WFangMin: return ERA_ExMinDefense;
		case EBA_MFangMax: return ERA_InMaxDefense;
		case EBA_MFangMin: return ERA_InMinDefense;
		case EBA_Life: return ERA_MaxHP;
		case EBA_Mana: return ERA_MaxMP;
		case EBA_Hit: return ERA_HitRate;
		case EBA_Miss: return ERA_Dodge;
		case EBA_Baoji: return ERA_Crit_Rate;
		case EBA_MianBao: return ERA_UnCrit_Rate;
		}
		return ERA_Null;
	}
};

struct equip_show_info
{
	int sex;
	int profess;
	int taoZhuangLevel;
	int taoZhuangkind;
	tagEquip equip;
};

struct EquipAddUpdate;
struct EquipRecastData;

class PackageManager
{
	enum professionTag
	{
		PROFESSION0,  //NULL
		PROFESSION1, //战士
		PROFESSION2, //法师
		PROFESSION3, //道士
		PROFESSION4, //战士套装
		PROFESSION5, //法师套装
		PROFESSION6, //道士套装
		PROFESSION7, //战士散件
		PROFESSION8, //法师散件
		PROFESSION9, //道士散件
		PROFESSION10,//通用
		PROFESSION11,//通用套件
		PROFESSION12 //通用散件
	};
	friend class OpenPackageUiLayer;
public:
	typedef std::map<short, f_item*> ItemMap;//物品map
	typedef std::map<INT64,INT64> UniqueIDMap;
	typedef std::map<DWORD, int> map_suit;
	typedef std::map<DWORD, EquipSuitData> map_equip_suit_data;

	static PackageManager *getInstance();
	PackageManager();
	~PackageManager();
	bool init();
	
	bool destroy();
	void delayDestroy();//延迟重连需要销毁
	void update(float dt);
	//获得初始化状态;
	bool isInit() { return _init; }
	void loadDataFromXML();
	// 根据模板ID获取物品的图标;
	std::string getIconFrameName(unsigned int dataId);
	CCSpriteFrame* getIconSpriteFrame(unsigned int dataId);
	std::string getBlockFrameName();
	std::string getSelectFrameName();
	std::string getLockFrameName();

	std::string getBindFrameName(int type=0);//0:normal 1:gongfa

	std::string getQualityFramName(EItemQuality itemQuality);	//【Ji：】add
	std::string getIconIdName(unsigned int dataId);
	//获取选中特效		【Ji：】add
	GameActionNode* getSurrundSuperEffect();
	std::string getSuperEffectName(const char* seName);
	//根据名字获取图标frame
	CCSpriteFrame *getIconFrameByName(const std::string &name);
	CCSpriteFrame *getFrameByName(const std::string &name, const char* pFileFolder, const char* pFileType);
	void destroyAllIconFrames();
	//获得指定容器大小;
	int getConSize(EItemConType conType) { return _conSize[conType]; }
	//获得指定容器中的一个空位;
	int getBlankSpace(EItemConType con);
	// 获取背包中的物品;
	f_item* getItem(ItemMap &itemMap, short index);
	f_item* getItem(ItemMap &itemMap, INT64 id);
	f_item* getItem(ItemMap &itemMap, unsigned int typeId);
	f_item* getItem(ItemMap &itemMap, unsigned int typeId,bool bBind);//gx add 对应下边的
	f_item *getItem(EItemConType con, short index);
	f_item *getItem(EItemConType con, INT64 id);
	f_item *getItem(EItemConType con, unsigned int typeId);
	f_item *getItem(EItemConType con, unsigned int typeId, EItemQuality eItemQuality);
	f_item *getItem(EItemConType con, unsigned int typeId,bool bBind);//gx add 找到绑定或不绑定的最大堆，返回
	f_item *getItem(INT64 id);	//遍历所有的项;
	bool isItemNumEnough(unsigned int typeId,int needNum,std::vector<INT64>& itemList);
	void getKindItemMap(EItemConType con,unsigned int typeId,ItemMap& _map);//获取特定容器内某类物品的集合 gx add 2013.11.08
	int getItemNumber(EItemConType con, unsigned int dwTypeId);
	int getBindItemNumber(EItemConType con, unsigned int dwTypeId);//得到绑定物品数量根据typeid
	int getUnBindItemNumber(EItemConType con, unsigned int dwTypeId);//得到非绑定物品数量根据typeid
	int getItemNumber(ItemMap &itemMap, unsigned int dwTypeId,UINT& stackNum);
	int getBindItemNumber(ItemMap &itemMap, unsigned int dwTypeId);//得到绑定物品数量根据typeid
	int getUnBindItemNumber(ItemMap &itemMap, unsigned int dwTypeId);//得到非绑定物品数量根据typeid
	f_item* getBindItem( ItemMap &itemMap, unsigned int typeId );    //得到绑定物品
	f_item * getUnBindItem( EItemConType con, unsigned int typeId ); //得到非绑定物品
	f_item * getBindItem( EItemConType con, unsigned int typeId ); //得到绑定物品
	f_item* getUnBindItem( ItemMap &itemMap, unsigned int typeId );    //得到非绑定物品
	UINT getItemNumber_Stack(EItemConType con, unsigned int dwTypeId);
	short getItemPos(ItemMap &itemMap, INT64 itemId);


	bool have_enough_space_for_picking(unsigned int type_id);

	bool stack_is_full(EItemConType con,unsigned int item_type_id);

	int getBlankCount(EItemConType con = EICT_Bag) ;  //获取背包空格数
	INT64 getYuanBao()const { return _yuanBao; }

	bool have_enough_yuanbao(int need)const{ return getYuanBao()>= need; }

	DWORD getTotalChargeYuanBao() {return _totalChargeYuanBao;}//gx add
	void  setTotalChargeYuanBao(DWORD nValue) {_totalChargeYuanBao = nValue;}//设置充值总元宝数
	INT64 getJinBi() { return _jinBi; }
	INT64 getDiamond() { return _diamond; }
	void doAddBlank(int type, int addNum);
	void onGetName( unsigned int roleid , const std::string& name );
	inline bool getCanUseItem(){return _canUseItem;}
	int getFitIndex(EItemConType con);
	//此接口主要是操作远程玩家容易，自己容器慎用
	void removeByConType(EItemConType con,INT64 itemId);
	//xy由私有转到这里
	void destoryCon(EItemConType conType);
	f_equipment* createEquip(const tagEquip& tmptagEquip);
	//获取物品数据
	const ItemTypeData &getItemTypeData(unsigned int typeId);
	ItemTypeData const* get_item_proto_ptr(unsigned int model_id)const;
	//获取装备数据
	const EquipTypeData* getEquipTypeData(unsigned int typeId)const;
	//获取功法数据
	const KunfuTypeData &getKungfuTypeData(unsigned int typeId);
	//装备基础属性
	EquipBaseAttr getEquipBaseAttrDB(unsigned int typeId);
	//在包裹中移动物品位置
	void changeItemPosition(EItemConType conType, short src, short dest, int num = 0);
	//在不同的容器中移动位置
	void changeItemPosition(EItemConType srcConType, EItemConType destConType, short src, short dest, int num = 0);
	int changeDest(f_item *srcItem);
	void changePositionForDressEquip();//穿戴物品
	//整理背包
	void reorderPackage(EItemConType conType = EICT_Bag);
	//使用背包中的物品
	void useBagItem(short index);
	void useBagItem(f_item *item);
	void useBagItem(INT64 id);
	bool use_one_oil(INT64 id);

	void noticeRecharge();//跳转充值界面  //add by vvv 2014.11.05
	//批量使用背包中的物品
	void allUseBagItem(short index);
	void allUseBagItem(f_item *item);
	void allUseBagItem(INT64 id);
	//专供自动喝药使用物品 gx add 2013.11.27
	void useDrugItem_AutoProtece(f_item *item);
	//删除物品
	void putDownBagItem(short index);
	//从功法背包内删除
	void DropGongfaItem(short index);
	//获取一种类型的背包
	ItemMap *getItemMap(EItemConType type);

	ItemMap const* getItemMap(EItemConType type)const;
	//装备强化相关
	unsigned int onEquipStrengthen(s_net_cmd *cmd);
	void strengthenEquip(INT64 equipId,bool isAutoBuy,int nIsWendingStone);
	unsigned int onEquipStrengthenResult(s_net_cmd *cmd);

	unsigned int onMessageEquipSuitInit(s_net_cmd *cmd);
	unsigned int onMessageEquipSuitChange(s_net_cmd *cmd);

	//装备鉴定
	void indentifyEquip(INT64 equipId, INT64 indentifyStuffId);
	//装备打孔
	void chiselEquip(INT64 equipId);
	//装备拆除镶嵌
	void unbesetEquip(INT64 equipId, unsigned char index);
	//装备镶嵌
	void inlayEquip(INT64 equipId, INT64 *stoneId);
	//装备升级
	void equipLevelUp(INT64 equipId, unsigned int *stuffId);
	//出售垃圾
	void getSellAll(std::vector<const tagItem*>& vec);
	//背包扩容
	void extendPackage(int num, int type);
	void useItemToExpendPackage();
	void useYuanbaoToExpendPackage();
	void useItemToExpendStorage();
	void useYuanbaoToExpendStorage();

	bool IsAddItem(f_equipment* pitem);
	bool IsAddItem(int id);//宝石镶嵌

	//发送快捷键消息
	void sendShortKeyInfo();
	//锁定物品
	void lockItem(EItemConType conType, short index, bool u = true);
	void lockItem(EItemConType conType, INT64 id, bool u = true);
	//锁定指定容器中的所有物品
	void lockItem(EItemConType conType, bool u = true);
	//解锁物品
	void unLockItem(EItemConType conType, short index, bool u = true);
	void unLockItem(EItemConType conType, INT64 id, bool u = true);
	//解锁指定容器中的所有物品
	void unLockItem(EItemConType conType = EICT_Bag, bool u = true);
	//指定的容器中是否有锁定物品
	bool hasLockItem(EItemConType conType);
	void showErrorInfoByUseItem(unsigned int dwerror_code, INT64 n64ItemID);
	void showSpecialInfoByUseItem(unsigned int typeID,unsigned int roleID);
	//各种宝箱开启gx add 2013.11.17
	//	bool openKenXiang(f_item *item,bool bAuto = false);			//【ji：】   老宝箱，注掉
	// 	void togMxzTip(bool state);
	// 	void togTbxTip(bool state);
	// 	void togYbxTip(bool state);
	// 	void togJbxTip(bool state);
	// 	void togZzbxTip(bool state);
	// 	void togBoxForSureTip(bool state);
	void normalUseBagItem();//一般性使用背包物品，这里暂时只针对
	//end
	//判断指定的ID是否是有效的物品
	bool isValidItem(unsigned int typeId);

	//穿装备，供别类调用
	void roleGetEquip(f_equipment* equip,int posIndex);//gx add
	bool canAutoEquip(unsigned int typeID);
	//坐骑相关
	void equipRide(INT64 equipId);
	void unEquipRide(INT64 equipId);
	/*功法升级*/
	//单步升级
	void kungfuAddExp(INT64 n64_kungfu_main,INT64 n64_kungfu_back);
	//一键背包功法融合
	void auto_kungfuMergeInBag();
	void kungfuMergeInBag(f_equipment* pEquip_first,f_equipment* pEquip_sencond);
	//功法融合的二次确认相关
	void KungfuMerge(f_equipment* pEquip_first,f_equipment* pEquip_sencond);
	void missKungfuMerge();
	void confirmAutoKungfuMergeInBag();
	void toAutoMergeTip(bool bState);
	void toSignleMergeTIp(bool bState);
	void toSignleMergeInBagTip(bool bState);
	bool isHavePurpleSwalllowInKungfuBag(EItemConType pType);//魔魂背包中 有紫色 且 有1 2 级的魔魂 一间融合 会做吞噬操作
	//新加的功法拖动二次确认
	void ConfirmMerge();//背包与功法栏的合并
	void ConfirmMergeInBag();//背包中的功法融合
	void UnConfirmMerageInBag(); //取消背包中的功法融合;
	//获取可以被自动熔炼的功法的ID集合
	void collectAutoUpKungfuID(unsigned int typeID,unsigned char type);
	//武学融合点ok后的方法
	void onWuxueFusionOk();
	void onWuxueFusionClannel();
	void onEquipWuxueFusionOk();
	void onItemMergeOk();
	void onItemMergeClannel();
	void onEICT_RoleWareItemMergeOk();
	short onIsItemStackable(unsigned int itemId);
	void onEquipWuxueFusionClannel();
	void loadPackageDataProto();
	void FindEquipWithMVB( Enum_MVB_Item e );
	void FindEquipCanClear();//查找可以洗练的装备
	bool isShowEquipUp(f_equipment* pEquip);
	void sendItemPositionChange(f_item* item,EItemConType destConType,short pos);
	unsigned int on_NET_G2C_ROLE_UPDATE_CONTYPE_ITEM( s_net_cmd* cmd );
	void replaceGem();//替换装备时替换宝石
	std::string GetNameByLevel(EquipTypeData data,int level);//获取具有前缀的装备名称（黄金、至尊或者传奇）

	bool wearSBKMasterEquip();

	int getRoleMinEquipLevel();
	void AutoUseExpCard(INT64 itemId);//自动使用经验卡

	void try_to_move_item_from_bag_to_storage(short pos);
	void try_to_move_item_from_storage_to_bag(short pos);

	void try_to_lock_or_unlock_kungfu(INT64 item_id);

	void initEquipDataMapFromXML();//初始化 装备所有信息
	const EquipTypeData* getEquipTypeDataPointer( unsigned int typeId );
private:
	void updateUiWithConType(EItemConType conType);
	void updateUiWithConTypeEx(EItemConType conType, short idx);
SIGNALS:
	//c_signal<void, unsigned int> signalItemUsed;
	c_signal<void, INT64> signalEquip;
	c_signal<void, unsigned int> signalUnEquip;
	c_signal<void, short> signalBagAddNewItem;
private: 
	void checkFusionItemUpdateifNess(f_item* pItem);
	void checkSBKEquipUpdateIfNess(f_item* pItem);

	void replace_jewel(f_equipment* src,f_equipment* dest);
protected:
	//移除包裹中的物品
	bool removeItem(ItemMap &itemMap, short index);
	bool removeItem(ItemMap &itemMap, INT64 itemId);
	//移除包裹中的物品(内存不删除)
	f_item* remove(ItemMap &itemMap, short index);
	f_item* remove(ItemMap &itemMap, INT64 itemId);
	//计算权重
	INT64 CalcItemWeight(f_item *item);
	//添加一个物品
	void addNewItem(f_item *item);
	void addNewItem(ItemMap &itemMap, f_item *item);
	//初始化本地玩家的包裹
	unsigned int onInitLocalPlayerItem(s_net_cmd *cmd);
	//玩家包裹中物品位置移动
	unsigned int onItemPositionChanged(s_net_cmd *cmd);
	unsigned int onItemPositionChangedEx(s_net_cmd *cmd);
	//物品堆叠
	unsigned int onItemStack(s_net_cmd *cmd);
	//物品整理
	unsigned int onReorderItem(s_net_cmd *cmd);
	unsigned int onReorderItemEx(s_net_cmd *cmd);
	//获取金钱
	unsigned int onInitStateMoney(s_net_cmd *cmd);
	unsigned int onMoneyChange(s_net_cmd *cmd);
	unsigned int onBaibaoYuanbaoChange(s_net_cmd *cmd);
	unsigned int onDiamondChanged(s_net_cmd *cmd);
	unsigned int onRongYuChange(s_net_cmd *cmd);//gx add
	//删除物品
	unsigned int onItemRemove(s_net_cmd *cmd);
	//丢弃物品
	unsigned int onItemPutDown(s_net_cmd *cmd);
	//----------------------------------
	//是否自动使用道具条件判断
	bool isAutoUseDaoju(unsigned int typeID);
	//使用物品
	unsigned int onItemUsed(s_net_cmd *cmd);
	//添加物品
	unsigned int onAddNewItem(s_net_cmd *cmd);
	//添加装备
	unsigned int onAddNewEquitItem(s_net_cmd *cmd);
	//添加物品 堆叠
	unsigned int onAddStackItem(s_net_cmd *cmd);
	//装别
	unsigned int onEquipItem(s_net_cmd *cmd);
	//装上功法
	unsigned int onEquipKungfu(s_net_cmd *cmd);
	//脱装备
	unsigned int onUnEquipItem(s_net_cmd *cmd);
	//脱下功法
	unsigned int onUnEquipKungfu(s_net_cmd *cmd);
	//装备属性变化
	unsigned int onEquipAttrChange(s_net_cmd *cmd);
	//装备鉴定
	unsigned int onEquipIndentify(s_net_cmd *cmd);
	//装备打孔
	unsigned int onEquipChisel(s_net_cmd *cmd);
	//装备镶嵌
	unsigned int onEquipInlay(s_net_cmd *cmd);
	//装备升级
	unsigned int onEquipLevelUp(s_net_cmd *cmd);
	//装备更新变化
	unsigned int onNewessChanged(s_net_cmd *cmd);
	//包裹大小变化
	unsigned int onBagExtend(s_net_cmd *cmd);
	//快捷键信息
	unsigned int onKeyInfo(s_net_cmd *cmd);
	//摘除镶嵌
	unsigned int onUnBeset(s_net_cmd *cmd);
	//使用祝福油幸运武器
	unsigned int onEquipLuckChange(s_net_cmd *cmd);
	unsigned int onAllUseGoodManCardResult(s_net_cmd *cmd); //批量使用好人卡
	unsigned int onUseRepairWaterResult(s_net_cmd *cmd); //使用修复神水结果
	unsigned int onLeranSkillInfo(s_net_cmd *cmd);//使用道具技能书
	//功法升级
	unsigned int onKungfuExpChange(s_net_cmd *cmd);
	//坐骑装备
	unsigned int onEquipRide(s_net_cmd *cmd);
	unsigned int onUnEquipRide(s_net_cmd *cmd);
	//玩家元宝消耗总数
	unsigned int onTotalYBConsume(s_net_cmd *cmd);
	unsigned int onConsumeYBReplyData(s_net_cmd *cmd);
	//摇钱树相关
	unsigned int onGetRechargeFeedbackInfo(s_net_cmd *cmd);

	//替换装备时的宝石替换
	unsigned int onGemExchange(s_net_cmd*cmd);

	unsigned int onGetDecomPoseDataInfo( s_net_cmd *cmd );

	unsigned int onGetForingDataInfo( s_net_cmd *cmd );
	
	unsigned int on_server_gongfa_lock(s_net_cmd* cmd);
	//开宝箱相关
	//	unsigned int onServerOpenKenBox(s_net_cmd* cmd);				//【Ji：】老宝箱，注释掉
	//提示框的取消按钮、
	void ToCancel();
	//充值接口
	void ToCharge();

	void onPackageItemChanged(unsigned int itemId, bool isAdded = true);
protected:
	MessageBoxUi *messageBox;//add by vvv 2014.11.05 元宝不足，提示框
	ItemMap _pocket;//背包
	ItemMap _equipment;//装备
	ItemMap _storage;	//仓库
	ItemMap _kungfu;//功法装备栏
	ItemMap _gongfabag;	//功法包裹
	ItemMap _gongfatmp; //功法临时包裹
	ItemMap _gongfaware;	//功法仓库
	ItemMap _stall;	//摆摊包裹
	ItemMap _equip_show;
	ItemMap _inlayBag;
	EItemConType	_CurrentLockedConType;				// 当前被锁住的背包，只针对整体锁定，整体解锁的情况

	int _conSize[EICT_FinalEnd];//各种容器大小;
	int _addNum;

	typedef std::map<unsigned int, ItemTypeData> ItemData;
	ItemData _itemData;

	typedef std::map<unsigned int, EquipTypeData> EquipData;
	EquipData _equipData;
	typedef std::map<unsigned int, EquipBaseAttr> EquipAttData;
	EquipAttData _equipAttData;

	typedef std::map<unsigned int, KunfuTypeData> KungfuData;
	KungfuData _kungfuData;

	//	std::set<std::string> _plist;				//保存特效资源名字	【Ji：】

	INT64 _yuanBao;
	INT64 _diamond;
	INT64 _jinBi;
	DWORD   _totalChargeYuanBao;//目前为止该账号已充元宝数 gx add
	int	  _totalConsumeYuanbao;//当前玩家元宝消耗总数 gx add 2014.2.4
	int   _consumeReplyData;//玩家消费返利领奖标记数据
	bool _init;
	bool _canUseItem;	//当前状态是否可以使用物品;

	//装备时临时记录装备放的位置;
	std::map<INT64, EEquipPos> _tmpEquipData;
	//功法装备是临时记录装备放的位置；
	std::map<INT64,EKungfuEquipPos> _tmpKungfuData;
	//临时存储可以用来一键熔炼的功法ID
	UniqueIDMap	_tmpKungfuIDMap;
	INT64		_tmpKungfu_Main;//临时记录一键功法升级的待升级功法的ID
private:
	//gx add 临时保存点击的Item指针，用于宝箱开启
	f_item* _TempItem;
	//临时的装备,点哪个存哪个，给融合用 XSea temp
	f_equipment* _TempEquip;

	//装备替换
	f_equipment* _srcEquip; //原装备
	f_equipment* _descEquip; //目标装备（被替换的装备）

	//临时存储融合功法的指针
	INT64 _TempKungfuItemID_Dest;
	INT64 _TempKungfuItemID_Src;
	unsigned char _TempKungfuMergeType;
	//是否可以点击背包物品弹tips
	bool isClickBagDisplayTips;
	std::vector<MysteryBoxUiData> MySteryBoxList;//神秘宝箱广播列表；
	std::vector<MysteryBoxUiData> MySteryShopList;//神秘商店广播列表；
	std::vector<MysteryShopUiData> MySteryShopGoodsList;//神秘商店广播列表；
	std::vector<MysteryBoxUiData> MySteryShopList1;//神秘商店广播列表；
	std::vector<MysteryShopUiData> MySteryShopGoodsList1;//神秘商店广播列表；
	unsigned int unFreshVersion;
	unsigned int unMysteryOpen;
	unsigned int unGemOpen;
public:
	inline void SetTotalConsumeYB(int nValue) { _totalConsumeYuanbao = nValue;}
	inline int  GetToalConsumeYB() { return _totalConsumeYuanbao;}

	inline void SetConsumeReplyData(int nValue) { _consumeReplyData = nValue;}
	inline int  GetConsumeReplyData() { return _consumeReplyData;}
	bool	CanGetConsumeReplyReward(unsigned char byState);//根据第几档来判断是否可以领取充值返利奖励
	bool	IsConsumeEnoughYB(unsigned char byState);//是否已经消耗了对应层次的元宝数
	bool	IsGetRewardAlready(unsigned char byState);//是否已经领取过了这个级别的消费返利
	bool	CanGetConsumeReplyReward();//是否可以领取充值返利奖励 add F.
	int		GetKungfuExp(f_equipment* pKungfu,const KunfuTypeData& typeData);
	void setGongfaOneKeySE(bool isOneKey, int seCount);		//设置功法一键获取特效				【J】
	void flushGongfaTempBag(float dt);			//刷新以显示藏经阁内功法						【J】
	int getConsumeRewardNeedCost(int rewardLv);	//获取消费返利对应奖励等级需要的元宝数			【J】2014.12.12(物美购物半价)
	void SetClickBagDisplayTips(bool isDis){isClickBagDisplayTips = isDis; }
	bool GetClickBagDisplayTips(){ return isClickBagDisplayTips;}
private:
	INT64	_recharge_period;//活动期间的总充值数
	INT64	_recharge_feedback;//活动期间返利元宝数
	int		_feedback_times;//已摇次数
public:
	inline const INT64 GetTotalPeriodRecharge_Feedback() { return _recharge_period+_recharge_feedback;}//活动期间的充值数+返利数
	inline const INT64 GetRecharge_Period() { return _recharge_period;}
	inline void SetRecharge_Period(INT64 nRecharge) { _recharge_period = nRecharge;}
	inline void ModRecharge_Period(int nRecharge) { _recharge_period += nRecharge;}

	inline const INT64 GetRecharge_Feedback() { return _recharge_feedback;}
	inline void SetRecharge_Feedback(INT64 nRecharge) { _recharge_feedback = nRecharge;}
	inline void ModRecharge_feedback(int nRecharge) { _recharge_feedback += nRecharge;}
	inline const int GetFeedbackTimes() { return _feedback_times;}
	inline void SetFeedback_Times(int nTimes) {_feedback_times = nTimes;}
	inline void ModFeedback_Times(int nTimes) {_feedback_times += nTimes;}
	//开宝箱相关实现
	inline void setBoxRewardID(unsigned int rewardID) { m_CurBoxGamle_RewardIdx = rewardID; }
	inline unsigned int getBoxRewardID() { return m_CurBoxGamle_RewardIdx;}
	inline void setBoxType(unsigned char openingKind) { m_cCurBoxType = openingKind; }
	inline unsigned char getBoxType() { return m_cCurBoxType; }
	inline void setBoxProcess(bool isOver) { m_bIsBoxOK = isOver; }
	inline bool getBoxProcess() { return m_bIsBoxOK; }
	inline std::vector<MysteryBoxUiData>& getMysteryList()  {return MySteryBoxList;}
	inline std::vector<MysteryBoxUiData>& getMysteryShopList()  {return MySteryShopList;}
	inline std::vector<MysteryShopUiData>& getMysteryShopGoodsList()  {return MySteryShopGoodsList;}
	void ChangeMysteryShopGoodsList(unsigned int uIndex,unsigned int uCanBuyNum,unsigned int nTotalNum,unsigned int nTip);
	inline std::vector<MysteryBoxUiData>& getMysteryShopList1()  {return MySteryShopList1;}
	inline std::vector<MysteryShopUiData>& getMysteryShopGoodsList1()  {return MySteryShopGoodsList1;}
	inline void PushBackMysteryList(MysteryBoxUiData& strData)  {MySteryBoxList.push_back(strData);}
	inline void PushBackMysteryShopGoodsList(MysteryShopUiData& strData)  {MySteryShopGoodsList.push_back(strData);}
	inline void PushBackMysteryShopList(MysteryBoxUiData& strData)  {MySteryShopList.push_back(strData);}
	inline void PushBackMysteryShopGoodsList1(MysteryShopUiData& strData)  {MySteryShopGoodsList1.push_back(strData);}
	inline void PushBackMysteryShopList1(MysteryBoxUiData& strData)  {MySteryShopList1.push_back(strData);}
	void RemoveFirstOfMysteryList();
	void RemoveFirstOfMysteryShopList();
	void RemoveFirstOfMysteryShopList1();
	inline void ClearMysteryList(){MySteryBoxList.clear();}
	inline void ClearMysteryShopList(){MySteryShopList.clear();}
	inline void ClearMysteryShopList1(){MySteryShopList1.clear();}
	inline void ClearMysteryShopGoodsList(){MySteryShopGoodsList.clear();}
	inline void ClearMysteryShopGoodsList1(){MySteryShopGoodsList1.clear();}
	inline unsigned int GetFreshVersion(){return unFreshVersion;}
	inline void SetFreshVersion(unsigned int unVersion){unFreshVersion = unVersion;}
	inline void SetIsOpen(unsigned int unIsOpen){unMysteryOpen = unIsOpen;}
	inline void SetIsGemOpen(unsigned int unIsOpen){unGemOpen = unIsOpen;}
	inline unsigned int GetIsOpen(){return unMysteryOpen;}
	inline unsigned int GetIsGemOpen(){return unGemOpen;}
	//神秘宝箱实现

	inline const ItemData & getItemData(){ //获取packagedata表中的所有数据
		return _itemData;
	}
private:
	WuxueData m_WuxueData;
	bindingItemData m_bindingItemData;
	unsigned int m_CurBoxGamle_RewardIdx;		//当前正在开的宝箱ID	【J】更改为正在开启的单个宝箱中奖物品领奖序列号		2014.11.17
	unsigned char m_cCurBoxType;				//正在开启的宝箱类型
	bool m_bIsBoxOK;							//记录成功开宝箱后是否正常领到物品

	//	UniqueIDMap m_tempBoxMap;//临时存储一键开宝箱的所有宝箱序号
	//功法特效【Ji：】
	std::map<short, std::string> _gongfaSEMap;			//用来保存功法一键获取时各个功法特效
	bool m_bIsGongfaOneKey;								//识别功法一键获取
	int m_nSECount;										//保存一键获取的功法数量
	bool isOpenBox;
	unsigned int m_dwRewardItemID;
	bool isTenChouJiang;	//是否是十连抽奖
	ItemMap m_GemMap;//宝石列表

	void			initCostYB();
	std::vector<int>			mneedCostYBTable;
	bool						bImmediateEqui;//是否立即装备

	
	//功法item 是否重新排序
	bool m_reoderGongFaItem;
	INT64	n64_lastUseItem;

	map_suit m_suit_map;
	map_equip_suit_data m_equip_suit_data;

public:
	void saveBindingItemData(short src,short dest,f_item *item,int num,short posDes,EItemConType cntType,EItemConType detType);
	int getspecial_value_1(INT64 id);
	bool GetBoxProcessState(){ return isOpenBox;}
	void SetBoxProcessState(bool _isPenBox){ isOpenBox = _isPenBox;}
	bool GetIsImmediateEqui(){ return bImmediateEqui;}
	void SetIsImmediateEqui(bool _bImmediateEqui){ bImmediateEqui = _bImmediateEqui;}

	
	unsigned int GetRewardItemID(){ return m_dwRewardItemID;}
	void SetRewardItemID(unsigned int _m_dwRewardItemID){ m_dwRewardItemID = _m_dwRewardItemID;}
	bool GetBoxTenChoujiangProcessState(){ return isTenChouJiang;}
	void SetBoxTenChoujiangProcessState(bool _isTenChouJiang){ isTenChouJiang = _isTenChouJiang;}
	ItemMap GetGemList(EItemConType contype);
	void closeTip( float dt );
	bool isEquipCanImmediateEquip(f_equipment *pEquip);//当拾取装备时，用于判断是否需要提示立即装备Ui

	void confirmCoerceUseItem();
	void setLastUseItem(INT64 n64Item);
	INT64 getLastUseItem();
	inline map_suit& get_suit_map() {return m_suit_map;}
	inline map_equip_suit_data& get_suit_data() {return m_equip_suit_data;}
	int get_own_suit_num_by_suit_id(DWORD suit_id);
	const EquipSuitData& get_one_suit_data_by_id(DWORD suit_id);
	void set_suit_data(DWORD suit_id, int num);

public:
	typedef std::vector<EquipRecastRebateInfo> vector_recast_item;
	typedef std::map<DWORD, sEquipRecastDiscount> all_recast_rebate_map;
	typedef std::map<DWORD, EquipRecastData> map_recast_data;

	unsigned int onReciveRecastCondition(s_net_cmd *cmd);
	unsigned int onReciveRecastInfo(s_net_cmd *cmd);
	unsigned int onReciveRecastBack(s_net_cmd *cmd);

	inline vector_recast_item const& get_all_recast_item_data()const {return m_all_recast_item;}
	inline int get_recast_item_num()const {return (int)m_all_recast_item.size();}
	const EquipRecastRebateInfo& get_one_recast_item_data(INT64 equip_id);

	inline map_recast_data& get_recast_data() {return m_recast_data;}
	const EquipRecastData& get_one_recast_data(DWORD equip_type_id);
	void send_get_recast_item_rebate();
	void get_recast_item_and_sort();

	void set_is_open_recast(eOpenBehaviour behaviour);
	bool if_open_recast_init();
	bool if_open_limit_recast_init();
	inline bool is_open_recast(){return m_is_open_recast;}
	inline bool is_open_limit_recast(){return m_is_open_limit_recast;}
	inline void set_open_limit_recast(bool is_open){m_is_open_limit_recast = is_open;}
	inline DWORD get_limit_recast_end_time(){return m_recast_end_time;}

	bool check_specail_soul_is_full_in_cur_realm()const;
private:
	typedef std::map<INT64, f_item*>	sorted_map;
	typedef std::vector<sorted_map>		sorted_map_list;

	bool init_recast_data_table();
	bool is_put_in_recast_list(DWORD type_id);

	void get_item_list(ItemMap* item_map,int state,std::vector<f_item*>& out);//state 0:unbind 1:bind 2:all
	void sort_items(std::vector<f_item*>const& in,sorted_map& out);

	unsigned int get_npc_id_by_cnt_type(EItemConType ctn_type)const;

	void cal_ex_pair(sorted_map_list const& list,std::vector<tagItemOrder>& out);

	void try_to_arrange_package(EItemConType ctn_type);
	void send_resort_whole_package(sorted_map_list const& list,size_t total,EItemConType ctn_type);
	void send_changes(std::vector<tagItemOrder>const& change_pair,EItemConType ctn_type);
	bool init_equip_suit_table();

	void try_to_add_to_recast(f_item* item);

	int  get_special_gold_magic_soul_equiped_num()const;
	bool is_special_gold_magic_soul_full(int magic_lv,bool need_notice = false)const;

	bool check_full_special_magic_soul( EItemConType srcConType, EItemConType destConType, short src, short dest);

	bool check_absorb(f_equipment const*src, f_equipment const* dest,std::string& first_name,std::string& second_name,int& first_lv,int& second_lv,unsigned char& ignore_state)const;
private:
	vector_recast_item m_all_recast_item;
	all_recast_rebate_map m_all_recast_rebate_map;
	map_recast_data m_recast_data;

	bool m_is_open_recast;
	bool m_is_open_limit_recast;
	bool m_is_total_open;
	int m_recast_need_level;
	int m_recast_need_recharge;
	eOpenBehaviour m_open_behaviour;
	int m_open_condition[open_condition_num];
	int m_open_condition_num[open_condition_num];
	DWORD m_recast_begin_time;
	DWORD m_recast_end_time;

public:
	typedef std::map<int,equip_show_info>  Equip_Show_Info;
	const Equip_Show_Info* getEquipShowInfo();

private:
	Equip_Show_Info m_equip_show_info;
	void initEquipShowInfo();
};

#endif //PACKAGEMANAGER_H	
