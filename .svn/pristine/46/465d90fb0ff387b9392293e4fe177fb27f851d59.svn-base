#ifndef _TEAMSTATE_UI_
#define _TEAMSTATE_UI_

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
#include "TeamProto.h"




using namespace cocos2d;
using namespace cocos2d::extension;
class TeamStateUiLayer;
class TeamStateUi : public UiInterface
{

public:
	TeamStateUi();
	~TeamStateUi();
	virtual CCNode *openUi();
	TeamStateUiLayer *getUiLayer();
	void updateData();
};

class TeamStateUiLayer: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eNodeTag
	{
		NT_Frame			= 0
	};
public:
	TeamStateUiLayer();
	~TeamStateUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(TeamStateUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject *pTarget, const char *pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject *pTarget, const char *pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode *pNode, cocos2d::extension::CCNodeLoader *pNodeLoader);
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void update(float dt);

	void onCloseBtnPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onPreparedOnPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void ontichuPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void ontichu1Pressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void ontichu2Pressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void ontichu3Pressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void updateData();

	void	onClose();
	void	onPrepared();
	void	OnCloseLeaderMsgOK();
	void	OnClosePlayerMsgOK();

private:

	void SetFubenTitle();		//设置副本名称
	void setTeamRoleClass();	//设置队伍职业图标

	CCSpriteFrame* getRoleClassSprite(int nClass);
	CCSpriteFrame* getRoleTeamSprite(int nstate);
	CCSpriteFrame* getRolePhotoSprite(int nClass,unsigned char bySex);
	CCSpriteFrame* getRolePreparedSprite(int nstate);


	CCSprite* getTeam(int n);
	CCSprite* getClass(int n);
	CCLabelTTF* getRating(int n);
	CCLabelTTF* getLevel(int n);
	CCLabelTTF* getName(int n);
	CCSprite* getPhoto(int n);
	CCSprite* getPrepared(int n);
	CCControlButton* getKick(int n);
	CCLabelTTF* getTime(int n);
	int getUpdateTime(int n);
	void setUpdateTime(int n,int ntime);
	
	void initData();

	int getIndexInList();
	void setCurTime(float dt);
	bool checkAllPreapredState();
	
	

	CCSprite* m_MainFrame;
	CCLabelTTF* m_Itemlabel_FubenTitle;		//副本名称
	CCSprite* m_Class1;						//队伍第一个人的职业（队长）
	CCSprite* m_Class2;						//队伍第二个人的职业
	CCSprite* m_Class3;						//队伍第三个人的职业
	CCSprite* m_Class4;						//队伍第四个人的职业
	CCSprite* m_Class5;						//队伍第五个人的职业

	CCSprite* m_Team1;						//队伍第一个人的底框（队长）
	CCSprite* m_Team2;						//队伍第二个人的底框
	CCSprite* m_Team3;						//队伍第三个人的底框
	CCSprite* m_Team4;						//队伍第四个人的底框
	CCSprite* m_Team5;						//队伍第五个人的底框

	CCLabelTTF* m_Rating1;					//队伍第一个人的战斗力（队长）
	CCLabelTTF* m_Rating2;					//队伍第二个人的战斗力
	CCLabelTTF* m_Rating3;					//队伍第三个人的战斗力
	CCLabelTTF* m_Rating4;					//队伍第四个人的战斗力
	CCLabelTTF* m_Rating5;					//队伍第五个人的战斗力

	CCLabelTTF* m_level1;					//队伍第一个人的等级（队长）
	CCLabelTTF* m_level2;					//队伍第二个人的等级
	CCLabelTTF* m_level3;					//队伍第三个人的等级
	CCLabelTTF* m_level4;					//队伍第四个人的等级
	CCLabelTTF* m_level5;					//队伍第五个人的等级

	CCLabelTTF* m_Name1;					//队伍第一个人的名字（队长）
	CCLabelTTF* m_Name2;					//队伍第二个人的名字
	CCLabelTTF* m_Name3;					//队伍第三个人的名字
	CCLabelTTF* m_Name4;					//队伍第四个人的名字
	CCLabelTTF* m_Name5;					//队伍第五个人的名字

	CCSprite* m_Photo1;						//队伍第一个人的头像（队长）
	CCSprite* m_Photo2;						//队伍第二个人的头像
	CCSprite* m_Photo3;						//队伍第三个人的头像
	CCSprite* m_Photo4;						//队伍第四个人的头像
	CCSprite* m_Photo5;						//队伍第五个人的头像

	CCSprite* m_Prepared1;					//队伍第一个人的头像（队长）
	CCSprite* m_Prepared2;					//队伍第二个人的头像
	CCSprite* m_Prepared3;					//队伍第三个人的头像
	CCSprite* m_Prepared4;					//队伍第四个人的头像
	CCSprite* m_Prepared5;					//队伍第五个人的头像

	CCControlButton* m_Preparedbutton;		//准备按钮

	CCControlButton* m_Kick2;				//第二个队员的提出按钮
	CCControlButton* m_Kick3;				//第三个队员的提出按钮
	CCControlButton* m_Kick4;				//第四个队员的提出按钮
	CCControlButton* m_Kick5;				//第五个队员的提出按钮

	CCLabelTTF* m_Time1;					//队伍第一个人的倒计时
	CCLabelTTF* m_Time2;					//队伍第二个人的倒计时
	CCLabelTTF* m_Time3;					//队伍第三个人的倒计时
	CCLabelTTF* m_Time4;					//队伍第四个人的倒计时
	CCLabelTTF* m_Time5;					//队伍第五个人的倒计时

	int m_nTime1;							//第1个人倒计时
	int m_nTime2;							//第2个人倒计时
	int m_nTime3;							//第3个人倒计时
	int m_nTime4;							//第4个人倒计时
	int m_nTime5;							//第5个人倒计时

	typedef std::vector<TeamInfo> TeamInfoVect;	
	TeamInfoVect m_TeamVect;
	int nLocalPrepared;						//本地玩家是否准备
	bool bisJuJue;
	tagDWORDTime m_AllPreparedTime;			//所有玩家都准备的时间
	bool m_bisAllPrepared;					//所有玩家是否都准备
	bool m_isGotoFuben;						//是否进入副本
	//INT nclass[5] ;						//5个队员的职业
	//DWORD nZhanLi[5];						//5个队员的战斗力
	//bool  bIsSelf[5];	//是否是自己
	//std::string  strname[5] ;						//5个队员的名字
	//INT  nlevel[5] ;						//5个队员的等级
	//unsigned char bySex[5];						//5个队员的等级
	//int nPrepared[5] ;						//5个队员的等级
	

	
};

#endif