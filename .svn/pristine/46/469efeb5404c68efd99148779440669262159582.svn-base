#ifndef NUMKEYPAD_H
#define NUMKEYPAD_H

#include "cocos2d.h"
#include "cocos-ext.h"
using namespace cocos2d;
using namespace cocos2d::extension;

class NumKeypadFrame;

class NumKeyPadDelegate
{
public:
	virtual int onAttach() = 0;
	virtual void onNumChange(int num) = 0;
	virtual void onFinished(int num, int srcNum) = 0;
	virtual void onCancel(int num) = 0;
};

class NumKeyPadLabelDelegate : public NumKeyPadDelegate
{
public:
	NumKeyPadLabelDelegate(CCLabelTTF *label);
	~NumKeyPadLabelDelegate();
	virtual int onAttach();
	virtual void onNumChange(int num);
	virtual void onFinished(int num, int srcNum);
	virtual void onCancel(int num);
	void setPrefix(const std::string &str) { _prefix = str; }
	void setSubfix(const std::string &str) { _suffix = str; }

protected:
	void setLabelNum(int num);

protected:
	CCLabelTTF *_label;
	std::string _prefix;
	std::string _suffix;
};

class NumKeypad
{
public:
	enum NumKeypadState
	{
		NumKeypadStateMax = 0,
		NumKeypadStateRecom = 1,
	};

	static NumKeypad *getInstance();
	NumKeypad();
	~NumKeypad();
	void open();
	void close();
	bool isOpen();
	NumKeypadFrame *getFrame();
	void setPosition(const CCPoint &pos);
	void attachToDelegate(NumKeyPadDelegate *del);
	void setPositionByContent(CCNode *node);
	void setMaxNum(int num);
	void setNumKeypadState(NumKeypadState state);
	void setRecomNum( int num );
	void setButtonImage(const std::string &normal, const std::string &high, const std::string &disable);
	int getCurNum();
	void setCurNum( int num );
private:
	std::set<std::string> _usedPlistFile;
};

class NumKeypadFrame
	: public CCSprite
	, public CCTouchDelegate
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	
	NumKeypadFrame();
	~NumKeypadFrame();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(NumKeypadFrame, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onOkBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCancelBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void onBtnPressed0(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed2(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed3(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed4(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed5(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed6(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed7(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed8(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBtnPressed9(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void onDeleteBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onMaxBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void setDelegate(NumKeyPadDelegate *del);
	void removeDelegate(bool cancel=false); //是否是取消
	void insertNum(int num);
	void deleteNum();
	void setNumKeypadState(NumKeypad::NumKeypadState state){m_State = state;}
	void setMaxNum(int num) { _maxNum = num; }
	void setRecomNum(int num){_recomNum = num;}
	void setButtonImage(const std::string &normal, const std::string &high, const std::string &disable);
	int getCurNum();
	void setCurNum(int num);
private:
	NumKeyPadDelegate *_delegate;
	int _startNum;
	int _curNum;
	bool _isChange;
	int _maxNum;
	int _recomNum;
	int m_CurNum;
	bool _isMaxClicked;
	CCControlButton* m_OkButton;
	NumKeypad::NumKeypadState m_State;
};

class NumKeypadLoader : public cocos2d::extension::CCSpriteLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(NumKeypadLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(NumKeypadFrame);
};


#endif //NUMKEYPAD_H