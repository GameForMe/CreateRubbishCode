#ifndef _MAP_PATH_H
#define _MAP_PATH_H

#include<stdio.h>
#include<stdlib.h>
#include<vector>
#include<iostream>
#include<fstream>
#include<sstream>
#include<stack>
#include <map>
#include <list>
using namespace std;

#define MAXNODE 99
#define INFINITY 9999
#define K 10

typedef int VertexType;
typedef int EdgeType;

typedef struct node{
	VertexType adjnode;
	struct node* next;
	EdgeType weight;
}EdgeNode;

typedef struct vnode{
	VertexType vertex;
	EdgeNode* firstedge;
}VertexNode;

typedef struct MatrixGraph{
	VertexType vexs[MAXNODE + 1];							//顶点表
	EdgeType edges[MAXNODE + 1][MAXNODE + 1];		//邻接矩阵，可看作边表
}MGraph;

typedef struct Pathstruct{							//用于保存一条路径，里面有每一跳的点和该路径总距离
	VertexType node[MAXNODE + 1];
	EdgeType distance ;
	int hop;
}Path;


typedef VertexNode AdjList[MAXNODE + 1];

class MapPath{
public:
	//MapPath(string filename);
	MapPath(){};
	~MapPath(){};
	void init(string filename);
	void FindKpath();
	void PrintOut();
	void Dijkstra(VertexType);
	Path Dijkstra(VertexType,VertexType);
	void DijkstraAll();
	void PrintShortestPath(VertexType);
	void PrintShortestPathAll(void);
	//void KShortestPath(VertexType);

	int getNodeCount() { return n; }
	int getEdgeCount() { return e; }

private:
	MGraph mgraph;
//	AdjList adjlist;
	EdgeType **dist; 
	VertexType **pre;
	Path  **Kpath[K+1];              //存储路径，起点存在node[0].node[i]就是第i跳的点

	int e,n;			//n是节点数node，e是边数edge
};

//[bing] 基于广度优先算法写连通图
struct S_MapNode
{
	//记录上一级连通节点
	unsigned int dwPerMapID;

	//与该节点连接的地图列表
	std::vector<unsigned int> m_LinkMapId;

	S_MapNode()
	{
		dwPerMapID = 0;
	}
};

class LinkMapPath
{
public:
	LinkMapPath() {}
	~LinkMapPath() {}

	static LinkMapPath& GetInstance()
	{
		static LinkMapPath linkmap;
		return linkmap;
	}

	void Init();

	bool FindAToBPath( unsigned int dwMapId1, unsigned int dwMapId2, std::list<unsigned int>& PathList );

private:

	std::map<unsigned int, S_MapNode> m_SceneMap;
};


#endif