#pragma once

#include <map>
#include"item.h"
using namespace std;

//最多能摆摊物品的数量
#define MAX_STALLITEM_COUNT 10

class f_item;

//所在交换物品格子的typeid, 数量
typedef map<unsigned int, unsigned short> def_stallitem;

//贩卖中的物品
struct S_StallItem
{
	unsigned int dwAllPrice;	//贩卖总价
	def_stallitem ExChangeItemMap;	//兑换物品资料该map size是几就是要占用几个背包格子
};

enum E_STALL_STATE
{
	ESS_PERSTALL,	//准备摆摊
	ESS_NOWSTALL,	//正在摆摊
	ESS_BUYSTALL,	//购买状态
};

//[bing] 购买时用到的数据
struct SBuyItemList
{
private:
	unsigned char byType;
	void* pData;
	unsigned int dwSellYuanBao;
public:
	~SBuyItemList()
	{
		if(pData != NULL)
		{
			f_item* equip = static_cast<f_item*>(pData);
			if(equip != NULL)
			{
				if(MIsEquipment(equip->get_item_type_id()))
				{
					f_equipment* equipment = dynamic_cast<f_equipment*>(equip);
					delete equipment;
					equipment = NULL;
				}
				else
				{
					delete equip;
					equip = NULL;
				}
			}
		}
	}
	void setType(char byTypes)
	{
		byType = byTypes;
	}
	void setPData(void* data)
	{
		pData = data;
	}
	void setYuanBao(unsigned int yuanbao)
	{
		dwSellYuanBao = yuanbao;
	}
	unsigned char getType()
	{
		return byType;
	}
	void* getPData()
	{
		return pData;
	}
	unsigned int getYuanBao()
	{
		return dwSellYuanBao;
	}
};
class NewStallMgr
{
public:
	NewStallMgr();
	~NewStallMgr();

	static NewStallMgr& GetInstance()
	{
		static NewStallMgr _mgr;
		return _mgr;
	}

	//初始化数据
	void InitData();

	//清空数据
	void cleardata();

	//摆摊添加一个道具
	void AddItem( unsigned char byIdx, S_StallItem* pStallItem, bool bUpdate = false );

	//摆摊删除一个道具
	void DelItem( unsigned char byIdx, bool bUpdate = false );

	//交换物品数量修改
	void UpdateExChangeItem(short nIdx, unsigned short uNum);

	//更新摆摊信息
	void UpdateData();

	//获取一个摆摊物品的详细兑换资料
	S_StallItem* GetStallItem( unsigned char byIdx );

	//获取当前整个摆摊要兑换道具的占用背包格数
	short GetExChangedUseCount()
	{
		return m_ExChangedUseCount;
	}

	//获得总收益
	unsigned int GetTotlePrice()
	{
		return m_dwTotlePrice;
	}

	//获取贩卖中的物品map
	map<unsigned char, S_StallItem*>& GetStallItemMap()
	{
		return m_StallItemMap;
	}

	//获取可以兑换的物品信息
	map<unsigned int, unsigned int>& GetExChangeItemMap()
	{
		return m_ExChangeItemMap;
	}
	SBuyItemList& getButItem(int index)
	{
		return m_buyitemArray[index];
	}
private:
	short m_ExChangedUseCount;	//需要使用包裹格子数
	unsigned int m_dwTotlePrice;	//总价

	map<unsigned char, S_StallItem*> m_StallItemMap;	//最多10个贩卖的物品 key = idx 所在容器的索引

	//ItemTypeID, Price
	map<unsigned int, unsigned int> m_ExChangeItemMap;	//可以兑换物品map
	SBuyItemList m_buyitemArray[10];	//购买时贩卖者的物品信息10个
};