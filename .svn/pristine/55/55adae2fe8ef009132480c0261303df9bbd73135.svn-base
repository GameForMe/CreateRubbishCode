#ifndef ITEMDEFINE_H
#define ITEMDEFINE_H

#include "RoleDefine.h"
#include "BaseDefine.h"
#include <math.h>
#include "cocos2d.h"

#pragma pack(push, 1)

//-----------------------------------------------------------------------------
// 常量定义
//-----------------------------------------------------------------------------
const int MAX_ITEM_TYPE_NUM				= 100000;	// 静态表中，物品装备等最多条数

const int MAX_ROLEATT_BASE_EFFECT		= 8;	// 装备原型中可填写的影响属性个数

const int MAX_POSY_TIMES				= 20;	// 一件装备可以最多的铭文次数
const int MAX_ROLEATT_POSY_EFFECT		= 4;	// 一件装备中铭文最多影响的属性个数

const int MAX_ENGRAVE_TIMES				= 20;	// 一件装备可以最多的镌刻次数
const int MAX_ROLEATT_ENGRAVE_EFFECT	= 4;	// 一件装备中镌刻最多影响的属性个数

const int MAX_ROLEATT_ENHANCE_EFFECT	= 3;	// 强化装备的材料影响的属性个数
const int MAX_EQUIPHOLE_NUM				= 5;	// 一件装备可以最多的镶嵌孔数数

const int MAX_BRAND_LEVEL				= 10;	// 装备的烙印等级上限

const int MAX_BASE_ATT					= 12;	// 基础属性个数
const int MAX_RAND_ATT					= 5;	// 鉴定属性个数
const int MAX_ADDITIONAL_EFFECT			= MAX_RAND_ATT+MAX_BASE_ATT;// 装备最大附加属性个数

const float CONSOLIDATE_PARAM			= 1.15f;// 武器每次升星增加的属性百分比
const float WEAPON_LEVEL_PARAM			= 0.1f;// 武器等级每级影响的百分比

// const int ABRASION2USETIMES				= 450;	// 武器使用次数与崭新度进率.1点崭新度= 使用次
// const int ARMORABRASION2USETIMES		= 50;	// 防具使用次数与崭新度进率.1点崭新度= 使用次

const int MAX_ITEM_DCTIME				= 7 * 24 * 60 * 60;	// 物品最长冷却时间(单位：秒)

const int MAX_EQUIP_ATTACH_NUM          = 20;    // 装备挂载变形模型最大数量

const int MAX_PEREQUIP_SUIT_NUM			= 3;	// 一件装备最多可属于3套套装

const int MAX_EQUIP_BUFF_NUM			= 3;	// 装备上带有buff最大个数

const int MAX_WEAPON_LEVEL				= 70;	// 装备可升等级

const int MAX_EQUIP_SKILL_NUM			= 12;	// 装备最大技能数

const int NPC_BIND_TIME					= 2 * 24 * 60 * 60;		// NPC绑定时间
const int MOUNT_SKILL_NUM				= 1;
const int BASE_REPIAR_PRICE				= 1;	// 基础修理价格

const int EQUIP_SKILL_NUMBER			= 2;

const int MAX_STRENGTHEN_LEVEL			= 16; // 强化最高等级

const int MAX_STARUP_LEVEL				= 3;  // 升星最高等级	

const int STAR_UP_NEED_ITEM_ID			= 1003222; //星魂id

const int MAX_GONGFA_EQUIP_NUM			= 8;	//功法装备容器格数

const UINT UNDERGROUND_REEL				= 1102203;//地下卷轴

const UINT MAGIC_RACE_BOOK				= 1102202;//魔族指令书

const UINT TRIAL_VOUCHER				= 1102204;//试炼凭证

const INT CONVERT_EXC_NUM = 5;//兑换

const UINT DRAGON_GUARD_SCROLL = 1102330;//龙卫卷轴

const INT16 MAX_DRAGON_SHOW_ITEM = 20;		//龙卫挑战最多显示的道具

const UINT FUSION_RANDOM_BOOK	= 1102347;//装备洗炼符

#define Item_shoeId 1003046
//const int 

// 装备出售价格品级修正系数
#define MCalPriceFactor(fFactor, nQlty)	\
	switch(nQlty)			\
{						\
	case 0:			\
	fFactor = 1.0f;		\
	break;				\
	case 1:			\
	fFactor = 1.5f;		\
	break;				\
	case 2:		\
	fFactor = 2.5f;		\
	break;				\
	case 3:		\
	fFactor = 3.5f;		\
	break;				\
	case 4:		\
	fFactor = 5.0f;		\
	break;				\
	default:				\
	fFactor = 0.1f;		\
	break;				\
}

enum EItemType
{
	EIT_Null		= 0,
	EIT_Equip		= 1,	// 装备
	EIT_QiangHua	= 2,	// 强化
	EIT_YaoPin		= 3,	// 药品
	EIT_CaiLiao		= 4,	// 材料
	EIT_Gem			= 5,	// 宝石
	EIT_Ride		= 6,	// 坐骑
	EIT_Pet			= 7,	// 宠物
	EIT_Features	= 8,	// 功能
	EIT_Other		= 9,	// 其他
	EIT_Quest		= 10,	// 任务
	EIT_Kungfu		= 11,	//功法 gx add 2013.12.24
	EIT_KungfuExp	= 12,	// 功法经验珠 add by XSea 2014.07.28
	EIT_TreasureExp	= 13,	// 宝箱经验卡
};

enum EItemTypeEx
{
	EITE_Null		= 0,

	EITE_Advance	= 1,	// 强化石
	EITE_ShenShi	= 2,	// 神石
	EITE_DaKong		= 3,	// 打孔石
	EITE_Bind		= 4,	// 绑定石
	EITE_Ling		= 5,	// 灵石

	EITE_Resume		= 6,	// 恢复类
	EITE_QiangHua	= 7,	// 强化类

	EITE_KuangShi	= 8,	// 矿石
	EITE_CaoYao		= 9,	// 草药
	EITE_DaZhaoShui = 10,	// 打造药水
	EITE_PingZhiUp	= 11,	// 品质提升
	
	EITE_Axe    = 12,	// (斧头 ，兽人)
	EITE_Wand		= 13,	// (魔杖，火法师)
	EITE_Gun		= 14,	// (枪，赏金猎人)
	EITE_Claymore		= 15,	// (大剑,星灵)
	EITE_Book		= 16,	// (书，占星师)	
	
	EITE_Ride		= 17,	// 坐骑
	EITE_RideAdvance= 18,	// 坐骑强化
	EITE_RideShenShi= 19,	// 坐骑神石
	EITE_RideEquip	= 20,	// 坐骑装备
					  
	EITE_PetFood	= 21,	// 宠物食物
	EITE_PetSkillBook=22,	// 宠物技能书
					  
	EITE_Prictice	= 23,	// 武器修炼
	EITE_Master		= 24,	// 师傅
	EITE_Guild		= 25,	// 帮会
	EITE_Bag		= 26,	// 包裹扩充
	EITE_BaiTan		= 27,	// 摆摊
					  
	EITE_ZhuiSha	= 28,	// 追杀令
	EITE_ZhaoShu	= 29,	// 诏书
	EITE_Exp		= 30,	// 经验丹
	EITE_YiQi		= 31,	// 义气果
};

const int X_WEAPON_TYPE_NUM = EITE_Book - EITE_Axe + 1;

#define M_WEAPON_TYPE_INDEX(X)    (  X   - EITE_Axe )
#define M_IS_VALID_WEAPON_TYPE(X) ( (X) >= EITE_Axe && (X) <= EITE_Book )

enum EItemTypeReserved
{
	//装备
	EITR_Null		= 0,
	EITR_Weapon		= 1,	// 武器
	EITR_Head		= 2,	// 头
	EITR_Body		= 3,	// 上身
	EITR_Hand		= 4,	// 头
	EITR_Feet		= 5,	// 脚
	EITR_Body0		= 6,	// 内甲
	EITR_Body1		= 7,	// 背部
	EITR_Wrist		= 8,	// 手腕
	EITR_Waist		= 9,	// 腰带
	EITR_Legs		= 10,	// 腿
	EITR_Neck		= 11,	// 项链
	EITR_Finger		= 12,	// 戒指
	EITR_Shipin		= 13,	// 饰品
	EITR_Fashion	= 14,	// 时装

	//灵石
	EITR_HP_LS		= 15,	// 生命
	EITR_Ack_LS		= 16,	// 攻击
	EITR_Def_LS		= 17,	// 防御
	EITR_Hit_LS		= 18,	// 命中
	EITR_ZJ_LS		= 19,	// 招架
	EITR_SB_LS		= 20,	// 闪避
	EITR_Crit_LS	= 21,	// 暴击
	EITR_CirtH_LS	= 22,	// 暴击伤害
	EITR_FanCrit_LS	= 23,	// 反暴击
	EITR_FanCritH_LS= 24,	// 反暴伤
	EITR_HPH_LS		= 25,	// 生命恢复
	EITR_LiLiang_LS	= 26,	// 力量
	EITR_MinJie_LS	= 27,	// 敏捷
	EITR_ZhiLi_LS	= 28,	// 智力
	EITR_NaiLi_LS	= 29,	// 耐力
	

	//扩充
	EITR_BeiBao		= 30,	// 背包扩充
	EITR_Cangku		= 31,	// 仓库扩充
	
	//宠物食品
	EITR_PETFOOD_Fish = 32,	// 鱼
	EITR_PETFOOD_ROU  = 33,	// 肉
	EITR_PETFOOD_Cai  = 34,	// 菜
	EITR_PETFOOD_Siliao=35,	// 通用宠物饲料

	EITR_PETFOOD_ADDHP = 36,// 宠物增加hp
	EITR_PETFOOD_REBORN = 37, // 宠物复活

	EITR_CHUTOU			= 38, // 工会采矿锄头
};

#define MISPETFOOD(pItemProto) ((pItemProto)->eTypeReserved >= EITR_PETFOOD_Fish && (pItemProto)->eTypeReserved <= EITR_PETFOOD_Siliao)


//品质
enum EItemQuality
{
	EIQ_Start			= -1,

	EIQ_Null			= -1,	// 未鉴定
	EIQ_Quality0		= 0,	// 白	普通
	EIQ_Quality1		= 1,	// 绿	优秀
	EIQ_Quality2		= 2,	// 蓝	卓越
	EIQ_Quality3		= 3,	// 紫	完美
	EIQ_Quality4		= 4,	// 橙	史诗
	EIQ_Quality5		= 5,	// 金	传说

	EIQ_End			= 6,
};

const int X_EQUIP_QUALITY_NUM = EIQ_End - EIQ_Start - 1;

enum EBindMode	// 绑定类型
{
	EBM_Null		= 0,	// 无

	EBM_Gain		= 1,	// 获得绑定
};

enum EBindStatus	// 绑定状态
{
	EBS_Unknown		= 0,	// 未知的，如商店中的商品
	EBS_Unbind		= 1,	// 未绑定
	EBS_Bind		= 2,	// 绑定石绑定
	EBS_NPC_Bind	= 3,	// npc绑定
	EBS_SYSTEM_Bind = 4,	// 系统绑定
	EBS_Equip_Bind  = 5,	// 装备绑定
	EBS_Mohun_Bind = 6,		//魔魂绑定
};

enum EGFLockStatus	// 锁定状态
{
	EGFLS_UnLock		= 0,	// 未锁定
	EGFLS_GongFa		= 1,	// 魔魂锁定
};

enum ESexLimit		// 物品可使用的角色性别,要与AvatarAtt中性别对应
{
	ESL_Null		= -1,	// 不限制，即男女均可用
	ESL_Woman		= 0,	// 女限制，即女可用
	ESL_Man			= 1,	// 男限制，即男可用
};


enum EWuXing	// 五行属性
{
	EWX_Start		= -1,
	EWX_Null		= -1,

	EWX_Metal		= 0,
	EWX_Wood		= 1,
	EWX_Water		= 2,
	EWX_Fire		= 3,
	EWX_Soil		= 4,

	EWX_End			= 5,
};

const int X_WUXING_TYPE_NUM = EWX_End - EWX_Start - 1;

enum EStuffType		// 材料类型
{
	EST_Null		= 0,	//无
	EST_Stone		= 1,	//石
	EST_Jade		= 2,	//玉
	EST_Iron		= 3,	//铁
	EST_Silver		= 4,	//银
	EST_Gold		= 5,	//金
	EST_ChunXinCao	= 6,	//春辛草
	EST_XiaKuCao	= 7,	//夏枯草
	EST_QiuBaiCao	= 8,	//秋白草
	EST_DongKuiCao	= 9,	//冬葵草
	EST_DongYangCao = 10,	//东阳草
	EST_Flax		= 11,	//麻布
	EST_Leather		= 12,	//皮革
	EST_Cotton		= 13,	//棉布
	EST_SilkOrgandy	= 14,	//素纱
	EST_Silk		= 15,	//丝绸
	EST_Chop		= 16,	//肉块
	EST_Dew			= 17,	//露水
	EST_Grain		= 18,	//谷物
	EST_Bone		= 19,	//骨头
	EST_Potherb		= 20,	//野菜
};

enum EItemCreateMode	// 物品&装备生产方式
{
	EICM_Null		= 0, // 没有记录
	EICM_GM			= 1, // GM命令生成
	EICM_Loot		= 2, // 怪物掉落
	EICM_Quest		= 3, // 任务奖励
	EICM_Product	= 4, // 玩家生产
	EICM_ShopNPC	= 5, // 商店NPC
	EICM_AccQuest	= 6, // 接任务
	EICM_Mall		= 7, // 商城
	EICM_Gift		= 8, // 礼品包
	EICM_ActTreasure= 9, // 激活氏族珍宝
	EICM_GMTool		= 10,// GM工具生成
	EICM_PetSkill	= 11,// 宠物技能
	EICM_VipNetBar	= 12,// 金牌网吧
	EICM_ReGet		= 13,// 道具恢复
	EICM_Activity	= 14,// 活动奖励
	EICM_Unbeset	= 15,// 拆嵌
	EICM_Guild		= 16,// 帮会
	EICM_Mail		= 17,// 邮件
	EICM_NewRoleGift = 18, //新手奖励
	EICM_Fishing	 = 19, // 钓鱼
	EICM_Product_picture	= 20, // 图纸生成
	EICM_Lottery	= 21,  // 彩票机
	EICM_Sign			=	22,		// 签到生成
	EICM_DAMO		= 23,	// 打磨
	EICM_LvUp		= 24,	// 装备升级
	EICM_MailReward = 25,	// 邮件奖励
	EICM_Stall_Buy	= 26,	// 摆摊买
	EICM_Stall_Sell	= 27,	// 摆摊卖
	EICM_Open_Treasure = 28, //开启宝箱
	EICM_Buy_YuanBao_Reward = 29, //购买聚划算
	EICM_Stack_Bind_Move = 30, //绑定与非绑定物品移动
};

enum EEnhanceEquipPos	// 可强化的装备类型
{
	EEEP_Hand		= 0x00000001,	// 武器
	EEEP_Head		= 0x00000002,	// 头部
	EEEP_Face		= 0x00000004,	// 面部
	EEEP_Body		= 0x00000008,	// 上身
	EEEP_Legs		= 0x00000010,	// 下身
	EEEP_Back		= 0x00000020,	// 背部
	EEEP_Wrist		= 0x00000040,	// 腕部
	EEEP_Feet		= 0x00000080,	// 足部
	EEEP_Finger		= 0x00000100,	// 戒指
	EEEP_Waist		= 0x00000200,	// 腰饰
	EEEP_Neck		= 0x00000400,	// 项链
};

enum EEquipMdlType     // 装备的模型类型
{
	EEMT_NULL	= 0,
	EEMT_FSKIN  = 1,   // 蒙皮
	EEMT_FAK    = 2,   // 关键帧
	EEMT_FSM    = 3,   // 静态模型
};

enum EEquipAttachPos    // 装备可变形部分的挂载位置
{
    EEAP_NULL     = 0,
    EEAP_HAA      = 1,  // 头部
    EEAP_HWR      = 2,  // 右手
    EEAP_SHR      = 3,  // 右肩
    EEAP_GRA      = 4,  // 右小臂
    EEAP_HWL      = 5,  // 左手
    EEAP_SHL      = 6,  // 左肩
    EEAP_GLA      = 7,  // 左小臂
    EEAP_CHM      = 8,  // 前胸
    EEAP_BAL      = 9,  // 背部披风
    EEAP_FLA      = 10, // 左脚
    EEAP_LLA      = 11, // 左小腿
    EEAP_FRA      = 12, // 右脚
    EEAP_LRA      = 13, // 右小腿
    EEAP_CHP      = 14, // 腰部
	EEAP_Num      = 15,
};

enum ECorlor		// 颜色贴图枚举
{
	EC_Null		= -1,

	EC_Start	= 0,
	EC_Val0		= 0,
	EC_Val1		= 1,
	EC_Val2		= 2,
	EC_Val3		= 3,
	EC_Val4		= 4,
	EC_Val5		= 5,
	EC_Val6		= 6,
	EC_Val7		= 7,
	EC_Val8		= 8,
	EC_Val9		= 9,
	EC_Val10	= 10,
	EC_Val11	= 11,
	EC_End		= 11,
};

const int X_COLOR_NUM	= EC_End - EC_Start + 1;

//装备附加属性
enum EquipAddAtt
{
	EAA_NULL			= -1,
	EAA_Statr			= 0,

	EAA_ExAttackMin		= 0,		// 物攻下限
	EAA_ExAttackMax		= 1,		// 物攻上限
	EAA_InAttackMin		= 2,		// 魔攻下限
	EAA_InAttackMax		= 3,		// 魔攻上限
	EAA_ArmorEx			= 4,		// 道攻下限
	EAA_ArmorIn			= 5,		// 道攻上限
	EAA_ExAttack		= 6,		// 物防下限
	EAA_ExDef			= 7,		// 物防上限
	EAA_InAttack		= 8,		// 魔防下限
	EAA_InDefense		= 9,		// 魔防上限
	EAA_HitRate			= 10,		// 命中
	EAA_Dodge			= 11,		// 闪避
	EAA_Crit_Rate		= 12,		// 暴击
	EAA_UnCrit_Rate		= 13,		// 反暴击
	EAA_MaxHP			= 14,		// hp
	EAA_MaxMP			= 15,		// mp

	EAA_Base_End		= 15,		// 基础属性，进阶只会洗出基础属性

	EAA_HPRegainRate	= 16,		// 体力恢复速度
	EAA_MPRegainRate	= 17,		// 真气恢复速度
	EAA_DecMP			= 18,		// 噬魔：攻击附带消耗敌人魔法值
	EAA_DecDerate		= 19,		// 破盾：攻击穿透敌人的魔法盾，造成额外百分比伤害（不超过没有魔法盾的伤害）
	EAA_DecDefense		= 20,		// 腐蚀：攻击附带减低敌人物防和魔防百分比
	EAA_RealDamage		= 21,		// 真伤：攻击附加真实伤害
	EAA_DecCritHarm		= 22,		// 减伤：当角色受到暴击伤害时，减少百分比暴击伤害(只减少暴击部分)
	EAA_ResistRule		= 23,		// 抵抗：当角色受到的单次伤害超过最大血量百分比时，进入抵抗状态
	EAA_ResistRate		= 24,		// 抵抗：进入抵抗状态后，减免百分比伤害
	EAA_Final_End
};

const INT16 ADDATT_TYPE_NUM = EAA_Base_End-EAA_Statr+1;
const INT16 ALL_ADDATT_TYPE_NUM = EAA_Final_End - EAA_Statr;

//武器可随到的附加属性
enum WeaponRoleAtt
{
	WRA_Null				= -1,
	WRA_ExAttack			= 0,		// 近战攻击
	WRA_HitRate				= 1,		// 命中
	WRA_Ren					= 2,		// 招架
	WRA_Cirt				= 3,		// 暴击
	WRA_CirtNum				= 4,		// 暴击伤害
	WRA_Potence				= 5,		// 力量
	WRA_Agility				= 6,		// 敏捷
	WRA_Brains				= 7,		// 智力
	WRA_Stamina				= 8,		// 耐力
	WRA_NUM					= 9,
};

// 饰物可随到的附加属性
enum DecorationRoleAtt
{
	DRA_Null				= -1,
	DRA_ExAttack			= 0,		// 近战攻击
	DRA_HitRate				= 1,		// 命中
	DRA_Cirt				= 2,		// 暴击
	DRA_CirtNum				= 3,		// 暴击伤害
	DRA_Potence				= 4,		// 力量
	DRA_Agility				= 5,		// 敏捷
	DRA_Brains				= 6,		// 智力
	DRA_Stamina				= 7,		// 耐力
	DRA_NUM					= 8,		
};

//防具可随到的附加属性
enum ArmorRoleAtt
{
	ARA_Null				= -1,
	ARA_Dodge				= 0,			// 闪避
	ARA_ExDefense			= 1,			// 近战防御
	ARA_Potence				= 2,			// 力量
	ARA_Agility				= 3,			// 敏捷
	ARA_Brains				= 4,			// 智力
	ARA_Stamina				= 5,			// 耐力
	ARA_FanCirt				= 6,			// 反暴击率
	ARA_FanCirtNum			= 7,			// 反暴击伤害
	ARA_Ren					= 8,			// 招架

	ARA_Armor_NUM			= 9,
};

// 饰品可随到的附加属性
enum ShiPinRoleAtt
{
	SP_Null					= -1,
	SP_Potence				= 0,		// 力量
	SP_Agility				= 1,		// 敏捷
	SP_Brains				= 2,		// 智力
	SP_Dodge				= 3,		// 闪避
	SP_HitRate				= 4,		// 命中
	SP_Cirt					= 5,		// 暴击
	SP_CirtNum				= 6,		// 暴击伤害
	SP_Ren					= 7,		// 招架
	SP_FanCirt				= 8,		// 反暴击率
	SP_FanCirtNum			= 9,		// 反暴击伤害

	SP_NUM					= 10,		
};

enum RideEquipState
{
	ERES_Idle		= 0,
	ERES_Riding		= 1,
};


//-----------------------------------------------------------------------------
// 结构定义
//-----------------------------------------------------------------------------
struct tagRoleAttEffect
{
	ERoleAttribute	eRoleAtt;
	int			nValue;

	tagRoleAttEffect()
	{ 
		nValue = 0;
		eRoleAtt = ERA_Null; 
	}
};

struct tagEquipQltyPct
{
	unsigned int				dw_data_id;
	int				nEquipQltyPct[X_EQUIP_QUALITY_NUM];	// 品级生成几率
};

struct tagCDTime
{
	unsigned int		dw_data_id;
	unsigned int		dw_time;		// 冷却时间(单位：毫秒)
};

struct tagEquipLevelUpEffect
{
	int		nExpLevelUp;		//升到下一级所需的经验值曾量
	int		nExpLevelUpShipin;	//饰品升到下一级所需的经验值曾量
	short	n16TalentAvail;		//得到的可投天资点
};

enum EItemConType
{
	EICT_Start		= 0,
	EICT_Null		= 0,

	EICT_Bag		= 1, // 背包
	EICT_Quest		= 2, // 任务物品栏
	EICT_Baibao		= 3, // 百宝袋
	EICT_RoleWare	= 4, // 角色仓库
	EICT_Equip		= 5, // 装备栏

	EICT_Shop		= 6, // 商店
	EICT_Ground		= 7, // 掉落

	EICT_PetEquip   = 8, // 宠物装备栏

	EICT_GuildWare	= 9, // 帮派仓库

	EICT_GDQuest	= 10, //悬赏任务类型

	EICT_MailItem	= 11,	// 邮件物品栏

	EICT_PaiMai		= 12,	// 拍卖

	EICT_KungfuEquip = 13,  //功法装备 gx add 2013.12.23

	EICT_StallItem	= 14,	//[bing] 摆摊物品栏

	EICT_Trading,//交易行（只是为了log显示用）

	EICT_End		= 16,

	//下面的是客户端使用的 gx modify 12-31
	EICT_CLIENT = 17,
	EICT_SKILL = 18,
	EICT_CommonLayer = 19,	//[bing] 公共列表拖拽

	EICT_KungfuBag	= 20, //功法包裹

	EICT_KungfuTemp	= 21, //功法临时包裹

	EICT_KungfuWare = 22, //功法仓库

	EICT_FinalEnd	= 23, //数组最终大小

	EICT_Inlay	= 24,	//镶嵌

	EICT_GuildPackage = 25, // 行会boss召唤特殊掉落背包
	EICT_GuildAdd     = 26, // 行会Boss召唤界面

	EICT_UpStar	= 1000, //不计算在容器内
	EICT_EquipShow =1001, //装备展示
};

struct tagItem
{
	INT64			n64_serial;		// 物品唯一序列号(不同堆叠物品不同)
	unsigned int			dw_data_id;		// 基本物品种类编号(同种物品相同)

	short			n16Num;			// 物品个数
	bool			bLock	: 1;	// 锁定标志
	bool			bUsing	: 1;	// 是否在对该物品进行其他操作
	bool			bCreateBind;	// 生成的时候是否绑定
	unsigned char			byBind;			// 绑定状态
	int			nUseTimes;		// 物品上技能使用次数

	unsigned int			dw_account_id;	// 玩家账号ID, 百宝袋和角色仓库用(同一帐号下角色共享)
	unsigned int			dwOwnerID;		// 拥有者, INVALID_VALUE表示没有拥有者

	EItemConType	eConType;		// 物品所在容器类型
	short			n16Index;		// 物品在容器中的位置
	short			n16Dummy;		// 内存对齐用

	EItemCreateMode	eCreateMode;	// 物品&装备生成方式
	unsigned int			dwCreateID;		// 外部生成该物品的ID，如：GMID，QuestID等, 界面上不显示
	
	unsigned int			dwCreatorID;	// 物品制作者，INVALID_VALUE表示系统生产, 界面上显示
	tagDWORDTime	dwCreateTime;	// 制作物品的时间

	unsigned int			dwNameID;		// 珍宝名字ID

	tagDWORDTime	dw1stGainTime;	// 第一个玩家获得时间
	
	tagDWORDTime	dwBindTime;	// 绑定时间

	EUpdateDBStatus	eStatus;		// 记录物品是否需要进行数据库操作

	union
	{
		int _tmp; //没有用
	};

	int  pScript;		// 脚本指针,没有用到
	unsigned int			dw_script_data[2];		// 脚本数据
	
	tagItem() { memset(this, 0, sizeof(*this)); }
	void SetOwner(unsigned int dwNewOwnerID, unsigned int dwNewAccountID) { dwOwnerID = dwNewOwnerID; dw_account_id = dwNewAccountID; }
	void SetPos(EItemConType eNewCon, short n16NewIndex) { eConType = eNewCon; n16Index = n16NewIndex; }
	void SetIndex(short n16NewIndex) { n16Index = n16NewIndex; }
	void SetUsing(bool bUsingState) { bUsing = bUsingState; }
	void SetUpdate(EUpdateDBStatus eNewUpdateStatus) { eStatus = eNewUpdateStatus; }
	INT64 GetKey() const { return n64_serial; }
	short GetNum() const { return n16Num; }
	void IncUseTimes(int nUse) { nUseTimes += nUse; SetUpdate(EUDBS_Update); }
 
	void SetBind(EBindStatus bindtype)
	{
		if (byBind == bindtype)
			return;

		byBind = bindtype;
		SetUpdate(EUDBS_Update);	
	}

	void SetBindTime(unsigned int bindtime)
	{
		dwBindTime = bindtime;
	}

	void SetBindTime(const tagDWORDTime& bindtime)
	{
		dwBindTime = bindtime;
		SetUpdate(EUDBS_Update);
	}

	void UpdateBind(EBindStatus bindtype , unsigned int bindtime)
	{
		byBind = bindtype;
		dwBindTime = bindtime;
	}

	int IsBind() const { return EBS_Unbind != byBind && EBS_Unknown != byBind; }
	int IsLock() const { return EBS_NPC_Bind == byBind || EBS_Bind == byBind;}
};

struct tagEquipSpec
{
	/******武器升级相关******/
	//gx moidify 2013.12.23 功法系统使用
	int					nLevel;			// 功法等级,也表示翅膀飞升等级
	int					nCurLevelExp;	// 功法当前经验,也表示翅膀飞升经验
	//end by gx

	///******装备鉴定时确定******/
	//short				n16MinDmg;		// 近战武器最小伤害
	//short				n16MaxDmg;		// 近战武器最大伤害
	//short				n16Armor;		// 近战防具护甲
	//
	// 附加属性
	tagRoleAttEffect	EquipAttitionalAtt[MAX_ADDITIONAL_EFFECT];	 //装备附加属性
	// 洗点属性
	int				EquipAttitional[MAX_RAND_ATT];

	signed char				byLuck;
	// 特殊属性
	//unsigned char				bySpecAtt;

	/******武器技能天赋******/
	//unsigned char				byTalentPoint;//已投天赋点
	//unsigned char				byMaxTalentPoint;//最大天赋点
	//INT8				byAddTalentPoint;//附加天赋点
	//unsigned int				dwSkillList[MAX_EQUIP_SKILL_NUM];//技能列表

	// 使用等级限制(便于外部因素作用)
	//unsigned char				byMinUseLevel;
	//unsigned char				byMaxUseLevel;

	// 品级
	unsigned char				byQuality;		//品质
	int							nRating;		//战斗力

	/******装备强化时修改******/
	//unsigned char				byFlareVal;		// 光晕

	unsigned char				byHoleNum;
	unsigned char				byConsolidateLevel;//强化等级

	unsigned int				dwHoleGemID[MAX_EQUIPHOLE_NUM];

	/******装备进阶******/
	int					nFusionExp; //融合经验值,修改为属性锁定状态,（属性位置）
	int					nSpecifyAtt; //指定属性状态，（属性枚举）
	/******装备星级******/
	int					nStarLv;	//星级
	/******翅膀属性******/
	int					nAttExalt;	//基础属性提升百分比
	/******触发器上次生效时间******/
	DWORD				dwTriggerTime[MAX_EQUIP_BUFF_NUM];
	BYTE				byHoleGemBindType[MAX_EQUIPHOLE_NUM];
	/******功法锁定******/
	BYTE				byGFLock;
	/******方法******/
	tagEquipSpec() { memset(this, 0, sizeof(*this));}

	unsigned int getGemNum() const
	{ 
		unsigned int dwNum = 0;
		for (int i = 0; i < MAX_EQUIPHOLE_NUM; i++)
		{
			if ( dwHoleGemID[i] != 0 && dwHoleGemID[i] != -1)
			{
				dwNum++;
			}
		}
		return dwNum;
	}
};

enum EEquipPos	// 装备部位
{
	EEP_Null			= -1,
	EEP_Start			= -1, 

	EEP_Equip_Start		= 0,

	EEP_RightHand		= 0,//主手	武器			可见
	EEP_Head			= 1, //头	头盔			不可见
	EEP_Body			= 2, //躯干	铠甲			可见
	EEP_Feet			= 3, //脚	鞋子			可见
	EEP_Body1			= 4, //背部披风			可见
	EEP_Wrist1			= 5, //腕	护腕			不可见
	EEP_Wrist2			= 6, //腕	护腕			不可见
	EEP_Waist			= 7, //腰	腰带			不可见
	EEP_Dress_End		= 8, //防具总数


	EEP_Neck			= 8, //颈	项链			不可见
	EEP_Finger1			= 9,//戒指	戒指		不可见
	EEP_Finger2			= 10,//戒指	戒指		不可见
	EEP_Shipin1			= 11,//饰品	徽章		 	不可见

	EEP_Fashion			= 12, // 时装

	//gx add 2014.3.22 特戒
	EEP_Special_Finger_Start = 13,
	EEP_Spcial_Finger_ZZ = 13,//至尊
	EEP_Spcial_Finger_TZ = 14,//天之
	EEP_Spcial_Finger_DZ = 15,//地之
	EEP_Spcial_Finger_JL = 16,//精灵
	EEP_Special_Finger_End = 16,
	//end by gx
	EEP_Equip_End		= 16,

	EEP_Ride			= 17, // 坐骑 gx modify 2014.3.22
	EEP_Ilu_Weapon		= 18,
	EEP_MaxEquip		= 19, // 装备栏栏位数


	EEP_End

};

//gx add 2013.12.23功法装备栏位置定义

enum EKungfuEquipPos
{
	EKEP_Null			= -1,
	EKEP_Start			= -1, 
	EKEP_Equip_Start		= 0,

	EKEP_Head			= 0,//头
	EKEP_LeftShoulder	= 1,//左肩
	EKEP_RightShoulder  = 2,//右肩
	EKEP_LeftHand		= 3,//左手
	EKEP_RightHand		= 4,//右手
	EKEP_LeftLeg		= 5,//左腿
	EKEP_RightLeg		= 6,//右腿
	EKEP_Dang			= 7,//裆部
	EKEP_Neck			= 8,//颈
	EKEP_Waist			= 9,//腰

	EKEP_End
};

struct tagEquip: public tagItem
{
	tagEquipSpec	equipSpec;
	BYTE GetGFLock(){return equipSpec.byGFLock;}
	void SetGFLock(EGFLockStatus lockState)
	{
		equipSpec.byGFLock = lockState;
	}
};

//-----------------------------------------------------------------------------
// 常量定义 -- 和结构相关
//-----------------------------------------------------------------------------
const int SIZE_ITEM						= sizeof(tagItem);
const int SIZE_EQUIP					= sizeof(tagEquip);
const int SIZE_EQUIPSPEC				= sizeof(tagEquipSpec);

//-----------------------------------------------------------------------------
// 装备显示信息;
//-----------------------------------------------------------------------------
struct tagEquipViewInfo
{
	unsigned int				dw_data_id;
	int				nRating; //含义改为 战斗力;
	unsigned char				byConsolidateLevel;									// 强化等级;
	unsigned char				byConsolidateLevelStar;								// 强化星级; 含义改为品质
	unsigned char				byBind;												// 绑定状态;
	unsigned char				byHoldNum;											// 镶嵌孔数; 改为是否装备（0:装备、1:功法）
	int				nUseTimes;											// 使用次数;
	tagRoleAttEffect	EquipAttitionalAtt[MAX_ADDITIONAL_EFFECT];			// 附加属性;
	unsigned int				dwHoleGemID[MAX_EQUIPHOLE_NUM];
	short				n16MinDmg;											// 修改为武器的幸运
	//short				n16MaxDmg;											// 近战武器最大伤害;
	//short				n16Armor;											// 防具护甲
	int					nFusionExp;											// 融合经验值
	int					nStarLv;											// 星级
	int					nLevel;												// 功法等级或飞升等级
};

struct tagEquipViewInfoEx : public tagEquipViewInfo
{
	short		n_num;
};


// 物品系统相关函数;
class ItemHelper
{
public:
	// 获取强化基础几率
	static int GetUpstarsPro(unsigned char byLevel)
	{
		int fpro = 0;
		switch (byLevel)
		{
		case 0:
		case 1:
		case 2:
			fpro = 10000;
			break;
		case 3:
			fpro = 8000;
			break;
		case 4:
			fpro = 6000;
			break;
		case 5:
			fpro = 4000;
			break;
		case 6:
			fpro = 2000;
			break;
		case 7:
		case 8:
			fpro = 1000;
			break;
		case 9:
			fpro = 100;
			break;
		}

		return fpro;
	}

	static int GetUpstarsAddPro(int number)
	{
		switch(number)
		{
		case 0: return 0;
		case 1: return 500;
		case 2: return 900;
		case 3: return 1200;
		case 4: return 1400;
		case 5: return 1500;
		case 6: return 1600;
		case 7: return 1700;
		case 8: return 1800;
		case 9: return 1900;
		case 10: return 2000;
		}
		return 2000;
	}

	//取得打孔石id
	static unsigned int GetChiselTypeID(int nCurHoldNum)
	{
		unsigned int dwTypeID = 0;
		switch(nCurHoldNum)
		{
		case 0: dwTypeID = 4121001; break;
		case 1: dwTypeID = 4121002; break;
		case 2: dwTypeID = 4121003; break;
		case 3: dwTypeID = 4121004; break;
		case 4: dwTypeID = 4121005; break;
		case 5: dwTypeID = 4121006; break;
		default: break;
		}
		return dwTypeID;
	}

	//取得强化石id
	static unsigned int GetQiangHuaStoneTypeID(int nCurLevel, bool bAttack )
	{
		if(bAttack)
		{
			if	   (nCurLevel <= 10)	return 4111101;
			else if(nCurLevel <= 20)	return 4111102;
			else if(nCurLevel <= 30)	return 4111103;
			else if(nCurLevel <= 40)	return 4111104;
			else if(nCurLevel <= 50)	return 4111105;
			else if(nCurLevel <= 60)	return 4111106;
			else if(nCurLevel <= 70)	return 4111107;
			else if(nCurLevel <= 80)	return 4111108;
			else if(nCurLevel <= 90)	return 4111109;
			else if(nCurLevel <= 100)	return 4111110;
			else return 0;
		}
		else
		{
			if	   (nCurLevel <= 10)	return 4111201;
			else if(nCurLevel <= 20)	return 4111202;
			else if(nCurLevel <= 30)	return 4111203;
			else if(nCurLevel <= 40)	return 4111204;
			else if(nCurLevel <= 50)	return 4111205;
			else if(nCurLevel <= 60)	return 4111206;
			else if(nCurLevel <= 70)	return 4111207;
			else if(nCurLevel <= 80)	return 4111208;
			else if(nCurLevel <= 90)	return 4111209;
			else if(nCurLevel <= 100)	return 4111210;
			else return 0;
		}
	}

	//取得神石ID
	static unsigned int GetShenStoneTypeID(int nCurLevel)
	{
		if	   (nCurLevel <= 30)	return 4112101;
		else if(nCurLevel <= 50)	return 4112102;
		else if(nCurLevel <= 70)	return 4112103;
		else return 0;
	}

	//取得固星石ID
	static unsigned int GetGuxingShiTypeID(int nCurLevel)
	{
		if	   (nCurLevel < 3)		return 0;
		else if(nCurLevel == 3)		return 4112201;
		else if(nCurLevel == 4)		return 4112202;
		else if(nCurLevel == 5)		return 4112202;
		else if(nCurLevel == 6)		return 4112203;
		else if(nCurLevel == 7)		return 4112204;
		else if(nCurLevel == 8)		return 4112204;
		else if(nCurLevel == 9)		return 4112205;
		else if(nCurLevel == 10)	return 0;
		else return 0;
	}

	//取得npc打造概率提升道具id
	static unsigned int GetProduceQualityID(int nCurLevel, unsigned char byQuality)
	{
		if (nCurLevel <= 30)		
		{
			switch(byQuality)
			{
			case 2: return 3420201;
			case 3: return 3420206;
			}
		}
		else if(nCurLevel <= 40)	
		{
			switch(byQuality)
			{
			case 2: return 3420202;
			case 3: return 3420207;
			}
		}
		else if(nCurLevel <= 50)
		{
			switch(byQuality)
			{
			case 2: return 3420203;
			case 3: return 3420208;
			}
		}
		else if(nCurLevel <= 60)
		{
			switch(byQuality)
			{
			case 2: return 3420204;
			case 3: return 3420209;
			}
		}
		else if(nCurLevel <= 70)
		{
			switch(byQuality)
			{
			case 2: return 3420205;
			case 3: return 3420210;
			}
		}
		return 0;
	}
	//取得npc打造概率提升道具提升属性
	static int GetProduceQualityAttValue(int nCurLevel, unsigned char byQuality)
	{
		if (nCurLevel <= 30)		
		{
			switch(byQuality)
			{
			case 2: return 1;
			case 3: return 2;
			}
		}
		else if(nCurLevel <= 40)	
		{
			switch(byQuality)
			{
			case 2: return 2;
			case 3: return 3;
			}
		}
		else if(nCurLevel <= 50)
		{
			switch(byQuality)
			{
			case 2: return 3;
			case 3: return 4;
			}
		}
		else if(nCurLevel <= 60)
		{
			switch(byQuality)
			{
			case 2: return 4;
			case 3: return 5;
			}
		}
		else if(nCurLevel <= 70)
		{
			switch(byQuality)
			{
			case 2: return 5;
			case 3: return 6;
			}
		}
		return 0;
	}
	//取得npc打造概率提升道具提升属性最大值
	static int GetProduceQualityAttValueMax(int nCurLevel)
	{
		if (nCurLevel < 20)
			return 1;
		else if (nCurLevel < 30)
			return 2;
		else if (nCurLevel < 40)
			return 3;
		else if (nCurLevel < 50)
			return 4;
		else if (nCurLevel < 60)
			return 7;
		else if (nCurLevel < 70)
			return 9;

		return 11;
	}

	// 取得坐骑强化灵魂石ID
	static unsigned int GetRideUpgradeSoulStoneTypeID( int nCurLevel )
	{
		switch(nCurLevel)
		{
		case 0:
		case 1:
		case 2:
			return 4211001;
			break;
		case 3:
		case 4:
		case 5:
			return 4211002;
			break;
		case 6:
		case 7:
		case 8:
			return 4211003;
			break;
		case 9: return 4211004; break;
		default: return 4211004; break;
		}
	}

	// 获得武器融合丹id
	static unsigned int GetFusionDanTypeID( /*int nCurLevel*/ )
	{
		return 4150001;
	}

	// 取得坐骑神石ID
	static unsigned int GetRideUpgradeGodStoneTypeID()
	{
		return 4212001;
	}

	// 获取装备重置属性元宝需求
	static int GetEquipReattYuanbao(int nLevel)
	{
		if (nLevel>=45 && nLevel <= 50)
		{
			return 50;
		}
		if (nLevel>50 && nLevel <= 55)
		{
			return 250;
		}
		if (nLevel>55 && nLevel <= 60)
		{
			return 450;
		}
		if (nLevel>60 && nLevel <= 65)
		{
			return 650;
		}
		if (nLevel>65 && nLevel <= 70)
		{
			return 850;
		}
		return 0;
	}

	// 获取装备重置属性强化需求
	static int GetEquipReattStar(int nLevel)
	{
		if (nLevel>=45 && nLevel <= 50)
		{
			return 0;
		}
		if (nLevel>50 && nLevel <= 55)
		{
			return 4;
		}
		if (nLevel>55 && nLevel <= 60)
		{
			return 7;
		}
		if (nLevel>60 && nLevel <= 65)
		{
			return 7;
		}
		if (nLevel>65 && nLevel <= 70)
		{
			return 7;
		}
		return 0;
	}

	// 洗礼战功消耗
	static int GetXiliExplios(unsigned char byEquipLevel)
	{
		if (byEquipLevel >= 30 && byEquipLevel < 40)
		{
			return 50;
		}
		if (byEquipLevel >= 40 && byEquipLevel < 50)
		{
			return 200;
		}
		if (byEquipLevel >= 50 && byEquipLevel < 60)
		{
			return 800;
		}
		if (byEquipLevel >= 60 && byEquipLevel < 70)
		{
			return 1500;
		}
		if (byEquipLevel >= 70)
		{
			return 2000;
		}
		return 0;
	}

	static double getQianghuaQualityParam(unsigned char byQuality)
	{
		return pow(2.0, byQuality*1.0);
	}

	static int getQianghuaParam(unsigned char byStar)
	{
		if (byStar >= 0 && byStar <=2)
		{
			return 10;
		}
		if (byStar >= 3 && byStar <=5)
		{
			return 20;
		}
		if (byStar >= 6 && byStar <=8)
		{
			return 30;
		}
		if (byStar >= 9)
		{
			return 100;
		}
        return 10;
	}
};

//-----------------------------------------------------------------------------
#pragma pack(pop)

#endif //ITEMDEFINE_H
