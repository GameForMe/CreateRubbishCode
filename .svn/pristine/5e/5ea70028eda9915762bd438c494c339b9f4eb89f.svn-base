#ifndef SERVERACTIVITYUI_H
#define SERVERACTIVITYUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
using namespace cocos2d;
using namespace cocos2d::extension;

class ServerActivityUiLayer;
class TouchSprite;

class ServerActivityUi : public UiInterface
{
public:
	ServerActivityUi();
	~ServerActivityUi();
	virtual CCNode *openUi();
	ServerActivityUiLayer *getUiLayer();
	void updateData();
	int getServerActivityDay();
};

class ServerActivityUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eNodeTag
	{
		NT_ItemBegin = 10,
		NT_ItemEnd = 16,
		NT_ItemNum = 6,
		NT_ItemNodeBegin = 100
	};


	friend class ServerActivityUi;

public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(ServerActivityUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAwardBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onServerActivityBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onFanliCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChongZhiBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

protected:
	eServerActivityUiTag getCurrentSelect() const { return _curentSelect; }

	void onLevelSprintTouched(TouchSprite*, bool);	//等级冲刺;
	void onProfessPowerTouched(TouchSprite*, bool);	//职业战力;
	void onCoolMountTouched(TouchSprite*, bool);	//炫酷坐骑;
	void onShangChengCraftTouched(TouchSprite*, bool);	//沙城争霸;
	void onHonourGiftTouched(TouchSprite*, bool);	//尊享大礼;
	void onCharmLauchTouched(TouchSprite*, bool);	//魅力四射;
	void onGodsTopTouched(TouchSprite* , bool); //众神之巅;

	void onTabSelectChanged(eServerActivityUiTag src, eServerActivityUiTag cur);

	TouchSprite *getTabSprite(eServerActivityUiTag tag);
	void setTabSpriteSelect(eServerActivityUiTag tabTag, bool select);
	int getItemUnderPoint(const CCPoint &point);

	void showEveryDayTop(int day);
	int getServerActivityDay(){return _serverday;}
	void runAnimation();
	void stopAnimation();

	void setFanliUiShow(bool show);

private:
	void updateData();
/*	void updateItem(int reward[3]);*/

private:
	int _serverday; //当前开服天数是第几天;
	CCSprite *_frame;
	CCSprite *_titleframe;
	CCSprite *_fanliframe;
	CCSprite *_selectSprite;
// 	CCSprite *_selectSprite1;
// 	CCSprite *_selectSprite2;
// 	CCSprite *_selectSprite3;
// 	CCSprite *_selectSprite4;
// 	CCSprite *_selectSprite5;
// 	CCSprite *_selectSprite6;
	CCSprite *_btnEffect;
	CCLabelTTF* _roleLabel;
	CCLabelTTF* _levelLabel;
	CCPoint _itemPos[NT_ItemNum];
	CCSprite *_finishSprite[SAUT_DayNum];
	unsigned int _itemDataId[NT_ItemNum];
	eServerActivityUiTag _curentSelect;
	std::map<eServerActivityUiTag, std::string> _highlightLab;
	std::map<eServerActivityUiTag, std::string> _normalLab;
	std::set<std::string> _plist;							//保存特效plist文件名称

};

#endif //SERVERACTIVITYUI_H