#ifndef MYSTERYSHOPUI_H
#define MYSTERYSHOPUI_H
#include "MysteryBoxUi.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class MysteryShopItemFrame;
enum
{
	Gem_Success = 0,
	Gem_Version_Error,
	Gem_Index_Error,
	Gem_Sell_Done,
	Gem_Can_Buy_Num,
	Gem_Money_Not_Enough,
	Gem_YuanBao_Not_Enough,
	Gem_Diamond_Not_Enough,
	Gem_Bag_Space_Not_Enough

};
class MysteryShopItem : public ListItem
{
	enum eNodeTag
	{
		NT_LEFT		= 0 ,
		NT_RIGHT,		
	};

	enum eHorizonPos
	{
		HP_LEFT			= 100,//-25
		HP_RIGHT			= 270,//-25
	};

public:
	MysteryShopItem();
	virtual ~MysteryShopItem();
	virtual CCSize getContentSize();
	void setLeftData(int unItemId,int nItemPrice,ItemNode* item,int nTipType,int nItemMoneyType);
	void setRightData(int unItemId,int nItemPrice,ItemNode* item,int nTipType,int nItemMoneyType);
	void SetLeftItemSelectSpriteVisiabl(bool nCanSee);
	void SetRightItemSelectSpriteVisiabl(bool nCanSee);
	float getItemHeight();
	CCNode* getLeftItemNode();
	CCNode* getRightItemNode();
	void SetLeftVerSionIndex(int nVersionIndex);
	void SetRightVerSionIndex(int nVersionIndex);
	virtual void onTouch(CCTouch *touch);
	bool IsTouchItemNode(CCTouch *touch);
private:
	/*LabelFT *getLabel(eNodeTag tag);
	LabelFT* createLabel(const std::string &text);*/
	void updateContent();
private:
	CCSize _contentSize;
	MysteryShopItemFrame* m_frameLeft;
	MysteryShopItemFrame* m_frameRight;
	std::set<std::string> _usedPlistFile;
	std::set<std::string> _usedPlistFile1;	
};
class MysteryShopItemFrame 
	: public CCSprite
	, public cocos2d::extension::CCBSelectorResolver
	, public CCTouchDelegate
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	MysteryShopItemFrame();
	~MysteryShopItemFrame();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MysteryShopItemFrame, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	void RemoveCCLabelTTF();
	void SetItemName(string strname);
	void SetItemSelectSpriteVisiabl(bool nCanSee);
	void SetItemPrice(string strPrice);
	void SetItemNode(ItemNode* pItemNode);
	void SetMoneyType(int nType);
	void SetItemTip(int nTip);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	void OnSellLeftItemClick( CCObject * pSender, CCControlEvent pCCControlEvent );
	virtual void onEnter();
	virtual void onExit();
	int GetVersionIndex(){return versionIndex;}
	void SetVerSionIndex(int nVersionIndex);
	void ShowItemTip( CCTouch *pTouch);
	bool IsTouchItemNode( CCTouch *pTouch);
private:
	CCNode* m_pItemCCNode;
	CCLabelTTF*m_pItemName;
	CCLabelTTF*m_pPriceNum;
	CCSprite*m_pItemSelect;
	CCSprite* MoneyType;
	CCSprite* m_ItemTip;
	CCSprite* m_ItemSellOut;
	CCSprite* m_ItemLimit;
	LabelFT* m_pNewItemName;
	LabelFT* m_pNewPriceNum;
	int versionIndex;
};

class MysteryShopItemFrameLoader : public CCSpriteLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(MysteryShopItemFrameLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(MysteryShopItemFrame);
};

class MysteryShopUi : public UiInterface
{
public:
	MysteryShopUi();
	~MysteryShopUi();
	virtual CCNode* openUi();
	void getTresureData(s_net_cmd* cmd);		//请求打开宝箱信息
	void UpdateNoticeList();
	void upDataItemList();
	void UpdateNoticeList1();
	void upDataItemList1();
	void upDataFreshTime(unsigned int FreshTime);
	void upDataMysteryItemList();
	void ShopCanTouchEnable(bool bCanTouch);
	float GetGroundHight();
	void InitFrame();
	void updateMoney();
	bool HideSelectSprite(CCTouch *pTouch,bool IsLeft);
	void updateRoleName( int id, const std::string& name );
	void SetSelectIndex(int nIndex);
	void IsMysteryShop(bool bIsMystery);
	bool GetIsMysteryShop();
	bool IsLeftItem(CCTouch *pTouch);
	bool IsRightItem(CCTouch *pTouch);
	void showErrorMessage(unsigned int errorNum);
	bool IsTouchItemNode(CCTouch *pTouch);
	void SetSelectItemNode(int nIndex);
	int GetSelectItemNode();
	void ClearSelectItemNode();
};

class MysteryShopUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum MsteryBoxUiTag
	{
		TYPE_MONEY_NOAUTO = 2,
		TYPE_MONEY_AUTO = 3,
		TYPE_YUANBAO_BOX = 4
	};
	enum MysteryShopUiLayerNodeTag
	{
		MTN_MysteryShop = 1,
		MTN_TreasureShop = 2,
		MTN_YuanBaoNum = 6,
		MTN_DiamondNum = 7,
		MTN_MoneyNum = 8,
		MTN_NoticeNode = 9,
		MTN_ItemNode = 10,
		MTN_FreshText = 11,
		MTN_FreshTime = 12,
		MTN_FreshTimeText = 13,
		MTN_FreshButton = 14,
		MTN_BuyButton = 15,
		MTN_CloseButton = 16,
		MTN_OtherBuyInfo = 17


	};

public:
	MysteryShopUiLayer();
	~MysteryShopUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MysteryShopUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject* pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject* pTarget, const char* pSelectorName);

	void onNodeLoaded(cocos2d::CCNode* pNode, cocos2d::extension::CCNodeLoader* pNodeLoader);
	virtual void onEnter();
	void SetDelayShow(bool value);
	void SetLoadingImage();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	void upDataItemList();
	void upDataItemList1();
	void updateMoney();
	void upDataMysteryItemList();
	void upDataNoticeList();
	void upDataNoticeList1();
	void ShopCanTouchEnable(bool bCanTouch);
	void updateRoleName( int id, const std::string& name );
	void InitFrame();
	bool GetIsMysteryShop(){return m_IsMystery; }
	bool HideSelectSprite(CCTouch *pTouch,bool IsLeft);
	void SetSelectIndex(int nIndex);
	void SetSelectItemNode(int nIndex);
	int GetSelectItemNode(){return m_SelectItemNode;};
	void ClearSelectItemNode(){m_SelectItemNode = -1;};
	float GetGroundHight();
	float GetGroundNoticeHight();
	void IsMysteryShop(bool bIsMystery);
	bool IsLeftItem(CCTouch *pTouch);
	bool IsRightItem(CCTouch *pTouch);
	void upDataFreshTime(unsigned int FreshTime);
	void showErrorMessage(unsigned int errorNum);	
	bool IsTouchItemNode(CCTouch *pTouch);
private:
	//new
	
	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onFreshPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent );
	void onBuyPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent );	
	void onBuyImpl( bool isOk, int num );
	void TipOK();
	void TipOK1();

private:

	CCSprite * frame;
	LabelFT *m_YuanBaoNum;
	LabelFT *m_MoneyNum;
	LabelFT *m_DiamondNum;
	LabelFT *m_FreshTime;
	LabelFT *m_FreshTimeText;
	CCSprite *m_MysteryShop;
	CCSprite *m_TreasureShop;
	CCNode *_contentNotice;
	CCNode *_contentItem;
	CCScrollView *_scrollViewnNotice;
	CCScrollView *_scrollViewnItem;
	CCNode* buttonClose;
	CCNode* buttonFresh ;
	CCNode* buttonBuy;
	VerticalList<MysteryShopItem>*_verticalItemList;
	VerticalList<MysteryBoxItem>*_verticalNoticeList;
	bool m_IsMystery;
	bool m_CanTouch;
	MysteryShopItem* curSelect;
	int m_SelectItem;
	int m_SelectItemNode;
	CCPoint ptBegin;
	bool m_IsLeft;
	unsigned int m_num;
	CCSprite* m_pDelaySp;

	
};
class MysteryShopUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(MysteryShopUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(MysteryShopUiLayer);
};
#endif //MYSTERYBOXUI_H