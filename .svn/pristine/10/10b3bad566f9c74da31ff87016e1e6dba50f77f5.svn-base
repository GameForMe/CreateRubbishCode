/**
 *	@file		ZZZAcquireLayer.cpp
 *	@author		shenyaoyan
 *	@date		2016/05/19
 *	@version	
 *	@brief		主宰者道具获取成功的界面
 */

#include "ZZZAcquireLayer.h"
#include "CommonClient.h"
#include "World.h"
#include "UiLoader.h"
#include "ZZZTitleTipsUI.h"
#include "CommonView.h"

ZZZAcquireLayer::ZZZAcquireLayer()
	: m_frame(NULL)
	, m_nodeTitle(NULL)
	, m_titleSprite(NULL)
	, m_titleSpriteDi(NULL)
	, m_titleSpriteZi(NULL)
	, m_nodeZuoQi(NULL)
	, m_zuoQiLabel(NULL)
	, m_zuoQiSprite(NULL)
	, m_nodeZhuangYuan(NULL)
	, m_zhuangYuanLabel(NULL)
	, m_zhuangYuanSprite(NULL)
	, m_nodeBiaoZhi(NULL)
	, m_biaoZhiLabel(NULL)
	, m_biaoZhiSprite(NULL)
{
	for( int i = 0; i<MAX_ZZZ_REWAED_LABEL_NUMBER ; ++i )
	{
		m_titleLabel[i]=NULL;
		m_titleNumber[i]=NULL;
	}
}
	
ZZZAcquireLayer::~ZZZAcquireLayer()
{

}

bool ZZZAcquireLayer::onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode)
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_frame);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCNode*, m_nodeTitle);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_titleSprite);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_titleSpriteDi);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_titleSpriteZi);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCNode*, m_nodeZuoQi);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*,m_zuoQiLabel);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_zuoQiSprite);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCNode*, m_nodeZhuangYuan);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_zhuangYuanLabel);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_zhuangYuanSprite);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCNode*, m_nodeBiaoZhi);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_biaoZhiLabel);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_biaoZhiSprite);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_disLabel);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_titlePro);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_titleContinue);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_titleTime);
	return false;
}
	
SEL_MenuHandler ZZZAcquireLayer::onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

SEL_CCControlHandler ZZZAcquireLayer::onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

void ZZZAcquireLayer::onNodeLoaded(CCNode * pNode, CCNodeLoader * pNodeLoader)
{
	CC_ASSERT(m_frame);
	
	Helper::replaceLabelTTFWithLabelFTAndRemove(m_disLabel);
	m_timeFT = Helper::replaceLabelTTFWithLabelFTAndRemove(m_titleTime);

	for( int i = 0; i<MAX_ZZZ_REWAED_LABEL_NUMBER ; ++i )
	{
		m_titleLabel[i] = Helper::replaceLabelTTFWithLabelFTAndRemove(dynamic_cast<CCLabelTTF*>(m_nodeTitle->getChildByTag(ZZZ_TITLE_LABEL+i)));
		m_titleNumber[i] = Helper::replaceLabelTTFWithLabelFTAndRemove(dynamic_cast<CCLabelTTF*>(m_nodeTitle->getChildByTag(ZZZ_TITLE_NUMBER+i)));
		CC_ASSERT(m_titleLabel[i]);
		CC_ASSERT(m_titleNumber[i]);
	}
}

void ZZZAcquireLayer::onEnter()
{
	setTouchPriority(-10);
	setTouchEnabled(true);
	CCLayer::onEnter();
}
	
void ZZZAcquireLayer::onExit()
{
	CCLayer::onExit();
}

bool ZZZAcquireLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
{
	close();
	return true;
}
	
ZZZAcquireLayer* ZZZAcquireLayer::getInstance()
{
	static ZZZAcquireLayer instance;
	return &instance;
}
	
ZZZAcquireLayer* ZZZAcquireLayer::open()
{
	CCScene* scene = World::getInstance()->getScene();
	if (scene)
	{
		CCNodeLoaderLibrary* ccNodeLoaderLibrary = CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
		CCBReader* ccbReader = new CCBReader(ccNodeLoaderLibrary);
		string fileName = CFGReader::instance()->get_profile_string("Art","UI","") + "zhuzaizhehuode.ccbi";
		CCNode* node = ccbReader->readNodeGraphFromFile(fileName.c_str());
		ccbReader->release();
		if (node != NULL)
		{
			scene->addChild(node,WZ_POPUI,WCT_ZZZ_RECEIVE_REWARD_UI);
		}
		ZZZAcquireLayer* acquireLayer = dynamic_cast<ZZZAcquireLayer*>(node);
		return acquireLayer;
	}
	return NULL;
}
	
void ZZZAcquireLayer::close()
{
	CCScene* scene = World::getInstance()->getScene();
	if (scene)
	{
		scene->removeChildByTag(WCT_ZZZ_RECEIVE_REWARD_UI);
	}
}
	
void ZZZAcquireLayer::setData(unsigned int id)
{
	switch(id)
	{
	case ZZZTITLEZHAN:
	case ZZZTITLEFA:
	case ZZZTITLEDAO:
		setDataTitle(id);
		break;
	case ZZZFLYDRAGON:
		setDataFLD();
		break;
	case ZZZMANOR:
		setDataManor();
		break;
	case ZZZSIGN:
		setDataSign();
		break;
	default:
		break;
	}
}
	
void ZZZAcquireLayer::setDataTitle(unsigned int id)
{
	m_nodeBiaoZhi->setVisible(false);
	m_nodeZhuangYuan->setVisible(false);
	m_nodeZuoQi->setVisible(false);
	m_nodeTitle->setVisible(true);

	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM ItemTipData WHERE id = ?");
	cmd->set_integer32(1 , id);
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	while(table->retrieve_row())
	{
		unsigned int index = table->get_index("desc");
		setTitleTimeData(table->get_text(index));
		index = table->get_index("sdesc");
		setTitleLabelData(table->get_text(index));
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
}
	
void ZZZAcquireLayer::setDataFLD()
{
	m_nodeBiaoZhi->setVisible(false);
	m_nodeTitle->setVisible(false);
	m_nodeZhuangYuan->setVisible(false);
	m_nodeZuoQi->setVisible(true);
}
	
void ZZZAcquireLayer::setDataManor()
{
	m_nodeBiaoZhi->setVisible(false);
	m_nodeTitle->setVisible(false);
	m_nodeZuoQi->setVisible(false);
	m_nodeZhuangYuan->setVisible(true);
}
	
void ZZZAcquireLayer::setDataSign()
{
	m_nodeTitle->setVisible(false);
	m_nodeZhuangYuan->setVisible(false);
	m_nodeZuoQi->setVisible(false);
	m_nodeBiaoZhi->setVisible(true);
}

void ZZZAcquireLayer::setTitleLabelData(const std::string& desc)
{
	std::vector<std::string> titleProperty = split_str(desc,'\\');
	int number = 0;
	for (std::vector<std::string>::iterator itor = titleProperty.begin(); itor != titleProperty.end(); ++itor,++number)
	{
		int dev = (*itor).find_first_of("+");
		std::string descStr = (*itor).substr(0,dev);
		std::string conStr = (*itor).substr(dev,(*itor).length());
		m_titleLabel[number]->setString(descStr.c_str());
		m_titleLabel[number]->setVisible(true);
		m_titleNumber[number]->setString(conStr.c_str());
		m_titleNumber[number]->setVisible(true);
	}
	for ( ; number!=MAX_ZZZ_REWAED_LABEL_NUMBER ; ++number )
	{
		m_titleLabel[number]->setVisible(false);
		m_titleNumber[number]->setVisible(false);
	}
}

void ZZZAcquireLayer::setTitleTimeData(const std::string& desc)
{
	int dev = desc.find_first_of("\\");
	if (dev != std::string::npos)
	{
		std::string titleContinue = desc.substr(dev+1,desc.length());
		m_timeFT->setString(titleContinue.c_str());
	}
	else
	{
		m_timeFT->setString(desc.c_str());
	}
}
