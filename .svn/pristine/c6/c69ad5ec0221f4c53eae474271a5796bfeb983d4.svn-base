/**
 *	@file		NewRoleTitleUi.h
 *	@author		zhangyajie
 *	@date		2016/06/14
 *	@version	13
 *	@brief		新版的称号界面
 */

#ifndef NEW_ROLETITLEUI_H
#define NEW_ROLETITLEUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
using namespace cocos2d;
using namespace cocos2d::extension;

#include "FrameSprite.h"
#include "ListControl.h"
#include "UiInterface.h"
#include "NormalLayer.h"
#include "f_event_system.h"
#include "GameEventDefine.h"
#include "role_title_protocol.h"


#define NUM_TITLE_WEAR_MAX 3

struct ST_TitleData
{
    unsigned int dwID;	// 称号id
    std::string				stName;//名称
/*    std::string				stAtt;//属性*/
    std::string				stDesc;//描述
    std::string				stDesc2;//描述
    std::string				colorStr;//颜色
    std::string				bodyEft;//周身特效
    std::string				stGetMode;//获取方式
    unsigned int			nLinkGetUi;//获取方式
    unsigned int			classType;//显示类型，0不显示  1 战士显示，2法师显示，3道士显示，4全职业显示
    unsigned int			nTimeLimit;//称号的时限
    unsigned int			nShwoForce;//称号的时限
    bool					b_normal_eft;//周身特效是否是普通特效 false为贴地特效
    bool					b_eft;//是否是特效
};

class TouchSprite;
class  CheckButton;
class RoleTitleUiLayer;
class NewRoleTitleItem;

class NewRoleTitleUi : public UiInterface
{
    friend class NewRoleTitleUiLayer;
public:
    virtual CCNode *openUi();
    void initTitleDataInfo();//初始化 Title数据
    void refreshTitleList();
    void clearData();
    std::list<unsigned int>& getHaveList(){ return m_listTitle;};
    std::list<unsigned int>& getNotHaveList(){ return m_listNotTitle;};
private:
    std::list<unsigned int> m_listWearTitle;//已经穿上的称号
    std::list<unsigned int> m_listFixedTitle;//已经拥有的称号列表 固定位置 为了刷新 重新定位位置
	std::list<unsigned int> m_listTitle;//已经拥有的称号列表，如果有修改 只刷新这个列表 会修改
	std::list<unsigned int> m_listNotTitle;//未拥有的称号列表放在最后
};


class NewRoleTitleUiLayer : public NormalLayer
{
	enum e_TitleUiTag
	{
		NT_MainFrame = 0,
		NT_Title_Wear_Des = 101,
		NT_Title_Wear_Num = 102,
		NT_EquipTab = 20,
		NT_AttrTab = 21,
		NT_MsgTab = 22,
	};
public:
	NewRoleTitleUiLayer();
	~NewRoleTitleUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(NewRoleTitleUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onEnter();
	virtual void onExit();

	void onClose(CCObject * pSender, CCControlEvent pCCControlEvent);
	void initNode();
	void refershNode();
	void onOtherUiSelected(TouchSprite* pNode, bool);
	void on_event_refresh_list( refersh_title_ui_list* evt );
	void on_event_refresh_desc(refersh_title_des_ui* evt);
private:
	CCNode*			m_pMainframe;
	CCNode*			m_pNodeDes;
	CCNode*			m_pNodeDescIcon;
	CCNode*			m_pNodeDescBoard;
	LabelFT*		m_pFtWearNum;
	CCScale9Sprite* m_pSprite9DesNode;
	ListControl*	m_list;
	NewRoleTitleUi* m_pUI;

	typedef std::map<unsigned int,NewRoleTitleItem*> NewTitleItemMap;
	NewTitleItemMap m_mapItemList;// key TitleID value 对应的Item
};

class NewRoleTitleItem : public cocos2d::CCNode
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	enum e_RoleItemTag
	{
		E_Role_Power_Des = 1,
		E_Role_Power_Num = 2,
	};

public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(NewRoleTitleItem,create);

 	NewRoleTitleItem();
 	~NewRoleTitleItem();
 	virtual void onEnter();
 	virtual void onExit();
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void refershItemByTitleID(unsigned int pID);
	void refershShowTitleSteate(bool isShow);
	void CheckSendTitleShowOkBtnPressed();
	void CheckSendDeleteShowMessageBox(bool state);
	static NewRoleTitleItem* CreateItem();
	void onChangeEffVisible(CCNode* pNode);
	void onRemoveEyeEffFunc(CCNode* pNode);
	void onShowTitlePressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onWearBtnPressed(CCObject* pSender,CCControlEvent pCCControlEvent);
	void onGetTitleBtnPressed(CCObject* pSender,CCControlEvent pCCControlEvent);
	void onItemBtnPressed(CCObject* pSender,CCControlEvent pCCControlEvent);
private:
    void setTitleData(const tagTitleProto* pData);
	bool m_bIsShowOnPlayer;
	bool m_bIsWearOnPlayer;
	ST_TitleData m_stTitleData;
	
	LabelFT* m_pFtPowerScore;//战斗力根据配表获得
	CCNode* m_pNodeEffShow;
	CCSprite* m_pNodeWearBtnBg;//穿戴按钮的背景图
	CCSprite* m_pNodeLimit;//限时角标
	CCSprite* m_pNodeTitleIcon;//称号图片
	CCSprite* m_pNodeTitleState;//称号显示状态
	CCControlButton* m_pBtnWearTitle;//穿戴按钮
	CCControlButton* m_pBtnShowTitle;//显示已经穿戴的 称号按钮
	CCControlButton* m_pBtnToGet;
	CCControlButton* m_pBtnItemBg;//背景的大Btn
};

#endif