#ifndef BSPRITEREADER_H
#define BSPRITEREADER_H

#include <string>
#include <map>
#include <vector>
#include "AnimationCache.h"

class BSPriteReader
{
public:
	BSPriteReader(const char *fileName, const std::string &name, eAnimsType animType, AnimationCache::AnimateList *animList, int nValue1, int nValue2);
	~BSPriteReader();
	const std::string& get_file_name() {return _fileName;}
	const std::string& get_key() { return _name; }

	void setparma(const char *fileName, const std::string &name, eAnimsType animType, AnimationCache::AnimateList *animList, int nValue1, int nValue2);

	void set_key( const char* pkey ){_name = pkey;}

	void increaseRetainCnt(){++nRetainCnt;}
	void decreaseReatainCnt(){--nRetainCnt;CC_ASSERT(nRetainCnt>=0);}

	int getRetainCnt()const{return nRetainCnt;}

	eAnimsType getAnimType()const { return _animType; }

	std::list<AnimationCache::AnimateList> &getAnimList() { return m_animate_list_array; }
	void addAnimatList(AnimationCache::AnimateList &animList);
	void setZorder(int back, int front) { _backZorder = back; _frontZorder = front; }
	int getBackZorder()const { return _backZorder; }
	int getFrontZorder()const { return _frontZorder; } 
	int getValue1()const { return _nValue1; }
	int getValue2()const { return _nValue2; }
	unsigned char GetResType()const { return byResType; }
	void SetResType(unsigned char byValue) { byResType = byValue; }

	void setupCB(LoadedCallback cb){mbCB  = cb;}
	LoadedCallback getCB()const {return mbCB;}

private:
	std::list<AnimationCache::AnimateList> m_animate_list_array;

	std::string _fileName;
	std::string _name;
	eAnimsType _animType;
	int _backZorder;
	int _frontZorder;

	int _nValue1;
	int _nValue2;

	unsigned char byResType;	//1 = mapblock  2 = 其他

	int					nRetainCnt;//预加载的会让BSAnimation的列表始终存在
	LoadedCallback		mbCB;
};

#endif //BSPRITEREADER_H