#include "CommonClient.h"
#include "ListControl.h"
#include "CfgReader.h"
#include "UiTools.h"
#include "UiManager.h"
#include "PackageManager.h"
#include "TradingOnterItemTipList.h"
#include "TradingEquipItemTipUI.h"

TradingOnterItemTipList::TradingOnterItemTipList()
	:m_pItemCCNode(NULL)
	,m_pItemNode(NULL)
	,m_pItemName(NULL)
	,m_pPriceNum(NULL)
	,m_pItemPriceFirst(NULL)
	,m_pItemPriceEnd(NULL)
	,m_pItem(NULL)	
	,m_pNewItemName(NULL)
	,m_pNewPriceNum(NULL)
{

}

TradingOnterItemTipList::~TradingOnterItemTipList()
{
	
}

cocos2d::extension::SEL_CCControlHandler TradingOnterItemTipList::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}


bool TradingOnterItemTipList::onAssignCCBMemberVariable( CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode )
{
	CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,"m_pItemCCNode",CCNode*,m_pItemCCNode);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pItemName);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pPriceNum)
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*,m_pItemPriceFirst)
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*,m_pItemPriceEnd)

	return false;
}

void TradingOnterItemTipList::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	m_pNewItemName = Helper::replaceLabelTTFWithLabelFTAndRemove(m_pItemName);
	CC_ASSERT(NULL != m_pNewItemName);

	m_pNewPriceNum =  Helper::replaceLabelTTFWithLabelFTAndRemove(m_pPriceNum);
	CC_ASSERT(NULL != m_pNewPriceNum);

}

void TradingOnterItemTipList::hideCompose(bool value)
{
	if(NULL != m_pItemNode)
		m_pItemNode->hideCompose(value);
}

void TradingOnterItemTipList::refreshData(const tagTradingOntherItemDataMsg item)
{
	const ItemTypeData &itemData = PackageManager::getInstance()->getItemTypeData(item.dwItemId);

	if(NULL == m_pItem)
	{

		if(MIsEquipment(item.dwItemId)) 
		{
			tagEquip tmptagEquip;
			tmptagEquip.dw_data_id = item.dwItemId;
			m_pItem = new f_equipment(tmptagEquip);
		}
		else
		{
			tagItem tmptagItem;
			tmptagItem.dw_data_id = item.dwItemId;
			m_pItem = new f_item(tmptagItem);
		}
	}

	if(NULL == m_pItemNode)
		m_pItemNode = ItemNode::create();

	CC_ASSERT(NULL != m_pItemNode);
	CC_ASSERT(NULL != m_pItemCCNode);

	m_pItemNode->hideItemOpBtn();
	m_pItemNode->setPosition(m_pItemNode->getPosition().x + m_pItemCCNode->getContentSize().width / 2,m_pItemNode->getPosition().y + m_pItemCCNode->getContentSize().height / 2);
	m_pItemNode->initWithItem(m_pItem);
	m_pItemNode->ShowNumText(false);
	m_pItemCCNode->addChild(m_pItemNode);

	m_pNewItemName->setString(itemData.name.c_str());
	
	std::stringstream oss;
	oss << item.nUnitPrice;
	m_pNewPriceNum->setString(oss.str().c_str());
}

TradingOnterItemTipList* TradingOnterItemTipList::createItem( const char* szFile,CCObject*pOwner,UiInterface* holder )
{
	CCNodeLoaderLibrary* lib  = CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
	
	CCBReader* reader = new CCBReader(lib);
	reader->autorelease();
	std::string strFullPath  = CFGReader::instance()->get_ui_ccbi_filepath(szFile);
	CCNode* node = reader->readNodeGraphFromFile(strFullPath.c_str(),pOwner);
	TradingOnterItemTipList* item = dynamic_cast<TradingOnterItemTipList*>(node);

	if (holder)
		holder->mergeSheet(reader->getLoadedSpriteSheet());

	return item;
}

void TradingOnterItemTipList::showFirst( bool value )
{
	m_pItemPriceFirst->setVisible(value);
}

void TradingOnterItemTipList::showFirstEnd( bool value )
{
	m_pItemPriceFirst->setVisible(value);
	m_pItemPriceEnd->setVisible(value);
}

void TradingOnterItemTipList::showEnd( bool value )
{
	m_pItemPriceEnd->setVisible(value);
}
