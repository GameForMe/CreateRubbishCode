#include "OnLineReward.h"
#include "World.h"
#include "UiResourceMgr.h"
#include "CfgReader.h"
#include "UiLoader.h"
#include "BaseDefine.h"
#include "ItemNode.h"
#include "UiTools.h"
#include "RewardMgr.h"
#include "AnimationCache.h"
#include "BSAnimate.h"
#include "RewardMgr.h"
#include "UiManager.h"
#include "LocalPlayer.h"
#include "RoleManager.h"
#include "ItemTip.h"
#include "MessageBoxUi.h"
#include "StringMgr.h"
#include "PackageManager.h"
#include "StringMgr.h"
#include "ToolTip.h"
#include "DBMgr.h"
#include "ReceiveRewardUi.h"
#include "Helper.h"

OnlineUiMgr::OnlineUiMgr()
{

}
OnlineUiMgr::~OnlineUiMgr()
{

}
OnlineUiMgr* OnlineUiMgr::GetInstance()
{
	static OnlineUiMgr mgr;
	return &mgr;
}
void OnlineUiMgr::openOnlineUi()
{
	OPEN_UI(WCT_ZAIXIANLINGJIANG);
}
void OnlineUiMgr::updateDisplay()
{
	OnlineUiLayer *ui = getUiNodeByTag<OnlineUiLayer>(WCT_ZAIXIANLINGJIANG);
	if(ui != NULL)
	{
		ui->updateDisplay();
	}
}
OnlineUiLayer::OnlineUiLayer():_currentIndex(0)
{
}

OnlineUiLayer::~OnlineUiLayer()
{
}

CCNode* OnLineUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["OnlineUiLayer"] = UiSpriteLoader<OnlineUiLayer>::loader();	
	CCNode *uiNode = readUiFromCCBI("online", nodeLoaders, _loadSpriteSheet);	
	return uiNode;
}

OnlineUiLayer* OnLineUi::getUiLayer()
{
	return getUiNodeByTag<OnlineUiLayer>(WCT_ZAIXIANLINGJIANG);
}
cocos2d::SEL_MenuHandler OnlineUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler OnlineUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", OnlineUiLayer::onCloseBtnPressed);  
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed1", OnlineUiLayer::onReceiveBtnPressed1);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed2", OnlineUiLayer::onReceiveBtnPressed2);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed3", OnlineUiLayer::onReceiveBtnPressed3);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed4", OnlineUiLayer::onReceiveBtnPressed4);
	return NULL;
}
void OnlineUiLayer::update(float dt)
{
	if(_lastTime > 0.f)
	{
		_lastTime -= dt*1000;
	}
}
void OnlineUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{	
	for(int i = NT_ItemBegin; i <= NT_ItemEnd; i ++)
	{
		CCNode* n = this->getChildByTag(0)->getChildByTag(i);
		CC_ASSERT(n != NULL);	
		ItemNode * node = ItemNode::create();	
		node->setBlank();
		node->setAnchorPoint(ccp(0,0));
		n->addChild(node,i,NT_ItemNodeBegin + i);
		node->setClickable(true);
		node->hideItemOpBtn();		
	}
// 	itemName1 = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_ITEMNAME_1));
// 	itemName2 = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_ITEMNAME_2));
// 	itemName3 = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_ITEMNAME_3));
// 	itemName4 = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_ITEMNAME_4));
// 	_lbLastTime = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_LABLETAG_0));
// 
// 	lableName1 = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_LABLENAME_1));
// 	lableName2 = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_LABLENAME_2));
// 	lableName3 = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_LABLENAME_3));
// 	lableName4 = (CCLabelTTF*)(this->getChildByTag(0)->getChildByTag(NT_LABLENAME_4));	
	itemName1 = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_ITEMNAME_1);
	itemName2 = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_ITEMNAME_2);
	itemName3 = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_ITEMNAME_3);
	itemName4 = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_ITEMNAME_4);
	_lbLastTime = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLETAG_0);

	lableName1 = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLENAME_1);
	lableName2 = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLENAME_2);
	lableName3 = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLENAME_3);
	lableName4 = Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLENAME_4);	

	Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLETIME_1);
	Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLETIME_2);
	Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLETIME_3);
	Helper::getLabelFTByParentAndTag(getChildByTag(0),NT_LABLETIME_4);

	GetIconInfo();
	updateDisplay();
	//距离下一次守将时间	
	CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&OnlineUiLayer::setCurTime), this, 1.0f, false);
	scheduleUpdate();	
	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 1, true);  
}
void OnlineUiLayer::setCurTime(float dt)
{
	int lasttime = _lastTime;
	int msec = lasttime % 1000;
	if (msec != 0)
	{
		//显示以秒为单位，倒计时以毫秒为单位，所以需要加1秒来保证倒计时真正可以领取
		lasttime += 1000;
	}
	int minutes = lasttime/1000 / 60.0;
	int secondes = (int)(lasttime/1000) % 60 ;
	char scripttime[20];
	sprintf(scripttime,"%02d:%02d",minutes , secondes );
	if (_lbLastTime)
	{
		_lbLastTime->setString(scripttime);
	}
	if (lasttime <= 0)
	{
		_lastTime = RewardMgr::getInstance()->GetReceiveRewardInfo()._receiveLastTime;
	}
}
void OnlineUiLayer::UpdateCurTime(float dt)
{
	if (_lastTime >0 && _currentGiftID != RewardMgr::getInstance()->GetReceiveRewardInfo()._receiveGiftID || RewardMgr::getInstance()->GetReceiveRewardInfo()._receiveStep == 0)
	{
		updateDisplay();
		CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&OnlineUiLayer::UpdateCurTime), this);
	}
}
void OnlineUiLayer::GetIconInfo()
{
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM OnLineReward");
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	while(table->retrieve_row())
	{
		OnlineInfo online;
		unsigned int idx = table->get_index("id");		
		online.Id = table->get_integer32(idx);		

		idx = table->get_index("itemID");
		online.ItemId = table->get_integer32(idx);

		idx = table->get_index("num");
		online.ItemNum = table->get_integer32(idx);

		idx = table->get_index("time");
		online.ItemTime = table->get_integer32(idx);
		
		online_vec.push_back(online);
		
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
	
}
std::vector<OnlineIconInfo> OnlineUiLayer::GetIconName(int iconId)
{
	if (onlineIcon_vec.size()>0)
	{
		onlineIcon_vec.clear();
	}
	c_sql_command* cmd3 = c_db_manager::getSingleton()->begin_operation("SELECT * FROM PackageData WHERE TypeId = ?1");
	cmd3->set_integer32(1 , iconId);
	c_sql_table* table3 = c_db_manager::getSingleton()->create_table();
	while(table3->retrieve_row())
	{
		OnlineIconInfo iconInfo;
		unsigned int idx = table3->get_index("Name");
		iconInfo.Id = iconId;
		iconInfo.IconName = table3->get_text(idx);
		onlineIcon_vec.push_back(iconInfo);
	}
	c_db_manager::getSingleton()->destroy_table(table3);
	c_db_manager::getSingleton()->end_operation(cmd3);
	return onlineIcon_vec;	
}
void OnlineUiLayer::updateDisplay()
{	
	SendRewardMgrInfo info = RewardMgr::getInstance()->GetReceiveRewardInfo();
	_lastTime =info._receiveLastTime;
	_giftID = info._receiveGiftID;
	_bShow = info._receivebCal;
	_nodeStep = info._receiveStep;
	if (_lbLastTime)
	{
		_lbLastTime->setString("");
		_lbLastTime->setColor(ccc3(0x88,0xe5,0x00));
	}
	setCurTime(0);	
	
	isCurrentID = false;
	for (std::vector<OnlineInfo>::iterator iter = online_vec.begin();iter != online_vec.end();++iter)
	{
		ItemNode * node =dynamic_cast<ItemNode *>(this->getChildByTag(0)->getChildByTag(iter->Id)->getChildByTag(NT_ItemNodeBegin + iter->Id));
		node->setDataId(iter->ItemId);
		node->setNum(iter->ItemNum);		
		
		node->setVisible(true);
		if (iter->Id == 1)		
		{
			if (itemName1)
			{
				itemName1->setString(GetIconName(iter->ItemId).front().IconName.c_str());
			}
			if (lableName1)
			{
				lableName1->setString(CCString::createWithFormat("%d",iter->ItemTime)->getCString());
				lableName1->setColor(ccc3(0xff,0x00,0x00));
			}
		}
		else if (iter->Id == 2)			
		{
			if (itemName2)
			{
				itemName2->setString(GetIconName(iter->ItemId).front().IconName.c_str());
			}
			if (lableName2)
			{
				lableName2->setString(CCString::createWithFormat("%d",iter->ItemTime)->getCString());
				lableName2->setColor(ccc3(0xff,0x00,0x00));
			}
		}
		else if (iter->Id == 3)		
		{
			if (itemName3)
			{
				itemName3->setString(GetIconName(iter->ItemId).front().IconName.c_str());
			}
			if (lableName3)
			{
				lableName3->setString(CCString::createWithFormat("%d",iter->ItemTime)->getCString());
				lableName3->setColor(ccc3(0xff,0x00,0x00));
			}
		}
		else if (iter->Id == 4)		
		{
			if (itemName4)
			{
				itemName4->setString(GetIconName(iter->ItemId).front().IconName.c_str());
			}
			if (lableName4)
			{
				lableName4->setString(CCString::createWithFormat("%d",iter->ItemTime)->getCString());
				lableName4->setColor(ccc3(0xff,0x00,0x00));		
			}
		}
		if (_nodeStep == iter->Id)
		{
			node->getSurroundSE("E1_39");
		}
		else
		{			
			CCNode *_nod = node->getChildByTag(9);
			if (_nod)
			{
				node->removeChild(_nod);
			}
		}		
		if(_giftID == iter->ItemId)
		{
			isCurrentID = true;
			_currentIndex = iter->Id;
		}
		
		CCControlButton *buttonReward = (CCControlButton*)(this->getChildByTag(0)->getChildByTag(30 + iter->Id));
		if(buttonReward)
		{
			if(!isCurrentID)
			{
				buttonReward->setEnabled(false);
				if (_currentIndex == 4)
				{
					//全部在线奖励领取完毕
					//陆晓龙 2015-6-25 领取完奖品时，执行动作
					World::getInstance()->setZaixianBtnAction();
				}
			}			
		}
	}		
}
bool OnlineUiLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
{
	CCNode* frame = dynamic_cast<CCNode*>(this->getChildByTag(0));
	if (isTouchOnNodeContent(frame,pTouch))
	{
		return true;
	}
	else
	{
		CLOSE_UI(WCT_ZAIXIANLINGJIANG);
		return false;
	}

}
void OnlineUiLayer::ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent)
{

}
void OnlineUiLayer::setReceiveBtnState(CCObject *pSender,int index)
{
	if(pSender==NULL)
		return;
	if (_currentIndex == index)
	{
		bool nRes = RewardMgr::getInstance()->sendOnlineReward();	
		if(nRes)
		{
			CCControlButton *btn = (CCControlButton*)pSender; 
			btn->setEnabled(false);	
			_currentGiftID = _giftID;					
			//CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&OnlineUiLayer::UpdateCurTime), this, 1.0f, false);
			
			OnlineInfo *data = getRewardByID(_currentIndex);
			if (data != NULL)
			{
				ReceiveRewardUiMgr::GetInstance()->setItemData(data->ItemId,data->ItemNum);
			}
			//modify by lpf 2015-08-28   领取在线奖励后隐藏在线奖励按钮
			CLOSE_UI(WCT_ZAIXIANLINGJIANG);
			World::getInstance()->setZaixianBtnAction();
		}
		else
		{
			if (!RewardMgr::getInstance()->_isBagEmpty)
			{
				ToolTip::getInstance()->push(GET_STR(6009));
			}			
		}
	}
	else
	{
		ToolTip::getInstance()->push(GET_STR(6009));
	}
}
void OnlineUiLayer::onReceiveBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{	
	setReceiveBtnState(pSender,1);
}
void OnlineUiLayer::onReceiveBtnPressed2(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	setReceiveBtnState(pSender,2);
}
void OnlineUiLayer::onReceiveBtnPressed3(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	setReceiveBtnState(pSender,3);
}
void OnlineUiLayer::onReceiveBtnPressed4(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	setReceiveBtnState(pSender,4);
}

void OnlineUiLayer::onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	isCurrentID = false;
	online_vec.clear();
	onlineIcon_vec.clear();
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_5);
	CLOSE_UI(WCT_ZAIXIANLINGJIANG);
}
void OnlineUiLayer::onExit()
{	
	CCSprite::onExit();
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&OnlineUiLayer::setCurTime), this);	
}



OnlineInfo* OnlineUiLayer::getRewardByID( int id )
{
	if (id < 1 || id > 4)
	{
		return NULL;
	}
	std::vector<OnlineInfo>::iterator iter, iend = online_vec.end();
	for (iter = online_vec.begin(); iter != iend; ++iter)
	{
		if (iter->Id == id)
			return &*iter;
	}
	return NULL;
}
