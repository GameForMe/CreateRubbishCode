#ifndef NEWPLAYERGUIDE_H
#define NEWPLAYERGUIDE_H

#include <map>
#include "cocos2d.h"
#include "BaseDefine.h"
#include "MiniMapUi.h"
#include "ItemDefine.h"
using namespace cocos2d;

class GameActionNode;

//typedef std::function<bool()> EnableTouchesFn;
//[bing] 操作层
class NewPlayerGuiderHandler : public CCObject, public CCTouchDelegate
{
public:
	static NewPlayerGuiderHandler *getInstance();
	void init();
	void destroy();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void update(float dt);

	void onSkipBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
//private:
	//EnableTouchesFn  _fn;
};

//[bing] 实际点不穿的层
class NewPlayerGuiderHandler2 : public CCTouchDelegate, public CCObject
{
public:
	static NewPlayerGuiderHandler2 *getInstance();
	void init();
	void destroy();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
};

class f_item;
struct RoleHeadPressed;

class NewPlayerGuider
{
	friend class NewPlayerGuiderHandler;
	friend class NewPlayerGuiderHandler2;
	friend class HookSetUiLayer;
	friend class TianmingUiLayer;
	friend class WelcomeUiLayer;
	friend class WelcomeUi;
	friend class QuestMgr;
	friend class Joystick;
	friend class World;
	friend class StrengthenUiLayer;
	friend class MiniMapUiLoaderLayer;
	friend class RewardBtnGroup;
	friend class ActivityBtnGroup;
	friend class SkillUiLayer;
	friend class SkillUi;
	friend class SkillListItemUiLayer;
	friend class SkillListItemUi;
	friend class UiMgr;
	friend class DropDragDelegate;
	friend class InstanceUi;
	friend class InstanceUiFrame;
	friend class RoleHeadUiLoaderLayer;
	friend class PackageUiLayer;
	friend class MartialObtainUiLayer;
	friend class MartialEquipUiLayer;
	friend class MessageBoxUi;
	friend class NPCTalkUi;

	enum eGuideState
	{
		GS_Valid = -1,
		GS_OPENUI,
		GS_CLOSEUI,
		GS_DRAG_ITEM,
		GS_DRAG_DWON_ITEM,
		GS_MINI_MAP_BTN_CLICK,
		GS_OPUI_NIL_UI_MGR,
		GS_ACCEPT_QUEST,
		GS_FINISH_QUEST,
		GS_NPC_TALK,
		GS_MOVE_PATH_START,
		GS_MOVE_PATH_END,
		GS_CLICK_HEAD,
		GS_ADD_ITEM,
		GS_SYS_TIPS_OPEN,
		GS_UPDATE_QUEST,
		GS_SKILL_STUDY,
		GS_HOOK_SET,
		GS_NPC_CHAT,
		GS_Weak,   //弱引导
		GS_Strong, //强引导

		GS_Worship, //雕像膜拜
		GS_Devil, //焰火屠魔
		GS_DrinkWine,//饮酒
	};

	enum eGuideNode
	{
		GN_1000_1 = 0, //传奇之旅引导
		GN_1000_2,
		GN_1000_3,
		GN_1000_4,
		GN_1000_5,

		GN_1001_1,  //银杏村引导
		GN_1001_2,
		GN_1001_3,
 		GN_1001_4,
 		GN_1001_5,

		GN_1002_1,  //杀鸡引导
		GN_1002_2,
		GN_1002_3,
		GN_1002_4,
		GN_1002_5,
		GN_1002_6,
		GN_1002_7,
		GN_1002_8,
// 		GN_1002_9,
// 		GN_1002_10,
// 		GN_1002_11,
// 		GN_1002_12,

		GN_1008_1,  //用药引导
		GN_1008_2,
		GN_1008_3,
		GN_1008_4,
		GN_1008_5,
		GN_1008_6,
		GN_1008_7,

		GN_1011_1,  //学习技能引导
		GN_1011_2,
		GN_1011_3,
		GN_1011_4,
		GN_1011_5,
		GN_1011_6,

		GN_1020_1,  //安全设置引导
		GN_1020_2,
		GN_1020_3,
		GN_1020_4,
		GN_1020_5,
		GN_1020_6,
		GN_1020_7,
		GN_1020_8,
		GN_1020_9,
		GN_1020_10,
		GN_1020_11,

		GN_1034_1,  //回城石引导
		GN_1034_2,
		GN_1034_3,
		GN_1034_4,
		GN_1034_5,
		GN_1034_6,
		GN_1034_7,
/*		GN_1034_8,*/

		GN_1047_1,  //锻造引导
		GN_1047_2,
		GN_1047_3,
		GN_1047_4,
		GN_1047_5,
		GN_1047_6,
		GN_1047_7,
		GN_1047_8,
		GN_1047_9,
		GN_1047_10,

		GN_1056_1,  //战役引导
		GN_1056_2,
		GN_1056_3,
		GN_1056_4,
		GN_1056_5,
//		GN_1056_6,
// 		GN_1056_7,
// 		GN_1056_8,
// 		GN_1056_9,

		GN_1064_1,  //升级引导
		GN_1064_2,
		GN_1064_3,
		GN_1064_4,
		GN_1064_5,
		GN_1064_6,
		GN_1064_7,
		GN_1064_8,

		GN_1096_1,//坐骑
		GN_1096_2,
		GN_1096_3,
		GN_1096_4,
		GN_1096_5,
		GN_1096_6,
		GN_1096_7,

		GN_1099_1,  //强化引导
		GN_1099_2,
		GN_1099_3,
		GN_1099_4,
		GN_1099_5,
		GN_1099_6,
		GN_1099_7,
		GN_1099_8,
		GN_1099_9,
		GN_1099_10,

		//GN_1103_1,		// 今日目标，有问题，先屏蔽掉
		//GN_1103_2,
		//GN_1103_3,

		GN_1119_1,  //进阶引导
		GN_1119_2,
		GN_1119_3,
		GN_1119_4,
		GN_1119_5,
		GN_1119_6,
		GN_1119_7,
		GN_1119_8,
		GN_1119_9,

		GN_1012_1,
		GN_1012_2,
		GN_1012_3,
		GN_1012_4,
		GN_1013_1,   //完成召见任务引导双修界面
		GN_1013_2,   //引导点击加好友按钮
		GN_1013_3,   //引导关闭界面
		GN_1013_4,
		GN_1170_1,
		GN_1170_2,
		GN_1015_1,
		GN_1015_2,
		GN_1015_3,
		GN_1015_4,
		GN_1015_5,
		GN_1015_6,
		GN_1015_7,
		GN_1015_8,
		GN_1018_1,
		GN_1018_2,
		GN_1018_3,
		GN_1018_4,
		GN_1018_5,
		GN_1018_6,
		GN_1018_7,
		GN_1018_8,
		GN_1018_9,
		GN_1018_10,
		GN_1018_11,
		GN_1018_12,
		GN_1018_13,
		GN_1018_14,
		GN_1018_15,
		GN_1019_1,
		GN_1019_2,
		GN_1019_3,
		GN_1019_4,
		GN_1019_5,
		GN_1019_6,

		GN_1175_1,
		GN_1175_2,
		GN_1175_3,

		GN_1024_1,
		GN_1024_2,
		GN_1024_3,
		GN_1024_4,
		GN_1024_5,
		GN_1024_6,
		GN_1024_7,
		GN_1024_8,
		GN_1024_10,

		GN_1028_1,
		GN_1028_2,
		GN_1028_3,
		GN_1028_4,
		GN_1028_5,
		GN_1028_6,
		GN_1028_7,
		GN_1028_8,
		GN_1028_18,
		
		GN_1029_1,
		GN_1029_2,
		GN_1029_3,
		GN_1029_4,
		GN_1029_5,
		GN_1030_1,
		GN_1030_2,
		GN_1030_3,
		GN_1030_4,
		GN_1031_1,
		GN_1031_2,
		GN_1031_3,
		GN_1031_4,
		GN_1031_5,

		GN_1031_7,
		GN_1031_8,

		GN_1032_1,
		GN_1032_2,

		GN_1032_4,

// 		GN_1033_1,
// 		GN_1033_2,
// 		GN_1033_3,
// 		GN_1033_4,
// 		GN_1033_5,
// 		GN_1033_6,
		GN_1039_1,
		GN_1039_2,
		GN_1039_3,
		GN_1039_4,
		GN_1039_5,
		GN_1039_6,
		

		GN_1046_1,
		GN_1046_2,
		GN_1046_3,
		GN_1046_4,
		GN_1046_5,
		GN_1046_6,

// 		GN_1047_1,
// 		GN_1047_2,
// 		GN_1047_3,

		GN_1048_1,
		GN_1048_2,
		GN_1048_3,

		GN_1054_1,
		GN_1054_2,
		GN_1054_3,
		GN_1054_4,
		GN_1054_5,
		GN_1054_6,

		GN_1063_1,
		GN_1063_2,

		GN_1065_1,
		GN_1065_2,
		GN_1065_3,
		GN_1065_4,
		GN_1065_5,
		GN_1065_6,

	};

	enum eSubQuest
	{
		SQ_HeroWorship   = 132,//膜拜雕像
		SQ_DevilInstance = 136,//焰火屠魔
		SQ_DrinkWine     = 146,//饮酒
	};

	enum eSubGuideNode
	{
		SG_NULL          = 0,

		SG_HeroWorship_1 = 1,//膜拜雕像
		SG_HeroWorship_2,
		SG_HeroWorship_3,
		SG_HeroWorship_4,

		SG_DevilInstance_1,//焰火屠魔
		SG_DevilInstance_2,
		SG_DevilInstance_3,

		SG_DrinkWine_1,//饮酒
		SG_DrinkWine_2,
	};

public:
	static NewPlayerGuider *getInstance();
	NewPlayerGuider();
	~NewPlayerGuider();
	void init();
	void AddFirstQuest();	//加入第一个任务
	void destroy();
	bool isInGuide() const { return _guideState != GS_Valid; }
	bool GetIsGuide(){return IsNewGuide;};
	/*bool IsIgoreGuideAutoFight() { return m_bIsIgoreGuideAutoFight;}*/
	/*
	设计原理为线性触发
	根据idx来确定是否开启该引导
	分为2部分
	1. 确定引导时机
	2. 引导元素位置
	*/
	void RunNewPlayerGuilde(void* tempArr = NULL);
	void RunSubNewGuide();//新添加支线引导，与主线引导区分开 2016.2.1
	bool ArrForTaskTrace(unsigned short questid);
	bool ArrForNPCTalk(unsigned short questid, bool bIsAccept);
	void ArrForHead();
	bool ArrForWorship(bool isNorClick);
	bool ArrForDevil();
	void newHookGuide();
	void SystemTipUIOpen();
	void onServerUpdateQuest(unsigned short questId = 0);

	void disableClick();
	void clear(bool bClearHand = true);
	void switchGuideWeakOrStrong(eGuideState gameState);
	inline bool getIsStrongGuide() {return m_isStrongGuide;}

	void onBagItemAdd( f_item* pItem );

	//设置蒙版
	void SetClip(const CCRect& rc);
	void SetClip(const CCRect& rc1, const CCRect& rc2);
	void SetClip(CCPoint& cp1, CCPoint& cp2);

	void onUiOpen(eWroldChildTag uiTag);
	void onMessgaeBoxOpen();
	void onTaskTraceUiShow(bool isShow);
	void onSubUiShow(bool isShow);
	void onClickWorship(bool isNormalClick);
	void onClickDevil();
	void onClickDrinkWine();

	void SkipNewGuide();
	void runArrowsAnim();
	void runArrowsAnim(const CCRect &rect);
	void onNpcChatOver();
protected:
	void onWelcomeUiOkBtnPressed();
	void onAcceptQuest(unsigned short questId);
	void onFinishQuest(unsigned short questId);
	void onRoleFindpathEnd();
	bool onTouchBegin(CCTouch *pTouch);
	void onTouchEnd(CCTouch *pTouch);
	void onNpcTalkUi(int btn, unsigned int questId);
	void onUiClose(eWroldChildTag uiTag);

	void onRoleHeadPressed(RoleHeadPressed* evt);

	void doHeadPressed();
	void onSkillUiItemSelect(int index);
	void onStudySkill(int id);
	void onMiniMapGroupBtnShow();
	void onDragItemBegin(EItemConType conType, short index);
	void onDropItemEnd(CCPoint pos);
	void onBeginQuestRunpath(unsigned int questId, const CCPoint &pos);
	void onNpcTalkShow();
	void onHookSet();
	//根据分辨率调整新手箭头位置;
	const CCRect setDirectionRect(const CCRect &rect);
private:
	void runArrowsMoveTo( const CCPoint &srcpos, const CCPoint &descpos );
	void runShouAnim(const CCPoint &pos, eOctDir dir);
	void drawRect(const CCRect &rect);
	void setTextClip(LabelFT* pLabel, int strId, const CCPoint& pos, bool isflip, float scaleY, CCPoint labelPos = ccp(-15.0f, -1.0f));
	LabelFT* getLabelTTF();
	void runAction();
	bool isQuestNeedHoldById(int pQuestId);
private:
	CCNode *_node;
	/*bool m_bIsIgoreGuideAutoFight;//杀鸡不让自动引导*/
	bool IsNewGuide;
	eGuideState _guideState;
	short _newEquipPos;
	CCRect _curRect;
	CCPoint _questDestPos;
	CCSprite* m_pMoveHand;	//移动引导手
	CCNode* pClip;//遮罩
	CCControlButton* _SkipButton;	//跳过按钮

	unsigned int m_nGuildeIdx;	//[bing] 线性计数器//主线
	bool m_bClickEvent;	//直接点击触发
	bool m_isStrongGuide;

	unsigned int m_nSubGuildeIdx; //支线引导计数,每完成一次清零
	eGuideState  m_subGuideState;

	GameActionNode* m_pEffectNode;
	
	CCNode* m_pInfoLabel;

	CCSprite* m_pLabelSprite;
	std::map<unsigned short,eGuideNode> m_holdQuestMap;
public:
	GameActionNode* m_pHand;	//引导手
	CCPoint _HandTargetPos;
	c_signal<void , unsigned short> _sigEraseHoldQuest;
	bool _IsGuide;
};


/* SystemTipUI */

class SystemTipUI : public CCLayer
	, public cocos2d::extension::CCNodeLoaderListener
	, public cocos2d::extension::CCBSelectorResolver
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SystemTipUI, create);

	static SystemTipUI* Init(const char* pPicName, CCPoint* point = NULL);

	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName){ return NULL; }
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

	virtual void onExit();

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	void BeginFadeOut(float fdt);

	void FadeOutFrame(float fTick);

	void DestroySelf(float fdt);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	CCRect GetBtnPos();

	CCSprite* m_MainFrame;
	CCControlButton* m_pClickBtn;
	
	unsigned short m_uFunction;
};

struct SkillData;
/* NewSkillTipUI */

class NewSkillTipUI : public CCLayer
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(NewSkillTipUI, create);

	static NewSkillTipUI* Init(SkillData *pSkillData);
	static void setSkill();

	virtual void onExit();

	void doEvent(float fDT);
	CCSprite* m_pBGSprite;
	CCSprite* m_pSkillSprite;
	LabelFT* m_pName;
	unsigned char m_byState;
	
	int m_nSkillIndex;
	bool m_isFly;
	int m_targetidx;
	static SkillData *m_skilldata;
};


/* BattleValUpUI */

class BattleValUpUI : public CCLayer
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(BattleValUpUI, create);
	static BattleValUpUI* Init(int nBattleVal);

	virtual void onExit();

	void doEvent(float fDT);
	void update(float fDT);

	CCSprite* m_pBGSprite;
	CCLabelBMFont* m_pValLabel;

	unsigned char m_byState;

	std::list<unsigned char> m_BattleValueList;
	int m_nNowBattleValue;
	int m_nUpValue;
	int m_nLessNum;
};

/* AreaPlayerUI */

class AreaPlayerUI : public CCLayer
	, public cocos2d::extension::CCNodeLoaderListener
	, public cocos2d::extension::CCBSelectorResolver
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(AreaPlayerUI, create);
	static AreaPlayerUI* Init();

	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName){ return NULL; }
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

	virtual void onExit();

	int UpdatePlayer();
	void SetTitleImgFile(const char* pFile);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onOneKeyAddFriendBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	CCRect GetBtnPos( int nTag );

	std::set<std::string> m_loadSpriteSheet;
private:
	//CCScrollView *_itemScrollView;
	//CCNode *_itemContent;
	CCLayer *_playerlist;
	CCSprite* _pTitleImg;
	std::vector<unsigned int> m_vecRoleID;
};


class ChangeMapRemindUI : public CCLayer
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(ChangeMapRemindUI, create);

	static ChangeMapRemindUI* remindUI_init(const std::string &mapName);

	virtual void onExit();

	void doEvent(float ft);

	CCSprite* m_pBGSprite;
	LabelFT* m_pMapName;
	unsigned char m_byState;

	int m_nMapID;
};


#endif