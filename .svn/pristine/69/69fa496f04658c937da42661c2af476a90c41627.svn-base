/* 
	[bing] 播放电影动画类
*/
#pragma once

#include <list>
#include "cocos2d.h"
using namespace cocos2d;

//log
void MLog(const char* pLog);
//开始执行动画脚本
void MMoviePlay(int nIdx);
//调用某个Lua方法
void MCallFunc( const char* pFuncName );
//给GS发送Movie状态
void MC2GMovieState( int nNum );

//等待x秒执行
void Msleep(unsigned int fDTime);
//在某个点创建一个怪物
unsigned int Mcreatenpc(unsigned int dwTypeID, unsigned int fX, unsigned int fY, long facefX, long facefY, int nSpeed);
//把某个id的角色移动到某点
void Mmoverole(unsigned int dwID, unsigned int fX, unsigned int fY);
//某个角色播放冒泡聊天
void MroleChat(unsigned int textID,unsigned int npcID);
//某个角色对某角色用技能
void Museskill(unsigned int dwSrcID, unsigned int dwTargetID, unsigned int dwSkillID, unsigned int fDelayTime);
//停止某个角色用技能
void Mstopuseskill(unsigned int dwSrcID);
//某角色死亡
void Mroledie( unsigned int dwID );

//移动摄像机到某点
void Mmovecamera( unsigned int fX, unsigned int fY, unsigned int fSpeed );
//摄像机跟随某对象
void Mcameraattachrole( unsigned int dwID );
//解除摄像机跟随
void Mcameradetachrole();

//主界面按钮隐藏，显示
void Mvisiblemain(bool bSet);

//得到LP属性
int MGetRoleAttr(int nIdx);

//画面变灰 渐隐场景
void Mfadeoutscene(float fDT, int nType);


//动画播放节点
class CMovieNode
{
public:
	CMovieNode()
		:_bPlayed(false)
		,m_LessPlayTimes(0)
		,m_fCDTick(0)
	{
		//m_LessPlayTimes = 0;
		//m_fCDTick = 0;
	}

	virtual ~CMovieNode() {}

	//[bing] 按列表播放动作
	virtual unsigned int Play(unsigned int uTick) {
		_bPlayed = true; return 0;}
	//播放一次就删除
	virtual bool PlayOnce() { return true; }

	virtual void quickEnd(){}

	unsigned char m_LessPlayTimes;
	unsigned int m_fCDTick;

	bool _bPlayed;
};

/* CDelayTimeNode */
class CDelayTimeNode : public CMovieNode
{
public:
	CDelayTimeNode(unsigned int fDTime);

	virtual unsigned int Play(unsigned int uTick);

private:
	unsigned int m_fDTime;
};

/* CMovieLogNode */
class CMovieLogNode : public CMovieNode
{
public:
	CMovieLogNode(const char* pstrText);

	virtual unsigned int Play(unsigned int uTick);

private:
	std::string strText;
};

/* CCallFuncNode */
class CCallFuncNode : public CMovieNode
{
public:
	CCallFuncNode(const char* pFuncName);
	~CCallFuncNode()
	{
		strFuncName = "";
	}

	virtual unsigned int Play(unsigned int uTick);

private:
	std::string strFuncName;
};

/* CCreatureCreateNode */
class CCreatureCreateNode : public CMovieNode
{
public:
	CCreatureCreateNode(unsigned int dwTypeID, unsigned int fX, unsigned int fY, long facefX, long facefY, int nSpeed);
	unsigned int GetID() { return m_dwID; }

	virtual unsigned int Play(unsigned int uTick);

	//virtual void quickEnd();
private:
	unsigned int m_dwID;
	unsigned int m_dwTypeID;
	unsigned int m_fX;
	unsigned int m_fY;
	int m_facefX;
	int m_facefY;
	int m_nSpeed;
};

/* CRoleMoveNode */
class CRoleMoveNode : public CMovieNode
{
public:
	CRoleMoveNode(unsigned int dwID, unsigned int fX, unsigned int fY);

	virtual unsigned int Play(unsigned int uTick);

	//virtual void quickEnd();
private:
	unsigned int m_dwID;
	unsigned int m_fX;
	unsigned int m_fY;
};

class CRoleChatNode : public CMovieNode
{
public:
	CRoleChatNode(unsigned int textID,unsigned int npcID);

	virtual unsigned int Play(unsigned int uTick);
	//virtual void quickEnd();
private:
	unsigned int m_textID;
	unsigned int m_npcID;
};

/* CRoleUseSkillNode */
class CRoleUseSkillNode : public CMovieNode
{
public:
	CRoleUseSkillNode(unsigned int dwSrcID, unsigned int dwTargetID, unsigned int dwSkillID, unsigned int fDelayTime);

	virtual unsigned int Play(unsigned int uTick);
	virtual bool PlayOnce() { return m_fDelayTime == (unsigned int)0.0f; }

	unsigned int GetSrcID()
	{
		return m_dwID;
	}

private:
	unsigned int m_dwID;
	unsigned int m_dwTargetID;
	unsigned int m_dwSkillID;
	unsigned int m_fDelayTime;
};

/* CStopUseSkillNode */
class CStopUseSkillNode : public CMovieNode
{
public:
	CStopUseSkillNode(unsigned int dwSrcID);

	virtual unsigned int Play(unsigned int uTick);

private:
	unsigned int m_dwID;
};

/* CRoleDieNode */
class CRoleDieNode : public CMovieNode
{
public:
	CRoleDieNode(unsigned int dwID);

	virtual unsigned int Play(unsigned int uTick);

private:
	unsigned int m_dwID;
};

/* CMoveCameraNode */
class CMoveCameraNode : public CMovieNode
{
public:
	CMoveCameraNode(unsigned int fX, unsigned int fY, unsigned int fSpeed);

	virtual unsigned int Play(unsigned int uTick);

private:
	unsigned int m_fX;
	unsigned int m_fY;
	unsigned int m_fSpeed;
};

/* CAttachCameraNode */
class CAttachCameraNode : public CMovieNode
{
public:
	CAttachCameraNode(unsigned int dwID);

	virtual unsigned int Play(unsigned int uTick);
	virtual bool PlayOnce() { return false; }

private:
	unsigned int m_dwID;
};

/* CDetachCameraNode */
class CDetachCameraNode : public CMovieNode
{
public:
	virtual unsigned int Play(unsigned int uTick);
};

/* CVisiblemain */
class CVisiblemain : public CMovieNode
{
public:
	CVisiblemain(bool bSet);

	virtual unsigned int Play(unsigned int uTick);

private:
	bool m_bSet;
};

/* CFadeoutScene */
class CFadeoutScene : public CMovieNode
{
public:
	CFadeoutScene(float fDT, int nType);
	virtual ~CFadeoutScene();

	virtual unsigned int Play(unsigned int uTick);

	virtual bool PlayOnce() { return false; }

private:
	float m_fDT;
	CCNode* pColorLayer;
	int m_nType;
};

/* CSendGSMovieStateNode */
class CSendGSMovieStateNode : public CMovieNode
{
public:
	CSendGSMovieStateNode(int nNum);

	virtual unsigned int Play(unsigned int uTick);

	void quickEnd();
private:
	int m_nNum;
};

//动画管理器
class CMovie : public CCObject
{
public:
	CMovie();
	~CMovie();

	void ClearList();

	static CMovie& GetInstance()
	{
		static CMovie _cmovie;
		return _cmovie;
	}

	void doNPCScript(int nIdx);
	void AddNode(CMovieNode* pNode);

	template <typename T>
	void DelNode(T* pNode);
	template <typename T>
	void DelNodeByType(T* pNode);

	void update(unsigned int dt);
	void Play(unsigned int dt);
	void PlayForeve(unsigned int dt);

	bool CheckPlayMovie();	//检查是否可以继续播放动画

	//[bing] 是否正在播放动画
	bool IsInPlaying() const
	{
		return m_bIsInPlaying;
	}

	//bool IsPlayEnd(){return m_bIsPlayEnd;}
	//void setPlayEnd(bool isEnd){m_bIsPlayEnd = isEnd;}

	void setCompletedFuBenId(unsigned int id);
	bool isComeletedInstance(unsigned instanceID);
	void clearCompletedFuBenVector();
	std::list<CMovieNode*>& GetForeverList() { return m_ForeverList; }

	//跳过新手动画
	void skipSprogMovie();

	void addToCreatureList(unsigned int id);
	void removeFromCreatureList(unsigned int id);

	void cleanWaitChangeMapFlag(){_waitForReplaceScene=false;}
	bool isWaittingChangeMap()const { return _waitForReplaceScene;}
private:
	void clearAllCreatureFromRoleMgr();

	void setPlayingEnd();

	void cleanForeverList();
private:
	typedef std::list<CMovieNode*> MovieList;
	MovieList m_MovieList;
	MovieList m_ForeverList;

	bool m_bIsInPlaying;
	bool _bQuickEnd;
	//bool m_bIsPlayEnd;
	typedef std::vector<unsigned int> CompleteFuBenVector;

	CompleteFuBenVector m_completedFubenVector;
	unsigned int m_fCDTick;
	struct timeval tv;

	bool					_waitForReplaceScene;
	std::vector<unsigned int>		creatureIDS;

	int					_movieID;
};