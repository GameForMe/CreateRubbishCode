#ifndef LISTCONTROL_H
#define LISTCONTROL_H

/********************************************************************
	created:	2015/08/05
	created:	5:8:2015   14:50
	filename: 	C:\chuanqi\trunk\Client\code\source\ListControl.h
	file path:	C:\chuanqi\trunk\Client\code\source
	file base:	ListControl
	file ext:	h
	author:		gh
	
	purpose:	简单的列表实现类
*********************************************************************/

#include "cocos2d.h"
#include "cocos-ext.h"

#include "CommonDefine.h"

class ListControl : public cocos2d::extension::CCScrollView
{
public:
	typedef std::vector<CCNode*> NodeList;
	typedef boost::function<CCNode*(ListControl*, size_t idx)> NodeFactory;

public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(ListControl, create);

	ListControl();

	int					add_item(CCNode* item);
	template<typename TIt>
	void add_items(TIt begin, TIt end)
	{
		for(TIt it = begin; it!=end; ++it)
		{
			add_item(*it);
		}
	}
	void add_items_sync(size_t item_num, NodeFactory factory);

	void 				remove_item(int idx);
	void 				remove_item(CCNode* node);
	CCNode*				find_item(int tag);

	const NodeList&		items() const { return m_items; }
	NodeList&		items() { return m_items; }

	void				clear_list();

	size_t				max_item_num() const { return m_max_item_num; }
	void				max_item_num(size_t num) { m_max_item_num = num; }
	size_t				count() { return m_items.size(); }
	bool 				is_reverse_mode() const { return m_reverse_mode; }
	void 				set_reverse_mode(bool val) { m_reverse_mode = val; } 
	float				get_item_gap() const { return m_item_gap; }
	void				set_item_gap(float gap) { m_item_gap = gap; }
	size_t				get_sync_cache_count() const { return m_sync_cache_count; }
	void				set_sync_cache_count(size_t num) { m_sync_cache_count = num; }

	void				sort_items();
	void				arrange_items();
	void				just_fit_pack();

	void 				scroll_to_top();
	void 				scroll_to_bottom();

	void				scroll_to_pos(size_t pos);

	virtual void 		update(float dt);
	virtual void 		onEnter();
	virtual void 		onExit();

	void				set_vertical_mode(bool bvertical);

	bool				b_vertical;
private:
	NodeList			m_items;
	size_t				m_max_item_num;
	float				m_item_gap;
	bool				m_reverse_mode;


	NodeFactory			m_node_factory;
	size_t				m_sync_cache_count;

	void				addItemToProxy(CCNode* item, CCNode* proxy);
	void				calcCacheItemRange(int& out_start, int& out_end);
};

class ListControlLoader : public cocos2d::extension::CCScrollViewLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(ListControlLoader, loader);

protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(ListControl);

	virtual void onHandlePropTypeCheck(cocos2d::CCNode * pNode, cocos2d::CCNode * pParent, const char* pPropertyName, bool pCheck, cocos2d::extension::CCBReader * pCCBReader);
	virtual void onHandlePropTypeInteger(cocos2d::CCNode * pNode, cocos2d::CCNode * pParent, const char* pPropertyName, int pInteger, cocos2d::extension::CCBReader * pCCBReader);
};

#endif //LISTCONTROL_H