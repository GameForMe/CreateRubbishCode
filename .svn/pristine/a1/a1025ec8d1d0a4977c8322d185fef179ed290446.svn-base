#ifndef CCDRAGBUTTON_H
#define CCDRAGBUTTON_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include <vector>

using namespace cocos2d;
using namespace cocos2d::extension;

#define		BROWNUMBER			12

class BrowItem;
class BrowItemFrame;
class CCDragButton :public CCControlButton {
public:

	static CCDragButton* create(CCScale9Sprite* sprite);

	bool init();

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);
private:
	CCPoint beganTouchPiont;
}; 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class BrowItem 
{
	friend class BrowItemFrame;

public:
	static BrowItem *getInstance();
	BrowItem();
	~BrowItem();
	void open();
	BrowItemFrame *getUIGotoFrame(){return _uiGoteFrame;};
	void setGoPosition(const CCPoint &pos);

private:
	BrowItemFrame *_uiGoteFrame;
	std::set<std::string> _usedPlistFile;
};

class BrowItemFrame 
	: public CCSprite
	, public CCTouchDelegate
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class BrowItem;
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(BrowItemFrame, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void oncloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent); 
	void onBrowBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	virtual void onEnter();
	virtual void onExit(); 

protected:
	BrowItem *_item;
	std::vector<CCControlButton*> buttonVector;
};

class BrowItemLoader : public CCSpriteLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(BrowItemLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(BrowItemFrame);
};
#endif