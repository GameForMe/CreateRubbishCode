#ifndef CREATURECACHEDATA_H__
#define CREATURECACHEDATA_H__

#include "f_cache_data_base.h"
#include "f_singleton.h"

struct stCreateProto 
{
	unsigned int dwID;
	std::string strAnimatorName;
	std::string strName;
	std::string strContext;
	int			nPosX;
	int			nPosY;
	std::string strMapName;
	int			nFuncType;
	int			nFunid;
	int            nLevel;
	int			nBossType;
	std::string strPortrait;
	std::string strSound1;
	std::string strSound2;
	std::string strSound3;
	float			fRatio;
	int			nMsgID;
	std::string strEffectName;
	float			fBodyRatio;
	std::string strAttSound;
	std::string strDieSound;
	int			nType;

	int			nAniType;//0原有动画 1人物动画
	int			nbodyDisplayID;
	int			nweaponDisplayID;
	int			nwingDisplayID;
	int			nDeadEffectType;
	std::string nHitSound;//...受击音效
// 	std::string strAvatorBody;
// 	std::string strWeapon;
// 	std::string strWing;
// 	int			nClassType[3];
// 	int			nSuitNum[3];
};

class CreatureCacheData:public f_cache_data_base, public f_singleton<CreatureCacheData>
{
public:
	CreatureCacheData();
	~CreatureCacheData();

	virtual void clear();
	virtual void load();
	void loadWithXML();
	stCreateProto const* getProto(unsigned int dwID);
	std::map<unsigned int,int> const& getBossMap(){return mMapIDToBossID;}
private:

	

	std::map<unsigned int,stCreateProto>  mCache;
	std::map<unsigned int,int>					 mMapIDToBossID;
};

#endif // CREATURECACHEDATA_H__
