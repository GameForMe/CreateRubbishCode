/**
 *	@file		client_common_define.cpp
 *	@author		guantiejun
 *	@date		2016/03/21
 *	@version	
 *	@brief		客户端通用定义
 */

#ifndef CLIENT_COMMON_DEFINE_H
#define CLIENT_COMMON_DEFINE_H

const DWORD oil_type_id = 1003001;
const int equip_suit_att_num = 6;

typedef std::map<int,int> map_int_int;//天赋效果
typedef std::map<unsigned int,int> map_uint_int;//天赋效果
typedef std::map<unsigned int,unsigned int> map_uint_uint;//天赋效果

// 封魔榜头像菜单操作
enum e_send_info {
	e_send_no,					// 无操作
	e_send_chat,				// 私聊
	e_send_attention,			// 管主要
	e_send_team,				// 组队
	e_send_black,				// 黑名单
	e_send_flower,				// 送花
};
//血战到底 战斗结果
enum e_BFBattleResultType
{
	BF_Result_Null = -1,
	BF_Result_Dead,
	BF_Result_Win,
	BF_Result_Tied,
	BF_Result_Result,
};

// 封魔榜头像菜单操作
enum e_quick_team_open_type
{
	e_open_none,				// 默认附近
	e_open_mohundian,			// 魔魂殿
	e_open_zumage,				// 祖玛阁
	e_open_duorenfuben,			// 多人副本
	e_open_shouweitianguan,		// 守卫天关
	e_open_digongchanglang,		// 地宫长廊
	e_open_num,					// 开启总数
};

struct tagDragonItem
{
	UINT	nItemId;
	BYTE	byQuality;
	BYTE	byNode;
	BYTE	byShowIcon;
	bool isDrop;
};

struct FMBRankPrizeInfo
{
	DWORD title_id;
	DWORD item_id_1;
	DWORD item_id_2;
	int item_num_1;
	int item_num_2;
	int guild_money;
	std::string buff_desc;

	FMBRankPrizeInfo()
	: title_id(INVALID)
	, item_id_1(INVALID)
	, item_id_2(INVALID)
	, item_num_1(0)
	, item_num_2(0)
	, guild_money(0)
	, buff_desc("")
	{

	}
};

enum tagDragonType
{
	Dragon_Null,
	Dragon_YuanBao,
	Dragon_JuanZhou,
};

struct RoleBaseAtt
{
	int id;
	int wuli_min;
	int wuli_max;
	int mofa_min;
	int mofa_max;
	int daoshu_min;
	int daoshu_max;
	int hp;
	int mp;
	int wufang_min;
	int wufang_max;
	int mofang_min;
	int mofang_max;

	RoleBaseAtt()
		: id(0)
		, wuli_min(0)
		, wuli_max(0)
		, mofa_min(0)
		, mofa_max(0)
		, daoshu_min(0)
		, daoshu_max(0)
		, hp(0)
		, mp(0)
		, wufang_min(0)
		, wufang_max(0)
		, mofang_min(0)
		, mofang_max(0)
	{

	}
};

struct WingEvolve
{
	int id;
	DWORD source_id;
	DWORD target_id;
	DWORD need_item_id;
	int need_item_num;
	DWORD buff_id;
	float	buff_time;
	int upper_limit;
	std::string effect_name;
	int placard_index;
	std::string dest_1;
	std::string dest_2;
	int equip_type;

	WingEvolve()
		: id(0)
		, source_id(INVALID)
		, target_id(INVALID)
		, need_item_id(INVALID)
		, need_item_num(0)
		, buff_id(INVALID)
		, buff_time(0)
		, upper_limit(0)
		, effect_name("")
		, placard_index(0)
		, dest_1("")
		, dest_2("")
		, equip_type(0)
	{

	}
};

struct WingFlyUp
{
	int id;
	float amplification;
	int agile;
	DWORD need_item_id;
	int need_item_num;
	int item_exp;
	int	need_exp;
	DWORD buff_id;
	int add_agile;
	int need_gold;
	float add_amplification;

	WingFlyUp()
		: id(0)
		, amplification(0)
		, agile(0)
		, need_item_id(INVALID)
		, need_item_num(0)
		, item_exp(INVALID)
		, need_exp(0)
		, buff_id(INVALID)
		, add_agile(0)
		, need_gold(0)
		, add_amplification(0)
	{

	}
};

struct PlacardInfo
{
	int id;
	std::string text;
	std::string title;

	PlacardInfo()
		: id(0)
		, text("")
		, title("")
	{

	}
};

struct EquipRecastData
{
	int id;				// id
	DWORD src_equip_id;	// oldEquipId
	DWORD dest_equip_id;// newEquipId
	DWORD item_id_1;	// needItem1
	DWORD item_id_2;	// needItem2
	int item_num_1;		// needNum1
	int item_num_2;		// needNum2
	float rebate_num;	// discuntPrice
	DWORD rebate_time;	// discuntTime
	int need_lv;		// need_lv

	EquipRecastData()
		: id(0)
		, src_equip_id(INVALID)
		, dest_equip_id(INVALID)
		, item_id_1(INVALID)
		, item_id_2(INVALID)
		, item_num_1(0)
		, item_num_2(0)
		, rebate_num(0.0)
		, rebate_time(0)
	{

	}
};

struct EquipRecastRebateInfo
{
	INT64	equip_id;
	int	cut_off_num;
	DWORD	dwStartTime;
	DWORD	dwEndTime;

	EquipRecastRebateInfo()
		: equip_id(0)
		, cut_off_num(0)
		, dwStartTime(INVALID)
		, dwEndTime(INVALID)
	{

	}
};

struct EquipSuitData
{
	DWORD id;
	std::string suit_name;
	int need_num[equip_suit_att_num];
	std::string suit_dest[equip_suit_att_num];



	EquipSuitData()
		: id(INVALID)
		, suit_name("")
	{
		for (int i = 0; i < equip_suit_att_num; ++ i)
		{
			need_num[i] = 0;
			suit_dest[i] = "";
		}
	}
};

#endif