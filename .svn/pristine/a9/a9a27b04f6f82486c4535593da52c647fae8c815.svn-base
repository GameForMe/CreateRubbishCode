#ifndef PENALTYUI_H
#define PENALTYUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "VerticalList.h"
#include "UiInterface.h"
#include "Player.h"
#include "ListItem.h"

using namespace cocos2d;
using namespace cocos2d::extension;
class PenaltyUiLayer;
struct penaltyInfo
{
	std::string name;
	int num;
	penaltyInfo()
	{
		name="";
		num=1;
	}
};
class PenaltyManager
{
public:
	static PenaltyManager *getInstance();
	PenaltyManager();
	~PenaltyManager();
	void setDataInfo(std::string info);
	std::list<penaltyInfo> getPanaltyInfo(){return _penaltyInfo;}
	void clearPaneltyInfo();
private:
	std::list<penaltyInfo> _penaltyInfo;
};
class penaltyItem: public ListItem
{
public:
	enum etag
	{
		NT_title=0,
		NT_Name=1,
		NT_Num=2,
	};
	penaltyItem();
	~penaltyItem();
	void setData(std::string name,int num);
	LabelFT *getLabelttf(etag tag);
	float getItemHeight();
};
class PenaltyUi : public UiInterface
{
public:
	PenaltyUi();
	virtual ~PenaltyUi();
	virtual CCNode *openUi();
	PenaltyUiLayer *getUiLayer();
	void updateData();
	//void closePenaltyUi();
};

class PenaltyUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	PenaltyUiLayer();
	virtual ~PenaltyUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(PenaltyUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject *pTarget, const char *pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject *pTarget, const char *pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode *pNode, cocos2d::extension::CCNodeLoader *pNodeLoader);
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	void updata();
	void closeUi();
protected:
	CCNode* frame;
	CCScale9Sprite* bgSprite;
	CCNode* _contentNode;
	VerticalList<penaltyItem> *_verticalList;
};

#endif