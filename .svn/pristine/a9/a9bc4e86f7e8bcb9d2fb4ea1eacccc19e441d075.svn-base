#ifndef SYSTEMUI_H
#define SYSTEMUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
using namespace cocos2d;
using namespace cocos2d::extension;

#include "Signals.h"

#include "AlignComponent.h"
struct RoleHeadPressed;
struct system_ui_hide;
struct clear_safe_verify_red_point;
class SystemUi : public UiInterface
{
public:

	enum
	{
		//与ccbi中按钮顺序tag值对应
		BT_Role = 0,  //角色
		BT_Package,   //背包
		BT_Skill,     //技能
		BT_Forge,     //锻造
		BT_Ride,      //坐骑
		BT_Friend,    //关系
		BT_Guild,     //行会
		BT_Set = 7,       //设置
		BT_Stall,
		BT_Consolid,
		BT_Tianming,
		//	BT_Bible,
		BT_JiaoyiHang = 11, //交易行移到下面  //BT_BBS, //change by lw 16.2.12
		BT_Total,
	};

	SystemUi();
	~SystemUi();

	void onHeadPressed(RoleHeadPressed* evt);
	void onGuildHelpPressed(system_ui_hide* trans);
	void onSafeVerifyHighLight(clear_safe_verify_red_point* pEvt);
	virtual CCNode* openUi();
	virtual void showUi(bool show);
	virtual bool showState() { return _show; }
	virtual eWorldZorder getZorder() { return WZ_SYSTEMUI; };
	virtual bool canClose() { return false; }

	void slotChangeShowState();
	void resetShowState();
	void resetShowStateNoChat();

	//new player guide
	CCRect getBtnPos(int tag);
	CCPoint getBagBtnPos();

	CCNode* getBtnNode(int pos);

	void playShiftAction(size_t index,bool bShowShortcut,float& fDelay);
	void showCurBtn();
	void setBtnHighLight(int tag);
	void revokeBtnHighLight(int tag);
private:
	bool _show;
};
struct QuestDataInited;
class SystemUiLoaderLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver 
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
	, public AlignComponent
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SystemUiLoaderLayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void skillBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void packageBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onTaskBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCharacterBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onFriendBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void onConsolidBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onStoreBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onTianmingBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGuildBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onSetBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onRideBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void onBibleBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onMartialBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBBSBtnPrssed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onduanzaoBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent );
	void onJiaoYiBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent );
	void onLuZhiBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onMoHunBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	
	//new player guide
	CCRect getBtnPos(int tag);
	CCPoint getBagBtnPos();
	CCNode* getBtnNode(int pos);

	void delayPlayShift(size_t pos, float fDelay=0.0f);
	void showCurBtn(){showImme(muPosCache);}

	void onEventQuestInited(QuestDataInited * pEvent);

	virtual void onEnter();
	virtual void onExit();

	void setBtnHighLight(int tag);
	void revokeBtnHighLight(int tag);
	void setRecordBtnState(bool isRecord);
	void pushRecordStateMsg(int stateType);
	void updateRecordBtn();
private:
	void doPlayShift(float);
	void initWithData();
private:
	size_t   muPosCache;
	CCControlButton *_recordBtn;
};


#endif //SYSTEMUI_H