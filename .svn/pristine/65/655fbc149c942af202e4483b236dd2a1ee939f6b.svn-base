#ifndef F_CACHE_DATA_BASE_H__
#define F_CACHE_DATA_BASE_H__

#include "f_factory.h"
#include <map>

enum ECacheDataPriority
{
    EDBL_Null = -1,
    EDBL_Game,

    EDBL_LevelNum,
};

class f_cache_data_base
{
public:
    f_cache_data_base(ECacheDataPriority level = EDBL_Game) : mPriority(level) {}
	virtual ~f_cache_data_base(){} 

	virtual void clear() = 0;
	virtual void load() = 0;
    ECacheDataPriority get_level() const { return mPriority; }
protected:
	template<typename K,typename T>
	T* get_map_value(std::map<K,T>& dataMap,K key)
	{
		typename std::map<K,T> ::iterator pIter = dataMap.find(key);
		if(pIter != dataMap.end())
			return &pIter->second;

		return 0;
	}
private:
    ECacheDataPriority mPriority;
};


#define AUTO_REGISTER_DATABASE(type) AUTO_REGISTER_INSTANCE_TYPE(f_cache_data_base,type)
#endif //F_CACHE_DATA_BASE_H__
