#ifndef _ACTIVEPROTO_H_
#define _ACTIVEPROTO_H_


#include "CmdAdapter.h"
#include "GvGProtocol.h"

#pragma pack(push, 1)

const int	MAX_ACTIVE_DATA				= 30;				// 活跃度最大数据
const INT	MAX_DAY_ACTIVE_DATA			= 16;				// 限时活动活跃度最大数据
const int	MAX_ACTIVE_RECEIVE			= 5;				// 活跃度奖励最大数据

struct tagActiveData
{
	int	m_n32_active_num;							// 活跃度
	int	m_n32_active_data[MAX_ACTIVE_DATA];		// 活跃度数据
	int	m_n32_day_active_data[MAX_DAY_ACTIVE_DATA];	// 每种限时活动活跃度完成次数
	int	m_b_active_receive[MAX_ACTIVE_RECEIVE];	// 活跃度领奖数据
};

// 获取活跃度信息
struct NET_SIC_get_active_info : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_active_info);
};

struct NET_SIS_get_active_info : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_active_info);

	INT32	n32_active_num;							// 活跃度
	INT32	n32_active_data[MAX_ACTIVE_DATA];		// 活跃度数据
	INT32	n32_day_active_data[MAX_DAY_ACTIVE_DATA];		// 活跃度数据
	BOOL	b_active_receive[MAX_ACTIVE_RECEIVE];	// 活跃度领奖数据
	EM_GVG_STATUS m_GvGState;	
	int     xzddOpen;		// 血战到底活动 开关 [2016-5-25 by willing]
};


// 活跃度变更
//struct NET_SIS_change_role_active_num : public s_net_cmd
//{
//	DECL_NETCMD(NET_SIS_change_role_active_num);
//	int		n_index;			// 可以领取奖励的第一个位置
//	int	n32_active_num;
//};

// 领取活跃度奖励
struct NET_SIC_role_active_receive : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_role_active_receive);
	int	nIndex;
};

struct NET_SIS_role_active_receive : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_active_receive);
	int nIndex;
	unsigned int dw_error;
};

// 一键完成活跃度
struct NET_SIC_active_done : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_active_done);
	int nIndex;
	unsigned short currentQuestId;//当前任务的Id
	unsigned int npcid;
	int nBeishu;
};


// 一键完成活跃度
struct NET_SIS_active_done : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_active_done);
	int nIndex;
	unsigned int dw_erroe_code;
};

// 每日活动一键传送 gx add 2013.12.18
struct NET_SIC_daily_act_transmit:public s_net_cmd
{
	DECL_NETCMD(NET_SIC_daily_act_transmit)
	int nIndex;//活动索引
};

// 每日活动一键传送后结果
struct NET_SIS_daily_act_transmit:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_daily_act_transmit)
	DWORD dwError;
};



//找回经验协议
struct NET_SIS_init_find_lastexp  : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_init_find_lastexp)
	int		level;
	UINT64	Findlastexp[2];
};

//找回
struct NET_SIC_find_one_lastexp  : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_find_one_lastexp);
	int		index;   
	signed char	type;//金钱，还是元宝
};


//一键找回
struct NET_SIC_find_all_lastexp : public s_net_cmd
{

	DECL_NETCMD(NET_SIC_find_all_lastexp);
	signed char type;//金钱，还是元宝
};


struct NET_SIS_find_one_lastexp : public s_net_cmd
{
	
	DECL_NETCMD(NET_SIS_find_one_lastexp);
	int		index;
	DWORD errorinfo;
};

struct NET_SIS_find_all_lastexp : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_find_all_lastexp);
	DWORD errorinfo;
};


#pragma pack(pop)

#endif //ACTIONPROTO_H