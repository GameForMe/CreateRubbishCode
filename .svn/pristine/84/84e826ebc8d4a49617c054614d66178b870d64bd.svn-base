/**
 *	@file		WingEvolveUi.h
 *	@author		guantiejun
 *	@date		2016/04/19
 *	@version	
 *	@brief		翅膀进化界面
 */

#ifndef FMB_EVOLVE_UI_H
#define FMB_EVOLVE_UI_H

#include "UiInterface.h"
#include "NormalLayer.h"

using namespace cocos2d;
using namespace cocos2d::extension;

const int max_base_att = 6;
const int max_add_att = 5;

class WingEvolveUiLayer;
class GameActionNode;
class ListControl;
struct evolve_success_event;

class WingEvolveUi : public UiInterface
{
public:
	WingEvolveUi();
	~WingEvolveUi();

	virtual CCNode *openUi();
	WingEvolveUiLayer *getUiLayer();
};
class LabelEx;
struct item_num_change;
class WingEvolveUiLayer : public NormalLayer
{
public:
	WingEvolveUiLayer();
	~WingEvolveUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(WingEvolveUiLayer, create);

	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);

	void open_node_init(INT64 wing_id);
	void set_wing_id(INT64 wing_id);
	inline INT64 get_wing_id(){return m_wing_id;}

private:
	void onEvolve(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onLeft(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onRight(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onCue(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onItem(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onClose(CCObject * pSender, CCControlEvent pCCControlEvent);

	void evolve_success(evolve_success_event* event);

	void refresh_node();
	void refresh_left_info();
	void refresh_att_node();
	void refresh_icon(INT64 src_equip_id, DWORD dest_equip_type_id, DWORD item_type_id,bool enough_need_item);
	GameActionNode* get_success_effect();
	void play_success_effect();
	void refresh_special_att(LabelEx* label, int special_index, std::string special_dest_1, std::string special_dest_2);

	void on_event_item_change(item_num_change* evt);
	void get_all_equip_vector();
	void create_effect_list();
	void create_cue_point();
	void move_list(bool is_init);
	void touch_end(CCTouch *pTouch);
	void add_effect_to_node(CCNode* node, std::string effect_name);

private:
	CCNode* m_node_1;
	CCNode* m_node_2;
	CCNode* m_node_3;

	CCNode* m_bottom_node;

	LabelFT* m_wing_name;
	LabelFT* m_put_cue;
	LabelEx* m_level_cue;
	LabelEx* m_special_cue;
	LabelEx* m_special_right_cue;

	LabelFT* m_add_point;

	CCControlButton* m_button_left;
	CCControlButton* m_button_right;
	ListControl* m_list;
	CCNode*	m_light_cue_node;
	CCSprite* m_left_sprite;
	CCSprite* m_right_sprite;

	//-----------------------------------

	LabelFT* m_dest_name;
	LabelFT* m_src_name;
	LabelFT* m_item_name;
	LabelFT* m_need_num_1;
	LabelFT* m_need_num_2;

	CCNode* m_item_node_1;
	CCNode* m_item_node_2;
	CCNode* m_item_node_3;

	CCControlButton* m_button_wing;

	//-----------------------------------

	LabelFT* m_base_att_name[max_base_att];
	LabelFT* m_base_att_value[max_base_att];
	LabelFT* m_add_att_name[max_add_att];
	LabelFT* m_add_att_value[max_add_att];
	LabelFT* m_buff_cue_1;
	LabelFT* m_buff_cue_2;
	LabelFT* m_no_att_cue;

	LabelEx*	m_wing_spec_text;
	//-----------------------------------

	GameActionNode* m_success_effect;

	INT64 m_wing_id;
	DWORD m_dest_wing_id;
	bool m_is_move;
	float m_every_move_x;
	float m_begin_offset_x;
	int m_cur_pos;
	std::set<std::string> m_plist;
	std::vector<DWORD> m_all_vector;
};

#endif