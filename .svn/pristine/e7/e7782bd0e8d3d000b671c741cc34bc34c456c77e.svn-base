#include "SignInUi.h"
#include "World.h"
#include "UiResourceMgr.h"
#include "CfgReader.h"
#include "UiLoader.h"
#include "BaseDefine.h"
#include "ItemNode.h"
#include "UiTools.h"
#include "RewardMgr.h"
#include "AnimationCache.h"
#include "BSAnimate.h"
#include "RewardMgr.h"
#include "UiManager.h"
#include "LocalPlayer.h"
#include "RoleManager.h"
#include "ItemTip.h"
#include "MessageBoxUi.h"
#include "StringMgr.h"
#include "PackageManager.h"
#include "StringMgr.h"
#include "ToolTip.h"
CCNode * SignInUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["SignInUiFrame"] = UiSpriteLoader<SignInUiFrame>::loader();
	nodeLoaders["FrameSprite"] = FrameSpriteLoader::loader();
	CCNode *uiNode = readUiFromCCBI("dailysigninui", nodeLoaders, _loadSpriteSheet);
// 	if (uiNode!= NULL)
// 	{
// 		CCSize winSize = CCDirector::sharedDirector()->getWinSize();
// 		uiNode->setPosition(winSize.width/2.0f, winSize.height/2.0f +25.0f);
// 	}
	return uiNode;
}

SignInUiFrame * SignInUi::getUiFrame()
{
	return getUiNodeByTag<SignInUiFrame>(WCT_SignInUi);
}

//////////////////////////////////////////////////////////////////////////

SignInUiFrame::SignInUiFrame()
	: _curDay(-1)
	, _curSelect(-1)
	,_clickenable(true)
{
}

SignInUiFrame::~SignInUiFrame()
{

}

cocos2d::SEL_MenuHandler SignInUiFrame::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler SignInUiFrame::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onSignInBtnPressed", SignInUiFrame::onSignInBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", SignInUiFrame::onCloseBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onDescBtnPressd", SignInUiFrame::onDescBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onKnowBtnPressed", SignInUiFrame::onOkBtnPressed);
	return NULL;
}

void SignInUiFrame::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	//_curDay = World::getInstance()->getServerActivityDay();//当前是开服第几天 ，从0开始
	//_curDay--;//开服天数从0开始
	_frame=(CCSprite*)getChildByTag(0);
	_descframe = NULL;
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return;
	_curDay = ploc->GetDayNumFromRoleCrateTime();//从0开始的

	if (_curDay >= MAX_SIGN_DAY_NUM)
		_curDay = MAX_SIGN_DAY_NUM-1;
	if(_curDay < 0)
		_curDay = 0;

	_curSelect = _curDay;
	_byType = NORMAL_SIGN;
	_descframe = dynamic_cast<FrameSprite*>(_frame->getChildByTag(40));
	_descframe->retain();
	_descframe->removeFromParent();
	
	CCNode *awardNode = _frame->getChildByTag(NT_Award);
	awardNode->setZOrder(1);
	if(awardNode)
	{
		CCNode *awardItemNode = awardNode->getChildByTag(NT_AwardItem);
		if (awardItemNode)
		{
			//已领图标
			CCSprite *reciveSp = CCSprite::create();
			reciveSp->setPosition(awardItemNode->getPosition());
			reciveSp->setTag(NT_AwardBegin + NT_AwardItem + 1);
			reciveSp->setVisible(false);
			awardNode->addChild(reciveSp,1);

			ItemNode *inode = ItemNode::create();
			inode->hideItemOpBtn();
			inode->setTag(NT_ItemNodeBegin+NT_AwardItem);
			awardNode->addChild(inode,0);
			inode->setPosition(awardItemNode->getPosition());
		}
	}

	//inode->setBlank();
	if (isAward(_curDay))
	{
		awardNode->setVisible(true);
	}

	for (int i=NT_DayBegin; i<NT_ItemNum; i++)
	{
		CCNode *n =_frame->getChildByTag(i);
		CC_ASSERT(n!=NULL);
		_pos[i] = n->getPosition();

		ItemNode *node = ItemNode::create();
		node->setPosition(_pos[i]);
		node->hideItemOpBtn();
		node->setTag(NT_ItemNodeBegin+i);
		node->setBlank();
		_frame->addChild(node,1);
	}

	//当前选中
	_curSelectSprite = CCSprite::createWithSpriteFrameName("dailysigninui_selectrect");
	_frame->addChild(_curSelectSprite, 0);
	_curSelectSprite->setPosition(_pos[_curDay]);
	_curSelectSprite->setVisible(false);

	for (int i=NT_DayBegin; i<NT_DayEnd; i++)
	{
		CCSprite *mask = dynamic_cast<CCSprite*>(_frame->getChildByTag(i));
		mask->setVisible(true);
 		mask->setZOrder(1);

		if (isAward(i))
		{//大奖
			CCSprite *prizeIcon = CCSprite::create();
			prizeIcon->setAnchorPoint(ccp(0.0f, 0.0f));
			prizeIcon->setPosition(CCPointZero);
			mask->addChild(prizeIcon,0,NT_AwardBegin+i);
			if(RewardMgr::getInstance()->isGetBigSignReward(i))
			{
				setAwardReciveState(true,i);
				showReciveIcon(true);
			}
			else
			{
				setAwardReciveState(false, i);
				showReciveIcon(false);
			}
		}

		CCSprite *signInSprite = CCSprite::create();
		if(!signInSprite)
			continue;
		signInSprite->setPosition(_pos[i]);
		signInSprite->setTag(NT_ItemNodeBegin * 3 + i);
		signInSprite->setVisible(false);
		_frame->addChild(signInSprite,1);
	}

	for (int i = NT_DayBegin; i<= _curDay; i++)
	{
		if (RewardMgr::getInstance()->isSignedCurDay(i))
			showSignInIcon(i);

		if (i == _curDay && !RewardMgr::getInstance()->isSignedCurDay(i))
				continue;	
		
		std::ostringstream ostr;
		CCSprite *sp = dynamic_cast<CCSprite*>(_frame->getChildByTag(i));
		ostr << "dailysigninui_already" << i+1;
		sp->setDisplayFrame(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(ostr.str().c_str()));
		ostr.str("");
	}

	// 当天奖励显示
	_selectSprite = CCSprite::createWithSpriteFrameName("dailysigninui_select");
	_frame->addChild(_selectSprite,0);
	_selectSprite->setPosition(_pos[_curDay]);
	//_selectSprite->setZOrder(3);
	_awardInfo = RewardMgr::getInstance()->getAwardInfoByIndex(_curDay);
	
	//初始化签到按钮是否高亮
	if (RewardMgr::getInstance()->isSignedCurDay(_curSelect))
	{
		setButtonTouchEnable(false);
	}
	for(int i=0;i<12;i++)
	{
	_vipsprite=dynamic_cast<CCSprite*>(_frame->getChildByTag(i+51));
	_vipsprite->setZOrder(2);
	}
	

	updateDisplay();

	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 0, true);
	setAllChildernButtonPriority(this, 0);
}

void SignInUiFrame::onExit()
{
	CCSprite::onExit();
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CC_SAFE_RELEASE(_descframe);
}

bool SignInUiFrame::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	if(!_clickenable)
		return true;
	CCPoint framePoint = _frame->convertTouchToNodeSpace(pTouch);
	const CCSize &frameSize = _frame->getContentSize();
	CCRect frameRect(0.0f, 0.0f, frameSize.width, frameSize.width);
	if (frameRect.containsPoint(framePoint))
	{
		int index = getItemUnderPoint(framePoint);
		if (index == -1)
		{
			return true;
		}

		if (index >= NT_DayBegin && index < NT_DayEnd)
		{
			if (_curSelect == index)
				return true;
			else
				_curSelect = index;

			_curSelectSprite->setPosition(_pos[index]);
			_curSelectSprite->setVisible(true);

			if (_curSelect > _curDay)
			{
				setButtonTouchEnable(false);
			}
			if (RewardMgr::getInstance()->isSignedCurDay(index))
			{//已签到
				setButtonTouchEnable(false);
			}

			if(RewardMgr::getInstance()->canSign(index))
			{//未签到
				if(RewardMgr::getInstance()->canNormalSign(index))
					_byType = NORMAL_SIGN;
				else
					_byType = REPAIR_SIGN;

				setButtonTouchEnable(true);
			}
			if (isAward(index))
			{
				CCNode *node = _frame->getChildByTag(NT_Award);
				node->setVisible(true);
				if (RewardMgr::getInstance()->isGetBigSignReward(index))
					showReciveIcon(true);
				else
					showReciveIcon(false);
			}
			else
			{
				CCNode *node = _frame->getChildByTag(NT_Award);
				node->setVisible(false);
			}
			_awardInfo = RewardMgr::getInstance()->getAwardInfoByIndex(index);
			updateDisplay();
		}

// 		if (index >= NT_DayEnd && index < NT_ItemNum)
// 		{//显示物品信息
// 			ItemTip::getInstace()->open();
// 			ItemTip::getInstace()->setPosition(_pos[index]);
// 			ItemTip::getInstace()->setDataId(_awardInfo.ItemId[index-NT_DayEnd]);
// 			ItemTip::getInstace()->hideOpBtn();
// 		}
// 
// 		if (index == NT_AwardItem && isAward(_curSelect))
// 		{//奖励tips
// 			ItemTip::getInstace()->open();
// 			ItemTip::getInstace()->setPosition(getChildByTag(NT_Award)->getPosition());
// 			ItemTip::getInstace()->setDataId(_awardInfo.ItemId[index-NT_DayEnd]);
// 			ItemTip::getInstace()->hideOpBtn();
// 		}
		return true;
	}
	return false;
}

void SignInUiFrame::onSignInBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if (!_clickenable)
		return;
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_9);
	//_clickenable = false;
	if (_byType == NORMAL_SIGN)
	{
		if (isAward(_curSelect)&&RewardMgr::getInstance()->isLeakSign(_curSelect))
		{//漏签
				MessageBoxUi *repairSignUI = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI, GET_STR(7001).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
				World::getInstance()->getScene()->addChild(repairSignUI, WZ_MESSAGEBOX);
				repairSignUI->signalOkBtnPressed.connect(this, &SignInUiFrame::leakConfirm);
				repairSignUI->signalCancelBtnPressed.connect(this, &SignInUiFrame::setClickEnable);
		}
		else
		{
				RewardMgr::getInstance()->sendSign2Server(_curSelect,_byType);
			
		}
	}
	else
	{
		MessageBoxUi *repairSignUI = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI, GET_STR(7000).c_str(), TEXT_UTF8_QUEDING,TEXT_UTF8_QUXIAO);
		World::getInstance()->getScene()->addChild(repairSignUI, WZ_MESSAGEBOX);
		repairSignUI->signalOkBtnPressed.connect(this, &SignInUiFrame::ToRepairSign);
		repairSignUI->signalCancelBtnPressed.connect(this, &SignInUiFrame::setClickEnable);
	}
}

void SignInUiFrame::onCloseBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_5);
	if (RewardMgr::getInstance()->isSignedCurDay(_curDay))
	{//已签到
		World::getInstance()->setSignBtnAction();
	}
	CLOSE_UI(WCT_SignInUi);
}

void SignInUiFrame::updateDisplay()
{
	if (isAward(_curSelect))
	{//显示大奖node
		CCSprite *node = dynamic_cast<CCSprite*>(_frame->getChildByTag(NT_Award));
		node->setVisible(true);
		ItemNode *inode = dynamic_cast<ItemNode *>(node->getChildByTag(NT_ItemNodeBegin + NT_AwardItem));
		CC_ASSERT(inode != NULL);
		if(0 == _awardInfo.ItemId[5] || -1 == _awardInfo.ItemId[5])
			return;
		inode->setDataId(_awardInfo.ItemId[5]);
		inode->setNum(_awardInfo.ItemNum[5]);
		inode->setClickable(true);
//		inode->stopAnimation();
		//inode->runAnimation("qianghua15");
	}

	for (int i = NT_DayEnd; i < NT_ItemNum ;  i++)
	{
		ItemNode * node =dynamic_cast<ItemNode *>(_frame->getChildByTag(NT_ItemNodeBegin + i));
		CC_ASSERT(node != NULL);
		node->setDataId(_awardInfo.ItemId[i - NT_DayEnd]);
		node->setPosition(_pos[i]);
		node->setNum(_awardInfo.ItemNum[i - NT_DayEnd]); //显示礼包中某些物品所需个数;
//		node->stopAnimation();
		node->setClickable(true);
		node->hideItemOpBtn();
		//node->runAnimation("qianghua15");
	}
}

int SignInUiFrame::getItemUnderPoint(const CCPoint &point)
{
	for (int i = NT_DayBegin; i< NT_ItemNum; i++)
	{
		float x = _pos[i].x;
		float y = _pos[i].y;
		CCRect rect;
		if (i < NT_DayEnd)
		{
			rect = CCRectMake(x - DAY_CONTENTSIZE/2, y-DAY_CONTENTSIZE/2, DAY_CONTENTSIZE, DAY_CONTENTSIZE);
		}
		else
		{
			rect = CCRectMake(x - MASK_CONTENTSIZE/2, y-MASK_CONTENTSIZE/2, MASK_CONTENTSIZE, MASK_CONTENTSIZE);
		}
		if (rect.containsPoint(point))
		{
			return i;
		}
	}
	CCNode *node = _frame->getChildByTag(NT_Award);
	CCRect rect =  CCRectMake(node->getPositionX() - MASK_CONTENTSIZE/2, node->getPositionY()-MASK_CONTENTSIZE/2, MASK_CONTENTSIZE, MASK_CONTENTSIZE);
	if (rect.containsPoint(point))
	{
		return NT_AwardItem;
	}
	return -1;
}

ItemNode *SignInUiFrame::getItemNode(int i)
{
	return dynamic_cast<ItemNode*>(_frame->getChildByTag(NT_ItemNodeBegin + i));
}

void SignInUiFrame::showSignInIcon(int i)
{
	CCSprite* signInIcon =dynamic_cast<CCSprite*>(_frame->getChildByTag(NT_ItemNodeBegin * 3 + i));
	CCSpriteFrame *spriteFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("dailysigninui_signin");
	CC_ASSERT(spriteFrame != NULL && signInIcon != NULL);
	signInIcon->setDisplayFrame(spriteFrame);
	signInIcon->setVisible(true);
	signInIcon->setZOrder(3);
}

void SignInUiFrame::showReciveIcon(bool show)
{
	CCNode *awardNode = _frame->getChildByTag(NT_Award);
	if (awardNode)
	{
		CCSprite *reciveSp = dynamic_cast<CCSprite*>(awardNode->getChildByTag(NT_AwardBegin + NT_AwardItem + 1));
		CCSpriteFrame *spriteFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("rendui_lingqu");
		reciveSp->setDisplayFrame(spriteFrame);
		reciveSp->setVisible(show);
	}
}

void SignInUiFrame::runSignInAni()
{
	CCSprite* signInIcon =dynamic_cast<CCSprite*>(_frame->getChildByTag(NT_ItemNodeBegin * 3 + _curSelect));
	CCSpriteFrame *spriteFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("dailysigninui_signin");
	CC_ASSERT(spriteFrame != NULL && signInIcon != NULL);
	signInIcon->setDisplayFrame(spriteFrame);
	signInIcon->setScale(1.2f);

	CCFiniteTimeAction *fadeIn = CCFadeIn::create(0.3f);
	CCFiniteTimeAction *scaleSize = CCScaleTo::create(0.3f,1.0f);
	CCFiniteTimeAction *spawn = CCSpawn::createWithTwoActions(fadeIn, scaleSize);
	CCFiniteTimeAction *seq = CCSequence::create( CCCallFuncN::create(this, SEL_CallFuncN(&SignInUiFrame::callbackShowSignIn)),spawn,NULL);
	signInIcon->stopAllActions();
	signInIcon->runAction(seq);
}

bool SignInUiFrame::isAward(int i)
{
	if (6 == i || 14 == i || 24 == i)
		return true;
	return false;
}

void SignInUiFrame::ToRepairSign()
{
	//判断元宝
	if (PackageManager::getInstance()->getYuanBao() < 10)
	{
		//弹出充值提示
		/*MessageBoxUi *signUI = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(164).c_str(), TEXT_UTF8_CHONGZHI,TEXT_UTF8_QUXIAO);
		World::getInstance()->getScene()->addChild(signUI, WZ_MESSAGEBOX);
		signUI->signalOkBtnPressed.connect(this, &SignInUiFrame::ToCharge);
		signUI->signalCancelBtnPressed.connect(this, &SignInUiFrame::setClickEnable);*/
		RechargeNewUiMgr::GetInstance()->openRechargeNewUi();		
		RechargeNewUiLayer *layer = GET_UI(RechargeNewUi,WCT_RECHARGENEWUI)->getLayer();
		if (!layer)
			return;
		layer->signalCancelBtnPressed.connect(this, &SignInUiFrame::setClickEnable);
		return;
	}

	RewardMgr::getInstance()->sendSign2Server(_curSelect,_byType);
}

void SignInUiFrame::setButtonTouchEnable(bool canTouch)
{
	CCControlButton *signinButton = dynamic_cast<CCControlButton*>(_frame->getChildByTag(NT_Btn));
	CC_ASSERT(signinButton != NULL);
	//signinButton->setTouchEnabled(canTouch);
	signinButton->setEnabled(canTouch);
/*	if (canTouch)
		setButtonSpriteFrame(signinButton,"dailysigninui_btnn","dailysigninui_btnh","dailysigninui_btnn");
	else
		setButtonSpriteFrame(signinButton,"dailysigninui_btnd","dailysigninui_btnh","dailysigninui_btnn");	*/	
}

void SignInUiFrame::ToCharge()
{
	_clickenable = true;
	OPEN_UI(WCT_ChongZhiActivityFarmeUI);
}

void SignInUiFrame::callbackShowSignIn(CCNode *pSender)
{
	pSender->setVisible(true);
	setButtonTouchEnable(false);
	_clickenable = true;
}

void SignInUiFrame::setClickEnable()
{
	_clickenable = true;
}

void SignInUiFrame::leakConfirm()
{
	RewardMgr::getInstance()->sendSign2Server(_curSelect,_byType);
}

void SignInUiFrame::setAwardReciveState(bool isGet, int nDay)
{
	if (isAward(nDay))
	{
		CCNode *awardNode = _frame->getChildByTag(nDay); 
		CCSprite* awardIcon =dynamic_cast<CCSprite*>(awardNode->getChildByTag(NT_AwardBegin+nDay));
		//awardIcon ->setScale(0.6);
		if (awardNode && awardIcon)
		{
			CCSpriteFrame *spriteFrame;
			if(isGet)
				spriteFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("dailysigninui_boxnormal");
			else
				spriteFrame =  CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("dailysigninui_boxhigh");
			CC_ASSERT(spriteFrame != NULL);
			awardIcon->setDisplayFrame(spriteFrame);
		}
	}
}

void SignInUiFrame::updateAwardShow()
{
	int nDay = 0, i = 1;
	do 
	{
		nDay = i*(i+5);
		if (RewardMgr::getInstance()->isGetBigSignReward(nDay))
		{
			setAwardReciveState(true, nDay);
			showReciveIcon(true);
		}
		else
		{
			setAwardReciveState(false, nDay);
			showReciveIcon(false);
		}
		
		i++;
	} while (nDay < 24);
}
void SignInUiFrame::onDescBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	CC_ASSERT(_descframe != NULL);
	if(_descframe->getParent() == NULL)
	{
		_descframe->setVisible(true);
		_descframe->setTouchPriority(-1);
		setAllChildernButtonPriority(_descframe,-1);
		_descframe->setTouchEnable(true);
		_descframe->setPosition(ccp(CCDirector::sharedDirector()->getWinSize().width / 2.0f, CCDirector::sharedDirector()->getWinSize().height*0.55f));
		World::getInstance()->getScene()->addChild(_descframe,WZ_POPUI);
	}
}
void SignInUiFrame::onOkBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_5);
	CC_ASSERT(_descframe != NULL);
	_descframe->setTouchEnable(false);
	_descframe->removeFromParent();
}