#ifndef CLIENTUPDATE_H
#define CLIENTUPDATE_H

#include "cocos2d.h"
#include "Signals.h"
#include "BaseDefine.h"
using namespace cocos2d;
struct s_net_cmd;

//[bing] 游戏状态
enum SERVER_TYPE
{
	ST_LOGIN,
	ST_GAME,
	ST_NONE
};

enum eSceneType
{
	ST_UPDATESCENE,
	ST_LOGINSCENE,
	ST_CREATEROLESCENE,
	ST_SELECTROLESCENE,
	ST_WORLDSCENE,
	ST_NONESCENE
};

#define  CHECK_SCENE_TRANSATION_FINISHED CC_ASSERT(ClientUpdate::getInstance()->sceneTransationDidFinished())

class ClientUpdate : public CCObject
{
public:
	ClientUpdate();
	static ClientUpdate *getInstance();
	virtual void update(float dt);
	void init();
	void destroy();
	void setJoinGame(bool join = true) { _isJoinGame = join; }

	void connected();
	void disconnected();
	void connectfailed();
	void setCmd(s_net_cmd *cmd);
	void setServerType(SERVER_TYPE type) { _type = type; }

	void onMessageBoxOk();
	void onMessageBoxCancel();
	void onMessageBoxCancelDoNothing();

	void gotoSelectServer();
	void gotoSeverListMsg();
	void gotoSelectServer2();
	void gotoSeverListMsg2();

	void gameSelfExitMsg();
	void doGameSelfExit();
	void onExitGameBtn();
	void onContinueBtn();

	void dosdkInitFailed();
	void sdkInitFailedMsg();
	bool getSDKInitFailedFlag() { return _sdkInitFailed; }

	void setLoadLoginUI() { _loadLoginUI = true; }
	void setGotoLoginUI() { _gotoLoginUI = true; }


	INT64 getCurrentTime() { return _time; }

	//[bing] 掉线重连等待时间 暂设10秒
	void ReLoginWait(float fDT);

	bool sceneTransationDidFinished()const;

	void safeReplaceToCreateRoleScene();
	void backToSelectServer();
    void showUpdatingPage();
private:
	void closeCurScene();

	void checkUpdateRes(float dt);
	void checkLaunchFinished();
    
    void confirmRetryCheckUpdate();
    
    void retryInDelay(float fdt);
public:
	eSceneType _currentScene;
	eSceneType _lastScene;
	bool _firstCircle;

	c_signal<void, float> signalUpdate;
protected:
	s_net_cmd *_cmd;
	SERVER_TYPE _type;
	bool _isJoinGame;
	INT64 _time;
	INT64 _lastSendTime;
	INT64 _lastMessageTime;
	bool _gotoServerList;
	bool _gotoServerList2;
	bool _loadLoginUI;
	bool _gotoLoginUI;
	bool _gameselfexit;
	bool _sdkInitFailed;
	bool _isGamePause;
	bool _isDidFinishLaunching;
	bool _isSDKInitSuccess;
	bool _isSwitchAccount;

	bool _inCrossSceneLastFrame;
    
    bool _isCheckUpdating;
public:
	inline bool isGamePause() {return _isGamePause;}
	void setGamePause(bool isPause);
	void setDidFinishLaunching(bool isFinishLaunching) {_isDidFinishLaunching = isFinishLaunching;}
	void setSDKInitSuccess() {_isSDKInitSuccess = true;}
	inline void setSwitchAccount(bool isSwitchAccount = true) { _isSwitchAccount = isSwitchAccount; }
	inline bool getIsSwitchAccount() { return _isSwitchAccount; }
};

void exitGame();


#endif //CLIENTUPDATE_H