#ifndef ATTACKACTION_H_
#define ATTACKACTION_H_

#include "Role.h"
#include <vector>

enum E_Role_Action_Type
{
	ERAT_Action_None,
	ERAT_Action_Skill,				//释放技能
	ERAT_Action_RandMove,			//随机移动
	ERAT_Action_RoundWall,			//围绕火墙移动
	ERAT_Action_RoundPet,			//围绕宝宝移动
	ERAT_Action_Max,
};

enum E_Action_Contion_Type
{
	EACT_Condition_None,
	EACT_Condition_InWall,			//是否在火墙中
	EACT_Condition_Level,			//等级差距 
	EACT_Condition_SelfHp,			//自己血量
	EACT_Condition_EnemyHp,			//敌人血量
	EACT_Condition_SelfHavePet,		//自己是否有宝宝
	EACT_Condition_EnemyHavePet,	//敌人是否有宝宝
	EACT_Condition_Distance,		//距离
	EACT_Condition_Max,
};

//火枪数据
struct SkillWallData 
{
	unsigned int m_Actor;			//施法者
	unsigned int m_SkillId;			//技能id
	CCPoint		 m_Pos;				//坐标
	int m_ActTime;					//时间
};

class ActionCondition;
class RoleAction
{
public:
	RoleAction();
	virtual ~RoleAction();
	virtual bool Execute() = 0;
	virtual bool CanExecute();
public:
	int					m_iId;
	E_Role_Action_Type	m_eType;
	RoleType			m_eProfession;		//职业
	int					m_iValue;
	std::vector<ActionCondition*> m_vConditions;
	bool				m_bIsRunning;
};

class ActionCondition
{
public:
	ActionCondition();
	virtual ~ActionCondition();
	virtual bool CanExecute() = 0;
public:
	E_Action_Contion_Type m_eType;
	int m_iValue;
};

class RoleActionMgr
{
public:
	RoleActionMgr();
	~RoleActionMgr();
	static RoleActionMgr* GetInstance();
	void LoadRoleAction();
	void Destory();
	bool CanUseSkill(int skillId);
	bool ExecuteAction(float dt);
	void AddSkillWall(unsigned int m_Actor, unsigned int skillId, unsigned int targetId);
	void Update(unsigned int dt);
	bool IsInWall(unsigned int roleId, bool own);
	CCPoint& GetSkillWallPos(unsigned int roleId, CCPoint& pos);
private:
	std::vector<RoleAction*>	roleActionList;
	std::vector<RoleAction*>	professionAction;
	std::vector<RoleAction*>	skillAction;
	bool						isUsed;
	std::vector<SkillWallData>	skillWallList;
	unsigned int				oldTime;
	float						totalTime;
};

#endif