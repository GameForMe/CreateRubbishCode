#ifndef UIINTERFACE_H
#define UIINTERFACE_H

class UiMgr;

#include "BaseDefine.h"
#include "cocos2d.h"
#include "cocos-ext.h"
#include <algorithm>
USING_NS_CC;
USING_NS_CC_EXT;

class CloseUIObject : public CCObject
{
public:
	void CloseUI(float fdt);
	eWroldChildTag e;
};

enum RR_PopTag{
	RRP_NORMAL,
	RRP_MOBAI,
};

class UiInterface
{
	friend class UiMgr;
public:
	UiInterface() { bIsFadeOut = false; _ccbiData = NULL; _size = 0; _popupPreUiOnClose = false; m_popTag = RRP_NORMAL; }
	virtual ~UiInterface() {_loadSpriteSheet.clear();}

	virtual CCNode* openUi() = 0;
	virtual void showUi(bool show) { }
	virtual bool showState() { return false; }
	virtual eWorldZorder getZorder() { return WZ_POPUI; };
	virtual bool canClose() { return true; }
	virtual void closeUI()
	{
		GUIReader::shareReader()->purge();
		DictionaryHelper::shareHelper()->purgeDictionaryHelper();
		ActionManager::shareManager()->purge();
	}
	virtual void popupUIOnEnd(){}

	void setCCBIData(unsigned char* ccbiData, unsigned long size){_ccbiData = ccbiData;	_size=size;};

	bool bIsFadeOut;
	CloseUIObject DelayCloseUIObj;

	template<typename T>
	void mergeSheet(T const& ctn){
		std::copy(ctn.begin(),ctn.end(),std::inserter(_loadSpriteSheet,_loadSpriteSheet.begin()));
	}

	void setPopupPreUiOnClose(bool popUp) { _popupPreUiOnClose = popUp; }
	bool isPopupPreUiOnClose() const { return _popupPreUiOnClose; }
	
	RR_PopTag getPopTag() const { return m_popTag; }
	void setPopTag(RR_PopTag tag) { m_popTag = tag; }

protected:
	std::set<std::string> _loadSpriteSheet;
	unsigned char* _ccbiData;
	unsigned long _size;
	bool _popupPreUiOnClose; // 为了解决关闭UI时，返回前一个UI产生的视觉延迟感，并与任务面板自动弹出有冲突的问题
	RR_PopTag m_popTag;
};

#endif //UIINTERFACE_H