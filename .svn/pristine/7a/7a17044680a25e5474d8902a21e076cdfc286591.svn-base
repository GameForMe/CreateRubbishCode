#ifndef  _APP_DELEGATE_H_
#define  _APP_DELEGATE_H_

//#define _CRTDBG_MAP_ALLOC
//#include <stdlib.h>
//#include <crtdbg.h>

#include "Platform.h"
#include "cocos2d.h"
#include "cocos-ext.h"
#include "GameActionNode.h"

#include "cc_profiler.h"
#include "cc_timer.h"
//#include "ProfileListener.h"
#include "ProfileLogger.h"

using namespace cocos2d;
USING_NS_CC_EXT;

//class MessageBoxUi;
//extern MessageBoxUi *g_msgUi;


class BackKeyDelegate;
class c_thread;
class AppDelegate;
class GoLoginScene;
class c_sparse_graph;

class AppTouchHandle : public CCObject , public CCTouchDelegate
{
public:
	void init(GoLoginScene* pAppDelegate);
	void destroy();
	virtual bool ccTouchBegan(CCTouch *touch, CCEvent *event);
	

private:
	GoLoginScene* m_pApp;
};

/**
@brief    The cocos2d Application.

The reason for implement as private inheritance is to hide some interface call by CCDirector.
*/

class GoLoginScene : public CCObject
{
public:

	friend class CCImage;

	GoLoginScene()
	{
		//m_pActionNode = new GameActionNode();
		//m_bResLoadFinish = false;
		m_AppDelegate = NULL;

		m_curLoadIndex=0;
		m_totalCount=0;
		m_curPlayIndex=0;
	}

	void onInit(AppDelegate* pApp);

	void MovieBegin(float dt);
	void CGVideoOn( float dt );
	void showUPdateSceneOn(float dt);
	void loginSceneOn(float dt);
	void showHealthNotice(float dt);
	void showsdklogo(float dt);

	void CloseMovie();
	void BtnCloseMovie(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void ImgLoadCallBack( CCObject* pTexture );

	//GameActionNode* GetActionNode()
	//{ 
	//	return m_pActionNode;
	//}

	//CCImage* m_vecImage[211];
	//[bing] 资源加载线程是否完成
	//bool m_bResLoadFinish;

private:
	//GameActionNode* m_pActionNode;
	AppTouchHandle mTouch;
	AppDelegate* m_AppDelegate;
	int m_curLoadIndex;
	int m_totalCount;
	int m_curPlayIndex;
	CCSprite* m_Sprite;
	bool m_clickToEnd;
};

class  AppDelegate : private cocos2d::CCApplication
{
public:
    AppDelegate();
    virtual ~AppDelegate();

	void initDelegate();
    /**
    @brief    Implement CCDirector and CCScene init code here.
    @return true    Initialize success, app continue.
    @return false   Initialize failed, app terminate.
    */
    virtual bool applicationDidFinishLaunching();

    /**
    @brief  The function be called when the application enter background
    @param  the pointer of the application
    */
    virtual void applicationDidEnterBackground();

    /**
    @brief  The function be called when the application enter foreground
    @param  the pointer of the application
    */
    virtual void applicationWillEnterForeground();

	void initDatabaseFile();
	void initDataFromXML();

	void initCfgFile();
	void registerNodeLoaderLibary();
	void unregisterNodeLoaderLibary();
	void RunGame(bool bIsDownloadFinish);
   // void addSearchPath(const char* path);
	void setGameMusicVolume();

	void doSthWhenUpdateFinished(bool bNeedRestart);
    void addUpdateWaitingPage(CCScene *curScene);

	void end_game();

	c_sparse_graph* m_sparse_graph;
private:
	void initBeforeUpdate();

	void init_script_support();

	THREAD_FUNC _resload_thread_func(void* thread_);

	GoLoginScene _loginScene;
	c_thread* m_loadres_thread;	//[bing] 资源加载线程
#ifndef WIN32
	BackKeyDelegate *_backKeyDel;
#endif

public:
	GoLoginScene& GetGoLogin() { return _loginScene; }
};

extern profile_util::cc_profiler g_Profiler;
//extern void releaseQuickConfig();
#endif // _APP_DELEGATE_H_

