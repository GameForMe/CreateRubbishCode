#ifndef _ATTRES_H_
#define _ATTRES_H_

#include <map>
#include <string>
#include <vector>
#include "role_title_protocol.h"

#define JiangLiNumber 3 //奖励数
#define HuoYueRewardItemNumber 5//活跃度奖励item个数
#define FRAME_COUNTS 17
enum EOPENUI
{
	EOP_Null			= -1,	
	EOP_ShuangXiu		=	0,		//附近
	EOP_HUA			=	1,		//送花
	EOP_RIDE			=	2,		//坐骑
	EOP_GUILD		=	3,		//行会上香
	EOP_TA			=	4,		//神秘宝箱
	EOP_CHOUJIANG	=	5,	//竞技场
	EOP_INSTANCE	=	6,		//藏经阁
	EOP_JUNXU		=	7,	//军需
	EOP_EquipLevelUp		=	8,	//装备升级
	EOP_EquipStrengThen		=	9,	//装备强化
	EOP_FusionLevelUp		=	10,	//装备升阶
	EOP_FuBenFinalInfo		=	11,	//战役
	EOP_CBGFinishedOnce		=	12,	//藏宝阁
	EOP_DAY					=	13,
	EOP_RewardQuest         =   14,//悬赏任务
	EOP_KillElitStrange     =   15, //击杀精英怪
	EOP_BiQi                =   16,//比奇任务
	EOP_SkillUnderstance     =   17,//技能领悟
	EOP_OpenGoldBox          =   18,//开启金宝箱
	EOP_EquipClear           =   19,//装备洗练
	EOP_OpenEquipBox         =   20,//开启装备宝箱
	EOP_OpenAnswerUI         =   21,//开启答题界面
};
// 活跃度数据
struct tagActiveProto
{
	int         activeID;//配置表里活动ID
	std::string strName;
	int			 nLevel;
	std::string strNpc;
	std::string strReward;
	int			nMaxNum;
	int			nActiveValue;
	std::string	MapName;
	int			nX;
	int			nY;
	int			bOneDone;
	int			ID;//gx add 用于VIP中
	EOPENUI			nOpenUi;
	int         item[JiangLiNumber];
	int         recomState;//推荐状态此值为1时表示推荐，为0时表示不推荐
	int         Holiday;//节日状态为1时表示节日，为0时表示不节日
	std::string lvDisc;
	std::string hdTimes;
	std::string TypeName;
};
struct tagHuoYueReward //活跃度奖励
{
	int id;
	int HuoYueReward;
	int item[HuoYueRewardItemNumber];//奖励id
	int itemNumber[HuoYueRewardItemNumber];
};
//[bing] actframe
struct tagActFrameProto
{
	std::string strActResName;
	unsigned char byDir;
	unsigned char byActNum;
	unsigned char byframe[FRAME_COUNTS];

	/*
	tagActFrameProto()
	{
		memset(this, 0, sizeof(*this));
	}
	*/
};
// 静态数据
class Attres
{
public:
	static Attres* getInstance();

	void	load();

	//void loadTItleProto();
	void loadTItleProtoFromXML();
	void loadActiveProto();
	void loadHuoYueReward();
	void loadActFramsProto();

	const tagTitleProto* getTitleProto(unsigned int dwID);
	const std::vector<tagActiveProto>& getActiveProtoList();
	const std::vector<tagHuoYueReward>& getHuoYueRewardList();

	const tagActFrameProto* getTagActFrameProto( const std::string &ActName, unsigned char byDir, unsigned char byActNum );
	const std::map<unsigned int, tagTitleProto>& getAllTitles() { return _mapTitleProto;};

private:
	std::map<unsigned int, tagTitleProto>	_mapTitleProto;
	std::vector<tagActiveProto> _vectorActiveProto;
	std::vector<tagHuoYueReward>_vectorHuoYueReward;
	std::vector<tagActFrameProto> _vecTagActFrameProto;
};


#endif