#ifndef ACTIONPROTO_H
#define ACTIONPROTO_H

#include "CmdAdapter.h"
#include "RoleDefine.h"
#include "AvatarAtt.h"
#include "buff_define.h"

#pragma pack(push, 1)

enum
{
	E_LearnSkill_Existed				=		1,		// 该技能已经存在
	E_LearnSkill_ProtoNotFound			=		2,		// 没有找到该技能对应的静态属性
	E_LearnSkill_NPCNotEixst			=		3,		// NPC不存在
	E_LearnSkill_NPCTooFar				=		4,		// NPC距离太远
	E_LearnSkill_NPCCanNotTeach			=		5,		// NPC不能教授该技能
	E_LearnSkill_ItemNotFound			=		6,		// 物品不存在
	E_LearnSkill_ItemInvalid			=		7,		// 物品不是技能书
	E_LearnSkill_NoPreSkill				=		8,		// 没有前置技能
	E_LearnSkill_NeedMoreLevel			=		9,		// 人物等级不足
	E_LearnSkill_NeedMoreTalentPoint	=		10,		// 该技能需要的天资点投放量不足
	E_LearnSkill_ClassLimit				=		11,		// 职业限制
	E_LearnSkill_NoTalentType			=		12,		// 该技能无天资类型
	E_LearnSkill_NoTalentPoint			=		13,		// 无天资点可投
	E_LearnSkill_ExceedTalentMaxNum		=		14,		// 超过人物可投的天资数量上限
	E_LearnSkill_ProduceSkillFull		=		15,		// 目前玩家身上的生产技能已满

	E_LevelUpSkill_NotExist				=		21,		// 技能不存在
	E_LevelUpSkill_NotFixed				=		22,		// 技能不是固定升级方式
	E_LevelUpSkill_NoPreSkill			=		23,		// 没有前置技能
	E_LevelUpSkill_ExceedMaxLevel		=		24,		// 超过技能等级上限
	E_LevelUpSkill_ExceedMaxLearnLevel	=		25,		// 超过技能可学上限
	E_LevelUpSkill_NeedMoreLevel		=		26,		// 人物等级不足
	E_LevelUpSkill_NeedMoreTalentPoint	=		27,		// 该技能需要的天资点投放量不足
	E_LevelUpSkill_ClassLimit			=		28,		// 职业限制
	E_LevelUpSkill_NoTalentType			=		29,		// 该技能无天资类型
	E_LevelUpSkill_NoTalentPoint		=		30,		// 无天资点可投
	E_LevelUpSkill_ProtoNotFound		=		31,		// 没有找到该技能对应的静态属性
	E_LevelUpSkill_NPCNotEixst			=		32,		// NPC不存在
	E_LevelUpSkill_NPCTooFar			=		33,		// NPC距离太远
	E_LevelUpSkill_NPCCanNotTeach		=		34,		// NPC不能教授该技能
	E_LevelUpSkill_NPCNotMoney			=		35,		// 金钱不足	

	E_ForgetSkill_NotExist				=		51,		// 技能不存在
	E_ForgetSkill_CanNotBeForgotten		=		52,		// 该种技能不能被遗忘
	E_ForgetSkill_NPCNotValid			=		53,		// NPC不合法

	E_ClearTalent_NoTalent				=		71,		// 人物没有该天资
	E_ClearTalent_NoItem				=		72,		// 无洗点物品
	E_ClearTalent_NoHaveItem			=		73,		// 技能书不足
	E_LevelUpSkill_NeedStopForMax       =       74,     // 3,6第一次不能升级，需要点击突破
};

//! 鼠标走动
struct NET_SIC_mouse_walk : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_mouse_walk);
	float	srcPos[3];
	float	dstPos[3];
};

//! 停止走动
struct NET_SIC_stop_walk : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_stop_walk);
	float	curPos[3];
};

//! 同步角色行走
struct NET_SIS_synchronize_walk : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_synchronize_walk);
	unsigned int dw_role_id;
	float srcPos[3];
	float dstPos[3];
	float curTime;
	float fXZSpeed;
	//bool	bCollide;
};

//! 同步站立，角色进入视野是发送
struct NET_SIS_synchronize_stand : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_synchronize_stand);
	unsigned int dw_role_id;
	float curPos[3];
	float faceTo[3];
};

//------------------------------------------------------------------------------
// 获取远程玩家当前属性
//------------------------------------------------------------------------------
struct NET_SIC_get_remote_role_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_remote_role_state)
	int nRoleNum;
	unsigned int dw_role_id[1];	// 可能是远程人物，也可能是远程怪物，一次发送最多50个
};

//-------------------------------------------------------------------------------------------
// 客户端远程玩家同步数据消息结构
//-------------------------------------------------------------------------------------------
struct tagRemoteRoleData
{
	unsigned int dwID;						// 玩家ID
	unsigned int dw_spouseID;                // 配偶ID
	unsigned char nLevel;						// 等级
	float fPos[3];					// 位置
	float destfPos[3];				// 目标位置
	float				fFaceTo[3];					// 朝向
	unsigned int dwState;					// 状态标志位
	signed long long n64RoleState;				// 角色独有状态标志位
	unsigned char		ePKState;					// PK状态
	int					iPKValue;					// PK值
	//int				bIsPurpureDec;
	//BOOL				bIsGrayName;				// 是否灰名
	unsigned int				dwGuildID;					// 帮派id(INVALID_VALUE表示没有加入帮派)
	unsigned int				dwTeamID;					// 队伍id(INVALID_VALUE表示没有加入队伍)
	//INT8				n8GuildPos;					// 帮派职位
	unsigned short				u16CurActTitleID[3];			// 激活称号(INVALID_VALUE表示没有激活称号)
	//unsigned char				byStallLevel;				// 摊位模型等级
	//unsigned int				dwMountPetID;				// 骑乘宠物id
	//unsigned int				dwMountPetTypeID;			// 骑乘宠物typeid
	tagDisplaySet		sDisplaySet;				// 装备外观显示设置
	tagAvatarAtt		Avatar;						// 外观
	tagAvatarEquip		AvatarEquip;				// 装备外观
	int					nAtt[ERRA_End];				// 远程玩家基本属性
	//tagRemoteOpenSet	sRemoteOpenSet;				// 对远端玩家公开信息设置
	EClassType          eClassType;                 // 专精职业
	//EClassTypeEx        eClassTypeEx;               // 英雄职业
	//tagDWORDTime		dwChangeSymbolTime;			// 帮会标志改变时间
	//unsigned int				dwSymbolValue;				// 帮会标志
	//wchar_t				szText[2];					// 帮会文字

	unsigned int				dwUseRideLv;			//正在骑乘的坐骑
	unsigned char				bySolidateLevel;			//强化等级

	//unsigned int				dwMasterID;					//师傅ID
	//unsigned int				dwCarryID;					

	//ECamp				e_role_camp;				// 角色阵营
	//ECamp				e_temp_role_camp;			// 角色临时阵营

	//int				n32CurExploits;				// 战功
	unsigned char				byLeader;					// 是否队长
	//unsigned int				dwTargetID;					// 目标ID
	unsigned int					dwEquipRating;				// 装备评分
	//int					n_god_level;				// 神级
	unsigned char					nBuffNum;					// 状态数量
	unsigned int		dwCompracticePartner;		// 双修对象 gx add 2013.6.28
	unsigned char					nVIPLevel;					//VIP等级 gx add 2013.8.15
	unsigned int		dwRedZuiFlag;					//红唇标记 gx add 2013.10.25
	//int				nGongFaLevel;					//功法魔魂等级
	tagBuffMsgInfo		Buff[1];					// 状态列表
};

struct NET_SIS_get_remote_role_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_remote_role_state);
	tagRemoteRoleData		RoleData;		// 远程玩家结构，可能到后期也会变成不定长结构
};

//----------------------------------------------------------
// 通知客户端删除某个远程玩家或怪物
//----------------------------------------------------------
struct NET_SIS_remove_remote : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_remove_remote);
	unsigned int dw_role_id[1];
};

//----------------------------------------------------------------------------
// 技能攻击
//----------------------------------------------------------------------------
struct NET_SIC_skill : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_skill);
	unsigned int		dwMapID;
	float		vSrcPos[3];			//攻击者当前坐标
	unsigned int		dwTargetRoleID;		//目标ID
	unsigned int		dwSkillID;			//技能ID
	unsigned int		dwSerial;			//消息序列号
};

struct NET_SIS_skill : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_skill);
	unsigned int		dwSrcRoleID;		//攻击者ID
	unsigned int		dwTarRoleID;		//目标ID
	unsigned int		dwSkillID;			//技能ID
	//unsigned int		dwSerial;			//消息序列号
	//int			nSpellTime;			//吟唱时间，不带吟唱的技能为0
	unsigned int		dw_error_code;		//错误代码
};

//----------------------------------------------------------------------------
// 角色死亡原因
//----------------------------------------------------------------------------
enum ERoleDeadCause
{
	ERDC_Skill,						//技能伤害引起
	ERDC_Buff,						//Buff伤害引起
	ERDC_Other,						//其它原因
};

//----------------------------------------------------------------------------
// 复活
//----------------------------------------------------------------------------
enum ERoleReviveType
{
	ERRT_Start			= 0,

	ERRT_ReturnCity		= 0,		// 回城复活
	ERRT_Locus			= 1,		// 原地复活
	ERRT_Accept			= 2,		// 接受复活
	ERRT_Prison			= 3,		// 狱中复活
	ERRT_Instance		= 4,		// 副本复活
	ERRT_Yamun			= 5,		// 衙门复活
	ERRT_Perfection		= 6,		// 完美复活
	ERRT_Normal			= 7,		// 普通复活
	ERRT_GuildWar		= 8,		// 帮会战复活
	ERRT_CoolDown		= 9,		// 冷却复活
	ERRT_FreeLocus		= 10,		// 免费原地复活
	ERRT_SBK			= 11,		// 沙城内复活	
	ERRT_SBKSafe		= 12,		// 沙城安全区复活

	ERRT_None,						//无建议
	ERRT_End			= ERRT_None,

};

struct NET_SIS_role_dead : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_dead);
	unsigned int		dw_role_id;			//角色ID
	ERoleDeadCause eCause;			//死亡原因
	unsigned int		dwSrcRoleID;		//攻击者ID
	wchar_t		sz_srcRoleName[X_SHORT_NAME];	//攻击者姓名
	unsigned int		dwMisc;				//如果是技能，则为技能ID；如果是buff，则为buff id
	//unsigned int		dwMisc2;			//如果是技能，则为管道序列号
	//unsigned int		dwSerial;			//如果是技能，则为技能消息序列号；其它原因填INVALID_VALUE
	//ERoleReviveType eSuggestRevive;//复活方式，若为ERRT_None 则由玩家自己选择
	int		bCrit;				//是否暴击
	int		bHitFly;			//是否击飞
	//int			nCoolDownRevive;
	char		nCanYuandiFuHuo;	//能否原地复活
	//unsigned int		dwDeadTime;
	int		nSrcRoleIDKillNumInSBK; //攻击者在沙巴克的连杀次数
	int			nLevel;				//等级
	int			nProf;				//职业
	int			nRating;			//战力
};

struct NET_SIS_role_die_Penalty : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_die_Penalty);
	INT	m_typeId;	// 物体Id
	DWORD roleId;   // 物品归属角色
};

struct NET_SIC_role_revive : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_role_revive);
	ERoleReviveType	eType;
	INT64			n64ItemID;		// 原地复活所需的物品64位ID
	unsigned int			dw_safe_code;
};

struct NET_SIS_role_revive : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_revive);
	unsigned int			dw_error_code;
	unsigned int			dw_role_id;
};

//！角色移动失败
struct NET_SIS_move_failed : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_move_failed);
	float curPos[3];
	float faceTo[3];
};

//--------------------------------------------------------------------------------
// 技能传送客户端的消息结构
//--------------------------------------------------------------------------------
struct tagSkillMsgInfo
{
	unsigned int dwID;							// 技能ID
	int		nLevel;							// 当前等级
	int		nCoolDown;						// 冷却
	int		nProficiency;					// 熟练度
	float	fOpDist;						// 作用距离
	//int		nChannelDmg[MAX_CHANNEL_TIMES];	// 伤害
	//int		nCost[ESCT_End];				// 消耗
};

//-----------------------------------------------------------------------------
// 返回人物技能列表
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_skill : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_role_init_state_skill);
	int					n_num;							// 技能个数
	tagSkillMsgInfo		Skill[1];						// 技能列表
};

//-------------------------------------------------------------------------------
// 远程玩家以及远程生物属性改变
//------------------------------------------------------------------------------
struct NET_SIS_single_remote_att_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_single_remote_att_change);
	unsigned int dw_role_id;
	ERemoteRoleAtt	eType;
	int nValue;
};

//---------------------------------------------------------------------
// 特殊移动类型
//---------------------------------------------------------------------
enum ESpecialMoveType
{
	ESMT_Repel,			// 击退
	ESMT_Assault,		// 冲锋
	ESMT_Teleport,		// 瞬移
	ESMT_Pull,          // 拖拽
};

//主动技能
struct NET_SIS_special_move : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_special_move)
	ESpecialMoveType	eType;          // 移动类型
	unsigned int dw_role_id;       // 角色ID
	float				vDestPos[3];       // 目标点
};

//----------------------------------------------------------------------------
// 命中目标原因
//----------------------------------------------------------------------------
enum EHitTargetCause
{
	EHTC_Skill,						//使用技能
	EHTC_Item,						//使用物品
};

//----------------------------------------------------------------------------
// 使用技能或物品命中目标
//----------------------------------------------------------------------------
struct NET_SIS_hit_target : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_hit_target);
	unsigned int dw_role_id;			//角色ID
	unsigned int dwSrcRoleID;		//发起者ID
	EHitTargetCause	eCause;			//原因
	unsigned int dwMisc;				//如果是技能，则为技能ID；如果是使用物品，则为物品TypeID
	unsigned int dwSerial;			//如果是技能，则为技能消息序列号；如果是物品则为使用物品消息序列号
};

struct NET_SIS_add_role_buffer : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_add_role_buffer);
	unsigned int	dw_role_id;			// 作用者ID
	tagBuffMsgInfo	Buff;				// Buff内容
};

struct NET_SIS_remove_role_buffer : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_remove_role_buffer);
	unsigned int dw_role_id;			// ID
	unsigned int dwBuffTypeID;		// Buff属性ID
};

//buff 更新
struct NET_SIS_update_role_buffer : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_update_role_buffer);
	unsigned int dw_role_id; // ID
	tagBuffMsgInfo Buff; // Buff内容
};

//-----------------------------------------------------------------------------
// 设置pk状态
//-----------------------------------------------------------------------------
struct NET_SIC_change_pk_value : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_change_pk_value);
	ERolePKState	eState;						// 新的PK状态
};

struct NET_SIS_change_pk_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_change_pk_state);
	unsigned int dw_role_id;
	ERolePKState		ePKState;
	unsigned int dwError;
};

//添加一个技能
struct NET_SIS_add_skill : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_add_skill);
	tagSkillMsgInfo	Skill;			// 添加一个技能
};

// 跟随宠物变更
struct NET_SIS_follow_creature_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_follow_creature_change);
	unsigned int	n64ID;
	unsigned int	nID1;
	unsigned int	nID2;
};

//-----------------------------------------------------------------------------
// 玩家状态改变
//-----------------------------------------------------------------------------
struct NET_SIS_set_role_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_set_role_state);
	unsigned int		dw_role_id;						// 角色ID
	ERoleState	eState;							// 状态标志
};

struct NET_SIS_unset_role_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_unset_role_state);
	unsigned int		dw_role_id;						// 角色ID
	ERoleState	eState;							// 状态标志
};

// 玩家进入双修后发视野消息
struct NET_SIS_practice_to_all: public s_net_cmd
{
	DECL_NETCMD(NET_SIS_practice_to_all);
	unsigned int 		dwSrcRoleID;//邀请人ID
	unsigned int 		dwDesRoleID;//被邀请人ID
};

// 发送雕像名字
struct NET_SIS_get_diaoxiang_name : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_diaoxiang_name);

	wchar_t	szDiaoName[6][X_SHORT_NAME];
	unsigned int dwPower[6];
	unsigned int dwId[6];
	unsigned int dwLevel[6];
};

//-------------------------------------------------------------------------------
// 升级一个技能
//-------------------------------------------------------------------------------
struct NET_SIC_level_up_skill : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_level_up_skill);
	unsigned int dwSkillID;				// 技能ID（大ID）
	unsigned int dwNPCID;				// NPC的全局ID（如果不是通过NPC则为INVALID_VALUE）
	INT64	n64ItemID;				// 技能书物品的位ID（如果不是通过技能书，则为INVALID_VALUE）
};

struct NET_SIS_level_up_skill : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_level_up_skill);
	unsigned int	dw_error_code;			// 错误码
	unsigned int	dwSkillID;				// 技能ID（大ID）
};

struct NET_SIS_update_skill : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_update_skill);
	tagSkillMsgInfo	Skill;			// 技能
};


//开始骑乘
struct NET_SIC_begin_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_begin_ride);
	//int nLevel;  //坐骑等级
	//unsigned int dwModelID; //模型id
};

struct NET_SIS_begin_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_begin_ride);
	//int nSpellTime; //吟唱时间
	unsigned int dwUseRideLv;	//骑乘中的坐骑等级
	int nLevel; 
	unsigned int dwRoleID;
	unsigned int dwError;

	unsigned int dwMapID;
	float	curPos[3];
};

//培养坐骑
struct NET_SIC_tog_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_tog_ride);

	unsigned char	byType;	//0:金币1:礼券2:元宝
};

struct NET_SIS_tog_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_tog_ride);
	int nCritNum;
	int nExp;
	unsigned int dw_error_code;
};

// 同步坐骑属性
struct NET_SIC_get_raid_att : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_raid_att);
};

struct NET_SIS_get_raid_att : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_raid_att);
	int nLevel;		//等级
	int nCurExp;	//经验
	unsigned int dwUseRideLv;	//骑乘中的坐骑等级
	int nMaPai;         // 是否开启马牌功能,0 没有开启，1 开启
	float fMaPaiInc;    // 马牌提供的增益加成 
	int nTogMounts;     //今日培养次数
};
//取消骑乘
struct NET_SIC_cancel_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_cancel_ride);
};

struct NET_SIS_cancel_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_cancel_ride);
	unsigned int dwRoleID;
	unsigned int dwError;
	DWORD	dwMapID;
	float	curPos[3];
};

// 装备坐骑
struct NET_SIC_Equip_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Equip_ride);
	INT64 n64RideSerial;
};

struct NET_SIS_Equip_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Equip_ride);
	unsigned int dwError;
	INT64 n64RideSerial;
};

// 卸下坐骑装备
struct NET_SIC_UnEquip_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_UnEquip_ride);
	INT64 n64RideSerial;
};

struct NET_SIS_UnEquip_ride : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_UnEquip_ride);
	unsigned int dwError;
	INT64 n64RideSerial;
};

struct NET_SIS_Skill_Stone : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Skill_Stone);
	char error;
};

#pragma pack(pop)

#endif //ACTIONPROTO_H
