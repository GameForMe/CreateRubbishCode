#ifndef NUMERICALINIMGR_H
#define NUMERICALINIMGR_H

#include "cocos2d.h"
#include "cocos-ext.h"

class CFGReader3;
#include <string>
#include "BaseDefine.h"
#include "ItemDefine.h"

#define BIQI_TOTAL_COUNT 5
using namespace cocos2d;
using namespace cocos2d::extension;

enum tagFusionNumerical
{
	EFN_Exp			= 1,	// 经验系数
	EFN_Decompose	= 2,	// 分解系数
	EFN_Num			= 3,	// 数量系数
	EFN_End					// 结尾
};

struct biQiOneKeyFinishData //比奇任务一键完成和全部完成相关数据
{
	int m_BiQi_yuanbao_num;
	float m_BiQi_jingyan_beishu;
};

class NumericalIniMgr
{
public:
	NumericalIniMgr();
	~NumericalIniMgr();
	static NumericalIniMgr* getInstance();
	std::string getString(const std::string& section_, const std::string& key_, const std::string& defstr_);
	int getInt(const std::string& section_, const std::string& key_, int def_);
	void setString(const std::string& section_, const std::string& key_, const std::string& str);
	void setInt(const std::string& section_, const std::string& key_, int v);
	INT64 getInt64(const std::string& longsection_, const std::string& longkey_, INT64 longdef_);
	void setInt64(const std::string& longsection_, const std::string& longkey_, INT64 longv);
	float getFloat( const std::string& longsection_, const std::string& longkey_, INT64 longdef_ );
	//设置方法
	void Init(); //初始化
	void ClearIniInfo(); //清除信息
	//功能函数
	INT64 GetEquipStrengthenMoney(unsigned char byMinEquipLv); //获取装备强化所需金币
	INT64 GetEquipLevelUpMoney(unsigned char byMinEquipLv); //获取装备升级所需金币
	unsigned int GetEquipFusionMaxExp(unsigned char byMinEquipLv, EItemQuality eQuality); //获取装备融合最大经验值
	unsigned int GetEquipFusionDecompose(unsigned char bySrcMinEquipLv, unsigned char byUseMinEquipLv, EItemQuality eQuality, EItemQuality eUseQuality); //获取装备分解所获得的经验
	signed int GetEquipFusionLvUpItemNum(unsigned char byMinEquipLv, EItemQuality eQuality); //获取装备升阶所需物品数量
	signed int GetEquipFusionLvUpYuanBao(EItemQuality eQuality, signed int n32NeedCount); //根据装备升阶所需物品数量获取所需元宝
	INT64 GetEquipStarLevelUpMoney(unsigned char byMinEquipLv); //获取装备升星所需金币
	signed int GetEquipStarLevelUpItemNum(unsigned char byMinEquipLv, int nStarLv); //获取装备升星所需星魂数
	unsigned int GetEquipStarLevelUpRate(unsigned char byMinEquipLv, int nStarLv); //获取装备升星成功率
	INT64 GetJJCRankRewardExp( int nRank, int nLevel );//获取竞技场奖励经验
	int GetJJCRankRewardMoney( int nRank, int nLevel );//获取竞技场奖励金币
	int GetJJCRankRewardDiamond( int nRank, int nLevel );//获取竞技场奖励钻石
	//Get
	//装备强化所需金钱
	int GetStrengthenK() { return m_nStrengthenK; } 
	int GetStrengthenB() { return m_nStrengthenB; }

	//装备升级所需金钱
	int GetLevelUpK() { return m_nLevelUpK; }
	int GetLevelUpB() { return m_nLevelUpB; }

	//融合升级所需经验
	int GetFusionMaxExpK() { return m_nFusionMaxExpK; }
	int GetFusionMaxExpB() { return m_nFusionMaxExpB; }

	//被融合的装备经验
	float GetFusionExpK() { return m_fFusionExpK; }
	float GetFusionExpB() { return m_fFusionExpB; }

	//升阶所需融合符数量
	float GetFusionNumK() { return m_fFusionNumK; }
	float GetFusionNumB() { return m_fFusionNumB; }

	//升阶所需融合符单价(品质)
	signed int GetFusionQuality1_YuanBao() { return m_n32FusionQuality1_YuanBao; } //白->绿
	signed int GetFusionQuality2_YuanBao() { return m_n32FusionQuality2_YuanBao; } //绿->蓝
	signed int GetFusionQuality3_YuanBao() { return m_n32FusionQuality3_YuanBao; } //蓝->紫
	signed int GetFusionQuality4_YuanBao() { return m_n32FusionQuality4_YuanBao; } //紫->橙
	signed int GetFusionQuality5_YuanBao() { return m_n32FusionQuality5_YuanBao; } //橙->金

	//加速融合
	signed int GetFusionFastYuanBao() { return m_n32FusionFastYuanBao; } //所需元宝
	unsigned int GetFusionFastExp() { return m_dwFusionFastExp; } //经验基数
	unsigned int GetFusionFastCritProb1() { return m_dwFusionFastCritProb1; } //暴击几率1
	unsigned int GetFusionFastCritNum1() { return m_dwFusionFastCritNum1; } //暴击倍数1
	unsigned int GetFusionFastCritProb2() { return m_dwFusionFastCritProb2; } //暴击几率2
	unsigned int GetFusionFastCritNum2() { return m_dwFusionFastCritNum2; } //暴击倍数2

	//高级融合
	float GetFusionAdvExp() { return m_fFusionAdvExp; } //经验价值 = 每一点经验需要花费 0.2元宝

	//装备洗炼
	signed int GetAttrRandomYuanBao() { return m_n32AttrRandomYuanBao; } //所需元宝

	//装备升星所需金钱
	int GetStarLvUpMoneyK() { return m_nStarLvUpMoneyK; }
	int GetStarLvUpMoneyB() { return m_nStarLvUpMoneyB; }

	//装备升星所需星魂数量
	float GetStarLvUpNumK() { return m_fStarLvUpNumK; }
	int GetStarLvUpNumB() { return m_nStarLvUpNumB; }

	//装备升星成功率
	float GetStarLvUpRateK() { return m_fStarLvUpRateK; }
	float GetStarLvUpRateB() { return m_fStarLvUpRateB; }

	//功法获取
	INT64 GetKungFuMoney() { return m_n64KungFuMoney; } //所需金币
	signed int GetKungFuYuanBao() { return m_n32KungFuYuanBao; } //所需元宝
	signed int GetKungFuOneKeyYuanBao() { return m_n32KungFuOneKeyYuanBao; } //一键获取所需元宝

	//坐骑金币培养(金币)
	unsigned int GetMoneyRaidCritProb() { return m_dwMoneyRaidCritProb; } //暴击几率
	int GetMoneyRaidCritNum() { return m_nMoneyRaidCritNum; } //暴击倍数
	int GetMoneyRaidExp() { return m_nMoneyRaidExp; } //经验基数
	INT64 GetMoneyRaidMoney() { return m_n64MoneyRaidMoney; } //所需金币

	//坐骑快马加鞭培养(优先钻石，其次元宝)
	unsigned int GetDiamondRaidCritProb() { return m_dwDiamondRaidCritProb; } //暴击几率
	int GetDiamondRaidCritNum() { return m_nDiamondRaidCritNum; } //暴击倍数
	int GetDiamondRaidExp() { return m_nDiamondRaidExp; } //经验基数
	signed int GetDiamondRaidYuanBao() { return m_n32DiamondRaidYuanBao; } //所需钻石Or元宝

	//坐骑一骑绝尘培养(元宝10次)
	unsigned int GetYuanBao10RaidCritProb() { return m_dwYuanBao10RaidCritProb; } //暴击几率
	int GetYuanBao10RaidCritNum() { return m_nYuanBao10RaidCritNum; } //暴击倍数
	int GetYuanBao10RaidExp() { return m_nYuanBao10RaidExp; } //经验基数
	signed int GetYuanBao10RaidYuanBao() { return m_n32YuanBao10RaidYuanBao; } //所需元宝

	//坐骑天马行空培养(元宝100次)
	unsigned int GetYuanBao100RaidCritProb() { return m_dwYuanBao100RaidCritProb; } //暴击几率
	int GetYuanBao100RaidCritNum() { return m_nYuanBao100RaidCritNum; } //暴击倍数
	int GetYuanBao100RaidExp() { return m_nYuanBao100RaidExp; } //经验基数
	signed int GetYuanBao100RaidYuanBao() { return m_n32YuanBao100RaidYuanBao; }//所需元宝


	//竞技场奖励经验
	float GetJJCRankRewardExpK() { return m_fJJCRankRewardExpK; }
	float GetJJCRankRewardExpB() { return m_fJJCRankRewardExpB; }

	//竞技场奖励金钱
	float GetJJCRankRewardMoneyK() { return m_fJJCRankRewardMoneyK; }
	float GetJJCRankRewardMoneyB() { return m_fJJCRankRewardMoneyB; }

	//竞技场奖励钻石
	float GetJJCRankRewardDiamondK() { return m_fJJCRankRewardDiamondK; }
	float GetJJCRankRewardDiamondB() { return m_fJJCRankRewardDiamondB; }

	//竞技场奖励等级系数
	float GetJJCRankRewardLevelNumK() { return m_JJCRankRewardLevelNumK; }
	float GetJJCRankRewardLevelNumB() { return m_JJCRankRewardLevelNumB; }
	//快速完成日常任务消耗元宝
	int GetKuaisuDanbeiYuanbao() { return yuanbao; }
	int GetKuaisuShuangbeiYuanbao() { return double_yuanbao; }
	//行会上香
	float Get_Guild_donate_fund_K() { return m_Guild_donate_fund_K;}
	float Get_Guild_donate_fund_B() { return m_Guild_donate_fund_B;}
	int GetGuild_donate_fund_P(int index);

	int Get_Weapon_Abrasion_Times(){return n_weapon_abrasion_times;}
	int Get_Equip_Abrasion_Times(){return n_equip_abrasion_times;}

	//交易行
	int		Get_trading_price_tax(int value);
	int		Get_trading_push_max();
	float	get_trading_price_traing_tax();
	int		Get_trading_over_time_money();
	int		get_trading_update_over_time();
	int		get_trading_plane_num();
	int		get_trading_update_up_time();
	int		get_trading_other_num();
	int		get_trading_open_level();
	int		get_m_trading_get_container_count();
	int		get_trading_max_tax();

	//离线经验池
	DWORD	Get_OfflineExp_Base_Time(){return m_OfflineExp_Base_Time;}

	std::list<biQiOneKeyFinishData> get_BiQi_OneKeyFinishMessage()
	{
		return _biQiOneKeyFinishList;
	}
	std::list<biQiOneKeyFinishData> get_BiQi_FinishAllMessage()
	{
		return _biQiFinishAllMessageList;
	}
	std::map<int,int>getImmediatelyUseTypeList()
	{
		return immediately_auto_use;
	}

	std::vector<unsigned int>& getMobaiExpValues() {
		return mobai_exp_values;
	}

	int get_DuoRen_Fuben_Num();
	int Get_Monster_Instruct_Num();
	bool get_Heart_hook_open()  { return heart_hook_open != 0;}

	int Get_Guild_League_Time_Limit();
	int Get_Guild_War_Continue_Time_Limit();
	int Get_Guild_War_Cost_Money();
	int Get_Guild_Diplomacy_Info_Limit();
	int	Get_Guild_Fuben_Open_Start_Hour();
	int	Get_Guild_Fuben_Open_Start_Min();
	int	Get_Guild_Fuben_Open_End_Hour();
	int	Get_Guild_Fuben_Open_End_Min();
	int Get_Guild_Fuben_Close_Hour();
	int Get_Guild_Fuben_Close_Min();

	float get_stall_price_tax();
	int get_stall_info_yuanbao_max();
	int get_stall_info_yuanbao_min();
	int get_Max_activity_value();

	int Get_Fire_Massacre_Yuanbao();
	int Get_Guard_Customs_Yuanbao();
	int Get_Under_Palace_Yuanbao();
	int Get_Under_Fane_Summon_Boss_Yuanbao();

	int Get_Boss_Show_Time();
	int Get_GuaJi_Start_Level();
	//int Get_Guild_Store_Book_Item_Number();

	int get_fmb_open_min_week();
	int get_fmb_apply_begin_week();
	int get_fmb_apply_begin_hour();
	int get_fmb_apply_end_week();
	int get_fmb_apply_end_hour();


	int m_JinBiFindRate;
	int m_YuanBaoFindRate;

	//龙卫相关数据
	int dragon_curly_progress_one;
	int dragon_curly_progress_two;
	int dragon_curly_progress_tree;

	int	dragon_killone_yuanbao;
	int	dragon_killten_yuanbao;
	int dragon_killone_book;
	int 	dragon_killten_book;
	//功法
	int gongfa_benison_max;
	float gongfa_item_scale;
private:
	float GetFusionNumerical( EItemQuality eQuality, tagFusionNumerical eFN );
	float GetEquipLevelUpNumerical( BYTE byType, BYTE byStarLv ); //根据星级获取升星数值系数 0=星魂,1=成功率
	CFGReader3* _cfg;
	//数值定义开始
	//装备强化所需金钱
	int m_nStrengthenK; 
	int m_nStrengthenB;

	//装备升级所需金钱
	int m_nLevelUpK;
	int m_nLevelUpB;

	//融合升级所需经验
	int m_nFusionMaxExpK;
	int m_nFusionMaxExpB;

	//被融合的装备经验
	float m_fFusionExpK;
	float m_fFusionExpB;

	//升阶所需融合符数量
	float m_fFusionNumK;
	float m_fFusionNumB;

	//升阶所需融合符单价(品质)
	signed int m_n32FusionQuality1_YuanBao; //白->绿
	signed int m_n32FusionQuality2_YuanBao; //绿->蓝
	signed int m_n32FusionQuality3_YuanBao; //蓝->紫
	signed int m_n32FusionQuality4_YuanBao; //紫->橙
	signed int m_n32FusionQuality5_YuanBao; //橙->金

	//加速融合
	signed int m_n32FusionFastYuanBao; //所需元宝
	unsigned int m_dwFusionFastExp; //经验基数
	unsigned int m_dwFusionFastCritProb1; //暴击几率1
	unsigned int m_dwFusionFastCritNum1; //暴击倍数1
	unsigned int m_dwFusionFastCritProb2; //暴击几率2
	unsigned int m_dwFusionFastCritNum2; //暴击倍数2

	//高级融合
	float m_fFusionAdvExp; //经验价值 = 每一点经验需要花费 0.2元宝

	//装备洗炼
	signed int m_n32AttrRandomYuanBao; //所需元宝

	//装备升星所需金钱
	int m_nStarLvUpMoneyK;
	int m_nStarLvUpMoneyB;

	//装备升星所需星魂数量
	float m_fStarLvUpNumK;
	int m_nStarLvUpNumB;

	//装备升星成功率
	float m_fStarLvUpRateK;
	float m_fStarLvUpRateB;

	//功法获取
	INT64 m_n64KungFuMoney; //所需金币
	signed int m_n32KungFuYuanBao; //所需元宝
	signed int m_n32KungFuOneKeyYuanBao; //一键获取所需元宝

	//坐骑金币培养(金币)
	unsigned int m_dwMoneyRaidCritProb; //暴击几率
	int m_nMoneyRaidCritNum; //暴击倍数
	int m_nMoneyRaidExp; //经验基数
	INT64 m_n64MoneyRaidMoney; //所需金币

	//坐骑快马加鞭培养(优先钻石，其次元宝)
	unsigned int m_dwDiamondRaidCritProb; //暴击几率
	int m_nDiamondRaidCritNum; //暴击倍数
	int m_nDiamondRaidExp; //经验基数
	signed int m_n32DiamondRaidYuanBao; //所需钻石Or元宝

	//坐骑一骑绝尘培养(元宝10次)
	unsigned int m_dwYuanBao10RaidCritProb; //暴击几率
	int m_nYuanBao10RaidCritNum; //暴击倍数
	int m_nYuanBao10RaidExp; //经验基数
	signed int m_n32YuanBao10RaidYuanBao; //所需元宝

	//坐骑天马行空培养(元宝100次)
	unsigned int m_dwYuanBao100RaidCritProb; //暴击几率
	int m_nYuanBao100RaidCritNum; //暴击倍数
	int m_nYuanBao100RaidExp; //经验基数
	signed int m_n32YuanBao100RaidYuanBao; //所需元宝

	//竞技场奖励经验
	float m_fJJCRankRewardExpK;
	float m_fJJCRankRewardExpB;

	//竞技场奖励金钱
	float m_fJJCRankRewardMoneyK;
	float m_fJJCRankRewardMoneyB;

	//竞技场奖励钻石
	float m_fJJCRankRewardDiamondK;
	float m_fJJCRankRewardDiamondB;

	//竞技场奖励等级系数
	float m_JJCRankRewardLevelNumK;
	float m_JJCRankRewardLevelNumB;

	//快速完成日常任务消耗元宝
	int yuanbao;
	int double_yuanbao;
	//行会上香
	float m_Guild_donate_fund_K;
	float m_Guild_donate_fund_B;
	int m_Guild_donate_fund_P1;
	int m_Guild_donate_fund_P2;
	int m_Guild_donate_fund_P3;

	//交易行
	int	m_trading_push_max;//上架最大数量
	int m_trading_price_tax; //上架费  
	float m_trading_price_traing_tax; //交易税比例
	int m_trading_over_time_money;//过期后需要的钱
	int m_trading_update_over_time;//过期时间
	int m_trading_plane_num;//一次刷新的物品个数
	int m_trading_update_up_time;//上架时间
	int m_trading_other_num;//最大显示其他人数据
	int m_trading_open_level;//开放等级
	int m_trading_get_container_count;//领取容器上架大小
	int	m_trading_max_tax;//最大的交易税

	//交易行上架比例
	int m_trading_1_base;
	int m_trading_1_value;
	int m_trading_2_base;
	int m_trading_2_value;
	int m_trading_3_base;
	int m_trading_3_value;
	int m_trading_4_base;
	int m_trading_4_value;
	int m_trading_5_base;
	int m_trading_5_value;
	int m_trading_6_base;
	int m_trading_6_value;
	int m_trading_error;

	//数值定义结束

	int n_weapon_abrasion_times;//武器使用次数/耐久
	int n_equip_abrasion_times;//防具使用次数/耐久

	//比奇任务
	//一键完成相关数据
	std::list<biQiOneKeyFinishData> _biQiOneKeyFinishList;

	//全部完成相关数据
	std::list<biQiOneKeyFinishData> _biQiFinishAllMessageList;
	int max_activity_value; //最大活跃度（日常界面进度条满时）
	int n_DuoRen_Fuben_Num;//多人副本次数
	int n_monster_instruct_num;//每日魔族指令书使用次数

	//离线经验池
	DWORD	m_OfflineExp_Base_Time;		//离线多少秒产生离线经验
	int		heart_hook_open;			//心跳检测开启

	int n_guild_league_time_limit;//联盟时间限制
	int n_guild_war_continue_time_limit;//宣战时间限制
	int n_guild_war_cost_money;//行会宣战需要花费的行会资金
	int n_guild_diplomacy_information_limit;//行会外交信息记录上限
	int n_guild_fuben_open_start_hour;//行会副本可开启开始小时
	int n_guild_fuben_open_start_min;//行会副本可开启开始分钟
	int n_guild_fuben_open_end_hour;//行会副本可开启结束小时
	int n_guild_fuben_open_end_min;//行会副本可开启结束分钟
	int n_guild_fuben_close_hour;//行会副本关闭时间小时
	int n_guild_fuben_close_min;//行会副本关闭时间分钟
	
	// 封魔榜
	int m_fmb_open_min_week;
	int m_fmb_apply_begin_week;
	int m_fmb_apply_begin_hour;
	int m_fmb_apply_end_week;
	int m_fmb_apply_end_hour;
	

	//摆摊
	FLOAT m_stall_price_tax;
	int m_stall_info_yuanbao_max;
	int m_stall_info_yuanbao_min;

	int n_fire_massacre_yuanbao;
	int n_guard_customs_yuanbao;
	int n_under_palace_yuanbao;
	int n_under_fane_summon_boss_yuanbao;

	int n_boss_show_time;//boss显示时间
	int n_guaji_start_level;//挂机功能开启等级

	//int guild_store_yushou_item_number;
	std::map<int,int>immediately_auto_use;//得到后立即自动使用

	std::vector<unsigned int> mobai_exp_values;	// 膜拜经验数值
};

#endif //NUMERICALINIMGR_H