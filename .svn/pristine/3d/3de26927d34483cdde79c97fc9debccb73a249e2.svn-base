#ifndef NPCTALKUI_H
#define NPCTALKUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"
#include "GameActionNode.h"
#include "Attres.h"
#include "UiInterface.h"

using namespace cocos2d;
using namespace cocos2d::extension;

#define One_Key_Finish  1 //一键完成
#define Finish_All      2 //全部完成
#define JUN_XU_ID       11//一键完成军需的id
#define BI_QI_ID        2//一键完成比奇id
const int NpcSpriteX=193;
const int NpcSpriteY=9;
enum eNPCTalkTag
{
	eNT_AMOUNT,
	eNT_ITEMID,
	eNT_TASKNAME,
	eNT_TASKGOAL,
	eNT_TASKDES,
};
struct refresh_zhuzai_info;
class NPCTalkUi : public CCLayer
{
public:
	enum eTextType
	{
		TEXTT_TASK,
		TEXTT_NORMAL,
		TEXTT_INVALID,
		TEXTT_SHOP,
		TEXTT_INSTANCE,
		TEXTT_SBK,
		TEXTT_DARONGLU,
		TEXTT_DUIHUAN,
	};

	enum eTaskType
	{
		TASKT_MAIN,
		TASKT_BRANCH,
	};

	enum eTaskState
	{
		TASKS_FINISHED,
		TASKS_UNFINISHED,
		TASKS_CANACCEPT,
	};

	enum eUITag
	{
		NTT_CONTENT = 0,					//对话和任务可见范围LayerTag						0
		NTT_AWARDNODEBG = 1,				//任务奖励node背景精灵								1
		NTT_ACCEPTBTN,						//接受任务按钮										2
		NTT_FINISHBTN,						//完成任务按钮										3
		NTT_NPCNAME,						//NPC名字label										4
		NTT_CONTENTBG,						//对话和任务内容背景								5
		NTT_PORTRAIT,						//NPC图像精灵										6
 		NTT_TASKNAME,						//任务名称											7
 		NTT_TASKGOAL,						//任务目标											8
 		NTT_TASKDES,						//任务描述											9
		NTT_TALKBG,							//对话背景tag										10
		NTT_TASKBG,							//任务背景tag										11
		NTT_AWARDITEM,						//任务奖励经验和金钱环绕特效和node用				12
		NTT_BTNSEPOS,						//接收完成任务按钮特效位置							13
		NTT_AWRADSPRITE = 2,				//任务奖励node已经有的精灵tag(经验和金钱)			2
		NTT_AWARDLABEL,						//任务奖励node已经有的label标签(标示经验金钱数量)	3
		NTT_ONEKEYCOMPLATETASK = 14,
		NTT_DOUBLECOMPLATETASK = 15,
		NTT_ACCEPTTASK = 16,
		NTT_FUBENNODE = 1,					//副本层
		NTT_FUBENLOCKONE = 1,				//未达到开启副本条件的锁
		NTT_FUBENLOCKTWO = 2,
		NTT_FUBENLOCKTHREE = 3,
		NTT_FUBEN_BTN_ONE = 4,				//副本按钮
		NTT_FUBEN_BTN_TWO = 5,
		NTT_FUBEN_BTN_THREE = 6,
		NTT_FUBEN_SELECT = 7,
		NTT_ONE_KEY_FINISH_ICON = 18,      //一键完成倍数图标tag
		NTT_FINISH_ALL_ICON = 19,          //全部完成倍数图标tag

		NTT_LINGQUBUTTON = 50,       //领取俸禄按钮
		NTT_DUOBEIBUTTON = 51,       //三倍领取按钮
		NTT_DUOBEISPRITE = 52,       //三倍领取精灵

		NTT_SELECTTag=100,
		NTT_SELECTEnd = 200
	};  //任务内容里的奖励node标签分别为从左到右1,2,3,4,5每个node上有子类精灵

	struct TaskListData
	{
		eTextType textType;
		eTaskType taskType;
		eTaskState taskState;
		unsigned short id;
		int tag;
		float viewHieght;

		TaskListData()
		{
			textType = TEXTT_INVALID;
			id = -1;
		}
	};
	struct NpcString
	{
		CCSpriteFrame* frame;
		std::string title1;
		std::string title2;
	};	

public:
	CREATE_FUNC(NPCTalkUi);
	bool init();
	void setTitle(const wchar_t *name);
	void setTitle(const char *name);
	void setText(const char *text);
	void setPortrait(const char* text);					//【Ji：】   add设置NPC肖像
	void setTaskAward(int index,eNPCTalkTag eType, int detailData,int num = 1);				//设置任务奖励内容
	void setFinishAward(unsigned short questID,bool isShow, const char* strName);
	void setTaskText(eNPCTalkTag eType, const char* text);						//设置任务内容
	void appendItem(unsigned short taskId, const char *text, bool mainTask, bool isFinished, eTextType textType = TEXTT_TASK, bool needShowSelect = true);
	void appendItem2(unsigned short taskId, const char *text, bool mainTask, bool isFinished, eTextType textType = TEXTT_TASK);
	void insertItem(int index, const char *text, bool mainTask, bool isFinished);
	//void erase(int index);
	void clear();
	void show(bool show);
	void showButton(bool show);
	void showButton(int btn);	// 0 不显示 1 接收 2 完成
	void showSpecialButton(bool isShow); //只有军需任务时才显示的按钮
	void showSpecialButton1(bool isShow);
	virtual void onEnter();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void onAcceptBtnPressed();
	void onFinishedBtnPressed();

	void onSelectItem(unsigned int data);

	bool isShow() const  { return _show; }

	CCRect getGuideBtnPos();

	bool getAcceptBtnPos(CCRect& rc);
	bool getFinishBtnPos(CCRect& rc);
	bool getFubenOneBtnPos(CCRect& rc);
	void setPlayerAudioEffect(std::string audioName);
	void setSelectSprite(TaskListData data );
	void setSelectIndex(int index);
	void showSelectSprite();
	void appendDaJiangItem(unsigned int taskId, const char *text, bool mainTask, bool isFinished, eTextType textType = TEXTT_TASK);
	void setJingYanBeishushow(bool isshow);

	void refresh_zhuzzai_info(unsigned int npc_id);
SIGNALS:
	c_signal<void, int, unsigned int> signalBtnShow; //int 0 finished 1 accept
	c_signal<void, unsigned short> signalAccept;
	c_signal<void, unsigned short> signalFinished;
	c_signal<void, unsigned short> signalSelectItem;
	c_signal<void, unsigned int> signalSelectItemShop;
	c_signal<void, unsigned int> signalSelectItemInstance;
	c_signal<void, unsigned int> signalSelectDaronglu;
public:
	TaskListData getItemByID(unsigned short id);
	void autoSelect(unsigned short id);
	unsigned short GetSelectID()
	{
		return _selectId;
	}
	void setFinishWay(int finishWay) //设置完成方式，0为默认，1为一键完成，2为全部完成
	{
		m_finish_way = finishWay;
	}
	void setBiQiFinishWay(int finishWay)
	{
		m_biqi_finish_way = finishWay;
	}
	int getFinishWay() //获取军需任务的完成方式
	{
		return m_finish_way;
	}
	int getBiQiFinishWay()//获取比奇任务完成方式
	{
		return m_biqi_finish_way;
	}
	CCRect getItemByIdx(int nIdx);						
	void setTempRoleID(unsigned int id) { _tempRoleID = id;}
	void guild_assign_btn_show();
private:
	void on_event_refersh_zhuzai_info(refresh_zhuzai_info* evt);
protected:
	void updateList();
	void updateList2();
	void updateVisableContent();							//【Ji:】  add
	TaskListData getItemUnderPoint(const CCPoint &point);
	LabelFT *getLabelFromCache();
	void addLabelToCache(LabelFT *label);
	void clearLabelCache();
	GameActionNode* getBtnSuperEffect();				//创建按钮特效
	void setBtnSEActive(bool bisActive);			//设置任务按钮特效

private:											//【Ji：】  add
	LabelFT* _npcName;							//NPC名字label
	LabelFT* _taskNameLabel;						//任务名称label
	LabelFT* _taskGoalLabel;						//任务目标label
	LabelFT* _taskDesLabel;						//任务描述label
	CCControlButton *_acceptBtn;					//接受任务按钮
	CCControlButton *_finishedBtn;					//完成任务按钮
	//npc军需任务页面特殊处理
	CCControlButton* _oneKeyCompleteTask;			//一键完成任务
	CCControlButton* _doubleCompleteTask;			//双倍完成任务
	CCControlButton* _acceptTask;					//接受任务

	CCScrollView *_contentView;						//对话scrollview
	CCNode *_container;								//对话scrollview容器
//	CCNode* _taskContainerNode;						//任务scrollview容器
	CCSprite *_frame;								//界面内容背景
	CCSprite* _portraitSp;							//NPC肖像图   【Ji：】  add
	CCSprite* _talkBgSp;							//对话背景		【Ji：】  add
	CCSprite* _taskBgSp;							//任务背景		【Ji：】  add
	CCLayer *_content;								//对话layer
	CCLayer* _taskContentLayer;						//任务layer
	CCNode*	_fubenNode;								//副本层
	CCSprite* _fubenOneLockSp;						//副本1锁住的背景图
	CCSprite* _fubenTwoLockSp;
	CCSprite* _fubenThreeLockSp;
	CCControlButton* _fubenOneBtn;
	CCControlButton* _fubenTwoBtn;
	CCControlButton* _fubenThreeBtn;
	typedef std::list<TaskListData> TaskList;
	TaskList _tasks;
	TaskList _twintasks;
	typedef std::list<LabelFT*> TextCache;
	TextCache _textCache;
	int _tag;
	float _itemSpace;	//项间隔
	CCPoint _beginTouch;
	unsigned short _selectId;
	bool _finishedBtnShow;
	bool _show;
	bool m_bTask;									//控制显示对话或任务
	std::set<std::string> _plist;
	GameActionNode* _btnAcNode;							//接收完成任务按钮特效node
	unsigned int _tempRoleID;
	//CCSprite *selectSprite;
	CCLayer *_layer;
	int recordTaskId;
	CCSprite *finishJunxu;
	unsigned int m_finish_way; //军需任务完成方式，0为一键完成，1为全部完成
	unsigned int m_biqi_finish_way;//比奇任务完成方式，0为一键完成，1为全部完成
	CCSprite* m_one_key_exp_beishu_bottom_icon;
	CCSprite* m_finish_all_exp_beishu_bottom_icon;
	short _selectIndex;


	void show_zhuzai(int type,int player_num,int call_num);
	CCNode*		m_zhuzai_node;
	LabelFT*	m_player_num;
	LabelFT*	m_call_title;
	LabelFT*	m_call_num;

	unsigned int m_npc_cache;

	CCControlButton* m_lingQuButton;    //领取俸禄按钮
	CCControlButton* m_duoBeiButton;    //多倍领取按钮
	CCSprite* m_duoBeiSprite;           //多倍领取精灵
};


class NPCTalkUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(NPCTalkUiLayer, create);
	bool init();
	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	//
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);

	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAcceptBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onFinishedBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void onjieshouBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onshuangbeiBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onyijianBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onfuben1BtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onfuben2BtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onfuben3BtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	
	void onLingQuBtnPressed(cocos2d::CCObject* pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onDuoBeiBtnPressed(cocos2d::CCObject* pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void finishedJunXuTask();
	void clearFinishWay();
	void onFinishedJunXuTask(int num); //num表示完成类型，为0时表示一键完成，为1时表示全部完成
	void DailyQuestOneKeyFinsih(int num); //num表示完成类型，为0时表示一键完成，为1时表示全部完成
	void BiQiQuestOneKeyFinish(int num, int questId);//比奇任务一键完成
	void setSelect(int index);
	void buyAssignExp();
private:
	CCLabelTTF * _gold1;
	CCLabelTTF * _gold2;
	CCLabelTTF * _gold3;
	CCLabelTTF * _gold4;
	CCLabelTTF * _gold5;
	EOPENUI m_openUi;
	bool    m_is_yuanbao_enough;//判断快捷完成（一键完成或者全部完成）元宝是否足够
};

class NPCTalkUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(NPCTalkUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(NPCTalkUiLayer);
};

class StatueWorshipUiLayer;

// 雕像膜拜UI（新）
class StatueWorshipUi : public UiInterface
{
public:
	virtual CCNode *openUi();
	virtual void closeUI();
};

class StatueWorshipUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onExit();

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onNormalWorshipBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBaiBaoYuanBaoWorshipBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChaKanBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void onOkBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCancelBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void updateInfo();

	void showDiaoXiangDlg(bool show);
	void showYuanBaoDlg(bool show);

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(StatueWorshipUiLayer, create);

	bool getBtnRect(bool isNormal, CCRect& rc);
SIGNALS:
	c_signal<void, unsigned int> signalSelectNormalWorship;				// 普通膜拜
	c_signal<void, unsigned int> signalSelectBaiBaoYuanBaoWorship;		// 元宝膜拜
private:
	CCNode*					_mainPanel;
	CCNode*					_popupDlg;
	CCNode*					_nodeInfo;
	CCNode*					_nodeStatue;
	CCNode*					_nodeYunBao;
	CCLabelTTF*				_labelTypeName;
	LabelFT*				_labelName;
	CCLabelTTF*				_labelPower;
	LabelFT*				_labelPowerValue;
	CCLabelTTF*				_labelStatueNum;
	CCLabelTTF*				_labelExpTitle;
	LabelFT*				_labelExp;
	CCControlButton*        _normalWorshipBtn;
	CCControlButton*		_costWorshipBtn;

	LabelFT*				_labelNormalExp;
	LabelFT*				_labelYuanBaoExp;	

	unsigned short			_selectId;
	bool					_show;
	bool					_normalWorship;
};

#endif //NPCTALKUI_H