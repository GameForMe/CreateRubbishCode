#if !defined(NOMINMAX) && defined(_MSC_VER)
#	define NOMINMAX // required to stop windows.h messing up std::min
#endif

#include "AlignNode.h"

#include <algorithm>

USING_NS_CC;
USING_NS_CC_EXT;

AlignNode::AlignNode()
: m_dir(ead_vertical)
, m_gap(0)
, m_pack_size(CCSizeZero)
, m_reverse_mode(false)
{
}

void AlignNode::onEnter()
{
	CCNode::onEnter();
	scheduleUpdate();
}

void AlignNode::onExit()
{
	unscheduleUpdate();
	CCNode::onExit();
}

void AlignNode::update(float dt)
{
	arrange_children();
}

void AlignNode::arrange_children()
{
	CCSize size = getContentSize();
	
	CCArray* children = getChildren();
	CCObject* it = NULL;

	//! 先计算出items在没有间距的情况下的总体大小.
	int visible_count = 0;
	CCSize item_size = CCSizeZero;
	CCSize item_max_size = CCSizeZero;
	CCARRAY_FOREACH(children, it)
	{
		CCNode* child = (CCNode*)it;
		if(child->isVisible())
		{
			const CCSize& child_size = child->getContentSize();

			item_size.width += child_size.width * child->getScaleX();
			item_size.height += child_size.height * child->getScaleY();

			item_max_size.width =std::max(item_max_size.width, child_size.width* child->getScaleX());
			item_max_size.height = std::max(item_max_size.height, child_size.height* child->getScaleY());

			++visible_count;
		}
	}
	
	if(visible_count)
	{
		//! 得出间距.
		float gap = m_gap;
		if(!m_gap)
		{
			if (visible_count == 1)
			{
				gap = 0;
			}
			else
			{
				if(m_dir == ead_vertical)
				{
					gap = (size.height - item_size.height) / (visible_count - 1);
				}
				else
				{
					gap = (size.width - item_size.width) / (visible_count - 1);
				}
			}
		}

		item_size.width += (visible_count - 1) * gap;
		item_size.height += (visible_count - 1) * gap;

		//! 进行排列, 我们假定了item的锚点在中心位置.
		CCPoint pos = CCPointZero;
		if(m_dir == ead_vertical)
		{
			pos.x = size.width * 0.5f;
			pos.y = size.height * 0.5f + item_size.height * 0.5f;
		}
		else
		{
			pos.x = size.width * 0.5f - item_size.width * 0.5f;
			pos.y = size.height * 0.5f;
		}

		if(m_reverse_mode)
		{
			CCARRAY_FOREACH_REVERSE(children, it)
			{
				CCNode* child = static_cast<CCNode*>(it);
				if(child->isVisible())
				{
					if(m_dir == ead_vertical)
					{
						float half_child_size = child->getContentSize().height*child->getScaleY() * 0.5f;
						pos.y -= half_child_size;
						child->setPosition(pos);
						pos.y -= half_child_size + gap;
					}
					else
					{
						float half_child_size = child->getContentSize().width *child->getScaleX()* 0.5f;
						pos.x += half_child_size;
						child->setPosition(pos);
						pos.x += half_child_size + gap;
					}
				}
			}
		}
		else
		{
			CCARRAY_FOREACH(children, it)
			{
				CCNode* child = static_cast<CCNode*>(it);
				if(child->isVisible())
				{
					if(m_dir == ead_vertical)
					{
						float half_child_size = child->getContentSize().height *child->getScaleY()* 0.5f;
						pos.y -= half_child_size;
						child->setPosition(pos);
						pos.y -= half_child_size + gap;
					}
					else
					{
						float half_child_size = child->getContentSize().width *child->getScaleX()* 0.5f;
						pos.x += half_child_size;
						child->setPosition(pos);
						pos.x += half_child_size + gap;
					}
				}
			}
		}			
	}

	m_pack_size = size;
	if(m_dir == ead_vertical)
	{
		m_pack_size.height = item_size.height;
		m_pack_size.width = item_max_size.width;
	}
	else
	{
		m_pack_size.width = item_size.width;
		m_pack_size.height = item_max_size.height;
	}
}

#define ALIGNNODE_PROP_GAP "gap"
#define ALIGHNODE_PROP_DIR "dir"

void AlignNodeLoader::onHandlePropTypeCheck(CCNode * pNode, CCNode * pParent, const char* pPropertyName, bool pCheck, cocos2d::extension::CCBReader * pCCBReader)
{
	if(strcmp(pPropertyName,ALIGHNODE_PROP_DIR)== 0)
	{
		((AlignNode*)pNode)->set_direction(pCheck ? AlignNode::ead_horizontal : AlignNode::ead_vertical);
	}
	else
	{
		CCNodeLoader::onHandlePropTypeCheck(pNode, pParent, pPropertyName, pCheck, pCCBReader);
	}
}

void AlignNodeLoader::onHandlePropTypeInteger(CCNode * pNode, CCNode * pParent, const char* pPropertyName, int pInteger, CCBReader * pCCBReader)
{
	if(strcmp(pPropertyName,ALIGNNODE_PROP_GAP) == 0)
	{
		((AlignNode*)pNode)->set_gap(pInteger);
	}
	else
	{
		CCNodeLoader::onHandlePropTypeInteger(pNode, pParent, pPropertyName, pInteger, pCCBReader);
	}
}