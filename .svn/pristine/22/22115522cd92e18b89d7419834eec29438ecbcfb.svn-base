#ifndef STALL_DEFINE_H
#define STALL_DEFINE_H
#include "BaseDefine.h"
#include "ItemDefine.h"
const int STALL_MAX_DISPLAY				= 10;				// 摊位格子数
const int STALL_MAX_TITLE_NUM			= 10 + 1;			// 摊位标题字数(字符数+1个字符串结束符)
//摆摊物品基本信息描述
struct tagStallGoodsInfo
{
	INT64 n64_Serial;//物品serverID
	INT64 nPrice;//单价
	unsigned char byIndex;//货架上的索引，从0开始
	short goodsNum;//货架上该商品的数量，为0时，则该货架为空
	unsigned int typeID;//物品TypeID
	tagRoleAttEffect	equipAtt[MAX_ADDITIONAL_EFFECT];//基本属性+鉴定属性
	unsigned char		byConsolidateLevel;//强化等级
	unsigned int		dwHoleGemID[MAX_EQUIPHOLE_NUM];//镶嵌宝石
	unsigned char		byQuality;//品质
	int					nFightLi;//战斗力
	signed char			byLuck;//幸运
	unsigned char		byHoleNum;//孔数
	tagDWORDTime		dwGainTime;//该物品获得的时间
	tagStallGoodsInfo():n64_Serial(INVALID)
					   ,nPrice(INVALID)
					   ,byIndex(0)
					   ,goodsNum(INVALID)
					   ,typeID(INVALID)
					   ,byConsolidateLevel(0)
					   ,byLuck(0)
					   ,byQuality(0) //品质
					   ,nFightLi(0)
					   ,byHoleNum(0)
					   ,dwGainTime(0)
	{
		memset(dwHoleGemID,-1,sizeof(dwHoleGemID));
	}
public:
	void Clear()
	{
		goodsNum = 0;
		n64_Serial = INVALID;
		typeID = INVALID;
		nPrice = INVALID;
		byConsolidateLevel = 0;
		byLuck = 0;
		byQuality = 0;
		nFightLi = 0;
		byHoleNum = 0;
		dwGainTime = 0;
	}
};
//本地玩家卖出商品信息记录
struct tagStallGoodsLog
{
	unsigned int uItemTypeID;//物品typeid
	char cItemName[20];//商品名称
	char cSoldTime[20];//抽中奖品的时间
	short num;//售出数量
	int price;//单价
	tagStallGoodsLog()
	{
		uItemTypeID = 0;
		num = 0;
		price = 0;
		memset(cItemName,0,sizeof(cItemName));
		memset(cSoldTime,0,sizeof(cSoldTime));
	}
	tagStallGoodsLog(const tagStallGoodsLog& info)
	{
		num = info.num;
		price = info.price;
		uItemTypeID = info.uItemTypeID;
		memcpy(cItemName,info.cItemName,sizeof(cItemName));
		memcpy(cSoldTime,info.cSoldTime,sizeof(cSoldTime));
	}
	tagStallGoodsLog& operator = (const tagStallGoodsLog& info)
	{
		num = info.num;
		price = info.price;
		uItemTypeID = info.uItemTypeID;
		memcpy(cItemName,info.cItemName,sizeof(cItemName));
		memcpy(cSoldTime,info.cSoldTime,sizeof(cSoldTime));
		return *this;
	}
};
//-------------------------------------------------------------------------------
// 错误码
//-------------------------------------------------------------------------------
enum
{
	E_Stall_ItemNotFound_InBag		= 1,	// 没有从背包中找到物品
	E_Stall_ItemCanNot_Sold			= 2,	// 指定物品不可摆摊出售

	E_Stall_Role_InStall			= 5,	// 角色已处于摆摊装备
	E_Stall_Role_Level_2Low			= 6,	// 角色等级未达到30级
	E_Stall_Area_NotAllowed			= 7,	// 所在场景不允许摆摊
	E_Stall_Space_NotEnough			= 8,	// 角色4个格子之内有摊位
	E_Stall_RoleState_NotPermit		= 9,	// 处于战姿、行凶和PVP状态不可摆摊

	E_Stall_Role_Pull				= 20,	// 已收摊
	E_Stall_Goods_BeSold			= 21,	// 已卖出
	E_Stall_Goods_Refresh			= 22,	// 待售物品已更新
	E_Stall_Goods_Refresh_Price		= 23,	// 售价已更新
	E_Stall_GoodsNum_NotEnough		= 24,	// 待售物品个数不够
	E_Stall_Goods_Empty				= 25,	// 没有待售商品
	E_Stall_Goods_InUsed			= 26,	// 商品已处于使用状态
	E_Stall_Goods_NotInBag			= 27,	// 没有在背包中找到指定物品(该物品被使用，丢弃或移动等)

	E_Stall_CustomerMoney_NotEnough	= 30,	// 购买者金钱不够
	E_Stall_CustomerBag_NoFreeSpace	= 31,	// 购买者背包空间不足

	E_Stall_VIP_Not_Init			= 40,	// 摊位没有初始化
	E_Stall_VIP_Own_Another			= 41,	// 已经租赁了其他摊位
	E_Stall_VIP_Info_NotExist		= 42,	// 摊位信息不存在
	E_Stall_VIP_Already_Rent		= 43,	// 该摊位已经被租赁
	E_Stall_VIP_Rent_Error			= 44,	// 租金错误
	E_Stall_VIP_For_Hire			= 45,	// 摊位在待租状态
	E_Stall_VIP_GetGoods_Needless	= 46,	// 商品信息不需要更新
	E_Stall_VIP_Self_Stall			= 47,	// 不可操作自己的摊位

	//摆摊(商城兑换)
	E_Stall_Mall_Trad_Item_Is_Exist = 48,	// 该栏位已有物品，不可重复出售
	E_Stall_Mall_Trad_Bag_Not_Enough= 49,	// 背包空间不足
	E_Stall_Mall_Trad_Item_Is_Not_Trad = 50,// 有商品尚未选择兑换物品
	E_Stall_Mall_Trad_Item_Buy_Is_Not = 51,	// 购买的商品已不存在
	E_Stall_Mall_Trad_YuanBao_Not_Enough = 52,	// 元宝不足，无法购买
	E_Stall_Mall_Trad_Other_Bag_Not_Enough= 53,	// 摊主背包空间不足
	//	E_Stall_Cannot_Find_StallRole	= 50,	// 找不到摊主

	E_New_Stall_Item_Buy_Is_Not = 60,	// 物品已售完
	E_New_Stall_YuanBao_Not_Enough = 61,	// 元宝不足，无法购买
	E_New_Stall_Bag_Not_Enough = 62,	// 背包空间不足
	E_New_Stall_Bag_Item_List_Update = 63,  //物品出售列表已改变
	E_New_Stall_Bag_Item_Price_Update = 64,	//物品出售价格已改变
	E_New_Stall_Map_Not = 65,//该地图无法摆摊
};


#endif