#include "Bounding.h"
#include "BoundingUi.h"
#include "Base.h"
#include "MovingBackground.h"
#include "ClientUpdate.h"
#include "cocos2d.h"
#include "Login.h"
#include "CfgReader.h"
#include "ClientCfg.h"
#include "tools.h"
#include "UiManager.h"
#include "LoginUi.h"

using namespace cocos2d;

Bounding::~Bounding()
{

}

Bounding::Bounding()
{

}

Bounding * Bounding::getInstance()
{
	static Bounding instance;
	return &instance;
}

void Bounding::open()
{
	_boundingUi = NULL;

	_boundingUi = BoundingUi::create();

	_scene = UiMgr::getInstance()->getCurScene();
	_scene->retain();

	_movingBack = new MovingBackGround();
	_movingBack->addToParent(_scene);

	_scene->addChild(_boundingUi);

	_boundingUi->signalonBoundingBtnPressed.connect(this, &Bounding::onBoundingBtnPressed);
	_boundingUi->signalonBackBtnPressed.connect(this, &Bounding::onBackBtnPressed);
}

void Bounding::onBoundingBtnPressed()
{
    //ÕËºÅ°ó¶¨;
	//read userName, password
	std::string username = ClientCfg::getInstance()->getString("general", "username", "");
	std::string password = ClientCfg::getInstance()->getString("general", "password", "");
	username = trimStr(username);
	password = trimStr(password);

}

// void Bounding::close()
// {
// 
// 	if(_movingBack != NULL)
// 	{
// 		delete _movingBack;
// 		_movingBack = NULL;
// 	}
// 
// 	_scene->release();
// 	_scene = NULL;
// 
// 	std::string uiDir = CFGReader::instance()->get_profile_string("Art", "UI", "");
// 	std::string pListFile = uiDir + "ccbResources/boundingui.plist";
// 	CCSpriteFrameCache::sharedSpriteFrameCache()->removeSpriteFramesFromFile(pListFile.c_str());
// 	CCTextureCache::sharedTextureCache()->removeUnusedTextures();
// }

void Bounding::update( float dt )
{

}

void Bounding::onBackBtnPressed()
{
	_boundingUi->removeFromParent();
	if(_movingBack != NULL)
	{
		delete _movingBack;
		_movingBack = NULL;
	}

	_scene->release();
	_scene = NULL;
	Login::getInstance()->open();
	CCDirector::sharedDirector()->replaceScene(Login::getInstance()->getScene());
}
