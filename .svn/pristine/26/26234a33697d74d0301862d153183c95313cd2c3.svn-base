#include "BSAnimation.h"
#include <algorithm>

BSAnimation::BSAnimation()
	: _dt(0.f)
{

}

BSAnimation::~BSAnimation()
{

}

void BSAnimation::addSpriteFrame( CCSpriteFrame* frame, float dt, int zorder /*= 0*/ )
{
	CC_ASSERT(frame != NULL);
	CC_ASSERT(dt > 0.f);
	AnimationFrame animFrame(dt,zorder,frame);
// 	animFrame.dt = dt;
// 	animFrame.frame = frame;
// 	frame->retain();
// 	animFrame.zorder = zorder;
	_animFrames.push_back(animFrame);
	_dt += dt;

// 	//更新时间
// 	float time = 0.f;
// 	_splitTime.clear();
// 	for(AnimationFrames::iterator iter = _animFrames.begin(); iter != _animFrames.end(); ++iter)
// 	{
// 		_splitTime.push_back(time);
// 		AnimationFrame &af = *iter;
// 		time += af.dt / _dt;
// 	}

	//CC_ASSERT(_animFrames.size() == _splitTime.size());
}

// CCSpriteFrame * BSAnimation::getOrigSpriteFrame()
// {
// 	if(_animFrames.size() == 0)
// 	{
// 		return NULL;
// 	}
// 	else
// 	{
// 		AnimationFrame &animFrame = _animFrames[0];
// 		return animFrame.frame;
// 	}
// }

void BSAnimation::cal_split_time()
{
	//更新时间
	float time = 0.f;
	std::for_each(_animFrames.begin(),
					_animFrames.end(),
					[this,&time](AnimationFrame& one)
					{
						_splitTime.push_back(time);
						time += one.dt / _dt;

					});
	//_splitTime.clear();
// 	for(AnimationFrames::iterator iter = _animFrames.begin(); iter != _animFrames.end(); ++iter)
// 	{
// 		_splitTime.push_back(time);
// 		AnimationFrame &af = *iter;
// 		time += af.dt / _dt;
// 	}
}
