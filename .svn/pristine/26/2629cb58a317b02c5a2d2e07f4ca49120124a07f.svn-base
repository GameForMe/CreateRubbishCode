#include "ItemNode.h"
#include "HuoYueUi.h"
#include "PackageManager.h"
#include "ItemDefine.h"
#include "BSAnimate.h"
#include "AnimationCache.h"
#include "UiTools.h"
//#include "item.h"
#include "EquipFusionUi.h"
#include "UiManager.h"
#include "GameActionNode.h"
#include "SQLCommand.h"
#include "SQLTable.h"
#include "DBMgr.h"
#include "EquipFusionManager.h"
#include "GongfaTip.h"
#include "EquipTipUi.h"
#include "ItemTip.h"
#include "DaRongLu.h"
#include "LocalPlayer.h"
#include "EquipShowUi.h"
#include "UiResourceMgr.h"
#include "tools.h"
#include "Attres.h"
#include "TradingEquipItemTipUI.h"
#include "Helper.h"
#include "f_string_table.h"
#include "f_string_util.h"
#include "ZZZTitleTipsUI.h"
#include "ZZZFLDTipsUI.h"
#include "ZZZManorTipsUI.h"
#include "ZZZSignTipsUI.h"
//std::string globalblankstr = CFGReader::instance()->get_profile_string("Art", "ICON", "") + std::string("icon_lock.png");

bool ItemNode::init()
{
	m_bIsDropDragItem = false;
	m_bHasStar = false;
	m_bIsShowEquipSelf = false;
	m_bIsShowItemOpBtn = true;
	m_showInlayButton = false;
	m_showDelayButton = false;
	m_bIsFakeScore = false;
	_block = true;
	_dataId = -1;
	_num = 0;
	_lv = 0;
	m_fEStarXPos = 0.0f;
	m_cQidx = "0";
	_lock = false;
	m_pItemSprite = NULL;
	m_bShowNum = false;
	m_pLessBtn = NULL;
	m_cEQuality = 0;
	m_quanlit_modification = 0;
	//m_fItem = NULL;
	m_bIsClickable = false;
	m_dwTypeId = 0;
	_strengLabel = NULL;
	_isEquipTipui = WCT_Null;
	m_hide_equip_opt_button = false;
	_touchScroll = false;
	m_touchPriority = -1;
	m_rScrollViewRect = CCRectZero;
	m_bIsAddToScrollView = false;
	if(!CCNode::init())
		return false;

	setAnchorPoint(ccp(0.5, 0.5));

	CCSprite *main = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getBlockFrameName().c_str());
	if(NULL != main)
	{
		main->setTag(IT_MAIN);
		main->setVisible(true);
		main->setAnchorPoint(ccp(0, 0));
		addChild(main, 0);

		m_pItemSprite = CCSprite::create();
		m_pItemSprite->setPosition(main->getPosition());
		m_pItemSprite->setVisible(false);
		m_pItemSprite->setAnchorPoint(ccp(0, 0));
		addChild(m_pItemSprite, 2);
	}

	this->setContentSize(CCSize(ITEMNODE_CONTENTWIDTH, ITEMNODE_CONTENTHEIGHT));

	std::string uiDir = CFGReader::instance()->get_profile_string("Art", "ICON", "");
	std::string FullFileName = uiDir + "SingleUI/beibao_shang.png";
	CCSpriteFrame* upFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(FullFileName.c_str());
	if(upFrame == NULL)
	{
		CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(FullFileName.c_str());
		upFrame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(upFrame, FullFileName.c_str());
	}
	FullFileName = uiDir + "SingleUI/beibao_xia.png";
	CCSpriteFrame* downFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(FullFileName.c_str());
	if(downFrame == NULL)
	{
		CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(FullFileName.c_str());
		downFrame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(downFrame, FullFileName.c_str());
	}
	FullFileName = uiDir + "SingleUI/beibao_mengban.png";
	CCSpriteFrame* mengBanFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(FullFileName.c_str());
	if(mengBanFrame == NULL)
	{
		CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(FullFileName.c_str());
		mengBanFrame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(mengBanFrame, FullFileName.c_str());
	}
	FullFileName = uiDir + "SingleUI/equip_naijiu0.png";
	CCSpriteFrame* naijiu0Frame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(FullFileName.c_str());
	if(naijiu0Frame == NULL)
	{
		CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(FullFileName.c_str());
		naijiu0Frame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(naijiu0Frame, FullFileName.c_str());
	}

	// 	CCSprite* sinEffect = CCSprite::create();
	// 	sinEffect->setTag(IT_SinEffect);
	// 	sinEffect->setAnchorPoint(ccp(0.0f, 1.0f));
	// 	addChild(sinEffect, 2);

	_sprite = NULL;
	_qualitybox = NULL;
	_reciveIcon = NULL;
	m_ConType = -1;
	m_ItemID = 0;
	m_bIsShowQualityFrame = true;

	for( int i = 0 ; i < MAX_EQUIPHOLE_NUM ; ++i)
	{
		_isposySprite[i] = NULL;
	}
	return true;
}

void ItemNode::setBlock()
{
	if(_block)
		return;

	CCSprite *sprite = static_cast<CCSprite*>(getChildByTag(IT_MAIN));
	CC_ASSERT(sprite != NULL);

	setVisible(true);
	if(_blockSpriteFrame.empty())
		sprite->setDisplayFrame(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(PackageManager::getInstance()->getBlockFrameName().c_str()));
	else
		sprite->setDisplayFrame(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(_blockSpriteFrame.c_str()));

	//没有用到的方框解锁 不显示数字;
	setLock(false);
	setNum(0);
	setLevel(0);
	setBind(false);
	set_gf_lock(false);
	removeEquipItemEffect();
	_block = true;
	setDataId(0);
	setCompose(0,0,false); 
	setItemSaleEffect();
	_dataId = -1;
	this->removeEStar();
}

void ItemNode::VisibleBlock(bool bVisible)
{
	CCSprite *sprite = static_cast<CCSprite*>(getChildByTag(IT_MAIN));
	sprite->setOpacity( bVisible ? 255 : 0 );
	this->removeQualityBox();
	this->removeEStar();
}

std::string ItemNode::getLockIcon()
{
	if (m_ConType == EICT_UpStar)
	{
		std::string uiDir = CFGReader::instance()->get_profile_string("Art", "ICON", "");
		std::string FullFileName = uiDir + "SingleUI/smeltui_point.png";
		CCSpriteFrame* m_BtnFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(FullFileName.c_str());
		if(m_BtnFrame == NULL)
		{
			CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(FullFileName.c_str());
			m_BtnFrame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
			CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(m_BtnFrame, FullFileName.c_str());
		}
		return FullFileName;
	}
	return PackageManager::getInstance()->getLockFrameName();
}

void ItemNode::setLock( bool lock )
{
	if(lock)
	{
		this->removeQualityBox();
		this->removeEStar();
	}

	if(MIsEquipment(m_dwTypeId))
	{
		const ItemTypeData &typeData  = PackageManager::getInstance()->getItemTypeData(m_dwTypeId);
		ePackageItemType eItemType = typeData.type;
		if(PIT_Kungfu == eItemType || PIT_KungfuExp == eItemType)
			return;
	}

	CCNode *node = getChildByTag(IT_LOCK);
	if(NULL == node)
	{
		if(lock)
		{
			node = CCSprite::createWithSpriteFrameName(getLockIcon().c_str());
			//node->setAnchorPoint(ccp(0.0f, 0.0f));
			node->setTag(IT_LOCK);
			node->setAnchorPoint(ccp(0, 0));
			//node->setPosition(-ITEMNODE_CONTENTWIDTH / 2.0f + 2, -ITEMNODE_CONTENTHEIGHT / 2.0f + 2);
			addChild(node, 2);

			CCSprite *lockSprite = static_cast<CCSprite*>(node);
			CC_ASSERT(lockSprite != NULL);
			lockSprite->setVisible(lock);
		}
	}
	else
	{
		CCSprite *lockSprite = static_cast<CCSprite*>(node);
		CC_ASSERT(lockSprite != NULL);
		if(_lock != lock)
			lockSprite->setVisible(lock);
	}

	if(_lock != lock)
		_lock = lock;
}

void ItemNode::setDataId( unsigned int id, unsigned char EQuality /*= NULL*/)
{
	if (id != -1 && id != 0)
	{
		m_dwTypeId = id;
		setVisible(true);
		m_cEQuality = EQuality;
		this->setnewQualityBG(id,m_bIsShowQualityFrame);
		if(m_bIsDropDragItem)
		{
			CCSprite *sprite = static_cast<CCSprite*>(getChildByTag(IT_MAIN));
			CC_ASSERT(sprite != NULL);
			sprite->setDisplayFrame(PackageManager::getInstance()->getIconSpriteFrame(id));
			sprite->setVisible(true);
			if (!MIsEquipment(id))
			{
				this->removeEStar();
			}
			this->removeQualityBox();
			//			this->showItemLv(true);
		}
		else
		{
			m_pItemSprite->setDisplayFrame(PackageManager::getInstance()->getIconSpriteFrame(id));
			m_pItemSprite->setVisible(true);
			m_pItemSprite->delGray();
		}

		_dataId = id;
		_block = false;
	}
	else if(m_pItemSprite)
	{
		m_pItemSprite->setVisible(false);
		_dataId = id;
	}
}

void ItemNode::ShowNumText(bool value)
{
	CCNode *node = getChildByTag(IT_LABEL);
	if(NULL != node)
	{
		LabelFT *label = static_cast<LabelFT*>(node);
		if(NULL != label)
			label->setVisible(value);
	}
}

void ItemNode::setNum( int num ,int totalNum , bool bSkipSame /*= true*/ )
{
	_num = num;
	_totalNum = totalNum;
	CCNode *node = getChildByTag(IT_LABEL);
	if(node == NULL)
	{
		TTFConfig cfg;
		cfg.outlineSize =1;
		cfg.fontSize = 14;
		cfg.fontFilePath = FT_FONTFACE;
		LabelFT* lab = LabelFT::createWithTTF(cfg,"");

		//CCLabelTTF *lab = CCLabelTTF::create();
		//lab->setFontSize(14);
		lab->setTag(IT_LABEL);
		//lab->setPosition(ccp(ITEMNODE_CONTENTWIDTH / 2.0f, ITEMNODE_CONTENTHEIGHT / 2.0f));
		addChild(lab, 2);
		node = lab;
	}

	LabelFT *label = static_cast<LabelFT*>(node);
	CC_ASSERT(label != NULL);
	CCString *str;
	if (num == 0)
	{
		str = CCString::createWithFormat("%d",totalNum);
	} 
	else
	{
		str = CCString::createWithFormat("%d%s%d", num,"/",totalNum);
	}
	label->setString(str->getCString());
	label->setPosition(ccp(ITEMNODE_CONTENTWIDTH - label->getContentSize().width / 2 - 2, label->getContentSize().height / 2 + 2));
	label->setVisible(true);
}

void ItemNode::setNum( int num, bool bSkipSame /*= true*/, bool bmillonShow /*= false*/ )
{
// 	if(0 == num || (num == _num && bSkipSame))
// 		return;

	_num = num;
	CCNode *node = getChildByTag(IT_LABEL);
	if(node == NULL)
	{
		if(num <= 1 && !m_bShowNum)
		{//1个不需要显示个数;
			return;
		}
		else
		{
			TTFConfig cfg;
			cfg.outlineSize =1;
			cfg.fontSize = 14;
			cfg.fontFilePath = FT_FONTFACE;
			LabelFT* lab = LabelFT::createWithTTF(cfg,"");
			//CCLabelTTF *lab = CCLabelTTF::create();
			//lab->setFontSize(14);
			lab->setTag(IT_LABEL);
			//lab->setPosition(ccp(ITEMNODE_CONTENTWIDTH / 2.0f, ITEMNODE_CONTENTHEIGHT / 2.0f));
			addChild(lab, 2);
			node = lab;
		}
	}

	LabelFT *label = static_cast<LabelFT*>(node);
	CC_ASSERT(label != NULL);
	if(num <= 1 && !m_bShowNum)
	{
		label->setVisible(false);
	}
	else
	{
		std::string strKey;

		if (bmillonShow && num >= 10000)
		{
			string str = STRING_TABLE["9033"];
			safe_sprintf(strKey, "%d", num / 10000);
			strKey.append(str);
		}
		else
		{
			safe_sprintf(strKey, "%d", num);
		}
		label->setString(strKey.c_str());
		label->setPosition(ccp(ITEMNODE_CONTENTWIDTH - label->getContentSize().width / 2 - 2, label->getContentSize().height / 2 + 2));
		label->setVisible(true);
	}
}

void ItemNode::setLevel( int lv)
{
	if(lv == _lv)
		return;
	_lv = lv;
	CCNode *node = getChildByTag(IT_LEVELLABEL);
	if(node == NULL)
	{
		if (lv < 1 )
		{
			return;
		}
		else
		{
			// 			TTFConfig cfg;
			// 			cfg.fontFilePath= FT_FONTFACE;
			// 			cfg.fontSize = 10;
			// 			cfg.outlineSize = 1;
			// 			LabelFT* lab = LabelFT::createWithTTF(cfg,"");
			//CCLabelTTF *lab = CCLabelTTF::create();
			//lab->setFontSize(14);



			//lab->setTextColor(Helper::converColor3B_2_4B(ccc3(0,255,0)));
			//addChild(lab, 2);

			CCSprite * bg=CCSprite::createWithSpriteFrame(PackageManager::getInstance()->getIconFrameByName("SingleUI/mohun_lvheidi"));
			bg->setTag(IT_LEVELLABEL);
			this->addChild(bg,2);

			CCLabelBMFont* lab = CCLabelBMFont::create();
			lab->setFntFile("Art/Scene/fontNum13.fnt");
			lab->setTag(1);
			bg->addChild(lab);
			node = bg;
		}
	}

	//LabelFT *label = static_cast<LabelFT*>(node);
	CCLabelBMFont *label = static_cast<CCLabelBMFont*>(node->getChildByTag(1));
	CCSprite * spBg=static_cast<CCSprite*>(node);
	//CCNode *bigBg = getChildByTag(IT_GongFaBg);
	if(label==NULL||spBg==NULL)
		return;

	if(lv < 1)
	{
		spBg->setVisible(false);
	}
	else
	{

		if(lv<16)
		{
			CCString *str = CCString::createWithFormat("l%X", lv);
			label->setString(str->getCString());
		}
		else
		{
			label->setString("lG");
		}

		//label->setPosition(ccp(ITEMNODE_CONTENTWIDTH- label->getContentSize().width / 2 - 2, label->getContentSize().height / 2 + 2) );
		//label->setPosition(ccp(50, label->getContentSize().height / 2 + 2) );

		label->setPosition(ccp(spBg->getContentSize().width/2,2));
		spBg->setAnchorPoint(ccp(1,0.5));
		spBg->setPosition(ccp(this->getContentSize().width,14));
		spBg->setVisible(true);
	}
}

void ItemNode::changeItemNumPositon()
{
	getChildByTag(IT_LABEL)->setPosition(ccp(ITEMNODE_CONTENTWIDTH / 2.0f - 10.0f, -ITEMNODE_CONTENTHEIGHT / 2.0f + 10.0f));
}

void ItemNode::changeShortCutItemNumPositon()
{
	getChildByTag(IT_LABEL)->setPosition(ccp(ITEMNODE_CONTENTWIDTH / 2.0f - 10.0f, 10.0f));
}

void ItemNode::hideBlank(bool value)
{
	CCSprite *sprite = static_cast<CCSprite*>(getChildByTag(IT_MAIN));
	CC_ASSERT(sprite != NULL);
	sprite->setVisible(value);
}

void ItemNode::setBlank()
{
	if(_blankSpriteFrame.empty())
	{
		setVisible(false);
	}
	else
	{
		CCSprite *sprite = static_cast<CCSprite*>(getChildByTag(IT_MAIN));
		CC_ASSERT(sprite != NULL);
		setVisible(true);
		sprite->setDisplayFrame(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(_blankSpriteFrame.c_str()));
	}
	_block = false;
	setDataId(0);
	_dataId = -1;
	setCompose(0,0,false);
	removeEquipItemEffect();
	setNum(0);
	setLevel(0);
	setLock(false);
	setBind(false);
	set_gf_lock(false);
	setItemSaleEffect();
	if (getChildByTag(IT_SinEffect)!=NULL)
	{
		getChildByTag(IT_SinEffect)->removeFromParent();
	}
	this->removeEStar();
}

void ItemNode::setBind(bool bind /*= true*/,bool is_gongfa)
{
	CCNode *node = getChildByTag(IT_Bind);
	if(node == NULL)
	{
		if(!bind)//如果设置非锁定，直接退出
		{
			return;
		}
		else
		{
			node = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getBindFrameName(is_gongfa?1:0).c_str());
			node->setAnchorPoint(ccp(0.0f, 0.0f));
			node->setTag(IT_Bind);
			//node->setPosition(-ITEMNODE_CONTENTWIDTH / 2.0f + 2, -ITEMNODE_CONTENTHEIGHT / 2.0f + 2);
			node->setPosition(2,2);
			addChild(node, 2);
		}
	}
	CCSprite *bindSprite = static_cast<CCSprite*>(node);
	CC_ASSERT(bindSprite != NULL);

	bindSprite->setVisible(bind && m_need_show_lock);
}

void ItemNode::copy(ItemNode &node)
{
	node.setVisible(isVisible());
	if(_dataId != -1)
		node.setDataId(_dataId);
	if(_num != 1 && _num != 0)
		node.setNum(_num);
	node.setLock(_lock);
	node.setVisible(isVisible());
}

void ItemNode::initWithItem(  f_item *item ,bool isShowLock)
{
	CC_ASSERT(item != NULL);
	//m_fItem = item;
	f_equipment *equip = dynamic_cast<f_equipment*>(item);
	this->removeEStar();
	const ItemTypeData &typeData =PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
	ePackageItemType eItemType = typeData.type;
	unsigned int typeId = item->get_item_type_id();
	clearBagItem();
	if(MIsEquipment(typeId))
	{
		CC_ASSERT(NULL != equip);
		if(equip)
		{
			_cacheType = 2;
			_cacheEquip = *equip;

			this->set_quanlity_modification(_cacheEquip.get_modified_quanlity());
			this->setEquipStarLevel(_cacheEquip.get_star_num());
			m_cEQuality = _cacheEquip.get_item_quality();
			this->showEquipConsolidatedSE(_cacheEquip.get_equip_consolidate_level());
			if((_isEquipTipui !=WCT_EQUIP_TIPS_UI_TAG) && _cacheEquip.is_upstar())
			{
				std::stringstream ss;
				ss<<_cacheEquip.get_equip_consolidate_level();

				std::string basestr = std::string("+") + ss.str();
				if(NULL == _strengLabel)
				{
					TTFConfig cfg;
					cfg.fontFilePath = FT_FONTFACE;
					cfg.fontSize = 14;
					cfg.outlineSize =1;
					_strengLabel = LabelFT::createWithTTF(cfg,basestr);
					CC_ASSERT(NULL != _strengLabel);
					addChild(_strengLabel,2);
				}
				_strengLabel->setVisible(true);
				//_strengLabel->setFontSize(14);
				_strengLabel->setTextColor(Helper::converColor3B_2_4B(ccc3(0x92, 0xd0, 0x50)));
				_strengLabel->setAnchorPoint(ccp(0,0));
				_strengLabel->setPosition(ccp(4,getContentSize().height - 17));
				_strengLabel->setHorizontalAlignment(Helper::convertToFTHAlignment(kCCTextAlignmentRight));
				_strengLabel->setTag(IT_StrengLabel);  
				_strengLabel->setString(basestr.c_str());

			}
		}

		//镶嵌
		/*if((_isEquipTipui != WCT_EQUIP_TIPS_UI_TAG)&&(_isEquipTipui != WCT_ROLEEQUIPUI) && equip->is_posy())
		{
		int posx = 0;
		for(int i = 0;i < MAX_EQUIPHOLE_NUM;++i)
		{
		UINT typeId = equip->get_equip_hold_gem_id(i);
		if(0 >= typeId)
		continue;

		std::string iconFile = CFGReader::instance()->get_profile_string("Art", "ICON", "") + PackageManager::getInstance()->getIconIdName(typeId) + std::string(".png");
		if(NULL == _isposySprite[i])
		{
		_isposySprite[i] = CCSprite::create();
		CC_ASSERT(NULL != _isposySprite[i]);
		addChild(_isposySprite[i],11);
		}

		_isposySprite[i]->setVisible(true);
		CCSpriteFrame* FrameFreeSprite = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(iconFile.c_str());
		if(NULL == FrameFreeSprite)
		{
		CCTexture2D *textureFree = CCTextureCache::sharedTextureCache()->addImage(iconFile.c_str());
		if(NULL == textureFree)
		continue;

		FrameFreeSprite = CCSpriteFrame::createWithTexture(textureFree, CCRect(0.0, 0.0, textureFree->getPixelsWide(), textureFree->getPixelsHigh()));
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(FrameFreeSprite, iconFile.c_str());
		}
		if (FrameFreeSprite)
		{
		_isposySprite[i]->setDisplayFrame(FrameFreeSprite);
		_isposySprite[i]->setAnchorPoint(ccp(0,0));
		_isposySprite[i]->setTag(IT_IsposySprite);
		_isposySprite[i]->setPositionX(posx++ * 9);
		_isposySprite[i]->setScale(0.27);
		}
		}
		}*/
	}
	else
	{
		_cacheType = 1;
		_cacheItem = *item;
	}
	setDataId(typeId, m_cEQuality);
	if (isShowLock)
	{
		setLock(item->is_locked());
	}
	if (eItemType == PIT_Kungfu  || eItemType == PIT_KungfuExp)
	{
		setLevel(_cacheEquip.get_equip()->nLevel);
		setNum(0);
		setBind(false);

		f_equipment* equip  = dynamic_cast<f_equipment*>(item);
		if(equip)
			set_gf_lock(equip->is_gf_locked());
		else
			set_gf_lock(false);

		this->showItemLv(true);
		// 		if(m_bIsDropDragItem)
		// 			this->showItemLv(true);
		// 		else
		// 			this->showItemLv(false);
	}
	else
	{
		setCompose(typeId,item->get_item_number());

		setNum(item->get_item_number());
		setLevel(0);
		setBind(item->is_item_binded());
		set_gf_lock(false);
	}
	// 	if (_num > 1)
	// 	{
	// 		setNum(_num,false);
	// 	}
}

void ItemNode::setShowPosyUpstar(bool value)
{
	for(int i = 0;i < MAX_EQUIPHOLE_NUM;++i)
	{
		if(NULL != _isposySprite[i])
			_isposySprite[i]->setVisible(value);
	}

	if(NULL != _strengLabel)
		_strengLabel->setVisible(value);

	CCNode *node = getChildByTag(IT_LABEL);
	if(NULL != node)
		node->setVisible(value);
}

void ItemNode::initWithItem( const tagEquipViewInfo *equipInfo )
{
	CC_ASSERT(equipInfo != NULL);
	this->removeEStar();
	this->removeQualityBox();

	unsigned int typeId = equipInfo->dw_data_id;
	this->setEquipStarLevel(equipInfo->nStarLv);
	this->showEquipConsolidatedSE(equipInfo->byConsolidateLevel);

	if((_isEquipTipui == WCT_ROLEEQUIPUI) && equipInfo->byConsolidateLevel > 0)
	{
		int strengthLevel = equipInfo->byConsolidateLevel;
		std::stringstream ss;
		ss<<strengthLevel;

		std::string basestr = std::string("+") + ss.str();
		if(NULL == _strengLabel)
		{
			TTFConfig cfg;
			cfg.fontFilePath = FT_FONTFACE;
			cfg.fontSize = 14;
			cfg.outlineSize =1;

			_strengLabel = LabelFT::createWithTTF(cfg,basestr);
			CC_ASSERT(NULL != _strengLabel);
			addChild(_strengLabel,2);
		}

		_strengLabel->setVisible(true);
		//_strengLabel->setFontSize(14);
		_strengLabel->setTextColor(Helper::converColor3B_2_4B(ccc3(0x92, 0xd0, 0x50)));
		_strengLabel->setAnchorPoint(ccp(0,0));
		_strengLabel->setPosition(ccp(4,getContentSize().height - 17));
		_strengLabel->setHorizontalAlignment(Helper::convertToFTHAlignment(kCCTextAlignmentRight));
		_strengLabel->setTag(IT_StrengLabel);  
		//_strengLabel->setString(basestr.c_str());

	}
	m_cEQuality = equipInfo->byConsolidateLevelStar;
	setDataId(typeId, m_cEQuality);
	//在没有需求之前下面的值使用默认值;
	setNum(0);
	setLock(false);
	//setBind(equipInfo->byBind?true:false);//gx modify
	if (0 != equipInfo->byBind && 1 != equipInfo->byBind)
	{
		setBind(true);
	}
	else
	{
		setBind(false);
	}

	set_gf_lock(false);
}

// void ItemNode::runAnimation( const char *animName )
// {
// 	AnimationCache::AnimateList anims;
// 	AnimationCache::createDefList(1, anims);
// 	AnimationCache::getInstance()->getSinEffect(0,animName, anims);
// 	BSAnimate *animste = anims[0];
// 	getChildByTag(IT_SinEffect)->setVisible(true);
// 	getChildByTag(IT_SinEffect)->runAction(CCRepeatForever::create(animste));
// }

void ItemNode::runAnimation( const char *animName )
{
	CC_ASSERT(animName != NULL);
	if(animName == NULL)
	{
		return;
	}
	GameActionNode* animAcNode = dynamic_cast<GameActionNode*>(this->getChildByTag(IT_SinEffect));
	if(animAcNode == NULL)
	{
		CCPoint sePoint = ccp(this->getContentSize().width / 2.0f, this->getContentSize().height / 2.0f);
		animAcNode = GameActionNode::create();
		std::string sSEName = PackageManager::getInstance()->getSuperEffectName(animName);
		// 		for(int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", sSEName.c_str(), i);
		// 			if (!animAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		animAcNode->InitTextureWithSpriteFrame(sSEName.c_str());
		animAcNode->setPosition(sePoint);
		this->addChild(animAcNode, 2);
		animAcNode->setTag(IT_SinEffect);
		animAcNode->BeginAction(0.12f, true);
	}
	else
	{
		if(!animAcNode->isVisible())
			animAcNode->setVisible(true);
		if(!animAcNode->GetActionState())
			animAcNode->BeginAction(0.12f,true);
	}

}

void ItemNode::runAddAnimation(const char *animName)
{
	CC_ASSERT(animName != NULL);
	if(animName == NULL)
	{
		return;
	}
	GameActionNode* animAcNode = dynamic_cast<GameActionNode*>(this->getChildByTag(IT_AddNewItem));
	if(animAcNode == NULL)
	{
		CCPoint sePoint = ccp(this->getContentSize().width / 2.0f, this->getContentSize().height / 2.0f);
		animAcNode = GameActionNode::create();
		std::string sSEName = PackageManager::getInstance()->getSuperEffectName(animName);
		// 		for(int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", sSEName.c_str(), i);
		// 			if (!animAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		animAcNode->InitTextureWithSpriteFrame(sSEName.c_str());
		animAcNode->setPosition(sePoint);
		this->addChild(animAcNode, 2);
		animAcNode->setTag(IT_AddNewItem);
		animAcNode->BeginAction(0.12f, false);
	}else{
		if(!animAcNode->isVisible())
			animAcNode->setVisible(true);
		if(!animAcNode->GetActionState())
			animAcNode->BeginAction(0.12f,false);
	}
}

void ItemNode::stopAnimation()
{
	GameActionNode* eConsolidateAcNode = dynamic_cast<GameActionNode*>(this->getChildByTag(IT_SinEffect));
	if(eConsolidateAcNode != NULL)
	{
		eConsolidateAcNode->removeFromParent();
	}
}

void ItemNode::runSpecialAnima(int id, const char *animName )
{
	CC_ASSERT(animName != NULL);
	if(animName == NULL)
	{
		return;
	}
	AnimationCache::AnimateList anims;
	AnimationCache::createDefList(1, anims);
	AnimationCache::getInstance()->getSinEffect(0,animName, anims);
	BSAnimate *animste = anims[0];
	getChildByTag(IT_SinEffect)->setVisible(true);
	getChildByTag(IT_SinEffect)->runAction(animste);
}

void ItemNode::removeQualityBox()
{
	if (_qualitybox != NULL)
	{
		this->removeChild(_qualitybox);
		_qualitybox = NULL;
	}
	this->stopAnimation();
}

void ItemNode::showReciveIcon( const char *spritename )
{
	CC_ASSERT(spritename != NULL);
	if(spritename == NULL)
	{
		return;
	}
	if (_reciveIcon == NULL)
	{
		_reciveIcon = CCSprite::create();
		CCSpriteFrame *spriteFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(spritename);
		CC_ASSERT(spriteFrame != NULL);
		_reciveIcon->setVisible(true);
		_reciveIcon->setDisplayFrame(spriteFrame);
		_reciveIcon->setPosition(ccp(ITEMNODE_CONTENTWIDTH / 8.0f, ITEMNODE_CONTENTHEIGHT / 5.0f ));
		_reciveIcon->setAnchorPoint(ccp(0,0));
		addChild(_reciveIcon,3);
	}
	else
	{
		_reciveIcon->setVisible(true);
		_reciveIcon->setPosition(ccp(ITEMNODE_CONTENTWIDTH / 8.0f, ITEMNODE_CONTENTHEIGHT / 5.0f ));
		addChild(_reciveIcon,3);
	}
}

void ItemNode::removeReciveIcon()
{
	if (_reciveIcon != NULL)
	{
		removeChild(_reciveIcon);
		_reciveIcon = NULL;
	}
}

cocos2d::CCSprite* ItemNode::getItemSprite(unsigned int id)
{
	if (id != -1 && id != 0)
	{
		setVisible(true);
		CCSprite *sprite = static_cast<CCSprite*>(getChildByTag(IT_MAIN));
		CC_ASSERT(sprite != NULL);
		std::string frame = PackageManager::getInstance()->getIconFrameName(id);
		sprite->setDisplayFrame(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(frame.c_str()));
		return sprite;
	}
	return NULL;
}

void ItemNode::runMoveAction( const CCPoint &start, const CCPoint &end,int index,bool mulitpe)
{
	CCArray *actionArray = CCArray::create();
	float dt = ccpDistance(start, end) / 250.f;
	CCMoveTo *moveTo;
	if (mulitpe)
	{
		moveTo =  CCMoveTo::create(dt * index,end);
	}
	else
	{
		moveTo =  CCMoveTo::create(dt ,end);
	}

	actionArray->addObject(moveTo);
	CCCallFuncN *callFunc = CCCallFuncN::create(this, SEL_CallFuncN(&ItemNode::animCallback));
	actionArray->addObject(callFunc);

	CCSequence *sequence = CCSequence::create(actionArray);

	stopAllActions();
	runAction(sequence);
}

void ItemNode::animCallback( CCNode* node )
{
	setVisible(false);
}

void ItemNode::FadeItemNode( float dt )
{
	CCArray *ChildrenArr = getChildren();
	if(ChildrenArr)
	{
		for(size_t i = 0; i < ChildrenArr->count(); ++i)
		{
			CCSprite* pItem = dynamic_cast<CCSprite*>(ChildrenArr->objectAtIndex(i));
			if(pItem)
			{
				CCActionInterval* FadeOut = CCFadeOut::create(dt);
				pItem->runAction(FadeOut);
			}
		}
	}
}

void ItemNode::SetShowNum( bool bSet )
{
	m_bShowNum = bSet;
	setNum(_num, false);
}

void ItemNode::SetLessBtn( bool bSet )
{
	if(bSet && m_pLessBtn == NULL)
	{
		std::string uiDir = CFGReader::instance()->get_profile_string("Art", "ICON", "");
		std::string FullFileName = uiDir + "SingleUI/smeltui_point.png";
		CCSpriteFrame* m_BtnFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(FullFileName.c_str());
		if(m_BtnFrame == NULL)
		{
			CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(FullFileName.c_str());
			m_BtnFrame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
			CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(m_BtnFrame, FullFileName.c_str());
		}

		m_pLessBtn = CCControlButton::create();
		m_pLessBtn->setPosition(ccp(50.0f, 50.0f));
		m_pLessBtn->setPreferredSize(CCSize(30.0f, 30.0f));
		m_pLessBtn->setBackgroundSpriteFrameForState(m_BtnFrame, CCControlStateSelected);
		m_pLessBtn->setBackgroundSpriteFrameForState(m_BtnFrame, CCControlStateNormal);
		m_pLessBtn->addTargetWithActionForControlEvents( this, cccontrol_selector(ItemNode::onLessBtnPressed), CCControlEventTouchUpInside );
		addChild(m_pLessBtn, 2);
	}
	else if(!bSet && m_pLessBtn != NULL)
	{
		m_pLessBtn->removeFromParentAndCleanup(true);
		m_pLessBtn = NULL;
	}
}

void ItemNode::onLessBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if(_num > 0)
	{
		if (_dataId == FUSION_POWDER || _dataId == SECONDARY_FUSION_POWDER)//判断是否是融合分
		{
			setNum(_num - 1,_totalNum, false);
			if (_num - 1 < 1)
			{
				setNum(0,_totalNum,false);
				SetLessBtn(false);
			}
		} 
		else
		{
			setNum(_num - 1,true);
			if (_num - 1 < 1)
			{
				setNum(0);
				SetShowNum(false);
				SetLessBtn(false);
			}
		}
		//GET_UI(EquipFusionUi,WCT_EquipFusionUi)->updateFusionQianData();
		GET_UI(DaRongLuUi,WCT_DaRongLu)->updateFusionQianData();
	}
	else
	{
		//setNum(0);
		SetShowNum(true);
		SetLessBtn(false);
		//GET_UI(EquipFusionUi,WCT_EquipFusionUi)->updateFusionQianData();
		GET_UI(DaRongLuUi,WCT_DaRongLu)->updateFusionQianData();
	}
}

void ItemNode::setSelect( bool bSet )
{
	CCNode *node = getChildByTag(IT_Select);
	if(node == NULL && bSet && isVisible())		//[bing] 隐藏时不显示选中
	{
		node = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getSelectFrameName().c_str());
		node->setTag(IT_Select);
		node->setAnchorPoint(ccp(0, 0));
		node->setPosition(ccp(-3,-2.5f));
		addChild(node, 1);
	}
	else if(node != NULL && !bSet)
	{
		node->removeFromParentAndCleanup(true);
	}
}

void ItemNode::showGongfaSE(std::string effect)
{
	if(effect=="")
		return;
	CCPoint sePoint = ccp(this->getContentSize().width / 2.0f, this->getContentSize().height / 2.0f);
	GameActionNode* burstAcNode;
	burstAcNode = GameActionNode::create();
	burstAcNode->InitTextureWithSpriteFrame(effect.c_str());
	burstAcNode->setPosition(sePoint);
	this->addChild(burstAcNode, RZN_EFFECT+1);
	burstAcNode->playAnimOnce(0.05f);
}


void ItemNode::showGongfaSE( eVisualPattern seType )
{
	CCPoint sePoint = ccp(this->getContentSize().width / 2.0f, this->getContentSize().height / 2.0f);
	GameActionNode* burstAcNode;
	switch(seType)
	{
	case IT_GongfaNoarmal:
		burstAcNode = GameActionNode::create();
		burstAcNode->InitTextureWithSpriteFrame("E1_47");
		// 		for (int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", "E1_47", i);
		// 			if(!burstAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		break;

	case IT_GongfaBlue:
		burstAcNode = GameActionNode::create();
		burstAcNode->InitTextureWithSpriteFrame("E1_46");
		// 		for (int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", "E1_46", i);
		// 			if(!burstAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		break;

	case IT_GongfaPurple:
		burstAcNode = GameActionNode::create();
		burstAcNode->InitTextureWithSpriteFrame("E1_45");
		// 		for (int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", "E1_45", i);
		// 			if(!burstAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		break;

	case IT_GongfaGold:
		burstAcNode = GameActionNode::create();
		burstAcNode->InitTextureWithSpriteFrame("E1_44");
		// 		burstAcNode = GameActionNode::create();
		// 		for (int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", "E1_44", i);
		// 			if(!burstAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		break;

	case IT_GongfaOrange:
		burstAcNode = GameActionNode::create();
		burstAcNode->InitTextureWithSpriteFrame("E1_43");
		// 		for (int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", "E1_43", i);
		// 			if(!burstAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		break;
	case IT_GongfaFusion:
		burstAcNode = GameActionNode::create();
		burstAcNode->InitTextureWithSpriteFrame("E1_42");
		// 		for (int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", "E1_42", i);
		// 			if(!burstAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		break;
	}

	burstAcNode->setPosition(sePoint);
	this->addChild(burstAcNode, RZN_EFFECT);
	burstAcNode->playAnimOnce(0.05f);
}

void ItemNode::getSurroundSE(const char* seName, float fScale/* = 1.0f*/)
{
	GameActionNode* surroudAcNode = dynamic_cast<GameActionNode*>(this->getChildByTag(IT_GongfaSurround));
	if(surroudAcNode == NULL)
	{
		CCPoint sePoint = ccp(this->getContentSize().width / 2.0f, this->getContentSize().height / 2.0f);
		surroudAcNode = GameActionNode::create();
		std::string sSEName = std::string(seName);
		// 		for(int i = 1; i < 99; ++i)
		// 		{
		// 			CCString* seStr = CCString::createWithFormat("%s%02d", sSEName.c_str(), i);
		// 			if (!surroudAcNode->AddTexture(seStr->getCString(), "Effect", "png"))
		// 				break;
		// 		}
		surroudAcNode->InitTextureWithSpriteFrame(sSEName.c_str());
		surroudAcNode->setPosition(sePoint);
		this->addChild(surroudAcNode, 2);
		surroudAcNode->setTag(IT_GongfaSurround);
		if(1.0f != fScale)
			surroudAcNode->setScale(fScale);
		surroudAcNode->BeginAction(0.12f, true);
	}
	else
		return;
}

void ItemNode::setEQuality( unsigned char equipQuality )
{
	EItemQuality itemQuality = (EItemQuality)equipQuality;
	if(_qualitybox == NULL)
	{
		switch(itemQuality)
		{
		case EIQ_Null:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Null).c_str());
			break;
		case EIQ_Quality0:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Quality0).c_str());
			break;
		case EIQ_Quality1:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Quality1).c_str());
			break;
		case EIQ_Quality2:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Quality2).c_str());
			break;
		case EIQ_Quality3:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Quality3).c_str());
			break;
		case EIQ_Quality4:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Quality4).c_str());
			break;
		case EIQ_Quality5:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Quality5).c_str());
			break;
		case EIQ_End:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Quality0).c_str());
			return;
			break;
		default:
			_qualitybox = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getQualityFramName(EIQ_Quality0).c_str());
			return;
			break;
		}
		CCPoint sePoint = ccp(this->getContentSize().width / 2.0f, this->getContentSize().height / 2.0f);
		_qualitybox->setPosition(sePoint);
		this->addChild(_qualitybox, 1);
	}
	else
	{
		CCSpriteFrame* qualityFram;
		if(!_qualitybox->isVisible())
			_qualitybox->setVisible(true);
		switch(itemQuality)
		{
		case EIQ_Null:
			qualityFram = PackageManager::getInstance()->getIconFrameByName("icon_equip_normal");
			_qualitybox->setDisplayFrame(qualityFram);
			break;
		case EIQ_Quality0:
			qualityFram = PackageManager::getInstance()->getIconFrameByName("icon_equip_normal");
			_qualitybox->setDisplayFrame(qualityFram);
			break;
		case EIQ_Quality1:
			qualityFram = PackageManager::getInstance()->getIconFrameByName("icon_equip_youxiu");
			_qualitybox->setDisplayFrame(qualityFram);
			break;
		case EIQ_Quality2:
			qualityFram = PackageManager::getInstance()->getIconFrameByName("icon_equip_zhuoyue");
			_qualitybox->setDisplayFrame(qualityFram);
			break;
		case EIQ_Quality3:
			qualityFram = PackageManager::getInstance()->getIconFrameByName("icon_equip_wanmei");
			_qualitybox->setDisplayFrame(qualityFram);
			break;
		case EIQ_Quality4:
			qualityFram = PackageManager::getInstance()->getIconFrameByName("icon_equip_shishi");
			_qualitybox->setDisplayFrame(qualityFram);
			break;
		case EIQ_Quality5:
			qualityFram = PackageManager::getInstance()->getIconFrameByName("icon_equip_chuanshuo");
			_qualitybox->setDisplayFrame(qualityFram);
			break;
		case EIQ_End:
			if(_qualitybox != NULL)
				_qualitybox->setVisible(false);
			return;
		}
	}

}

void ItemNode::enableSurroundSE()
{
	GameActionNode* surroudAcNode = dynamic_cast<GameActionNode*>(this->getChildByTag(IT_GongfaSurround));
	if(surroudAcNode != NULL)
	{
		surroudAcNode->StopAction();
		surroudAcNode->BeginAction(0.12f, true);
	}	
}

void ItemNode::setnewQualityBG( unsigned int itemTypeid,bool bFrame )
{
	if (bFrame == true)
	{
		CCString* qualityBGStr;

		ItemTypeData const* item_data  = PackageManager::getInstance()->get_item_proto_ptr(itemTypeid);
		CC_ASSERT(item_data);
		if (MIsEquipment(itemTypeid))
		{
			//const ItemTypeData &typeData  = PackageManager::getInstance()->getItemTypeData(itemTypeid);
			ePackageItemType eItemType = item_data->type;
			if(PIT_Kungfu == eItemType || PIT_KungfuExp == eItemType)
				return;
			else
				qualityBGStr = CCString::createWithFormat("icon_block%d", m_cEQuality);
			this->setEQuality(m_cEQuality);
		}
		else
		{
			// 			c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM PackageData WHERE TypeId = ?1");
			// 			cmd->set_integer32(1, itemTypeid);
			// 			c_sql_table* table = c_db_manager::getSingleton()->create_table();
			// 			while(table->retrieve_row())
			// 			{
			// 				unsigned int idx = table->get_index("quality");
			// 				m_cQidx = table->get_text(idx);
			// 			}
			// 
			// 			c_db_manager::getSingleton()->destroy_table(table);
			// 			c_db_manager::getSingleton()->end_operation(cmd);
			std::stringstream ss;
			ss<< (int)(item_data->byQuality);
			m_cQidx = ss.str();
			qualityBGStr = CCString::createWithFormat("icon_block%s", m_cQidx.c_str());
			this->removeQualityBox();

		}

		//	CCString* qualityBGStr = CCString::createWithFormat("icon_block%s", m_cQidx.c_str());
		CCSpriteFrame* qualityFram = PackageManager::getInstance()->getIconFrameByName(qualityBGStr->getCString());
		CCSprite* mainSprite = dynamic_cast<CCSprite*>(this->getChildByTag(IT_MAIN));
		mainSprite->setDisplayFrame(qualityFram);
	}
}

void ItemNode::setEquipStarLevel( int sLv )
{
	if(sLv > 0)
	{
		m_bHasStar = true;
		CCPoint firstPosOdd = ccp(this->getContentSize().width / 2.0f, 0.0f);
		CCPoint firstPosEven = ccp((11.0f * (this->getContentSize().width)) / 18.0f, 0.0f);
		CCString* starStr = CCString::createWithFormat("icon_equip_star");
		CCSpriteFrame* starFram = PackageManager::getInstance()->getIconFrameByName(starStr->getCString());
		if(sLv % 2)
		{
			m_fEStarXPos = firstPosOdd.x;
			for(int i = 0; i < sLv; ++i)
			{
				CCSprite* starSP = CCSprite::createWithSpriteFrame(starFram);
				starSP->setPosition(ccp(m_fEStarXPos + (pow(-1.0, i) * ((this->getContentSize().width) * 2.0f / 9.0f) * i), 0.0f));
				this->addChild(starSP, RZN_EFFECT + 1);
				starSP->setTag(i + IT_EStar);
				m_fEStarXPos = starSP->getPositionX();
			}
		}
		else
		{
			m_fEStarXPos = firstPosEven.x;
			for(int j = 0; j < sLv; ++j)
			{
				CCSprite* starSP = CCSprite::createWithSpriteFrame(starFram);
				starSP->setPosition(ccp(m_fEStarXPos + (pow(-1.0, j) * ((this->getContentSize().width) * 2.0f / 9.0f) * j), 0.0f));
				this->addChild(starSP, RZN_EFFECT + 1);
				starSP->setTag(j + IT_EStar);
				m_fEStarXPos = starSP->getPositionX();
			}
		}
	}

}

void ItemNode::removeEStar()
{
	if(m_bHasStar)
	{
		for(int i = 0; i < 3; ++i)
		{
			CCSprite* starSp = dynamic_cast<CCSprite*>(this->getChildByTag(i + IT_EStar));
			if(starSp != NULL)
				starSp->removeFromParent();
			else
				break;
		}
		m_bHasStar = false;
	}
	else
		return;
}

void ItemNode::setScrollViewRect(CCScrollView* pView)
{
	m_rScrollViewRect = getScrollViewRect(pView);
	m_bIsAddToScrollView = true;
}

bool ItemNode::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
// 	if (m_bIsAddToScrollView && !m_rScrollViewRect.containsPoint(pTouch->getLocation()))
// 		return false;
	if ( !isVisible() || !isRunning() || !hasVisibleParents())
	{
		return false;
	}
	f_item* p_item = getItemPtr();
	if(p_item != NULL || m_dwTypeId != 0)
	{
		if(isTouchOnNodeContent(this, pTouch))
		{
			if (_touchScroll)
			{
				_touchScroll = false;
			}
			_tchPoint = pTouch->getLocation();
			return true;
		}
	}
	return false;
}

void ItemNode::ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent)
{
	if (pTouch->getLocation().getDistance(_tchPoint) >= 10.0f)
	{
		_touchScroll = true;
	}

}

void ItemNode::ccTouchEnded( CCTouch *pTouch, CCEvent *pEvent )
{
	if((m_bIsFakeScore || isTouchOnNodeContent(this, pTouch)) && !pTouch->cancel_in_scrollview())
	{
		if (m_bIsFakeScore)
			m_bIsFakeScore = false;
		if (isTouchOnNodeContent(this,pTouch))
		{
			if (_touchScroll)
			{
				_touchScroll = false;
				return;
			}
		}
		f_item* p_item = getItemPtr();
		if(IS_UI_OPEN(WCT_TradingUI))
		{
			if(!TradingMgr::getInstance()->m_bTradingUpMsgIsReceive)
				return ;

			TradingUILayer * ui = getUiNodeByTag<TradingUILayer>(WCT_TradingUI);
			if(NULL == ui)
				return ;

			if(T_TradingSell == ui->getFrameTag())
			{
				if(!IS_UI_OPEN(WCT_TradingTipUI) && isTouchOnNodeContent(ui->getSellRightContainer(), pTouch))
				{
					if(!ui->GetSellRightTouchMove())
						OPEN_UI(WCT_TradingTipUI);	

					TradingEquipItemTipUILayer * uitip = getUiNodeByTag<TradingEquipItemTipUILayer>(WCT_TradingTipUI);
					if(NULL == uitip)
						return ;

					if(p_item != NULL)
					{
						uitip->initWithItem(p_item);
						uitip->hideCompose(false);
						uitip->SetBtnImage(ETT_BtnTypePriceUp);
					}

					ItemTip::getInstace()->hideAllTipsButton();
				}
			}
			else
			{
				SetItemData();
				ItemTip::getInstace()->hideAllTipsButton();
			}
		}
		else
		{
			SetItemData();
			if(IS_UI_OPEN(WCT_InlayUi))
			{
				ItemTip::getInstace()->hideAllTipsButton();
				ItemTipSprite* layer = ItemTip::getInstace()->getUiLayer();
				if(layer != NULL)
				{
					layer->setInlayButtonShow(m_showInlayButton);
					layer->setDelayButtonShow(m_showDelayButton);
				}
			}
		}
	}
}

void ItemNode::SetItemData()
{
	f_item* p_item = getItemPtr();
	if(p_item != NULL || m_dwTypeId != 0)
	{
		if(p_item != NULL)
		{
			if(MIsEquipment(p_item->get_item_type_id()))
			{
				if(p_item->is_locked() && m_ConType == EICT_UpStar)
					return;
				const ItemTypeData &typeData  = PackageManager::getInstance()->getItemTypeData(p_item->get_item_type_id());
				ePackageItemType eItemType = typeData.type;
				if(PIT_Kungfu == eItemType || PIT_KungfuExp == eItemType)
				{
					GongfaTip::getInstace()->open();
					GongfaTip::getInstace()->setPosition((this->getParent())->convertToWorldSpace(this->getPosition()));
					GongfaTip::getInstace()->setData(dynamic_cast<f_equipment*>(p_item));
				}
				else
				{
					EquipTipUiLayer* ui = EquipTipUi::create();
					f_item* woreEquip = PackageManager::getInstance()->getItem(EICT_Equip, (INT64)p_item->get_item_id());
					if(woreEquip != NULL)
						ui->showSelfEquip();

					if(IS_UI_OPEN(WCT_ForgingDecomUI))
					{
						ui->showSelfEquip();
						ui->showUi(ccp(0,0),p_item->get_item_type_id());
						ui->setAllButtonOff();
						ui->setEquipVisible(false);
					}
					else
						ui->showUi(dynamic_cast<f_equipment*>(p_item));

					if (m_ConType >= EICT_UpStar )
						ui->setAllButtonOff();

					if(m_hide_equip_opt_button)
					{
						if(IS_VALID_PTR(ui))
						{
							ui->setAllButtonOff();
						}
					}
				}
			}
			else
			{
				if(p_item->is_locked() && m_ConType == -1)
					return;
				ItemTip::getInstace()->open();
				ItemTip::getInstace()->setPosition((this->getParent())->convertToWorldSpace(this->getPosition()));
				ItemTip::getInstace()->setData(p_item);
				ItemTip::getInstace()->showTipsButton(PackageManager::getInstance()->getItemTypeData(p_item->get_item_type_id()).byTipsBtnIdx);
				if(!m_bIsShowItemOpBtn)
					ItemTip::getInstace()->hideOpBtn();
				if(m_showInlayButton){
					ItemTip::getInstace()->getUiLayer()->setInlayButtonShow(m_showInlayButton);
				}
				if(m_showDelayButton){
					ItemTip::getInstace()->getUiLayer()->setDelayButtonShow(m_showDelayButton);
				}
				//					ItemTip::getInstace()->hideOpBtn();
			}
		}
		else
		{
			if(MIsEquipment(m_dwTypeId))
			{
				const ItemTypeData &typeData  = PackageManager::getInstance()->getItemTypeData(m_dwTypeId);
				ePackageItemType eItemType = typeData.type;
				if(PIT_Kungfu == eItemType || PIT_KungfuExp == eItemType)
				{
					GongfaTip::getInstace()->open();
					GongfaTip::getInstace()->setPosition((this->getParent())->convertToWorldSpace(this->getPosition()));
					GongfaTip::getInstace()->setData(m_dwTypeId);
				}
				else
				{
					EquipTipUiLayer* ui = EquipTipUi::create();
					//						ui->showSelfEquip();
					ui->showUi(ccp(0.0f,0.0f), m_dwTypeId);
				}
			}
			else
			{
				const std::vector<tagHuoYueReward>&huoYueReward=Attres::getInstance()->getHuoYueRewardList();
				const tagActiveData &activityData = RoleManager::getInstance()->getLocalPlayer()->getActiveData();
				size_t reward_idx = getTag() -  HuoYueUiFrame::NT_ItemNodeBegin ;
				if( reward_idx>=0 && reward_idx<huoYueReward.size() && activityData.m_n32_active_num >= huoYueReward[reward_idx].HuoYueReward  )
				{
					return;
				}

				switch(m_dwTypeId)
				{
				case ZZZTITLEZHAN:
				case ZZZTITLEFA:
				case ZZZTITLEDAO:
					{
						ZZZTitleTipsUI* node = ZZZTitleTipsUI::getInstance()->open();
						node->setData(m_dwTypeId);
						node->setPlace((this->getParent())->convertToWorldSpace(this->getPosition()));
						node->setButtonVisible(false);
						//ZZZTitleTipsUI::getInstance()->setData(m_dwTypeId);
					}
					break;
				case ZZZFLYDRAGON:
					{
						ZZZFLDTipsUI* node = ZZZFLDTipsUI::getInstance()->open();
						node->setData();
						node->setPlace((this->getParent())->convertToWorldSpace(this->getPosition()));
						node->setButtonVisible(false);
					}
					break;
				case ZZZMANOR:
					{
						ZZZManorTipsUI* node = ZZZManorTipsUI::getInstance()->open();
						node->setData();
						node->setPlace((this->getParent())->convertToWorldSpace(this->getPosition()));
						node->setButtonVisible(false);
					}
					break;
				case ZZZSIGN:
					{
						ZZZSignTipsUI* node = ZZZSignTipsUI::getInstance()->open();
						node->setData();
						node->setPlace((this->getParent())->convertToWorldSpace(this->getPosition()));
						node->setButtonVisible(false);
					}
					break;
				default:
					{
						ItemTip::getInstace()->open();
						ItemTip::getInstace()->setPosition((this->getParent())->convertToWorldSpace(this->getPosition()));
						ItemTip::getInstace()->setDataId(m_dwTypeId);
						ItemTip::getInstace()->showTipsButton(PackageManager::getInstance()->getItemTypeData(m_dwTypeId).byTipsBtnIdx);
						if(!m_bIsShowItemOpBtn)
							ItemTip::getInstace()->hideOpBtn();
						if(m_showInlayButton){
							ItemTip::getInstace()->getUiLayer()->setInlayButtonShow(m_showInlayButton);
						}
						if(m_showDelayButton){
							ItemTip::getInstace()->getUiLayer()->setDelayButtonShow(m_showDelayButton);
						}
					}
					break;
				}

				//ItemTip::getInstace()->show_buy_btn(_guide_to_buy);
			}
		}
	}
}

void ItemNode::onExit()
{
	if(m_bIsClickable)
		CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCNode::onExit();

	UNREGISTER_EVENT(GongfaLockStateUpdate,ItemNode,on_event_bind_state_update);
}

void ItemNode::setClickable( bool isClickable , int touchPriority/* default = -1*/)
{
	if(isClickable)
	{
		if(!m_bIsClickable)
		{
			CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, touchPriority, false);
			m_touchPriority = touchPriority;
			m_bIsClickable = true;
		}
	}
	else
	{
		if(m_bIsClickable)
		{
			CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
			m_bIsClickable = false;
		}
	}
}

void ItemNode::setTouchPriority(int touchPriority)
{
	if(m_bIsClickable)
	{
		if ( touchPriority != m_touchPriority )
		{
			CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
			CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, touchPriority, false);
			m_touchPriority = touchPriority;
		}
	}
}

void ItemNode::showEquipConsolidatedSE( int conLv )
{
	if(8 <= conLv && 12 > conLv)
		this->runAnimation("E1_95");
	else if(12 <= conLv && 16 > conLv)
		this->runAnimation("E1_96");
	else if(16 == conLv)
		this->runAnimation("E1_97");
	else
		this->stopAnimation();
}

void ItemNode::showItemLv( bool isShowing )
{
	CCNode* lvNode = this->getChildByTag(IT_LEVELLABEL);
	if(lvNode != NULL)
	{
		if(isShowing)
		{
			if(!lvNode->isVisible())
				lvNode->setVisible(true);
		}
		else
		{
			if(lvNode->isVisible())
				lvNode->setVisible(false);
		}
	}
	else
		return;
}

void ItemNode::hideItemOpBtn()
{
	m_bIsShowItemOpBtn = false;
}

void ItemNode::hideItemOpBtnEx()
{
	m_hide_equip_opt_button = true;
}

void ItemNode::unlockVirtualTouchEnded()
{
	if (!m_bIsFakeScore)
		m_bIsFakeScore = true;
}

void ItemNode::setMainVisible( bool isVisible )
{
	CCNode* lvNode = this->getChildByTag(IT_MAIN);
	if (m_pItemSprite!=NULL && lvNode!=NULL)
	{
		m_pItemSprite->setVisible(isVisible);
		lvNode->setVisible(isVisible);
	}
}

void ItemNode::setItemID(INT64 id)
{
	m_ItemID = id;
}
void ItemNode::setConType(int type)
{
	m_ConType = type;
}
int ItemNode::getConType()
{
	return m_ConType;
}
INT64 ItemNode::getItemID()
{
	return m_ItemID;
}

INT64 ItemNode::getFitemID()
{
	f_item* pitem= getItemPtr();
	if(pitem)
	{
		return pitem->get_item_id();
	}
	return 0;
}

void ItemNode::removeSurroundSE()
{
	GameActionNode* surroudAcNode = dynamic_cast<GameActionNode*>(this->getChildByTag(IT_GongfaSurround));
	if(surroudAcNode != NULL)
	{
		this->removeChild(surroudAcNode);
	}
}

void ItemNode::hideCompose(bool value)
{
	CCSprite *node = (CCSprite*)getChildByTag(IT_Compose); 
	if(NULL != node)
		node->setVisible(value);
}

void ItemNode::setCompose( unsigned int ntypeid ,int num,bool bsame /*= true*/)
{
	//获取物品索引类型
	// 	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM PackageData WHERE TypeId = ?1");
	// 	cmd->set_integer32(1 , ntypeid);
	// 	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	// 	int nIndex = 0; //显示类型索引
	// 	int useLv = 0;
	// 	while(table->retrieve_row())
	// 	{
	// 		unsigned int idx = table->get_index("tipsBtnIdx");
	// 		nIndex = table->get_integer32(idx);
	// 		idx = table->get_index("uselv");
	// 		useLv = table->get_integer32(idx);
	// 	}
	// 	c_db_manager::getSingleton()->destroy_table(table);
	// 	c_db_manager::getSingleton()->end_operation(cmd);
	const ItemTypeData& itemTypeData = PackageManager::getInstance()->getItemTypeData(ntypeid);
	int nIndex = itemTypeData.byTipsBtnIdx; //显示类型索引
	CCSprite *node = (CCSprite*)getChildByTag(IT_Compose); 
	//可使用部分代码
	if (nIndex == ESTBT_2 || nIndex == ESTBT_3 || nIndex == ESTBT_5 || nIndex == ESTBT_6 || nIndex == ESTBT_10 || nIndex == ESTBT_14)//可以合成的物品
	{
		std::string name = "";
		if (nIndex == ESTBT_2 || nIndex == ESTBT_3 || nIndex == ESTBT_10 || nIndex == ESTBT_14)
		{
			int needNum = 0;
			c_sql_command* cmd1 = c_db_manager::getSingleton()->begin_operation("SELECT * FROM ComposeData WHERE id = ?1");
			cmd1->set_integer32(1 , ntypeid);
			c_sql_table* table1 = c_db_manager::getSingleton()->create_table();
			//int nIndex = 0; //显示类型索引
			while(table1->retrieve_row())
			{
				unsigned int idx = table1->get_index("costnum");
				needNum = table1->get_integer32(idx);
			}
			c_db_manager::getSingleton()->destroy_table(table1);
			c_db_manager::getSingleton()->end_operation(cmd1);
			if (needNum <= 0 || num < needNum)
			{
				name = "suipian";
			}
			else
			{
				name = "kehecheng";
			}
		}
		else if (nIndex == 5 || nIndex == 6)
		{
			name = "keshiyong";
		}

		CCSpriteFrame* pFrame = PackageManager::getInstance()->getIconFrameByName(name);
		if (pFrame == NULL)
		{
			return;
		}
		if (!node)
		{
			node = CCSprite::create();
			node->initWithSpriteFrame(pFrame);
			node->setAnchorPoint(ccp(0.0f, 0.0f));
			node->setTag(IT_Compose);
			node->setPosition(CCPointMake(ITEMNODE_CONTENTWIDTH / 2.0f - 13, ITEMNODE_CONTENTHEIGHT / 2.0f + 10));
			addChild(node, 2);
		}
		else
		{
			node->setDisplayFrame(pFrame);
		}
		LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
		if( (nIndex == 5 || nIndex == 6) && player->getLevel() < itemTypeData.level)
		{
			node->setVisible(false);
		}
		else
		{
			node->setVisible(true);
		}
	}
	else
	{
		if (node)
			node->setVisible(false);
	}



	/*
	if (nIndex == 2 || nIndex == 3)//可以合成的物品
	{
	std::string name = "";
	if (num >= 1 && num <5)
	{
	name = "suipian";
	}
	else
	{
	name = "kehecheng";
	}
	if (ntypeid == 1004036 || ntypeid == 1004002 || ntypeid == 1004006 || ntypeid == 1004010)//精灵羽毛,逐日剑法，流星火雨，嗜血术特殊处理
	{
	if (num >= 30 )
	{
	name = "kehecheng";
	}
	else
	{
	name = "suipian";
	}

	}
	else if (ntypeid == 1004001 || ntypeid == 1004005 || ntypeid == 1004009 )//旋风斩,灭天火，召唤神兽特殊处理
	{
	if (num >= 10 )
	{
	name = "kehecheng";
	}
	else
	{
	name = "suipian";
	}

	}
	else if (ntypeid == 1004003 || ntypeid == 1004007 || ntypeid == 1004011 )//雷霆剑舞,心灵之火，淬毒术特殊处理
	{
	if (num >= 50 )
	{
	name = "kehecheng";
	}
	else
	{
	name = "suipian";
	}

	}
	else if (ntypeid == 1004004 || ntypeid == 1004008 || ntypeid == 1004012 )//灭神斩,极度冰寒，驯兽术特殊处理
	{
	if (num >= 100 )
	{
	name = "kehecheng";
	}
	else
	{
	name = "suipian";
	}

	}

	CCSpriteFrame* pFrame = PackageManager::getInstance()->getIconFrameByName(name);
	if (pFrame == NULL)
	{
	return;
	}
	if (!node)
	{
	node = CCSprite::create();
	node->initWithSpriteFrame(pFrame);
	node->setAnchorPoint(ccp(0.0f, 0.0f));
	node->setTag(IT_Compose);
	node->setPosition(CCPointMake(ITEMNODE_CONTENTWIDTH / 2.0f - 13, ITEMNODE_CONTENTHEIGHT / 2.0f + 10));
	addChild(node, 2);
	}
	else
	{
	node->setDisplayFrame(pFrame);
	}
	node->setVisible(true);
	}

	else
	{
	if (node)
	node->setVisible(false);
	}
	*/


}

void ItemNode::setEquipItemLevelUpEffect()
{
	CCSprite* levelUpSprite = (CCSprite*)getChildByTag(IT_LEVELUP);
	if (levelUpSprite == NULL)
	{
		levelUpSprite = CCSprite::create();
		levelUpSprite->setTag(IT_LEVELUP);
		levelUpSprite->setZOrder(10);
		addChild(levelUpSprite);
		levelUpSprite->setPosition(ccp(getContentSize().width / 2,getContentSize().height - 10));
		levelUpSprite->setAnchorPoint(ccp(0, 0));
		//加载特效资源
		m_levelUpSEName = CFGReader::instance()->get_profile_string("Art", "Effect", "") + "E1_147.plist";
		_levelUpAcNode = GameActionNode::create();
		_levelUpAcNode->InitWithPList(m_levelUpSEName.c_str(), "E1_147");
		_levelUpAcNode->setPosition(ccp(getContentSize().width / 4, 0));	
		levelUpSprite->addChild(_levelUpAcNode);
		_levelUpAcNode->BeginAction(0.2, true);
	}
}
void ItemNode::removeEquipLevelUpEffect(){
	CCSprite* levelUpSprite=(CCSprite*)getChildByTag(IT_LEVELUP);
	if(levelUpSprite!=NULL){
		levelUpSprite->removeAllChildrenWithCleanup(true);
	}
}
int ItemNode::getEquipNaiJiuLi(f_equipment *equip){
	CC_ASSERT(equip != NULL);
	if(!equip)
	{
		return NULL;
	}
	EEquipPos equipPosIndex;						//装备位置索引
	int equipDurability = 0;						//装备耐久
	const EquipTypeData* t_data = PackageManager::getInstance()->getEquipTypeDataPointer(equip->get_item_type_id());
	if (t_data != NULL)
	{
		equipDurability = t_data->durability;
		equipPosIndex = t_data->posIndex;
	}


//已完成 	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation( "SELECT * FROM EquipData WHERE typeId = ?1");
// 	cmd->set_integer32(1 , equip->get_item_type_id());
// 	c_sql_table* table = c_db_manager::getSingleton()->create_table();
// 	while(table->retrieve_row())
// 	{
// 		unsigned int idx = table->get_index("Durability");
// 		equipDurability = table->get_integer32(idx);
// 		idx = table->get_index("PosIndex");
// 		equipPosIndex = (EEquipPos)table->get_integer32(idx);
// 	}
// 	c_db_manager::getSingleton()->destroy_table(table);
// 	c_db_manager::getSingleton()->end_operation(cmd);

	return GetEquipNewness(equipPosIndex, equip->get_item_use_times(), equipDurability);
}

void ItemNode::setEquipItemEffect( f_item *item, EItemConType conType)
{
	CC_ASSERT(item != NULL);
	if (!item)
	{
		return;
	}
	LocalPlayer* localPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (!localPlayer)
	{
		return;
	}

	//获取道具的数据
	const ItemTypeData &typeData =PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
	ePackageItemType eItemType = typeData.type;
	/*类型为装备*/
	if (eItemType == PIT_Equip)
	{
		f_equipment *equip = dynamic_cast<f_equipment*>(item);
		if (!equip)
		{
			return;
		}

		/*获取装备耐久力*/
		int naijiuli = getEquipNaiJiuLi(equip);
		/*装备小标记精灵（上下箭头、破碎等图标）*/
		CCSprite* upDownSprite = (CCSprite*)m_pItemSprite->getChildByTag(IT_UpDown);
		if (!upDownSprite)
		{
			upDownSprite = CCSprite::create();
			upDownSprite->setTag(IT_UpDown);
			//upDownSprite->setZOrder(10);
			upDownSprite->setVisible(true);
			m_pItemSprite->addChild(upDownSprite);
		}
		upDownSprite->setPosition(ccp(43,13));


		if(conType == EICT_Equip)
		{
			if(naijiuli == 0)
			{
				upDownSprite->setVisible(true);
				upDownSprite->initWithSpriteFrameName("Art/ICON/SingleUI/equip_naijiu0.png");
				m_pItemSprite->setGray();
			}
			else
			{
				upDownSprite->removeFromParentAndCleanup(true);
				m_pItemSprite->delGray();
			}
		}
		else if(conType == EICT_Bag)
		{
			/*获取装备数据*/
			const EquipTypeData* equipType = PackageManager::getInstance()->getEquipTypeData(item->get_item_type_id()); 
			CC_ASSERT(equipType);
			const EquipTypeData &equipData = *equipType;
			int equipRoleType = RT_End;
			/*获取装备的职业类型（战士、法师、道士、通用）*/
			if(equipData.profession2 == PROFESSION1 || equipData.profession2 == PROFESSION4 || equipData.profession2 == PROFESSION7)
			{
				equipRoleType = RT_Warrior;
			}
			else if (equipData.profession2 == PROFESSION2 || equipData.profession2 == PROFESSION5 || equipData.profession2 == PROFESSION8)
			{
				equipRoleType = RT_Mage;
			}
			else if (equipData.profession2 == PROFESSION3 || equipData.profession2 == PROFESSION6 || equipData.profession2 == PROFESSION9)
			{
				equipRoleType = RT_Taoist;
			}
			else if (equipData.profession2 == PROFESSION10 || equipData.profession2 == PROFESSION11 || equipData.profession2 == PROFESSION12)
			{
				equipRoleType = RT_End;
			}

			/*获取自己的职业*/
			int roleType = localPlayer->getAttribute(RA_ROLETYPE);
			if (equipRoleType == RT_End)
			{
				equipRoleType = roleType;
			}
			/*判断人物是否能够装备此装备*/
			if ((equipRoleType == roleType || equipRoleType == RT_End) && (equipData.bySex == -1/* -1表示男女通用 */ || equipData.bySex == localPlayer->getAttribute(RA_SEX)) && equipData.minUseLevel <= localPlayer->getLevel())
			{
				/*获取身上所有装备*/
				PackageManager::ItemMap* itemMap = PackageManager::getInstance()->getItemMap(EICT_Equip);
				f_equipment* roleEquip;
				int roleFight = 0;
				/*戒指或者护腕*/
				if (equipData.posIndex == EEP_Wrist1 || equipData.posIndex == EEP_Wrist2 || equipData.posIndex == EEP_Finger1 || equipData.posIndex == EEP_Finger2)
				{
					int roleFightOne=0;
					int roleFightTwo=0;
					f_equipment* roleEquipOne;
					f_equipment* roleEquipTwo;
					if (equipData.posIndex == EEP_Wrist1 || equipData.posIndex == EEP_Wrist2)
					{
						roleEquipOne = dynamic_cast<f_equipment*>(PackageManager::getInstance()->getItem(*itemMap, (short)EEP_Wrist1));
						roleEquipTwo = dynamic_cast<f_equipment*>(PackageManager::getInstance()->getItem(*itemMap, (short)EEP_Wrist2));
					}
					else if (equipData.posIndex == EEP_Finger1 || equipData.posIndex == EEP_Finger2)
					{
						roleEquipOne = dynamic_cast<f_equipment*>(PackageManager::getInstance()->getItem(*itemMap, (short)EEP_Finger1));
						roleEquipTwo = dynamic_cast<f_equipment*>(PackageManager::getInstance()->getItem(*itemMap, (short)EEP_Finger2));
					}

					/*取其中战斗力低的和背包装备作比较*/
					if (roleEquipOne && roleEquipTwo)
					{
						roleFightOne = Rating_Helper::getInstance()->GetNoGemRating(roleEquipOne->get_equip(),equipRoleType - 1);
						roleFightTwo =  Rating_Helper::getInstance()->GetNoGemRating(roleEquipTwo->get_equip(),equipRoleType - 1);
						if (roleFightOne < roleFightTwo)
						{
							//roleEquip = roleEquipOne;
							roleFight = roleFightOne;
						}
						else
						{
							//roleEquip = roleEquipTwo;
							roleFight = roleFightTwo;
						}
					}
					else
					{
						roleEquip = NULL;
						roleFight = -1;
					}
				}
				else
				{
					roleEquip = dynamic_cast<f_equipment*>(PackageManager::getInstance()->getItem(*itemMap, (short)equipData.posIndex));
					if (roleEquip)
					{
						roleFight = Rating_Helper::getInstance()->GetNoGemRating(roleEquip->get_equip(),equipRoleType - 1);
					}
					else
					{
						roleFight = -1;
					}
				}

				/**/
				if(naijiuli == 0)
				{
					upDownSprite->setVisible(true);
					upDownSprite->initWithSpriteFrameName("Art/ICON/SingleUI/equip_naijiu0.png");
					m_pItemSprite->setGray();
				}
				else
				{
					int fight = Rating_Helper::getInstance()->GetNoGemRating(equip->get_equip(),equipRoleType - 1);
					if (fight > roleFight)
					{
						upDownSprite->setVisible(true);
						upDownSprite->initWithSpriteFrameName("Art/ICON/SingleUI/beibao_shang.png");
						m_pItemSprite->delGray();
					}
					else if(fight < roleFight)
					{
						upDownSprite->setVisible(true);
						m_pItemSprite->delGray();
						upDownSprite->initWithSpriteFrameName("Art/ICON/SingleUI/beibao_xia.png");
					}
					else
					{
						upDownSprite->setVisible(false);
					}
				}

			}
			else
			{
				/*人物不能装备此装备*/
				upDownSprite->initWithSpriteFrameName("Art/ICON/SingleUI/beibao_mengban.png");
			}
		}	
	}
	else if (eItemType == PIT_YaoPin && typeData.level > localPlayer->getLevel())
	{
		CCSprite* upDownSprite = (CCSprite*)m_pItemSprite->getChildByTag(IT_UpDown);
		if (!upDownSprite)
		{
			upDownSprite = CCSprite::create();
			upDownSprite->setTag(IT_UpDown);
			//upDownSprite->setZOrder(10);
			upDownSprite->setVisible(true);
			m_pItemSprite->addChild(upDownSprite);
		}
		upDownSprite->initWithSpriteFrameName("Art/ICON/SingleUI/beibao_mengban.png");
		upDownSprite->setPosition(ccp(43,13));
	}
	else
	{
		CCSprite* upDownSprite = (CCSprite*)m_pItemSprite->getChildByTag(IT_UpDown);
		if (upDownSprite)
		{
			upDownSprite->removeFromParent();
		}	
	}
}

void ItemNode::setStorageItemEffect(f_equipment *equip)
{
	if (!equip)
	{
		return;
	}
	LocalPlayer* localPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (!localPlayer)
	{
		return;
	}
	int naijiuli = getEquipNaiJiuLi(equip);
	CCSprite* upDownSprite = (CCSprite*)m_pItemSprite->getChildByTag(IT_UpDown);
	if (!upDownSprite)
	{
		upDownSprite = CCSprite::create();
		upDownSprite->setTag(IT_UpDown);
		//upDownSprite->setZOrder(10);
		upDownSprite->setVisible(true);
		m_pItemSprite->addChild(upDownSprite);
	}
	if(naijiuli == 0)
	{
		upDownSprite->initWithSpriteFrameName("Art/ICON/SingleUI/equip_naijiu0.png");
		m_pItemSprite->setGray();
	}
	else
	{
		m_pItemSprite->delGray();
	}

	upDownSprite->setPosition(ccp(43,13));
}

void ItemNode::removeEquipItemEffect()
{
	CCSprite* upDownSprite = (CCSprite*)m_pItemSprite->getChildByTag(IT_UpDown);
	if (upDownSprite)
	{
		upDownSprite->removeFromParent();
	}
}

void ItemNode::removeEffectLayer()
{
	if (getChildByTag(IT_SinEffect)!=NULL)
	{
		getChildByTag(IT_SinEffect)->removeFromParent();
	}
}

void ItemNode::setItemSaleEffect( f_item *item /*= NULL*/,bool isShow /*= true*/ )
{
	if (item == NULL)
	{
		CCSprite* saleSprite = (CCSprite*)getChildByTag(IT_NoSale);
		if (saleSprite)
			saleSprite->setVisible(false);
		return;
	}
	ItemTypeData data = PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
	if (0 != data.canSell)
	{
		CCSprite* saleSprite = (CCSprite*)getChildByTag(IT_NoSale);
		if (saleSprite)
			saleSprite->setVisible(false);
		return;
	}
	if (isShow)
	{
		CCSprite* saleSprite = (CCSprite*)getChildByTag(IT_NoSale);
		if (!saleSprite)
		{
			std::string name = "suo";
			//	std::string fileName = CFGReader::instance()->get_profile_string("Art", "ICON", "") + "SingleUI/" + name + std::string(".png");
			CCSpriteFrame* saleFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(name.c_str());
			/*if (saleFrame == NULL)
			{
			CCImage image;
			image.initWithImageFile(fileName.c_str());
			CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addUIImage(&image,name.c_str());
			saleFrame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
			CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(saleFrame, name.c_str());
			}*/
			saleSprite = CCSprite::createWithSpriteFrame(saleFrame);
			saleSprite->setTag(IT_NoSale);
			saleSprite->setZOrder(10);
			saleSprite->setVisible(true);
			CCSize size = m_pItemSprite->getContentSize();
			saleSprite->setPosition(ccp(size.width/2,size.height/2));
			saleSprite->setAnchorPoint(ccp(0.5,0.5));
			saleSprite->setVisible(true);
			addChild(saleSprite);
		}
		saleSprite->setVisible(true);
	}
	else
	{
		CCSprite* saleSprite = (CCSprite*)getChildByTag(IT_NoSale);
		if (saleSprite)
			saleSprite->setVisible(false);
	}
}

void ItemNode::clearBagItem()
{
	for( int i = 0 ; i < MAX_EQUIPHOLE_NUM ; ++i)
	{
		if(NULL != _isposySprite[i])
		{
			_isposySprite[i]->setVisible(false);
		}
	}

	if(NULL != _strengLabel)
		_strengLabel->setVisible(false);

	LabelFT *label = static_cast<LabelFT*>(getChildByTag(IT_LABEL));
	if (label)
	{
		label->setVisible(false);
	}
}
void ItemNode::setInlayButtonShow(bool state)
{
	m_showInlayButton = state;
};
void ItemNode::setDelayButtonShow(bool state)
{
	m_showDelayButton = state;
};

ItemNode::ItemNode():_cacheType(0),_guide_to_buy(false),m_need_show_lock(true)
{

}

ItemNode::~ItemNode()
{

}

void ItemNode::showBottomDes(std::string des)
{
	CCNode *node = getChildByTag(IT_BottomDes);

	if(node == NULL)
	{
		TTFConfig cfg;
		cfg.fontFilePath= FT_FONTFACE;
		cfg.fontSize = 14;
		cfg.outlineSize = 1;
		LabelFT* lab = LabelFT::createWithTTF(cfg,"");
		lab->setTag(IT_BottomDes);
		lab->setTextColor(Helper::converColor3B_2_4B(ccc3(0,255,0)));
		addChild(lab, 2);
		node = lab;

	}
	LabelFT *label = static_cast<LabelFT*>(node);
	CC_ASSERT(label != NULL);
	label->setString(des.c_str());
	label->setPosition(ccp(this->getContentSize().width/2,-label->getContentSize().height));
	//label->setVisible(true);

}

void ItemNode::showGongFaLevel(bool _show)
{


	CCNode *node = getChildByTag(IT_GongFaLevel);
	if(node == NULL)
	{

		CCSprite * bottomBg=CCSprite::createWithSpriteFrameName("wuxueui_lvdi");
		bottomBg->setTag(IT_GongFaLevel);
		addChild(bottomBg, 2);
		node=bottomBg;

		TTFConfig cfg;
		cfg.fontFilePath= FT_FONTFACE;
		cfg.fontSize = 14;
		cfg.outlineSize = 1;
		LabelFT* lab = LabelFT::createWithTTF(cfg,"");
		lab->setTag(100);
		lab->setTextColor(Helper::converColor3B_2_4B(ccc3(255,255,255)));
		bottomBg->addChild(lab);
	}
	CCSprite * bottom= static_cast<CCSprite*>(node);
	LabelFT *label = static_cast<LabelFT*>(bottom->getChildByTag(100));

	if(bottom)
	{
		bottom->setPosition(ccp(this->getContentSize().width/2,-bottom->getContentSize().height));
		bottom->setVisible(_show);
		CCNode *node = getChildByTag(IT_LEVELLABEL);
		if(node)
			node->setVisible(false);

	}

	if(label)
	{
		stringstream ss;
		ss<<"LV:"<<_cacheEquip.get_equip()->nLevel;
		label->setString(ss.str());
		label->setPosition(ccp(bottom->getContentSize().width/2,bottom->getContentSize().height/2));
	}


}


void ItemNode::showGongFaEffect(bool _show)
{
	string effectNames[]={"","E1_236","E1_237","E1_238","E1_239","E1_240","E1_272",""};
	int quality=this->get_modifiaction_quanlity();

	if(effectNames[quality].empty())
		return;
	CCNode *node = getChildByTag(IT_GongFaEffect);
	if(node == NULL && _show && isVisible())		
	{

		GameActionNode * actnode = GameActionNode::create();
		actnode->setTag(IT_GongFaEffect);
		actnode->InitTextureWithSpriteFrame(effectNames[quality].c_str());			
		actnode->setPosition(ccp(this->getContentSize().width/2,this->getContentSize().height/2));
		actnode->BeginAction(0.15,true);
		addChild(actnode, 1);
		node=actnode;
	}
	else if(node != NULL && !_show)
	{
		node->removeFromParentAndCleanup(true);
	}
}

void  ItemNode::showGongFaBg(bool _show)
{
	CCNode *node = getChildByTag(IT_GongFaBg);
	if(node == NULL && _show && isVisible())		
	{
		CCSpriteFrame * frame=CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("cangjinggeui_xiaodi");
		if(frame==NULL)
			return;
		node = CCSprite::createWithSpriteFrame(frame);
		node->setTag(IT_GongFaBg);
		node->setPosition(ccp(this->getContentSize().width/2,this->getContentSize().height/2));
		addChild(node, -1);

	}
	else if(node != NULL && !_show)
	{
		node->removeFromParentAndCleanup(true);
	}
}


void ItemNode::setItemSpriteScale( float scale )
{
	if(m_pItemSprite)
	{
		CCSize size=m_pItemSprite->getContentSize();
		m_pItemSprite->setAnchorPoint(ccp(0.5,0.5));
		m_pItemSprite->setScale(scale);
		m_pItemSprite->setPosition(ccp(this->getContentSize().width/2,this->getContentSize().height/2));
	}

}

void ItemNode::on_event_bind_state_update( GongfaLockStateUpdate* evt )
{
	if (_cacheEquip.get_item_id() == evt->item_id)
	{
		set_gf_lock(evt->b_lock);
	}
}

void ItemNode::onEnter()
{
	CCNode::onEnter();

	REGISTER_EVENT(GongfaLockStateUpdate,ItemNode,on_event_bind_state_update);
}

void ItemNode::set_gf_lock( bool val )
{
	if (!m_need_show_lock)
	{
		return;
	}

	CCNode *node = getChildByTag(IT_GongfaLock);
	if(node == NULL)
	{
		node = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getBindFrameName(1).c_str());
		node->setAnchorPoint(ccp(0.0f, 0.0f));
		node->setTag(IT_GongfaLock);
		//node->setPosition(-ITEMNODE_CONTENTWIDTH / 2.0f + 2, -ITEMNODE_CONTENTHEIGHT / 2.0f + 2);
		node->setPosition(2,2);
		addChild(node, 2);
	}
	CCSprite *bindSprite = static_cast<CCSprite*>(node);
	CC_ASSERT(bindSprite != NULL);

	bindSprite->setVisible(val && m_need_show_lock);
}
