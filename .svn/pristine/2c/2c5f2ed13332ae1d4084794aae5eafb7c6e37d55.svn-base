/**
*	@file		exam_protocol.h
*	@author		zhanghe
*	@date		2016/06/07
*	@brief		答题活动
*/

#ifndef EXAM_PROTOCOL
#define EXAM_PROTOCOL

#include "CmdAdapter.h"

#define	MAX_QUESTION_LEN	256
#define	MAX_ANSWER_LEN		64

#pragma pack(push, 1)

enum Exam_Error_Code
{
	E_ExamSuccess	= 0,	// 成功
	E_ExamNoStar	= 1,	// 幸运星不足
	E_ExamUsedStar	= 2,	// 本道题已经用过幸运星
	E_ExamNoHelp	= 3,	// 求助次数不足
	E_ExamUsedHelp	= 4,	// 本道题已经用过工会求助
	E_ExamJoined	= 5,	// 已经参加过答题
	E_ExamNoGuild	= 6,	// 玩家没有工会 无法使用工会求助
	E_ExamEnd		= 7,	// 答题活动没开始
};

// 打开活动界面
struct NET_C2S_Exam_OpenExamWindow : public s_net_cmd
{
	DECL_NETCMD(NET_C2S_Exam_OpenExamWindow);
};

// 打开活动界面反馈
struct NET_SIC_Exam_OpenExamWindow : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Exam_OpenExamWindow);
	// 最大题数
	BYTE	m_nMaxNum;
	// 幸运星最大次数
	BYTE	m_nStarMaxCounts;
	// 家族求助最大次数
	BYTE	m_nHelpMaxCounts;
	// 答题活动累计经验
	DWORD	m_nExamExp;
	// 错误码
	BYTE	m_nRes;
};

// 答题
struct NET_C2S_Exam_Answer:public s_net_cmd
{
	DECL_NETCMD(NET_C2S_Exam_Answer);
	// 答案序号
	BYTE	m_nID;
};

// 答题反馈
struct NET_SIC_Exam_Answer : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Exam_Answer);
	// 正确答案
	BYTE	m_nID;
	// 奖励经验
	DWORD	m_nExp;
};

// 请求发送下一道题
struct NET_C2S_Exam_NextAnswer:public s_net_cmd
{
	DECL_NETCMD(NET_C2S_Exam_NextAnswer);
};

// 发送下一道题
struct NET_SIC_Exam_NextQuestion : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Exam_NextQuestion);
	// 当前题数
	BYTE	m_nCurNum;
	// 正确题数
	BYTE	m_nRightNum;
	// 剩余时间(秒)
	DWORD	m_nRemainTime;
	// 题目
	wchar_t	m_szQuestion[MAX_QUESTION_LEN];
	// 答案
	wchar_t	m_szA[MAX_ANSWER_LEN];
	wchar_t	m_szB[MAX_ANSWER_LEN];
	wchar_t	m_szC[MAX_ANSWER_LEN];
	wchar_t	m_szD[MAX_ANSWER_LEN];
};

// 请求消耗幸运星
struct NET_C2S_Exam_UseStar:public s_net_cmd
{
	DECL_NETCMD(NET_C2S_Exam_UseStar);
};

// 返回消耗幸运星
struct NET_SIC_Exam_UseStar : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Exam_UseStar);
	// 错误码 0成功
	BYTE	m_nError;
	// 幸运星剩余数量
	BYTE	m_nNum;
};

// 更新里程碑奖励
struct NET_SIC_Exam_UpdateReward : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Exam_UpdateReward);
	// 里程碑奖励ID
	DWORD	m_nRewardsID[2];
	// 里程碑奖励激活状态 false未激活 true 已激活
	bool	m_bRewardsStates[2];
};

// 答题结束
struct NET_SIC_Exam_Over : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Exam_Over);
};

// 请求消耗援助次数
struct NET_C2S_Exam_GuildHelp:public s_net_cmd
{
	DECL_NETCMD(NET_C2S_Exam_GuildHelp);
};

// 返回消耗援助次数
struct NET_SIC_Exam_GuildHelp : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Exam_GuildHelp);
	// 错误码 0成功
	BYTE	m_nError;
	// 援助剩余次数
	BYTE	m_nNum;
};

// 答题活动状态
struct NET_SIC_Exam_State : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Exam_State);
	// 答题活动状态 1已打完(活动时间内)
	BYTE	m_nState;
};

#pragma pack(pop)
		
#endif



