#ifndef SIGNAL_H_INCLUDE
#define SIGNAL_H_INCLUDE
#include <list>
#include <memory.h>
#include "FastDelegate.h"

enum e_network_priority
{
	NP_CRITICAL, 
	NP_NORMAL,
	NP_INSIGNIFICANT,
	NP_IDLE
};

#define SIGNALS public
#define SLOTS

class cNil; 
//////////////////////////////////////////////////////////////////////////
//! param = 3
template <typename Ret , typename P1 = cNil , typename P2 = cNil , typename P3 = cNil>
class c_signal
{
private:
	typedef fastdelegate::FastDelegate3<P1 , P2 , P3 , Ret> base_type;
	std::list<base_type> m_list;
public:
	c_signal();
	void emit(P1 p1_ , P2 p2_ , P3 p3_) const;
	template <typename Tobj , typename Tfunc>
	void connect(Tobj obj_ , Tfunc func_);
	template <typename Tobj , typename Tfunc>
	void disconnect(Tobj obj_ , Tfunc func_);
	bool vaild() const;
};
//--------------------------------------------------------
template <typename Ret , typename P1 , typename P2 , typename P3>
c_signal<Ret , P1 , P2 , P3>::c_signal(){}
//--------------------------------------------------------
template <typename Ret , typename P1 , typename P2 , typename P3>
void c_signal<Ret , P1 , P2 , P3>::emit(P1 p1_ , P2 p2_ , P3 p3_) const
{
	for(typename std::list<base_type>::const_iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
		(*iter).operator()(p1_ , p2_ , p3_);
}
//--------------------------------------------------------
template <typename Ret , typename P1 , typename P2 , typename P3>
template <typename Tobj , typename Tfunc>
void c_signal<Ret , P1 , P2 , P3>::connect(Tobj obj_ , Tfunc func_)
{	
	base_type temp = fastdelegate::MakeDelegate(obj_ , func_);
	for(typename std::list<base_type>::iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
	{
		if((*iter) == temp)
		{
			
			return;
		}
	}
	m_list.push_back(fastdelegate::MakeDelegate(obj_ , func_));
}
//--------------------------------------------------------
template <typename Ret , typename P1 , typename P2 , typename P3>
template <typename Tobj , typename Tfunc>
void c_signal<Ret , P1 , P2 , P3>::disconnect(Tobj obj_ , Tfunc func_)
{
	base_type temp = fastdelegate::MakeDelegate(obj_ , func_);
	for(typename std::list<base_type>::iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
	{
		if((*iter) == temp)
		{
			m_list.erase(iter);
			break;
		}
	}
}
//--------------------------------------------------------
template <typename Ret , typename P1 , typename P2 , typename P3>
bool c_signal<Ret , P1 , P2 , P3>::vaild() const
{
	return !m_list.empty();
}
//////////////////////////////////////////////////////////////////////////
//! param = 0
template <typename Ret>
class c_signal<Ret , cNil , cNil , cNil>
{
private:
	typedef fastdelegate::FastDelegate0<Ret> base_type;
	std::list<base_type> m_list;
public:
	c_signal();
	void emit() const;
	template <typename Tobj , typename Tfunc>
	void connect(Tobj obj_ , Tfunc func_);
	template <typename Tobj , typename Tfunc>
	void disconnect(Tobj obj_ , Tfunc func_);
	bool vaild() const;
};
//--------------------------------------------------------
template <typename Ret>
c_signal<Ret , cNil , cNil , cNil>::c_signal(){}
//--------------------------------------------------------
template <typename Ret>
void c_signal<Ret , cNil , cNil , cNil>::emit() const
{
	for(typename std::list<base_type>::const_iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
		(*iter).operator()();
}
//--------------------------------------------------------
template <typename Ret>
template <typename Tobj , typename Tfunc>
void c_signal<Ret , cNil , cNil , cNil>::connect(Tobj obj_ , Tfunc func_)
{
	m_list.push_back(fastdelegate::MakeDelegate(obj_ , func_));
}
//--------------------------------------------------------
template <typename Ret>
template <typename Tobj , typename Tfunc>
void c_signal<Ret , cNil , cNil , cNil>::disconnect(Tobj obj_ , Tfunc func_)
{
	base_type temp = fastdelegate::MakeDelegate(obj_ , func_);
	for(typename std::list<base_type>::iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
	{
		if((*iter) == temp)
		{
			m_list.erase(iter);
			break;
		}
	}
}
//--------------------------------------------------------
template <typename Ret>
bool c_signal<Ret , cNil , cNil , cNil>::vaild() const
{
	return !m_list.empty();
}
//////////////////////////////////////////////////////////////////////////
//! param = 1
template <typename Ret, typename P1>
class c_signal<Ret , P1 , cNil , cNil>
{
private:
	typedef fastdelegate::FastDelegate1<P1 , Ret> base_type;
	std::list<base_type> m_list;
public:
	c_signal();
	void emit(P1 p1_) const;
	template <typename Tobj , typename Tfunc>
	void connect(Tobj obj_ , Tfunc func_);
	template <typename Tobj , typename Tfunc>
	void disconnect(Tobj obj_ , Tfunc func_);
	bool vaild() const;
};
//--------------------------------------------------------
template <typename Ret, typename P1>
c_signal<Ret , P1 , cNil , cNil>::c_signal(){}
//--------------------------------------------------------
template <typename Ret, typename P1>
void c_signal<Ret , P1 , cNil , cNil>::emit(P1 p1_) const
{
	for(typename std::list<base_type>::const_iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
		(*iter).operator()(p1_);
}
//--------------------------------------------------------
template <typename Ret, typename P1>
template <typename Tobj , typename Tfunc>
void c_signal<Ret , P1 , cNil , cNil>::connect(Tobj obj_ , Tfunc func_)
{
	m_list.push_back(fastdelegate::MakeDelegate(obj_ , func_));
}
//--------------------------------------------------------
template <typename Ret, typename P1>
template <typename Tobj , typename Tfunc>
void c_signal<Ret , P1 , cNil , cNil>::disconnect(Tobj obj_ , Tfunc func_)
{
	base_type temp = fastdelegate::MakeDelegate(obj_ , func_);
	for(typename std::list<base_type>::iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
	{
		if((*iter) == temp)
		{
			m_list.erase(iter);
			break;
		}
	}
}
//--------------------------------------------------------
template <typename Ret, typename P1>
bool c_signal<Ret , P1 , cNil , cNil>::vaild() const
{
	return !m_list.empty();
}
//////////////////////////////////////////////////////////////////////////
//! param = 2
template <typename Ret, typename P1 , typename P2>
class c_signal<Ret , P1 , P2 , cNil>
{
private:
	typedef fastdelegate::FastDelegate2<P1 , P2 , Ret> base_type;
	std::list<base_type> m_list;
public:
	c_signal();
	void emit(P1 p1_ , P2 p2_) const;
	template <typename Tobj , typename Tfunc>
	void connect(Tobj obj_ , Tfunc func_);
	template <typename Tobj , typename Tfunc>
	void disconnect(Tobj obj_ , Tfunc func_);
	bool vaild() const;
};	
//--------------------------------------------------------
template <typename Ret, typename P1 , typename P2>
c_signal<Ret , P1 , P2 , cNil>::c_signal(){}
//--------------------------------------------------------
template <typename Ret, typename P1 , typename P2>
void c_signal<Ret , P1 , P2 , cNil>::emit(P1 p1_ , P2 p2_) const
{
	for(typename std::list<base_type>::const_iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
		(*iter).operator()(p1_ , p2_);
}
//--------------------------------------------------------
template <typename Ret, typename P1 , typename P2>
template <typename Tobj , typename Tfunc>
void c_signal<Ret , P1 , P2 , cNil>::connect(Tobj obj_ , Tfunc func_)
{
	m_list.push_back(fastdelegate::MakeDelegate(obj_ , func_));
}
//--------------------------------------------------------
template <typename Ret, typename P1 , typename P2>
template <typename Tobj , typename Tfunc>
void c_signal<Ret , P1 , P2 , cNil>::disconnect(Tobj obj_ , Tfunc func_)
{
	base_type temp = fastdelegate::MakeDelegate(obj_ , func_);
	for(typename std::list<base_type>::iterator iter = m_list.begin() ; iter != m_list.end(); ++iter)
	{
		if((*iter) == temp)
		{
			m_list.erase(iter);
			break;
		}
	}
}
//--------------------------------------------------------
template <typename Ret, typename P1 , typename P2>
bool c_signal<Ret , P1 , P2 , cNil>::vaild() const
{
	return !m_list.empty();
}	

#endif