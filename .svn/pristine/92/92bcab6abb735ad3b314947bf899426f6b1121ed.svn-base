#include "ProfileListener.h"
#include "BaseDefine.h"
#include "CommonDefine.h"

bool ProfileListener::init()
{
// 	CC_ASSERT(mpPad==NULL);
// 
// 	mpPad = AlignNode::create();
// 	mpPad->set_gap(6);
// 	mpPad->setAnchorPoint(ccp(0,0));
// 	mpPad->setContentSize(CCSizeMake(1024,768));
// 	mpPad->setPosition(ccp(0,0));
// 	mpPad->set_direction(AlignNode::ead_vertical);
// 	if(mpPad)
// 	{
// 		this->addChild(mpPad);
// 		return true;
// 	}
// 	else
// 		return false;

	return true;
}

void ProfileListener::displayResults( const profile_util::cc_profile_instance& instance, uint32 maxTotalFrameTime )
{
	cc_profile_instance::ProfileChildren::const_iterator iter  = instance.children.begin();
	cc_profile_instance::ProfileChildren::const_iterator end  = instance.children.end();
	for (;iter != end;++iter)
	{
		const profile_util::cc_profile_instance& cur = *(iter->second);
		logInstance(cur);
	}
}

void ProfileListener::logInstance( const profile_util::cc_profile_instance& instance )
{
	CCString* str = CCString::createWithFormat("watch:[%s] ,%d microsec in total,%d calls in total" , instance.name.c_str(),instance.frame.frameTime,instance.frame.calls);
	str->autorelease();

	BOOST_AUTO(finder,mmapStringLines.find(instance.name));
	if (finder!= mmapStringLines.end())
	{
		CCLabelTTF* label = finder->second;
		label->setString(str->getCString());
	}
	else
	{
		size_t num = mmapStringLines.size();
		CCLabelTTF* label = CCLabelTTF::create(str->getCString(), FONT_NAME, 16,CCSizeMake(600,20),kCCTextAlignmentLeft);
		//label->setAnchorPoint(ccp(0,0));
		label->setPosition(ccp(300,500 - 20*num));
		label->setColor(ccRED);
		mmapStringLines.insert(std::make_pair(instance.name,label));
		this->addChild(label);
	}

	if (instance.children.size() >0)
	{
		displayResults(instance,0);
	}
}
