#ifndef __SECOND_VERIFY_TIP_UI__
#define __SECOND_VERIFY_TIP_UI__

#include "GameEventDefine.h"
#include "client_common_define.h"
#include "NormalLayer.h"
#include "StrNumPad.h"

#define NUM_SV_TIP_NODE_COUNT 7
#define MAX_NAME_CHAR_COUNT 6
#define MIN_NAME_CHAR_COUNT 1
#define MAX_PWD_NUM_COUNT 6

#include "SecondVerifyMgr.h"
class LabelEx;
class SecondVerifyTipUiLayer : public NormalLayer , public CCTextFieldDelegate
{
	enum e_TipTouchBgBtnTag
	{
		Tip_Btn_SetPwd_NewPwd = 1001,
		Tip_Btn_SetPwd_ConfirmPwd,//确认密码 
		Tip_Btn_SetQues_Father,
		Tip_Btn_SetQues_Mather,//确认密码 onTipUiBgBtnPressed
		Tip_Btn_ResetPwd_OldPwd,
		Tip_Btn_ResetPwd_NewPwd,
		Tip_Btn_ResetPwd_ConfirmPwd,//确认密码 onTipUiBgBtnPressed
		Tip_Btn_VerifyPwd_Pwd,//确认密码 onTipUiBgBtnPressed
	};

	struct TipNodeSetPwd
	{
		TipNodeSetPwd()
		{
			m_pNewPwdInputFrame = NULL;
			m_pConfirmNewPwdInputFrame = NULL;
			m_pFtNewPwd = NULL;
			m_pFtConfirmNewPwd = NULL;
		}
		CCNode*		m_pNewPwdInputFrame;
		CCNode*		m_pConfirmNewPwdInputFrame;
		LabelFT*		m_pFtNewPwd;
		LabelFT*		m_pFtConfirmNewPwd;
		string			m_sRealNewPwd;
		string			m_sConfirmPwd;
	};
	struct TipNodeSetSafeQes
	{
		TipNodeSetSafeQes()
		{
			m_pInputFatherFrame = NULL;
			m_pInputMotherFrame = NULL;
			m_pFieldFatherName = NULL;
			m_pFieldMotherName = NULL;
		}
		CCNode*		m_pInputFatherFrame;
		CCNode*		m_pInputMotherFrame;
		CCTextFieldTTF* m_pFieldFatherName;
		CCTextFieldTTF* m_pFieldMotherName;
	};
	struct TipNodeResetPwd
	{
		TipNodeResetPwd()
		{
			m_pOldPwdFrame = NULL;
			m_pNewPwdFrame = NULL;
			m_pConfirmPwdFrame = NULL;
			m_pFtOldPwd = NULL;
			m_pFtNewPwd = NULL;
			m_pFtConfirmNewPwd = NULL;
		}
		CCNode*		m_pOldPwdFrame;
		CCNode*		m_pNewPwdFrame;
		CCNode*		m_pConfirmPwdFrame;
		LabelFT*		m_pFtOldPwd;
		LabelFT*		m_pFtNewPwd;
		LabelFT*		m_pFtConfirmNewPwd;
		string			m_sOldPwd;
		string			m_sNewPwd;
		string			m_sConfirmPwd;
	};
	struct TipNodeForceUnlock
	{
		TipNodeForceUnlock()
		{
			m_pFtUnlockDes = NULL;
		}
		LabelFT* m_pFtUnlockDes;
	};
	struct TipNodeVerifyPwd
	{
		TipNodeVerifyPwd()
		{
			m_pInputFrame = NULL;
			m_pFtInputPwd = NULL;
			m_pFtTryNumDes = NULL;
			m_pExTryNumDes = NULL;
		}
		CCNode*	m_pInputFrame;
		LabelFT*	m_pFtInputPwd;
		LabelFT*	m_pFtTryNumDes;
		LabelEx*	m_pExTryNumDes;
		string		m_sRealPwd;
	};
	struct TipNodeLockedSys
	{
		TipNodeLockedSys()
		{
			m_pLockedDes = NULL;
		}
		LabelEx* m_pLockedDes;
	};

	struct TipNodeForceUnlockSys
	{
		TipNodeForceUnlockSys()
		{
			m_pUnLockedDes = NULL;
		}
		LabelEx* m_pUnLockedDes;
	};
public:

	SecondVerifyTipUiLayer();
	~SecondVerifyTipUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SecondVerifyTipUiLayer, create);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual void update(float delta);
	virtual void onEnter();
	virtual void onExit();
	void clearNumPadDelegateAndUi();
	void onCancelBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onAssignBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onForgortPwdBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onTipUiBgBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent); //所有出发外部逻辑的按钮
	void onCloseBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);

	static SecondVerifyTipUiLayer* CreateVerifyTip();
	void setLoadSpriteSheet(std::set<std::string> pSheet);

	void initUIBySVTipType(e_SVTipType ptype);
	void refreshUIByVerifyState();
	void refreshVerifyFaildNum(int num);
	void refreshSysLockedDes(int pSecond);
	void refreshForceUnlockSysDes();

	void handleSetPwdNodeTouchEvent(e_TipTouchBgBtnTag pType);
	void handleSetSafeQesNodeTouchEvent(e_TipTouchBgBtnTag pType);
	void handleResetPwdNodeTouchEvent(e_TipTouchBgBtnTag pType);
	void handleVerifyPwdNodeTouchEvent(e_TipTouchBgBtnTag pType);

	void handleSetPwdNodeConfirmBtnPressed();
	void handleSetSafeQesNodeConfirmBtnPressed();
	void handleResetPwdNodeConfirmBtnPressed();
	void handleForceUnlockNodeConfirmBtnPressed();
	void handleVerifyPwdNodeConfirmBtnPressed();
	void handleLockedSysNodeConfirmBtnPressed();
	void handleForceUnlockSysNodeConfirmBtnPressed();


	//当用户启动虚拟键盘是的回调
	virtual bool onTextFieldAttachWithIME(CCTextFieldTTF *pSender);
	//当用户进行输入是的回调函数
	virtual bool onTextFieldInsertText(CCTextFieldTTF *pSender, const char* text, int nLen);
	//当用户关闭虚拟键盘时的回调
	virtual bool onTextFieldDetachWithIME(CCTextFieldTTF * sender);
	//当用户删除文字时的回调
	virtual bool onTextFieldDeleteBackward(CCTextFieldTTF *pSender, const char* text, int nLen);
protected:
	std::set<std::string> _loadSpriteSheet;

private:
	CCNode* m_pMainFrame;
	CCNode*	m_arrNodeTips[NUM_SV_TIP_NODE_COUNT];//总的Node 根据状态显示某个

	TipNodeSetPwd m_stNodeSetPwd; //设置密码界面
	TipNodeSetSafeQes m_setNodeSetSafeQes; //设置密保问题界面
	TipNodeResetPwd m_setNodeResetPwd; //重置密码界面
	TipNodeForceUnlock m_setNodeForceUnlock; //输错 被锁住界面
	TipNodeVerifyPwd m_setNodeVerifyPwd;//验证密码界面
	TipNodeLockedSys m_setNodeLockedSys;//系统锁冻结界面
	TipNodeForceUnlockSys m_setForceUnlockSys;//强制解除冻结界面

	e_SVTipType m_eCurrentState;//当前显示状态

	StrNumPadPwdDelegate * m_pKeypadDelegate;
};

#endif