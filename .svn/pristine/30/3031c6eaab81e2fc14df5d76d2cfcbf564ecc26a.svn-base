#include "TradingSetNode.h"
#include "CommonClient.h"
#include "ListControl.h"
#include "CfgReader.h"
#include "UiTools.h"
#include "UiManager.h"

TradingSetNode::TradingSetNode()
	:m_onterNode(NULL)
	,m_pNumLabel(NULL)
	,m_pTotalNumLabel(NULL)
	,m_ParentNode(NULL)
{

}	

TradingSetNode::~TradingSetNode()
{

}

cocos2d::extension::SEL_CCControlHandler TradingSetNode::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	SIMPLE_SELECTORRESOLVER_CCCONTROL_GLUE(TradingSetNode,onClickBtnPressed);
	return NULL;
}

void TradingSetNode::onEnter()
{
	CCNode::onEnter();
}

void TradingSetNode::onExit()
{
	CCNode::onExit();
}


bool TradingSetNode::onAssignCCBMemberVariable( CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode )
{
	CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,"mNumLabel",CCLabelTTF*,m_pNumLabel);
	return false;
}

void TradingSetNode::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{

}

void TradingSetNode::onClickBtnPressed( CCObject * pSender, CCControlEvent pCCControlEvent )
{
	NumKeypad::getInstance()->close();
	NumKeypad::getInstance()->open();
	NumKeypad::getInstance()->setPositionByContent(m_ParentNode);
	NumKeypad::getInstance()->attachToDelegate(this);
	NumKeypad::getInstance()->setMaxNum(9999); 	
}

int TradingSetNode::onAttach()
{
	return 0;
}

void TradingSetNode::onNumChange( int num )
{
	std::stringstream oss;
	oss << num;

	setValue(oss.str().c_str());
}

void TradingSetNode::onFinished( int num, int srcNum )
{

}

void TradingSetNode::onCancel( int num )
{

}

void TradingSetNode::setParentNode(CCNode * node)
{
	CC_ASSERT(NULL != node);
	m_ParentNode = node;
}

void TradingSetNode::setOtherData(TradingSetNode *onther, CCLabelTTF* totalLabel)
{
	CC_ASSERT(NULL != onther);
	CC_ASSERT(NULL != totalLabel);
	m_onterNode = onther;
	m_pTotalNumLabel = totalLabel;
}

void TradingSetNode::setValue(std::string value)
{
	m_pNumLabel->setString(value.c_str());

	int totalNum = getValue() *  m_onterNode->getValue();
	std::stringstream oss;
	oss << totalNum;

	m_pTotalNumLabel->setString(oss.str().c_str());
}

int TradingSetNode::getValue()
{
	return atoi(m_pNumLabel->getString());
}

TradingSetNode* TradingSetNode::createItem( const char* szFile,CCObject*pOwner,UiInterface* holder )
{
	CCNodeLoaderLibrary* lib  = CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
	REG_AUTO_LOADER(TradingSetNode);
	CCBReader* reader = new CCBReader(lib);
	reader->autorelease();
	std::string strFullPath  = CFGReader::instance()->get_ui_ccbi_filepath(szFile);
	CCNode* node = reader->readNodeGraphFromFile(strFullPath.c_str(),pOwner);
	TradingSetNode* item = dynamic_cast<TradingSetNode*>(node);

	if (holder)
		holder->mergeSheet(reader->getLoadedSpriteSheet());

	return item;
}