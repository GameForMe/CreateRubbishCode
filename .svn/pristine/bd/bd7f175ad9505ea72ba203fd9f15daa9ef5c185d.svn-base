#include "SBKSDFailUI.h"
#include "UiLoader.h"
#include "CommonClient.h"
#include "UiTools.h"
#include "UiManager.h"
#include "SBKSDManager.h"

SBKSDFailUI::SBKSDFailUI()
{

}

SBKSDFailUI::~SBKSDFailUI()
{

}

CCNode* SBKSDFailUI::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["SBKSDFailUI"] = UiLayerLoader<SBKSDFailUILayer>::loader();
	CCNode* uiNode = readUiFromCCBI("sbkfubenjieshu",nodeLoaders,_loadSpriteSheet);
	return uiNode;
}

////////////////////////////////////////////////

SBKSDFailUILayer::SBKSDFailUILayer()
	: m_check(NULL)
	, m_checkLabel(NULL)
	, m_title(NULL)
{
	for ( int i = 0 ; i < SHIBAINUMBER ; ++i )
	{
		m_sprite[i] = NULL;
	}
}

SBKSDFailUILayer::~SBKSDFailUILayer()
{

}

SEL_MenuHandler SBKSDFailUILayer::onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

SEL_CCControlHandler SBKSDFailUILayer::onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

bool SBKSDFailUILayer::onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode)
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_check);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_title);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCNode*, m_failNode);
	return false;
}

void SBKSDFailUILayer::onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader)
{
	CC_ASSERT(m_check);
	m_checkLabel = Helper::replaceLabelTTFWithLabelFTAndRemove(m_check);
	Helper::replaceLabelTTFWithLabelFTAndRemove(m_title);
	int curNum = SBKSDManager::get_singleton_ptr()->getHasPassNum();
	std::string passStr;
	safe_sprintf(passStr,STRING_TABLE["check_num_str"],curNum+1);
	m_checkLabel->setString(passStr);

	CC_ASSERT(m_failNode);
	CCActionInterval* m_actionBy[4];
	CCFadeIn* m_fadeIn[4];
	for ( int i = 0 ; i < SHIBAINUMBER ; ++i )
	{
		m_sprite[i] = dynamic_cast<CCSprite*>(m_failNode->getChildByTag(i+1));
		m_sprite[i]->setVisible(false);
		m_sprite[i]->setPositionY(m_sprite[i]->getPositionY() + 100);
		m_actionBy[i] = CCMoveTo::create(0.3f,ccp(m_sprite[i]->getPositionX(),m_sprite[i]->getPositionY() - 100));
		m_fadeIn[i] = CCFadeIn::create(0.3f);
		m_sprite[i]->runAction(CCSequence::create(CCDelayTime::create(0.5f + i * .2f),CCCallFuncO::create(this,callfuncO_selector(SBKSDFailUILayer::onChangeNodeVisible),m_sprite[i]),CCSpawn::create(m_actionBy[i],m_fadeIn[i],NULL),NULL));
		if (i == SHIBAINUMBER-1)
		{
			this->scheduleOnce(SEL_SCHEDULE(&SBKSDFailUILayer::sendOutMap),5.0f);
		}
	}
}

void SBKSDFailUILayer::onChangeNodeVisible(CCObject* pSender)
{
	dynamic_cast<CCSprite*>(pSender)->setVisible(true);
}

void SBKSDFailUILayer::sendOutMap(float dt)
{
	CLOSE_UI(WCT_ShenDian_Fail_UI);
}