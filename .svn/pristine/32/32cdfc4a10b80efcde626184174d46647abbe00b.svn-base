#ifndef MIRVALUABLEBOOK_H
#define MIRVALUABLEBOOK_H

//传奇宝典 add by lpf 2015-09-09

#include "BaseDefine.h"
#include "cocos2d.h"
#include "cocos-ext.h"
#include "ListItem.h"
#include "AlignComponent.h"  
#include "UiInterface.h"
#include "AlignComponent.h"

using namespace cocos2d;
using namespace cocos2d::extension;
using namespace std;

#define INVALID_MVBITEM_ID (unsigned int)(-1)
#define MVB_ITEM_SPACE 10
#define MVB_ITEM_WIDTH 155
#define MVB_ITEM_HEIGHT 160
#define MVB_LEFTBTN_MARGIN 2
#define RED_POINT  4

class GrowthPathItemFrame;
class MirValuableBookUiLayer;

enum Enum_MVB_Group
{
	EVB_Group_Invalid = 0,
	E_MVB_Group_GetEquip,
	E_MVB_Group_Upgrade,
	E_MVB_Group_EarnMoney,
	E_MVB_Group_Boring,
	E_MVB_Group_ChangeStrong,
};

enum Enum_MVB_Item
{	
	E_MVB_MysteryBox = 0,
	E_MVB_TuMo,				//焰火屠魔
	E_MVB_DayNeed,			//日常任务
	E_MVB_MaoXian,			//练级冒险
	E_MVB_Dink,				//饮酒
	E_MVB_GuildXiang,		//行会上香
	E_MVB_MoBai,			//英雄膜拜
	E_MVB_DecomEquip,		//装备分解
	E_MVB_BiQi,				//比奇任务
	E_MVB_EquipLvUP,		//装备升级
	E_MVB_FubenSingle,		//战役副本
	E_MVB_FubenDuoren,		//多人副本
	E_MVB_Boss,				//挑战BOSS
	E_MVB_ShouWeiTianGuan,	//守卫天关
	E_MVB_DiGongChangLang,	//地宫长廊
	E_MVB_ForgingEquip,		//锻造装备
	E_MVB_Skill,			//技能升级
	E_MVB_Zuoqi,			//坐骑喂养
	E_MVB_EquipStrongth,	//装备强化
	E_MVB_Inlay,			//宝石镶嵌
	E_MVB_EquipFusion,		//装备进阶
	E_MVB_Area,				//竞技场
	E_MVB_ShuangXiu,		//双修
	E_MVB_ShiTu,			//拜师收徒
	E_MVB_JieHun,			//结婚
	E_MVB_SongMeiGui,		//送花
	E_MVB_Huan,				//环任务

	E_MVB_HaiTian,			//海天盛宴
	E_MVB_XuanShang,		//悬赏任务
	E_MVB_YuanBao,			//充值元宝
	E_MVB_BuyGold,			//购买金条
	E_MVB_EquipGet,			//装备获取
};

enum Enum_MVB_Btn
{
	E_MVB_CloseBtn = 0,

	E_MVB_ChangeStrong = 40,
	E_MVB_GetEquip,
	E_MVB_Upgrade,
	E_MVB_EarnMoney,
	E_MVB_Boring,
	E_MVB_GrowUp,
	E_MVB_ShowEquip,
	E_MVB_MESSAGE,

	E_MVB_KEFU_MESSAGE = 6, //客服信息文本tag
};

struct GrowthPathItemData{
	string lv;
	string content;
	int btnType;
	string btnContent;
	int btnFunction;
	bool isAdded;
	int openLv;
	int openyesno;
	GrowthPathItemData()
	{
		lv = "";
		content = "";
		btnType = 0;
		btnContent = "";
		btnFunction = 0;
		isAdded = false;
		openLv = 1;
	}
	void operator=(GrowthPathItemData *data1)
	{
		this->lv = data1->lv;
		this->content = data1->content;
		this->btnType = data1->btnType;
		this->btnContent = data1->btnContent;
		this->btnFunction = data1->btnFunction;
		this->isAdded = data1->isAdded;
		this->openLv = data1->openLv;
	}
};

struct StrongItemJudgeData 
{
	int id;
	double rate;
	string state;
	string font_color;

	StrongItemJudgeData()
	{
		id = 0;
		rate = 0.0;
		state = "";
		font_color = "";
	}
	void operator=(StrongItemJudgeData *data1)
	{
		this->id = data1->id;
		this->rate = data1->rate;
		this->state = data1->state;
		this->font_color = data1->font_color;
	}
};

struct CommonItemData{
	int id;
	int group;
	string title;
	string content;
	int openLv;
	string spriteName;

	CommonItemData()
	{
		id = 0;
		group = 0;
		title = "";
		content = "";
		openLv = 1;
		spriteName = "";
	}
	void operator=(CommonItemData data1)
	{
		this->id = data1.id;
		this->group = data1.group;
		this->title = data1.title;
		this->content = data1.content;
		this->openLv = data1.openLv;
		this->spriteName = data1.spriteName;
	}

	bool operator<(const CommonItemData &data) const
	{
		return this->openLv < data.openLv;
	}
};

struct StrongItemData{
	int id;
	string title;
	int openLv;
	string spriteName;

	StrongItemData()
	{
		id = 0;
		title = "";
		openLv = 1;
		spriteName = "";
	}
	void operator=(StrongItemData data1)
	{
		this->id = data1.id;
		this->title = data1.title;
		this->openLv = data1.openLv;
		this->spriteName = data1.spriteName;
	}

	bool operator<(const StrongItemData &data) const
	{
		return this->openLv < data.openLv;
	}
};

struct StrengthRatioData{
	int lv;
	int power_ss;
	int power_s;
	int power_a;
	int power_b;
	int power_c;
	int power_d;
	int power_gem;
	int power_skill;
	int power_ride;
	int power_shengji;
	int power_qianghua;
	int power_jinjie;
	int equip_get;
	StrengthRatioData()
	{
		lv			   = 1;
		power_ss	   = 0;
		power_s		   = 0;
		power_a		   = 0;
		power_b		   = 0;
		power_c		   = 0;
		power_d		   = 0;
		power_gem	   = 0;
		power_skill	   = 0;
		power_ride	   = 0;
		power_shengji  = 0;
		power_qianghua = 0;
		power_jinjie   = 0;
		equip_get      = 0;
	}
	void operator=(StrengthRatioData *data1)
	{
		this->lv			 = data1->lv;
		this->power_ss		 = data1->power_ss;
		this->power_s		 = data1->power_s;
		this->power_a		 = data1->power_a;
		this->power_b		 = data1->power_b;
		this->power_c		 = data1->power_c;
		this->power_d		 = data1->power_d;
		this->power_gem		 = data1->power_gem;
		this->power_skill	 = data1->power_skill;
		this->power_ride	 = data1->power_ride;
		this->power_shengji  = data1->power_shengji;
		this->power_qianghua = data1->power_qianghua;
		this->power_jinjie   = data1->power_jinjie;
		this->equip_get		 = data1->equip_get;
	}
};

/***************************************

			MVB_Common_Item

****************************************/
class MVB_Common_Item 
	: public CCSprite
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:

	MVB_Common_Item(){}
	~MVB_Common_Item() {}
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MVB_Common_Item, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName) { return NULL; }
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

	static MVB_Common_Item* CreateCSUI_Item();

	void SetData(const CommonItemData &data);
	void SetData(const StrongItemData &data);
	void onGoToPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	//检查等级限制
	bool checkLevelLimit();

	//界面初始化加载时执行
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	void setPromote(int openLv);
private:
	CCSprite* m_MainFrame;

	CCSprite* m_pIcon;
	CCLabelTTF* m_Title;
	CCLabelTTF* m_Level;
	CCLabelTTF* m_Desc;
	CommonItemData m_eState;
	StrongItemData m_strongItemData;
	CCSprite* promoteSprite;
	CCControlButton *btn;
	CCSprite* m_progBg;
	CCSprite* m_progImg;
	CCLabelTTF * m_judge;
	bool m_isStrongItem;
};


/***************************************

			GrowthPathItem

****************************************/
class GrowthPathItem
{
public:
	enum growthPathItemTag
	{
		GP_Title = 1,
		GP_Content,
		GP_ViewBtnNode,
		GP_ViewBtn,
	};
public:
	GrowthPathItem(GrowthPathItemData const*itemData = NULL);
	~GrowthPathItem();

	void setItemData(GrowthPathItemData *itemData);
	void setPosition(CCPoint point);
	GrowthPathItemData getPathItemData();
	inline GrowthPathItemFrame* getUiFrame(){ return _uiFrame;}
	void setRedPointShow(bool isShow);
	bool getRedPointShow();
private:
	GrowthPathItemFrame *_uiFrame;
	std::set<std::string> _usedPlistFile;
};


/***************************************

		  GrowthPathItemFrame

****************************************/
class GrowthPathItemFrame
	: public CCSprite
	, public CCTouchDelegate
	, public CCBSelectorResolver
	, public CCNodeLoaderListener
{
	friend class GrowthPathItem;
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(GrowthPathItemFrame, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void updateContent(GrowthPathItemData const*gpData);

	void onViewBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	GrowthPathItemData getItemData()
	{
		return _itemData;
	}
private:
	GrowthPathItemData _itemData;
};

/***************************************

		  GrowthPathItemLoader

****************************************/
class GrowthPathItemLoader: public CCSpriteLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(GrowthPathItemLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(GrowthPathItemFrame);
};


/***************************************

		       MVB_UITips

****************************************/
class MVB_UITips : public CCLayer
	, public cocos2d::extension::CCNodeLoaderListener
	, public cocos2d::extension::CCBSelectorResolver
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MVB_UITips, create);
	static MVB_UITips* Init(Enum_MVB_Item e);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName){ return NULL; }
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onExit();

	void SetData(Enum_MVB_Item e);
	void onOkBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	std::set<std::string> m_loadSpriteSheet;
private:
	CCNode* _frame;

};


/***************************************

          MirValuableBookMgr

****************************************/
class MirValuableBookMgr
{
	MirValuableBookMgr(){}
	~MirValuableBookMgr();
public:
	static MirValuableBookMgr* getInstance();
	void loadDataFromDB();
	void loadJudgeDataFromDB();
	void loadStrenthRadioFromXML();
	void loadStrongItemDataFromDB();
	void initChangeStrongNums();

	void setChangeStrongNums(int nums)	{ _changeStrongNums = nums; }
	void resetChangeStrongNums()		{ _changeStrongNums = 0; }
	int getChangeStrongNums()			{ return _changeStrongNums; }
	
	void setChangeStrongRed(bool isRed) { _isChangeStrongRed = isRed; }
	bool getChangeStrongRed()			{ return _isChangeStrongRed; }

public:
	typedef vector<GrowthPathItemData> GP_DataVector;
	typedef vector<StrongItemJudgeData> J_DataVector;
	typedef map<int, StrengthRatioData*> SR_DataMap;
	typedef vector<StrongItemData> C_StrongDataVector;
	

private:
	GP_DataVector _gpDataVector;  //成长之路读表数据
	J_DataVector _jDataVector;
	SR_DataMap _srDataMap;//个人战力比对系数
	C_StrongDataVector _changeStrongGroup;//我要变强信息
	std::map<unsigned int, int> _gemDataMap;//宝石战斗力数据
	std::map<unsigned int, int> _equipGrapeData;//装备权值数据
	int _changeStrongNums;
	bool _isChangeStrongRed;

public:
	GP_DataVector const& getDataFromDB()const {
		return _gpDataVector;
	}

	const J_DataVector& getJudgeDataFromDB() {
		return _jDataVector;
	}

	C_StrongDataVector const& getChangeStrongData(){
		return _changeStrongGroup;
	}

	StrengthRatioData* getStrengthRadio();
	int getGemFightNums(unsigned int id);//获取宝石的战斗力
	int getEquipGradeNums(unsigned int id);//获取装备权值 EquipData中equipGrade
};


/***************************************

          MirValuableBookUi

****************************************/
class MirValuableBookUi:public UiInterface
{
public:
	MirValuableBookUi(void);
	~MirValuableBookUi(void);
	virtual CCNode* openUi();
	virtual void closeUI();
	void setIsShowRedPoint(bool isShow);
	bool getIsShowRedPoint()
	{
		return isShowRedPoint;
	}
private:
	bool isShowRedPoint;
};


/***************************************

         MirValuableBookUiLayer

****************************************/
class MirValuableBookUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
	, public AlignComponent
{
public:
	MirValuableBookUiLayer(){}
	~MirValuableBookUiLayer() {}
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MirValuableBookUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

	//界面初始化加载时执行
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	//界面退出后执行
	virtual void onEnter();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	void setupNodes(std::vector<CCNode*> const& input,eAlignDirection ed);
	void arrange();

	void setMVBItemData(const CommonItemData & comItemData, MVB_Common_Item* pCS_Item);
	void setMVBGroupData(vector<CommonItemData> &itemDataGroup);
	void setStrongMVBGroupData(vector<StrongItemData> &itemDataGroup);
	void setStrongBarInfo();

	void onCloseBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onChengZhangBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onGameSecBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onEarnMoneyBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onGetEquipBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onChangeStrongBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onBoringBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onShowEquipBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onGameInfoBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);

	void loadCommonItemDataFromDB();
	void loadStrongItemDataFromDB();
	void updateItemDataVector();

	void addContentItem( CCNode *item );
	void removeContentItem( CCNode *item );
	float getContentLayerHeight();

	void setSelectBtn(CCObject *pSender, bool isHighlighted = true);
	bool isPressedSelf(CCObject *pSender);
	void ReleaseAllItemVector();
	void showRedPoint();
	void setSelectLeftBtn(int btnTag);
private:
	CCNode *_bg;
	CCNode *_leftContentNode;
	CCNode *_rightContentNode;

	typedef vector<CommonItemData> C_ItemDataVector;
	typedef vector<StrongItemData> C_StrongDataVector;
	C_StrongDataVector _changeStrongGroup;
	C_ItemDataVector _getEquipGroup;
	C_ItemDataVector _upgradeGroup;
	C_ItemDataVector _earnMoneyGroup;
	C_ItemDataVector _boringGroup;

	typedef vector<GrowthPathItem*> GP_ItemVector;
	GP_ItemVector _gpItemVector;

	CCScrollView * _infoScrollView;
	CCNode * _infoContainerNode;

	CCControlButton * _curSelectButton;
	CCNode * _changeStrongBar;
	CCSprite* _csBarLv;
	LabelFT* _csBarLocalFightNums;
	LabelFT* _csBarFightNums;

	map<int, CCPoint> _leftBtnPosMap;
};

#endif