#ifndef _MASTERMGR_H
#define _MASTERMGR_H

/**
 *	@file		MasterPrenticeMgr.h
 *	@author		gx
 *	@date		2013/11/15
 *	@version	
 *	@brief		师徒系统管理类
 */
#include "CmdAdapter.h"
#include "MasterPrenticeProto.h"

//用于客户端自己保存用
struct tagMPMember_Local
{
	std::string role_name;
	unsigned int	dw_role_id;
	unsigned char	byLevel;
	BYTE	bOnline;
	EClassType eClass;
	unsigned char bySex;
	eMPMemberType eMemberType;
	unsigned int dwZhanli;

	tagMPMember_Local()
		:role_name("")
		,dw_role_id((unsigned int)INVALID)
		,byLevel(1)
		,bOnline(false)
		,eClass(EV_Warrior)
		,bySex(0)
		,eMemberType(EMPMT_PRENTICE)
		,dwZhanli(0)
	{
	}
	tagMPMember_Local(const tagMPMember_Local& info)
	{
		copy(info);
	}
	const tagMPMember_Local& operator = (const tagMPMember_Local& info)
	{
		if (this != &info)
			copy(info);
		return *this;
	}
private:
	void copy(const tagMPMember_Local& info)
	{
		role_name = info.role_name;
		dw_role_id = info.dw_role_id;
		byLevel = info.byLevel;
		bOnline = info.bOnline;
		eClass = info.eClass;
		bySex = info.bySex;
		eMemberType = info.eMemberType;
		dwZhanli = info.dwZhanli;
	}
};

class MasterPrenticeMgr
{
public:
	typedef std::vector<tagMPMember_Local> master_prentice_member_vector;
	//typedef std::vector<tagMasterPalcardSim> master_prentice_placard_vector;
	//typedef std::vector<unsigned int> prentice_id_vector;
private:
	MasterPrenticeMgr();
	~MasterPrenticeMgr();
public:
	static MasterPrenticeMgr* getInstance();
	void Destroy();
	void Init();
	void Clear();
	void delayDestroy();//延迟重连需要销毁
private:
	master_prentice_member_vector	m_master_prentice_member_vector;
	//master_prentice_placard_vector	m_master_prentice_placard_vector;
	//prentice_id_vector				m_prentice_id_vector;
	unsigned int					m_master_id;//本地保存一份师傅ID
	vector<unsigned int>			m_vecPrenticeId;//保存师徒管理中 所有的师傅ID

	unsigned int					m_master_moral;
	unsigned int					m_graduates;
	unsigned int					m_apply_master_role_id;// 临时存储申请拜师/收徒角色ID
	unsigned int					m_apply_prentice_role_id;// 临时存储申请拜师/收徒角色ID
	unsigned int					m_break_role_id;		// 临时存储师徒决裂的角色ID
	bool							m_bask_name_apply_master;//标识是否需要获取申请拜师角色的名称
	bool							m_bask_name_apply_prentice;//标识是否需要获取申请收徒角色的名称
public:
	/*客户服2服务器*/
	void Send_add_master(unsigned int role_id_);//发送拜师请求
	void Send_add_prentice(unsigned int role_id_);//发送招徒请求
	void Agree_apply_master();//对拜师的回馈
	void DisAgree_apply_master();//不同意
	void Agree_apply_prentice();//同意收徒
	void DisAgree_apply_prentice();//不同意招徒
	void Master_Prentice_Break(unsigned int roleID);//师徒决裂
	void Confirm_Break();//确认决裂
	void resolveErrorCode(unsigned int pErrorID);
	void MasterTeach_Prentice(unsigned int role_id_);//师傅给徒弟传功
	void Prentcie_graduate_from_master();//徒弟出师
	void OnServer_Chushi_Notice(unsigned int num);//徒弟出师数量提示
	void OnServer_Chushi_TuDi_Notice(short pLevel);//等级判断
	void Prentcie_graduate_from_master_nocheck();// 本地玩家出师请求
	/*服务器2客户端*/
	unsigned int OnServer_Make_Master(s_net_cmd *cmd);//拜师反馈
	unsigned int OnServer_Make_Master_ex(s_net_cmd *cmd);//接收拜师消息
	unsigned int OnServer_Make_Master_OK2Master(s_net_cmd *cmd);//真正拜师成功后，给师傅提示
	void OnServer_GetName(unsigned int roleid , const std::string& name);
	unsigned int OnServer_New_Role_2_Old(s_net_cmd *cmd);//新收徒弟后，给已有的师徒发新徒弟的信息
	unsigned int OnServer_Roles_2_NewPrentice(s_net_cmd* cmd);//新收徒弟后，将已有的师徒信息发给这位新徒弟
	unsigned int OnServer_Make_Prentice(s_net_cmd* cmd);//招徒反馈
	unsigned int OnServer_Make_Prentice_ex(s_net_cmd* cmd);//接收招徒消息
	unsigned int OnServer_Make_Prentice_OK2Prentice(s_net_cmd* cmd);//真正收徒成功后，给徒弟提示
	unsigned int OnServer_Master_Prentice_Break(s_net_cmd* cmd);//师徒决裂
	unsigned int OnServer_Prentice_Graduate(s_net_cmd* cmd);//徒弟出师
	unsigned int OnServer_Graduate_From_Master(s_net_cmd* cmd);//徒弟出师
	unsigned int OnServer_MasterTeachPrentice(s_net_cmd *cmd);//师傅给徒弟传功
	unsigned int OnServer_InitMasterID(s_net_cmd *cmd);//师傅ID初始化
	//师徒上下线之间的提醒
	unsigned int OnServer_MasterLogin(s_net_cmd* cmd);
	unsigned int OnServer_MasterLogout(s_net_cmd* cmd);
	unsigned int OnServer_PrenticeLogin(s_net_cmd* cmd);
	unsigned int OnServer_PrenticeLogout(s_net_cmd* cmd);
	unsigned int OnServer_BrotherLogin(s_net_cmd* cmd);
	unsigned int OnServer_BrotherLogout(s_net_cmd* cmd);
	/*类功能函数*/
	inline void SetMasterID(unsigned int role_id) {m_master_id = role_id;}
	inline unsigned int GetMasterID() {return m_master_id;}

	void pushPrenticeToList(unsigned int pID);

	bool HasMaster()
	{
		return ((m_master_id != (unsigned int)INVALID)?true:false);
	}
	inline bool IsMaster_Local(unsigned int roleID)//本地玩家是否是师傅
	{
		return /*((roleID == m_master_id)?true:false);*/ m_vecPrenticeId.size() > 0;
	}

	bool IsMasterByRoleID(unsigned int roleID);//本地玩家是这个ID的师傅

	inline bool IsInMasterRelationShip_Local(unsigned int roleID)//本地玩家是否有师门属性
	{
		return ((0 != m_master_prentice_member_vector.size())?true:false);
	}
	void ReSort_Vec();//重排师门数组顺序，确保师傅位于第一位
	inline bool Is_XiaoHuoBan(unsigned int roleID)//该玩家是否是同师门的
	{
		for (size_t i = 0; i < m_master_prentice_member_vector.size();i++)
		{
			if (roleID == m_master_prentice_member_vector[i].dw_role_id)
			{
				return true;
			}
		}
		return false;
	}
	void delete_master_relation();	//删除和师傅有关的关系（师傅，师兄弟）
	void delate_from_master_prentice(unsigned int role_id_);
	void delete_prentice_info(unsigned int role_id_);

	inline bool getMemberInfo(unsigned int role_id,tagMPMember_Local& memberInfo)//获取该师门成员的信息
	{
		for (size_t i = 0; i < m_master_prentice_member_vector.size();i++)
		{
			if (role_id == m_master_prentice_member_vector[i].dw_role_id)
			{
				memberInfo = m_master_prentice_member_vector[i];
				return true;
			}
		}
		return false;
	}
	inline const master_prentice_member_vector& getMasterPrenticeVec() {return m_master_prentice_member_vector;}

	void updateRoleLevel(unsigned int roleId,int level);
	void updateRoleLevel(unsigned int roleId,bool online,int level,int rating);
	void updateRoleOnline(unsigned int roleId,bool online);
};
#endif