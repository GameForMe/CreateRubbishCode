#ifndef MAILREWARDMGR_H
#define MAILREWARDMGR_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiTools.h"

#pragma pack(push, 1)

using namespace cocos2d;
using namespace cocos2d::extension;

const int MAX_MAIL_REWARD_NAME = 18;	// 邮件奖励名称最大字数
const int MAX_MAIL_REWARD_CONTENT = 128;// 邮件奖励内容最大字数
const int MAX_MAIL_REWARD_ITEM_COUNT = 5;//邮件奖励物品最大数

//邮件奖励物品
struct tagMailRewardItem
{
	unsigned int dwItemID; //物品ID
	signed short n16Count; //物品数量
	tagMailRewardItem() { memset(this,0,sizeof(*this));};
};

//邮件奖励
struct tagMailReward
{
	INT64 n64MailID; //邮件ID
	unsigned int dwMailTypeID; //邮件类型ID
	int nSenderType; //寄信人类型=系统,1=皇小婷
	int nRecvRoleID; //收信人ID
	wchar_t Title[MAX_MAIL_REWARD_NAME + 1]; //标题
	wchar_t Content[MAX_MAIL_REWARD_CONTENT + 1]; //内容
	INT64 n64Silver; //奖励金币
	int nExp; //奖励经验
	int nDiamond; //奖励钻石
	int nTili; //奖励体力
	BYTE isBind;//是否绑定
	unsigned int dwCreateTime; //创建时间
	int nYuanbao;	//元宝
	tagMailRewardItem RewardItem[MAX_MAIL_REWARD_ITEM_COUNT]; //奖励物品
	tagMailReward() { memset(this,0,sizeof(*this));};
};

#pragma pack(pop)

class MailRewardMgr
{
private:
	MailRewardMgr();
	~MailRewardMgr();
public:
	typedef std::vector<tagMailReward> MailList;
public:
	static MailRewardMgr* getInstance();
	void delayDestroy();//延迟重连需要销毁
	void setCheckedMailIndex(int index){checkedMailIndex = index;};//选择的邮件序号
	int getCheckedMailIndex()const{return checkedMailIndex;};
	void setIsClose(bool flag){isClose = flag;};
	bool getIsClose()const {return isClose;};//是否关闭邮件附件
	MailList const& getMailDataList()const{return mailDataList;};//提取所有邮件
	tagMailReward const& getMailDataListByIndex(int index)const;//获取一个邮件
	int getMailConut()const {return (int)mailDataList.size();};//获取邮件数量
	void clearAllMail(){mailDataList.clear();};
	//-----------------------------------------------------------------------------------------------------
	unsigned int onAddMailReward( s_net_cmd *cmd );//接收单个邮件
	unsigned int onAddAllMailReward( s_net_cmd *cmd );//接收全部邮件
// 	void setCurrentReceiveIndex(int index)//当前领取奖励的邮件的序列号
// 	{
// 		_currentReceiveIndex = index;
// 	}
// 	int getCurrentReceiveIndex() const
// 	{
// 		return _currentReceiveIndex;
// 	}

	bool is_mailbox_empty()const{return mailDataList.empty();}

	void erase_mail(INT64 mail_id);
	//static std::string getChangeWenziType(wchar_t const* roleName);
private:

	void eraseMailDataListByIndex(int index);//去除所有邮件
	bool get_mail_index_by_id(INT64 mail_id,size_t& index)const;


	MailList mailDataList;//所有邮件的数据
	int checkedMailIndex;//选择的邮件序号
	//int _currentReceiveIndex; //当前领取的邮件序号
	bool isClose;//是否关闭邮件附件.
};


#endif //MAILREWARDMGR_H
