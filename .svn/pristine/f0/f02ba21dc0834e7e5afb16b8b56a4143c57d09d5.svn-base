#ifndef SOCIALPROTO_H
#define SOCIALPROTO_H
#include "BaseDefine.h"
#include "CmdAdapter.h"
#include "RoleDefine.h"
#include "RoleInfoProto.h"

#pragma pack(push, 1)

const int MAX_FRIENDNUM					= 100;		// 好友最大个数 100
const int MAX_BLACKLIST					= 20;		// 黑名单最大个数 20
const int MAX_SURROUNDBY				= 10;		//周围玩家最大个数 5
#define		SEND_GIFT_NEED_ITEM 1003004		//红玫瑰typeID 新的玫瑰花id  add by XSea 2014.09.11
#define		COMPRACTICE_AVALIB_DIS	48*2//双修最大距离
const int MARRY_MIN_LEVEL				= 35;		//结婚最低等级
#define MARRY_NEED_ITEM		1004042		//结婚所需婚戒的道具ID
const int DIVORCE_NEED_GOLD			= 5000000;		//离婚消耗的金币数500万
#define REDZUI_FLAG_INDEX				10		//玩家脚本数据指向红唇标记的索引
/*以下定义社交所需的消息*/
// 错误码
enum
{
	E_Friend_Target_Not_Exist			=	1,		// 目标不存在
	E_Friend_Target_Not_Sel				=	2,		// 不能加自己为好友
	E_Friend_Target_Black_List			=	3,		// 黑名单内的玩家无法被添加为好友
	E_Friend_Target_Already_Exit		=	4,		// 该好友已存在于好友列表
	E_Friend_Max_Num					=	5,		// 好友列表名单是否达到上限100人
	E_Friend_Group_Not_Exit				=	6,		// 分组不存在
	E_Friend_Not_Friend					=	7,		// 不是该玩家好友

	E_Black_Targer_Not_Sel				=	20,		// 不能加自己到黑名单
	E_Black_Max_Num						=	21,		// 黑名单已满
	E_Black_Target_Already_Exit			=	22,		// 玩家已在黑名单中
	E_Black_Target_Not_Exit				=	23,		// 玩家不在黑名单中

	E_Enemy_Target_Not_Exit				=   24,		// 玩家不在仇人中
	E_Enemy_No_OnLine					=   25,		// 仇人不在线

	E_Gift_Not_Level					=	29,		// 角色达到15级才可送花
	E_Gift_Not_Exit						=	30,		// 礼物不存在
	E_Gift_Not_Both_Friend				=	31,		// 不是双向好友
	E_Gift_Friend_Not_Online			=	32,		// 好友不在线
	E_Gift_Not_Gift						=	33,		// 所送的物品不是礼物

	E_Compractice_No_OnLine				=	34,		//被邀请方不在线
	E_Compractice_Local_InPractice		=	35,		//本地玩家正在双修中
	E_Compractice_Remote_InPractice		=	36,		//远程玩家正在双修中
	E_Compractice_InStall				=	37,		//玩家处于摆摊中
	E_Compractice_Local_Practice_Full	=	38,		//邀请方今日双修次数已满
	E_Compractice_Remote_Practice_Full	=	39,		//被邀请方今日双修次数已满
	E_Compractice_Disagree				=	40,		//被邀请方不同意
	E_Compractice_Long					=	41,		//距离太远

	E_Propose_Male_Married				=	42,		//男方已有配偶
	E_Propose_Female_Married			=	43,		//女方已有配偶
	E_Propose_Female_Disagree			=	44,		//女方不同意结婚
	E_Propose_Marray_Level				=	45,		//玩家结婚等级不足
	E_Propose_Marry_Lack_Item			=	46,		//缺少婚戒
	E_Divorce_Lack_Yuanbao				=	47,		//离婚元宝不足
	E_Propose_No_Team					=	48,		//必须男女双方组成一队
	E_Propose_No_Map					=	49,		//必须在特定地图结婚

	E_Compractice_Level					=	50,		//双修的玩家必须大于20级
	E_Compractice_Sex					=	51,		//必须是异性双修
	E_Compractice_NotSafearea			=	52,		//双修双方均需在安全区内
	E_Comparctice_Role_Invited			=	53,		//玩家正在被邀请中

	E_QBJJ_LEVEL_Min_Woman				=	54,		//女方等级不足 gx add 2013.10.25
	E_QBJJ_LEVEL_MIN_Man				=	55,		//男方等级不足		
	E_QBJJ_RED_NO						=	56,		//女方未获得红唇认证
	E_QBJJ_RED_NO_REWARD				=	57,		//当前没有要领取的奖励

	E_Propose_Marray_Bag_Not_Enough	=	58,		//自己或配偶背包空间不足
	E_Propose_Marray_Man_Offline	=	59,		//邀请方不在线

	E_Compractice_Map_Not			=	60,		//该地图无法双修
	E_Compractice_Exchange			=	61,		//正在交易无法双修
};

enum EFriendTypeList
{
	EF_FRIEND = 1,//好友
	EF_BLACK ,//黑名
	EF_SURROUNDBY,//周围的人
	EF_SHITU, //师徒
	EF_ENEMY, //仇人
};

//----------------------------------------------------------------------------
// 12星座
//----------------------------------------------------------------------------
enum EnumVCardConstellation
{
	EVC_Aries			=		1,		//白羊座(3.21-4.20)
	EVC_Taurus			=		2,		//金牛座(4.21-5.21)
	EVC_Gemini			=		3,		//双子座(5.22-6.21)
	EVC_Cancer			=		4,		//巨蟹座(6.22-7.22)
	EVC_Leo				=		5,		//狮子座(7.23-8.23)
	EVC_Virgo			=		6,		//处女座(8.24-9.23)
	EVC_Libra			=		7,		//天秤座(9.24-10.23)
	EVC_Scorpio			=		8,		//天蟹座(10.24-11.22)
	EVC_Sagittarius		=		9,		//射手座(11.23-12.21)
	EVC_Capricorn		=		10,		//摩羯座(12.22-1.20)
	EVC_Aquarius		=		11,		//水瓶座(1.21-2.19)
	EVC_Pisces			=		12,		//双鱼座(2.20-3.20)

	EVC_Default			=		13		//默认保密
};
//----------------------------------------------------------------------------
// 错误码枚举
//----------------------------------------------------------------------------
enum
{
	E_VCard_Success					= 0,	// 成功
	E_VCard_NotVisible				= 1,			// 名帖不可见
	E_VCard_NoPrivilege				= 2,			// 无改变权限
	E_VCard_Failed					= 3,			// 发生错误
};

enum
{
	LEN_CITY_NAME					= 7,
	LEN_MAX_URL						= 200,
	LEN_MAX_SIGNATURE				= 45,
};
/*************相关结构体定义***************/
//好友信息 网络消息用
struct tagFriendInfo
{
	unsigned int	uFriendID;								// 好友ID
	unsigned int	dwFriVal;								// 好友度,仅保留 不使用
	unsigned char	byGroup;								// 分组
	int		nLevel;									// 角色等级
	EClassType	 eClassType;						// 职业
	unsigned char	bySex;									// 性别
	unsigned char   bOnline;								// 好友是否在线
	int			n32Rating;									// 战斗力
};
struct tagFriendInfo_
{
	unsigned int	uFriendID;								// 好友ID
	unsigned int	dwFriVal;								// 好友度,仅保留 不使用
	unsigned char	byGroup;								// 分组
	int		nLevel;									// 角色等级
	EClassType	 eClassType;						// 职业
	unsigned char	bySex;									// 性别
	unsigned char   bOnline;								// 好友是否在线
	int			n32Rating;									// 战斗力	
	wchar_t friendName[X_SHORT_NAME];
};
//黑名人信息 网络消息用
struct tagBlackInfo
{
	unsigned int	uBlackID;								// 黑名人ID
	int		nLevel;									// 等级
	EClassType	eClassType;							// 职业
	unsigned char	bySex;
	unsigned char   bOnline;								// 是否在线
};
struct tagBlackInfo_
{
	unsigned int	uBlackID;								// 黑名人ID
	int		nLevel;									// 等级
	EClassType	eClassType;							// 职业
	unsigned char	bySex;
	unsigned char	bOnline;
	wchar_t blackName[X_SHORT_NAME];
};
//周围人信息
struct tagSurroundByInfo
{
	unsigned int uSurroundByID;				//周围人ID
	int nLevel;								//等级
	EClassType eClassType;					//职业
	unsigned char bySex;								//性别
	wchar_t surroundbyName[X_SHORT_NAME];
};
//好友面板统一结构体定义
struct tagFriendGeneralInfo
{
	wchar_t name[X_SHORT_NAME];
	unsigned int uRoleID;				//玩家ID
	int nLevel;								//等级
	EClassType eClassType;					//职业
	unsigned char bySex;								//性别
	bool isEnemy;							//是否仇人
	bool isWatch;							//是否盯住
	int  nKillNum;							//击杀
	int  nBeKillNum;						//被击杀人数
	unsigned char isOnline;							//是否在线
	int n32Rating;							//战斗力
};
struct tagFriUpdate
{
	unsigned int   dw_role_id;								// 好友ID
	int	bOnline;								// 是否在线
	int		nLevel;									// 等级
	INT		n32Rating;								// 战斗力
};

//-----------------------------------------------------------------------------
// 用户自定义信息数据(STWorld<->STDB，client->STWorld)
//-----------------------------------------------------------------------------
struct tagCustomVCardData
{
	unsigned char	byConstellation;		// 星座：下拉菜单选择，有13个可选，分别为12星座和保密，默认为保密。
	wchar_t	chCity[LEN_CITY_NAME];	// 城市(以'\0'结束)
	unsigned char	bySignatureSize;		// 签名尺寸 最大200(byte长度)
	unsigned char	byData[1];				// 头像：默认为角色性别头像。个性签名：最多100个汉字。200个字符。(以'\0'结束)
};
//-----------------------------------------------------------------------------
// 名帖数据(STWorld->client)
//-----------------------------------------------------------------------------
struct tagVCardData
{
	unsigned int				dw_role_id;			// 角色ID：显示玩家的角色名称。
	unsigned int				dwLevel;			// 角色等级：显示玩家的角色等级。
	unsigned int				dwJob;				// 角色职业：显示玩家的角色职业，未转职角色显示为“浪人”
	unsigned int				dwMateRoleID;		// 角色配偶：显示玩家的角色配偶，未婚角色显示为空
	unsigned int				dwFactionID;		// 所属帮派：显示玩家的所属帮派名称，无帮派玩家显示为空。
	unsigned int				dwPosition;			// 帮派职位：显示玩家的帮派职位，无帮派玩家显示为空。

	tagCustomVCardData 	customVCardData;	// 用户自定义数据
};
struct tagRoleSocialInfo
{
	unsigned char byStar;//星座
	wchar_t	chCity[LEN_CITY_NAME];//城市
	wchar_t bySignature[LEN_MAX_SIGNATURE + 1];//个性签名
	tagRoleSocialInfo():byStar(EVC_Aries)
	{
		memset(chCity,0,sizeof(chCity));
		memset(bySignature,0,sizeof(bySignature));
	}
	tagRoleSocialInfo& operator = (const tagRoleSocialInfo& info)
	{
		byStar = info.byStar;
		memcpy(chCity,info.chCity,sizeof(info.chCity));
		memcpy(bySignature,info.bySignature,sizeof(info.bySignature));
		return *this;
	}
};

struct tagOpEnemyInfo
{
	unsigned int	dwEnemyID;								// 仇人ID
	int		nLevel;									// 等级
	EClassType eClassType;							// 职业
	unsigned char	bySex;
	unsigned char  bOnline;
	unsigned char isWatch;							//盯住
	unsigned short killNum;							//杀人
	unsigned short beKillNum;						//被杀
};

struct tagEnemyInfo
{
	unsigned int	dwEnemyID;								// 仇人ID
	int		nLevel;									// 等级
	EClassType eClassType;							// 职业
	unsigned char	bySex;
	unsigned char isWatch;							//盯住
	unsigned short killNum;							//杀人
	unsigned short beKillNum;						//被杀
	unsigned char  bOnline;
	wchar_t enemyName[X_SHORT_NAME];
};

/*end*/
/**********消息定义**********/
// 想和谁结交为好友
struct NET_SIC_role_make_friend : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_role_make_friend)
	unsigned int	uDestRoleID;
	unsigned int	dwRoleNameCrc;	// 角色名称crc32
};

struct NET_SIS_role_make_friend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_make_friend)
	unsigned int	uDestRoleID;
	int		nLevel;				// 角色等级
	EClassType eClassType;
	unsigned char	by_sex;		// 性别
	unsigned char	bOnline;
	int			n32Rating;		// 战斗力	
	unsigned int	dw_error_code;

};

// 取消好友关系
struct NET_SIC_role_cancel_friend : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_role_cancel_friend)
	unsigned int   uDestRoleID;
};

struct NET_SIS_role_cancel_friend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_cancel_friend)
	unsigned int   uDestRoleID;
	unsigned char	byGroup;
	unsigned int	dw_error_code;
};

struct NET_SIS_make_friend_notice : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_make_friend_notice)
	DWORD	dw_role_id;
	BYTE	sex;
	BYTE	vipLevel;
	wchar_t	name[X_SHORT_NAME];
};

// 加入玩家到黑名单
struct NET_SIC_move_to_black_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_move_to_black_list)
	unsigned int	uDestRoleID;
	unsigned int	dwRoleNameCrc;
};

struct NET_SIS_move_to_black_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_move_to_black_list)
	unsigned int	uDestRoleID;
	unsigned char	byOldGroup;
	int		nLevel;				// 角色等级
	EClassType eClassType;
	unsigned char	by_sex;	
	unsigned char	bOnline;
	unsigned int	dw_error_code;
};

// 将玩家从黑名单删除
struct NET_SIC_delete_black_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_delete_black_list)
	unsigned int	uDestRoleID;
};

struct NET_SIS_delete_black_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_delete_black_list)
	unsigned int	uDestRoleID;
	unsigned int	dw_error_code;
};
//---------------------------------------------------------------------------------
// 玩家好友
//---------------------------------------------------------------------------------
struct NET_SIS_send_friend_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_send_friend_list)
	int				n_num;		  // 好友数量
	tagFriendInfo	FriendInfo[1];
};

//---------------------------------------------------------------------------------
// 玩家黑名单
//---------------------------------------------------------------------------------
struct NET_SIS_send_black_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_send_black_list)
	int				n_num;
	tagBlackInfo	BlackInfo[1];
};

// 玩家上线时通知好友
struct NET_SIS_login_to_friend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_login_to_friend)
	unsigned int	dw_role_id;
	int				n32Rating;		// 战斗力
};

// 玩家下线时通知好友
struct NET_SIS_logout_to_friend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_logout_to_friend)
	unsigned int	dw_role_id;
	int				level;
};
struct NET_SIC_update_friend_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_update_friend_state)
};
struct NET_SIS_update_friend_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_update_friend_state)
	int				n_num;
	tagFriUpdate	FriUpdate[1];
};
// 玩家上线时通知黑名单
struct NET_SIS_login_to_black : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_login_to_black)
	unsigned int	dw_role_id;
};

// 玩家下线时通知黑名单
struct NET_SIS_logout_to_black : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_logout_to_black)
	unsigned int	dw_role_id;
	int				level;
};
// 玩家上线时通知仇人
struct NET_SIS_login_to_enemy : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_login_to_enemy)
	unsigned int	dw_role_id;
};

// 玩家下线时通知仇人
struct NET_SIS_logout_to_enemy : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_logout_to_enemy)
	unsigned int	dw_role_id;
	int				level;
};
struct tagRoleIsOnline
{
	unsigned int	dw_role_id;
	bool			isOnline;
};
struct NET_SIS_role_friend_is_online : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_friend_is_online)
	int					n_num;				// 数量
	tagRoleIsOnline		roleData[1];
};

struct NET_SIC_send_gift : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_send_gift)
	unsigned int	dwDestRoleID;		// 礼物接收者
	unsigned char	byLevel;			//送花等级	1代表1朵，2代表9朵，3代表99朵
	unsigned int	dwRoleNameCrc;	// 角色名称crc32
};

struct NET_SIS_send_gift_to_friend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_send_gift_to_friend)
	DWORD	dwSrcRoleID;		// 礼物发送者
	unsigned char	byLevel;			//送花等级
	DWORD   byAddValue;			//增加的魅力值
	DWORD	dw_error_code;		//错误信息
	BYTE	sex;
	BYTE	vipLevel;
	wchar_t	name[X_SHORT_NAME];
};

//---------------------------------------------------------------------------------
// 玩家仇人
//---------------------------------------------------------------------------------
struct NET_SIS_send_enemy_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_send_enemy_list)
	int				n_num;
	tagOpEnemyInfo	EnemyInfo[1];
};

// 添加仇人
struct NET_SIC_add_enemy : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_add_enemy)
	unsigned int	dwDestRoleID;
};

struct NET_SIS_add_enemy : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_add_enemy)
	tagOpEnemyInfo info;	
};

// 删除仇人
struct NET_SIC_delete_enemy_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_delete_enemy_list)
	unsigned int	dwDestRoleID;
	unsigned char	type;
};

struct NET_SIS_delete_enemy_list : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_delete_enemy_list)
	unsigned int	dwDestRoleID;
	unsigned int	dw_error_code;
};

/*
双修相关消息的定义
*/
// 邀请玩家进行双修
struct NET_SIC_invite_practice: public s_net_cmd
{
	DECL_NETCMD(NET_SIC_invite_practice)
	unsigned int	dwDestRoleID;		// 被邀请玩家	
};
// 邀请双修(返回给双方)
struct NET_SIS_invite_practice_to_both: public s_net_cmd
{
	DECL_NETCMD(NET_SIS_invite_practice_to_both)
	unsigned int		dwSrcRoleID;//邀请人ID
	unsigned int		dw_error_code;
};
// 被邀请人回复邀请双修
struct NET_SIC_invite_practice_reply: public s_net_cmd
{
	DECL_NETCMD(NET_SIC_invite_practice_reply)
	unsigned int		dwSrcRoleID;//邀请人ID
	int		bAgree;				// 是否同意
};
// 被邀请人回复邀请后给邀请人的回复
struct NET_SIS_invite_practice_to_src: public s_net_cmd
{
	DECL_NETCMD(NET_SIS_invite_practice_to_src)
	unsigned int		dwSrcRoleID;//邀请人ID
	unsigned int		dwDesRoleID;//被邀请人ID
	INT		timeLeft;
	unsigned int		dw_error_code;
};
//玩家主动取消双修
struct NET_SIC_cancel_practice: public s_net_cmd
{
	DECL_NETCMD(NET_SIC_cancel_practice)
	unsigned int dwPartnerID;//与之双修的角色ID
};
//结婚相关消息定义
// 男性玩家向女性玩家求婚
struct NET_SIC_male_propose: public s_net_cmd
{
	DECL_NETCMD(NET_SIC_male_propose)
	unsigned int		dwDestRoleID;		// 女性玩家	
};
// 求婚(返回给双方)
struct NET_SIS_propose_to_both: public s_net_cmd
{
	DECL_NETCMD(NET_SIS_propose_to_both)
	unsigned int		dwSrcRoleID;//求婚人ID
	unsigned int		dw_error_code;
};
// 被求婚人回复男性玩家求婚
struct NET_SIC_propose_reply: public s_net_cmd
{
	DECL_NETCMD(NET_SIC_propose_reply)
	unsigned int		dwSrcRoleID;//男性角色ID
	int		bAgree;				// 女性玩家是否同意
};
// 被求婚人回复求婚邀请后给双方的回复
struct NET_SIS_propose_reply_to_both: public s_net_cmd
{
	DECL_NETCMD(NET_SIS_propose_reply_to_both)
	unsigned int		dwSrcRoleID;//男性角色ID
	unsigned int		dwDesRoleID;//女性角色ID
	unsigned int		dw_error_code;
};
//离婚
struct NET_SIC_role_divorce: public s_net_cmd
{
	DECL_NETCMD(NET_SIC_role_divorce)
};
//
struct NET_SIS_role_divorce_to_both: public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_divorce_to_both)
	unsigned int	dw_SrcRole_ID;//主动提出离婚的一方ID
	unsigned int		dw_error_code;
};
//远程玩家离婚
struct NET_SIS_remote_role_divorce: public s_net_cmd
{
	DECL_NETCMD(NET_SIS_remote_role_divorce)
	unsigned int src_dw_role_id; //主动发送离婚请求的一方
	unsigned int desc_dw_role_id;//被动接受离婚请求的一方
};
//角色名贴相关消息定义
//----------------------------------------------------------------------------
// 获取角色名贴信息
//----------------------------------------------------------------------------
struct NET_SIC_get_role_card : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_role_card)
	unsigned int			dw_role_id;			// 角色ID
};

struct NET_SIS_get_role_card : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_role_card)
	unsigned int			dw_error_code;		// 错误码
	unsigned int			dw_role_id;			// 角色ID
	unsigned char			pData[1];				// 名帖数据
};

//----------------------------------------------------------------------------
// 设置角色名贴信息
//----------------------------------------------------------------------------
struct NET_SIC_set_role_card : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_set_role_card)
	unsigned int				dw_role_id;			// 角色ID
	tagCustomVCardData	customVCardData;	// 自定义信息
};

struct NET_SIS_set_role_card : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_set_role_card)
	unsigned int			dw_error_code;		// 错误码
	unsigned int			dw_role_id;			// 角色ID
};
//领取情比金坚奖 gx add 2013.10.25
struct NET_SIC_get_qbjj_reward:public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_qbjj_reward)
};
struct NET_SIS_get_qbjj_reward:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_qbjj_reward)
	unsigned int dw_error_code;
};

//更新脚本数据，具体含义客户端负责解释 gx add 2013.10.29
struct NET_SIS_update_role_script_data:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_update_role_script_data)
	unsigned int dw_role_id;//角色ID，防止异常
	int nindex;//脚本数据索引值
	unsigned int dwvalue;//该索引值对应的脚本数据
};
//伴侣上线发给另一方 gx add 2013.10.29
struct NET_SIS_login_to_spouse:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_login_to_spouse)
};
//伴侣下线发给另一方
struct NET_SIS_logout_to_spouse:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_logout_to_spouse)
};

// 玩家上线时通知好友、黑名单、仇人、同行会成员都用此消息
struct NET_SIS_login_to_relation : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_login_to_relation)
	DWORD	dw_role_id;
};

// 玩家下线时通知好友、黑名单、仇人、同行会成员都用此消息
struct NET_SIS_logout_to_relation : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_logout_to_relation)
	DWORD	dw_role_id;
	int		nRating;
	int		level;
};
// 获取玩家月卡信息
struct NET_C2S_OtherMonthCardBegin : public s_net_cmd
{
	DECL_NETCMD(NET_C2S_OtherMonthCardBegin)
	DWORD dw_role_id;
};

// 玩家月卡信息
struct NET_SIS_OtherMonthCardBegin : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_OtherMonthCardBegin)
	tagDWORDTime dw_month_card_time;
	DWORD dw_role_id;
};
/**********end**********/

#pragma pack(pop)
#endif