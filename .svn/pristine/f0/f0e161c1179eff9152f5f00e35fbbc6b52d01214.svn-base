/**
 *	@file		SelectTargetUi.h
 *	@author		guantiejun
 *	@date		2016/06/30
 *	@version	
 *	@brief		队伍选择目标
 */

#ifndef SELECT_TARGET_UI_H
#define SELECT_TARGET_UI_H

#include "UiInterface.h"
#include "NormalLayer.h"
#include "TeamMgr.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class SelectTargetUiLayer;
class ListControl;
struct team_target_1_event;
struct team_target_2_event;

class SelectTargetUi : public UiInterface
{
public:
	SelectTargetUi();
	~SelectTargetUi();

	virtual CCNode *openUi();
	SelectTargetUiLayer *getUiLayer();
};

class SelectTargetUiLayer: public NormalLayer, public cocos2d::extension::CCScrollViewDelegate
{
public:
	typedef std::vector<e_team_target_type> vector_target_type;
	typedef std::map<unsigned short, string> map_own_quset;
	typedef std::map<int, string> map_limit_active;
	typedef std::map<unsigned int, string> map_boss;
	typedef std::map<unsigned int, string> map_mutil_instance;
	typedef std::map<unsigned int, string> map_auto_action;

public:
	SelectTargetUiLayer();
	~SelectTargetUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SelectTargetUiLayer, create);

	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual void scrollViewDidScroll(CCScrollView* view);
	virtual void scrollViewDidZoom(CCScrollView* view);

	virtual void onEnter();
	virtual void onExit();

private:
	void on_sure(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onClose(CCObject * pSender, CCControlEvent pCCControlEvent);
	void select_target_event_1(team_target_1_event* event);
	void select_target_event_2(team_target_2_event* event);

	void init_type_list();
	void init_quest_list();
	void init_limit_active_list();
	void init_boss_list();
	void init_muilt_instance_list();
	void init_auto_list();

	void refresh_list();
	void add_child_type(e_team_target_type type);
	void add_child_item(int index, string name);

	void refresh_level_list();
	void add_null_item(ListControl* list);
	int get_min_level();
	int get_max_level(int level_min);
	void on_sure_create_team();
	void init_select();

private:
	vector_target_type m_target_type;
	map_own_quset m_own_quest_map;
	map_limit_active m_limit_active_map;
	map_boss m_world_boss_map;
	map_boss m_field_boss_map;
	map_mutil_instance m_mutil_instance_map;
	map_auto_action m_auto_action_map;

	ListControl* m_list;
	ListControl* m_list_left;
	ListControl* m_list_right;

	e_team_target_type m_select_type;
	int	m_select_index;

	int m_level_min;
	int m_level_max;
};

#endif