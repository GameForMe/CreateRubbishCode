#include "cangjinggeui.h"
#include "UiLoader.h"
#include "World.h"
#include "ItemMarixLayer.h"
#include "PackageManager.h"
#include "ItemDefine.h"
#include "ItemNode.h"
#include "GambleMgr.h"
#include "WorldPacket.h"
#include "TCPClient.h"
#include "CommonMsgDefine.h"
#include "EquipTipUi.h"
#include "ToolTip.h"
#include "GongfaTip.h"
//#include "GameActionNode.h"
#include "CfgReader.h"
#include "UiResourceMgr.h"
#include "SQLCommand.h"
#include "DBMgr.h"
#include "RoleManager.h"
#include "LocalPlayer.h"
#include "StringMgr.h"
#include "Helper.h"
#include "NumericalIniMgr.h"
#include "f_string_table.h"
//////////////////////////////////////////////////////////////////////////
#include "FMBPlacardUi.h"
#include "GongFa2Tip.h"
#include "f_string_util.h"
#include "PlacardManager.h"
#include "SecondVerifyMgr.h"

CangJingGeUi::CangJingGeUi()
{

}

CangJingGeUi::~CangJingGeUi()
{

}

CCNode* CangJingGeUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["cangjinggelayer"] = UiLayerLoader<CangJingGeUiLayer>::loader();
	CCNode* pNode = readUiFromCCBI("cangjinggeui", nodeLoaders, _loadSpriteSheet);

	return pNode;
}

void CangJingGeUi::updateGongFaTemp(short idx /* = -1 */)
{
	CangJingGeUiLayer *uiLayer = getUiNodeByTag<CangJingGeUiLayer>(WCT_CangJingGeUi);
	if(uiLayer != NULL)
	{
		uiLayer->updateGongFaTemp(idx);
	}
}

// void CangJingGeUi::setSELoc( short idx )
// {
// 	CangJingGeUiLayer* uiLayer = getUiNodeByTag<CangJingGeUiLayer>(WCT_CangJingGeUi);
// 	if (uiLayer != NULL)
// 	{
// 		uiLayer->setSELocation(idx);
// 	}
// }

void CangJingGeUi::playSuperEffect(short idx, eVisualPattern seLevel)
{
	CangJingGeUiLayer* uiLayer = getUiNodeByTag<CangJingGeUiLayer>(WCT_CangJingGeUi);
	if (uiLayer != NULL)
	{
		uiLayer->displaySuperEffect(idx, seLevel);
	}
}

void CangJingGeUi::playSuperEffect( short idx, string effect )
{
	CangJingGeUiLayer* uiLayer = getUiNodeByTag<CangJingGeUiLayer>(WCT_CangJingGeUi);
	if (uiLayer != NULL)
	{
		uiLayer->displaySuperEffect(idx, effect);
	}
}



void CangJingGeUi::setSENeed( bool needSE )
{
	CangJingGeUiLayer* uiLayer = getUiNodeByTag<CangJingGeUiLayer>(WCT_CangJingGeUi);
	if (uiLayer != NULL)
	{
		uiLayer->setGongfaSESwith(needSE);
	}
}

void CangJingGeUi::playSE( short idx )
{
	CangJingGeUiLayer* uiLayer = getUiNodeByTag<CangJingGeUiLayer>(WCT_CangJingGeUi);
	if (uiLayer != NULL)
	{
		uiLayer->showMoveAnim(idx);
	}
}

void CangJingGeUi::updateMoney()
{
	CangJingGeUiLayer* uiLayer = getUiNodeByTag<CangJingGeUiLayer>(WCT_CangJingGeUi);
	if (uiLayer != NULL)
	{
		uiLayer->updateMoney();
	}
}

void CangJingGeUi::updateBless( int curValue )
{
	CangJingGeUiLayer* uiLayer = getUiNodeByTag<CangJingGeUiLayer>(WCT_CangJingGeUi);
	if (uiLayer != NULL)
	{
		uiLayer->updateBless(curValue);
	}
}



//////////////////////////////////////////////////////////////////////////

cocos2d::SEL_MenuHandler CangJingGeUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler CangJingGeUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtn", CangJingGeUiLayer::onCloseBtnPressed);
	

	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onshiquBtn", CangJingGeUiLayer::onshiquBtnPressed);	//拾取
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onybhqBtn", CangJingGeUiLayer::onybhqBtnPressed);	//元宝获取
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onyjhqBtn", CangJingGeUiLayer::onyjhqBtnPressed);	//一键获取
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onjjrhBtn", CangJingGeUiLayer::onijrhBtnPressed);	//一键融合
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onjbhqBtn", CangJingGeUiLayer::onjbhqBtnPressed);	//金币获取
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onGotowuxueBtn", CangJingGeUiLayer::onGotowuxueBtnPressed);	//跳转武学页面
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onWuXueListBtnPressed", CangJingGeUiLayer::onWuXueListBtnPressed);	//跳转武学页面

	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onWuXueList1BtnPressed", CangJingGeUiLayer::onWuXueList1BtnPressed);	//跳转武学页面
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", CangJingGeUiLayer::onWuXueListCloseBtnPressed);	//跳转武学页面
//	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onClose1BtnPressed", CangJingGeUiLayer::onClose1BtnPressed);	//关闭说明
// 	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onDescPressed", CangJingGeUiLayer::onDescPressed);
// 	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onKnowBtnPressed", CangJingGeUiLayer::onKnowBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onExpShengliPressedBtn", CangJingGeUiLayer::onExpShengliPressedBtn);	//跳转武学页面
	
	

	return NULL;
}

void CangJingGeUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	_nState = 0;
	m_bIsNeedSE = false;
	m_bIsMultiple = false;
	m_SEItemIdx = 0;
	_seNodePt = ccp(0.f, 0.f);

	m_MainFrame = (CCSprite*)getChildByTag(0);
	//规则
// 	_roleframe = dynamic_cast<CCSprite*>(getChildByTag(20));
// 	CC_ASSERT(_roleframe != NULL);
	CCLayer* pLayer = (CCLayer*)m_MainFrame->getChildByTag(0);
	//m_pItemMarixLayer = ItemMarixLayer::create( pLayer->getContentSize().width, pLayer->getContentSize().height, 7, 3 ,20,12);
	//m_pItemMarixLayer = ItemMarixLayer::create( 700, 300, 0, 0 ,30, 25);
	m_pItemMarixLayer = ItemMarixLayer::create( pLayer->getContentSize().width+30, pLayer->getContentSize().height+20, 0, 0,33,40);
	m_pItemMarixLayer->SetCanScrollView(false);
	m_pItemMarixLayer->SetColNum(8);
	m_pItemMarixLayer->SetRowNum(2);
	m_pItemMarixLayer->SetItemMap(PackageManager::getInstance()->getItemMap(EICT_KungfuTemp));
	m_pItemMarixLayer->setPosition(-22,0);
	m_pItemMarixLayer->signalInChangePos.connect(this, &CangJingGeUiLayer::onChangeItemPos);
//	m_pItemMarixLayer->signalClickItem.connect(this, &CangJingGeUiLayer::onClickItem);
//	m_pItemMarixLayer->signalDoubleClickItem.connect(this, &CangJingGeUiLayer::doubleclickitemlayer);
	_seNode = dynamic_cast<CCNode*>(m_MainFrame->getChildByTag(2));

	pLayer->addChild(m_pItemMarixLayer);
	

	std::string sSEDir = CFGReader::instance()->get_profile_string("Art", "Effect", "");
	std::string sSEGFNormal = sSEDir + "E1_47.plist";
	std::string sSEGFBlue = sSEDir + "E1_46.plist";
	std::string sSEGFPurple = sSEDir + "E1_45.plist";
	std::string sSEGFGold = sSEDir + "E1_44.plist";
	std::string sSEGFOrange = sSEDir + "E1_43.plist";
	std::string sSEGFSurround = sSEDir + "E1_48.plist";
	std::string sSEGFFusion = sSEDir + "E1_42.plist";
	std::string sSEGFSurround1 = sSEDir + "E1_84.plist";
	std::string sSEGFSurround2 = sSEDir + "E1_85.plist";
	std::string sSEGFSurround3 = sSEDir + "E1_86.plist";
	std::string sSEGFSurround4 = sSEDir + "E1_87.plist";
	std::string sSEGFSurround5 = sSEDir + "E1_88.plist";
	std::string sLevelUpEffect= sSEDir + "E1_215.plist";
	std::string sBlessGoEffect= sSEDir + "E1_213.plist";
	std::string sBlessDoneEffect= sSEDir + "E1_214.plist";
	_plist.insert(sSEGFNormal);
	_plist.insert(sSEGFBlue);
	_plist.insert(sSEGFGold);
	_plist.insert(sSEGFPurple);
	_plist.insert(sSEGFOrange);
	_plist.insert(sSEGFSurround);
	_plist.insert(sSEGFFusion);
	_plist.insert(sSEGFSurround1);
	_plist.insert(sSEGFSurround2);
	_plist.insert(sSEGFSurround3);
	_plist.insert(sSEGFSurround4);
	_plist.insert(sSEGFSurround5);
	_plist.insert(sLevelUpEffect);
	_plist.insert(sBlessGoEffect);
	_plist.insert(sBlessDoneEffect);
	UiResourceMgr::getInstance()->retainPlistFile(_plist);
	for (std::set <std::string>::iterator iter=_plist.begin();iter!=_plist.end();iter++)
	{
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile(iter->c_str());
	}

	//m_pItemMarixLayer->createLabelTTF();
	updateGongFaTemp(-1);

	//
	//藏金阁目录
	mainListNode = (CCSprite*)getChildByTag(2);
	CC_ASSERT(mainListNode != NULL);

	//m_desNode = dynamic_cast<CCSprite*>(getChildByTag(3));


	_container = (CCNode*)mainListNode->getChildByTag(0);
	_scrollView = createScrollViewWithContent(_container);
	_container->addChild(_scrollView);


	_verticalList = new VerticalList<CangJingGeListItem>;
	_verticalList->addToScrollView(_scrollView);
	_scrollView->getContainer()->set_enable_rect(false);
	_verticalList->setMinSize(_container->getContentSize());
	_verticalList->setEnableSelect(true);
	mainListNode->setVisible(false);

	//3-10 字体变成描边

	for (int i=3;i<=10;i++)
	{
		CCLabelTTF * label=dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(i));
		if(label)
		Helper::replaceLabelTTFWithLabelFTAndRemove(label);
	}

	m_yuanBao=dynamic_cast<LabelFT*>(m_MainFrame->getChildByTag(3));
	m_zuanShi=dynamic_cast<LabelFT*>(m_MainFrame->getChildByTag(4));
	m_jinBi=dynamic_cast<LabelFT*>(m_MainFrame->getChildByTag(5));

	m_jinbifengmo = Helper::replaceLabelTTFWithLabelFTAndRemove(dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(NT_JINBIFENGMO)));
	m_yuanbaofengmo = Helper::replaceLabelTTFWithLabelFTAndRemove(dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(NT_YUANBAOFENGMO)));
	m_yuanbaoLabel = Helper::replaceLabelTTFWithLabelFTAndRemove(dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(NT_YUANBAOLABEL)));
	m_yijianfengmo = Helper::replaceLabelTTFWithLabelFTAndRemove(dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(NT_YIJIANFENGMO)));
	mohun_update_yuanbao_cost trans;
	trans.times = GambleMgr::getInstance()->getYuanBaoCostNum();
	updateYuanBaoCost(&trans);

 	CCSprite * progressSprite=(CCSprite *)m_MainFrame->getChildByTag(8);
	progressSprite->removeFromParent();
	m_blessProgress = CCProgressTimer::create(progressSprite);
	m_blessProgress->setType(kCCProgressTimerTypeBar);
	m_blessProgress->setMidpoint(ccp(0,0));
	m_blessProgress->setBarChangeRate(ccp(1, 0));
	
 	//m_blessProgress->setPosition(progressSprite->getPosition());
	//为进度条添加scrollview,实现区域显示

	CCScrollView *scrollView = CCScrollView::create(progressSprite->getContentSize());
	scrollView->setTouchEnabled(false);
	scrollView->setBounceable(false);
	scrollView->setDirection(kCCScrollViewDirectionNone);
	scrollView->setContainer(m_blessProgress);
	scrollView->setPosition(ccp(progressSprite->getPositionX()-progressSprite->getContentSize().width/2,
		progressSprite->getPositionY()-progressSprite->getContentSize().height/2));
	m_MainFrame->addChild(scrollView);


	m_blessLabel=dynamic_cast<LabelFT*>(m_MainFrame->getChildByTag(9));//祝福进度
	m_blessLabel->setZOrder(100);



	m_blessDoneEffect = GameActionNode::create();
	m_blessDoneEffect->InitTextureWithSpriteFrame("E1_214");
	m_MainFrame->addChild(m_blessDoneEffect);
// 	m_blessDoneEffect->setPosition(ccp(m_blessProgress->getContentSize().width/2,
// 		m_blessProgress->getContentSize().height/2+2));
	m_blessDoneEffect->setPosition(ccp(progressSprite->getPositionX(),progressSprite->getPositionY()+2));
	m_blessDoneEffect->BeginAction(0.075,true);



	m_blessGoEffect = GameActionNode::create();
	m_blessGoEffect->InitTextureWithSpriteFrame("E1_213");
	m_blessProgress->addChild(m_blessGoEffect);
	m_blessGoEffect->setPosition(ccp(m_blessProgress->getContentSize().width/2,
	m_blessProgress->getContentSize().height/2));
	m_blessGoEffect->BeginAction(0.05,true);

	//

	updateMoney();
	updateBless(GambleMgr::getInstance()->m_curGongFaBless);


}

void CangJingGeUiLayer::onEnter()
{
//	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this,1,true);
	setTouchPriority(1);
	setTouchEnabled(true);
	setAllChildernButtonEnable(this,false);
	setAllChildernButtonEnable(this,true);
	CCLayer::onEnter();
	REGISTER_EVENT(mohun_update_yuanbao_cost,CangJingGeUiLayer,updateYuanBaoCost);
}

void CangJingGeUiLayer::onExit()
{
	_verticalList->clear();
	CC_SAFE_DELETE(_verticalList);
//	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCLayer::onExit();
	UiResourceMgr::getInstance()->releasePlistFile(_plist);
	UNREGISTER_EVENT(mohun_update_yuanbao_cost,CangJingGeUiLayer,updateYuanBaoCost);
}

bool CangJingGeUiLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
{
	if (!isVisible() || !isRunning() || !hasVisibleParents())
	{
		return false;
	}
	CCPoint framePoint = m_MainFrame->convertTouchToNodeSpace(pTouch);
	const CCSize &frameSize = m_MainFrame->getContentSize();
	CCRect frameRect(0.0f, 0.0f, frameSize.width, frameSize.height);
	if(frameRect.containsPoint(framePoint))
	{
		CCPoint framePoint2 = m_pItemMarixLayer->convertTouchToNodeSpace(pTouch);
		const CCSize &frameSize2 = m_pItemMarixLayer->getContentSize();
		CCRect frameRect2(0.0f, 0.0f, frameSize2.width, frameSize2.height);
		if(frameRect2.containsPoint(framePoint2) && mainListNode->isVisible()==false)
			return false;

		return true;
	}
	return false;
}
// void CangJingGeUiLayer::setRoleVisible(bool visible)
// {
// 	CC_ASSERT(_roleframe != NULL);
// 	_roleframe->setVisible(visible);	
// }
// void CangJingGeUiLayer::onDescPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
// {
// 	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
// 	setRoleVisible(true);
// }
// 
// void CangJingGeUiLayer::onKnowBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
// {
// 	setRoleVisible(false);
// }



void CangJingGeUiLayer::updateGongFaTemp(short idx)
{

	//[bing] 如果是-1 全刷
	if(idx == -1 || (!m_bIsNeedSE && !m_bIsMultiple))
		m_pItemMarixLayer->RefreshData();
	else if(_nState == 1 || m_bIsNeedSE)	//[bing] 只有拾取才飞
	{
		ItemNode* pItemNode = m_pItemMarixLayer->GetItemNode(idx);
		if(pItemNode)
		{
			showMoveAnim(idx);
			//pItemNode->setDataId(-1);
		}
		return;
	}
	//m_pItemMarixLayer->createLabelTTF();
	//将所有格子地图去掉 add by XSea 2014.09.23
	for( int i = 0; i < MAX_KUNFFU_TEMP_NUM; ++i )
	{
		ItemNode* pItemNode = m_pItemMarixLayer->GetItemNode(i);
		if( pItemNode != NULL )
		{
			pItemNode->VisibleBlock(false);
//			pItemNode->setClickable(true);
		}
		//功法获得环绕特效			【Ji：】
		f_item* pItem = PackageManager::getInstance()->getItem(EICT_KungfuTemp, (short)i);
		if(pItem != NULL&&pItemNode!=NULL)
		{
			std::string nameStr;
			std::string gongfaEffect;
			c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM GongfaTipData WHERE typeId = ?1");
			cmd->set_integer32(1 , pItem->get_item_type_id());
			c_sql_table* table = c_db_manager::getSingleton()->create_table();
			while(table->retrieve_row())
			{
				unsigned int idx = table->get_index("quality");
				_gongfaType = table->get_text(idx);
				idx = table->get_index("name");
				nameStr = table->get_text(idx);

				idx = table->get_index("Effect");
				gongfaEffect = table->get_text(idx);
			}
			c_db_manager::getSingleton()->destroy_table(table);
			c_db_manager::getSingleton()->end_operation(cmd);

			std::ostringstream oss;
			oss<<nameStr;
			CCLabelTTF* nameLabel = (CCLabelTTF*)pItemNode->getChildByTag(10);
			nameLabel->setFontSize(14);
			nameLabel->setColor(ccc3(255,232,104));
			nameLabel->setString(nameStr.c_str());
				
		//	pItemNode->getSurroundSE(gongfaEffect.c_str(), 0.75f);
			CCSprite * sp=pItemNode->getItemsprite();
			sp->setPosition(ccpAdd(sp->getPosition(),ccp(0,10)));
			pItemNode->showGongFaBg(true);
		}
	}
}

void CangJingGeUiLayer::onChangeItemPos( short nPos1, short nPos2 )
{
	//暂时没丢弃
	if(nPos2 == -1)
		return;

	PackageManager::getInstance()->changeItemPosition(EICT_KungfuTemp, nPos1, nPos2);
}

// void CangJingGeUiLayer::onClickItem( short nPos1 )
// {
	//判断一下如果EICT_KungfuBag满了就不要丢进去了
	//看看是否点击到功法装备
// 	f_item* pItem = PackageManager::getInstance()->getItem(EICT_KungfuTemp, nPos1);
// 	if(pItem)
// 	{
// 		//不管怎样都将tips打开 //add by XSea 2014.10.
//  		GongfaTip::getInstace()->open();
// 		CCPoint itemPos = m_pItemMarixLayer->convertToWorldSpace(m_pItemMarixLayer->GetItemNode(nPos1)->getPosition());
//  		GongfaTip::getInstace()->setPosition(itemPos);
//  		GongfaTip::getInstace()->setData((f_equipment*)pItem);
// 	}
//}

void CangJingGeUiLayer::onCloseBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_5);
	CLOSE_UI(WCT_CangJingGeUi);
}

/*
void CangJingGeUiLayer::onClose1BtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)//玩法说明关闭
{
//	m_desNode->setVisible(false);
//	m_pItemMarixLayer->setItemNodeTouchEnable(true);
}
*/
void CangJingGeUiLayer::onGotowuxueBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	OPEN_UI(WCT_WUXUEUI);
	CLOSE_UI(WCT_CangJingGeUi);
}
void CangJingGeUiLayer::onWuXueListBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	//m_desNode->setVisible(true);
	//m_pItemMarixLayer->setItemNodeTouchEnable(false);
// 	FMBPlacardUi::getInstance()->open();
// 	FMBPlacardUi::getInstance()->LoadText(STRING_TABLE["mohun_help_text"]);
	//GongFaHelp * help=GongFaHelp::openUi();
	//help->setData(STRING_TABLE["mohun_help_text"]);

	PlacardManager::getInstance()->open_placard_node(18);
}
void CangJingGeUiLayer::onWuXueListCloseBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	mainListNode->setVisible(false);
	m_pItemMarixLayer->setItemNodeTouchEnable(true);
}
void CangJingGeUiLayer::onExpShengliPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	LocalPlayer* player= RoleManager::getInstance()->getLocalPlayer();
	int vipLevel = player->getLocVIPLevel();
	if (vipLevel < 12)
	{
		//ToolTip::getInstance()->push("\xE9\x9C\x80\xE8\xA6\x81\x56\x49\x50\x31\x32\xE6\x89\x8D\xE8\x83\xBD\xE5\xBC\x80\xE5\x90\xAF\xE6\xAD\xA4\xE5\x8A\x9F\xE8\x83\xBD");	//vip12可以开启经验舍利功能
		RechargeNewUiMgr::GetInstance()->setCurrentRechargeState(12);
		RechargeNewUiMgr::GetInstance()->openRechargeNewUi();
		return ;
	}
	if(m_bIsNeedSE)
		m_bIsNeedSE = false;
	if(m_bIsMultiple)
		m_bIsMultiple = false;
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_15);
	GambleMgr::getInstance()->Kungfu_Gamble(GAMBLE_KUNGFU_SHELI);
}
void CangJingGeUiLayer::onshiquBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	if(PackageManager::getInstance()->hasLockItem(EICT_KungfuTemp))
	{
		//[bing] 在融合
		return;
	}

	int nLessNum = PackageManager::getInstance()->getBlankCount(EICT_KungfuBag);
	nLessNum = nLessNum > MAX_KUNFFU_TEMP_NUM ? MAX_KUNFFU_TEMP_NUM : nLessNum;

	int nGonfaItemNum=PackageManager::getInstance()->getItemMap(EICT_KungfuTemp)->size();
	if(nGonfaItemNum<=0)
	{
		ToolTip::getInstance()->push(STRING_TABLE["gongfa_string12"]);
		return;
	}

	if(nLessNum <= 0)
	{
		//[bing] 功法背包已满
		ToolTip::getInstance()->push(STRING_TABLE["gongfa_string19"]);
		return;
	}

	_shiquMap.clear();
	int nSaveJ = 0;
	for(int i = 0; i < MAX_KUNFFU_TEMP_NUM; ++i)
	{
		if(nLessNum <= 0)
			break;

		if(PackageManager::getInstance()->getItem(EICT_KungfuTemp, (short)i) == NULL)
		{
			continue;
		}

		for(int j = nSaveJ; j < MAX_KUNGFU_BAG_NUM; ++j)
		{
			if(PackageManager::getInstance()->getItem(EICT_KungfuBag, (short)j) == NULL)
			{
				PackageManager::getInstance()->getItem(EICT_KungfuTemp, (short)i)->lock();
				m_pItemMarixLayer->GetItemNode(i)->setLock(true);//add by vvv 2014.11.22
//				PackageManager::getInstance()->changeItemPosition(EICT_KungfuTemp, EICT_KungfuBag, i, j, 0);
				_shiquMap[i] = j;
				nSaveJ = j + 1;
				nLessNum--;
//				++m_nAnimCount;
//				if(!m_bAnim)
//					m_bAnim = true;
				break;
			}
		}
	}
	/*
	CCPoint itemDes = ccp(CCDirector::sharedDirector()->getWinSize().width, CCDirector::sharedDirector()->getWinSize().height / 8.0f);
	for(std::map<short, short>::iterator tmIter = _shiquMap.begin(); tmIter != _shiquMap.end(); ++tmIter)
	{
		this->showMoveAnim(tmIter->first);
	}
	*/
	getGongfaToWuxue();
}

void CangJingGeUiLayer::onybhqBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if(m_bIsNeedSE)
		m_bIsNeedSE = false;
	if(m_bIsMultiple)
		m_bIsMultiple = false;
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_15);
	GambleMgr::getInstance()->Kungfu_Gamble(GAMBLE_KUNGFU_YBLQ);
}

void CangJingGeUiLayer::onyjhqBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if(m_bIsNeedSE)
		m_bIsNeedSE = false;
	if(m_bIsMultiple)
		m_bIsMultiple = false;
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_15);
	GambleMgr::getInstance()->Kungfu_Gamble(GAMBLE_KUNGFU_ONEKEY);
}

void CangJingGeUiLayer::onjbhqBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if(m_bIsNeedSE)
		m_bIsNeedSE = false;
	if(m_bIsMultiple)
		m_bIsMultiple = false;
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_15);
	GambleMgr::getInstance()->Kungfu_Gamble(GAMBLE_KUNGFU_GOLD);
}

void CangJingGeUiLayer::onijrhBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if(m_bIsNeedSE)
		m_bIsNeedSE = false;
	if(m_bIsMultiple)
		m_bIsMultiple = false;
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_11);
	if(PackageManager::getInstance()->hasLockItem(EICT_KungfuTemp))
	{
		//[bing] 已经在融合中不能再次融合
		return;
	}

	PackageManager::getInstance()->lockItem(EICT_KungfuTemp);//功法临时背包

	//少于2个不可融合
	if (PackageManager::getInstance()->getItemMap(EICT_KungfuTemp)->size() <= 1)
	{
		PackageManager::getInstance()->unLockItem(EICT_KungfuTemp);//背包解锁
		//功法数量少于2个，无法一键融合
		ToolTip::getInstance()->push(STRING_TABLE["gongfa_string7"]);
		return;
	}

	_nState = 2;
	WorldPacket C2GMsg(NET_C2G_PROC_KUNGFU_ONE_KEY_FUSION);
	C2GMsg << (int)2;
/*	TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2GMsg.contents(), NP_IDLE, false);*/
	if (PackageManager::getInstance()->isHavePurpleSwalllowInKungfuBag(EICT_KungfuTemp))
	{
		std::function<void(bool)> func = [C2GMsg](bool isSuccess){
			if (isSuccess)
			{
				TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2GMsg.contents(), NP_IDLE, false);
			}
			else
			{
				PackageManager::getInstance()->unLockItem(EICT_KungfuTemp);//背包解锁
			}
		};
		SecondVerifyMgr::getInstance()->try_request_safe_verify(func);
	}
	else
	{
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2GMsg.contents(), NP_IDLE, false);
	}
	
}




void CangJingGeUiLayer::displaySuperEffect(short idx, eVisualPattern seLevel)
{
	ItemNode* node = m_pItemMarixLayer->GetItemNode(idx);
	if (node)
	{
		m_pItemMarixLayer->GetItemNode(idx)->showGongfaSE(seLevel);
	}
}


void CangJingGeUiLayer::showLevelUpEffect(short idx, string effect)
{
	ItemNode* node = m_pItemMarixLayer->GetItemNode(idx);
	if (node)
	{
		m_pItemMarixLayer->GetItemNode(idx)->showGongfaSE(effect);
	}
}



void CangJingGeUiLayer::displaySuperEffect( short idx, string effect )
{
	ItemNode* node = m_pItemMarixLayer->GetItemNode(idx);
	if (node)
	{
		m_pItemMarixLayer->GetItemNode(idx)->showGongfaSE(effect);
	}
}

void CangJingGeUiLayer::getGongfaToWuxue()
{
	_nState = 1;
	m_bIsMultiple = true;
	for (std::map<short, short>::iterator tmIter = _shiquMap.begin(); tmIter != _shiquMap.end(); ++tmIter)
	{
		PackageManager::getInstance()->changeItemPosition(EICT_KungfuTemp, EICT_KungfuBag, tmIter->first, tmIter->second, 0);
	}
}

void CangJingGeUiLayer::setGongfaSESwith( bool isNeedSE )
{
	if(isNeedSE)
	{
		if(m_bIsMultiple)
			m_bIsMultiple = false;
	}
	m_bIsNeedSE = isNeedSE;
}

void CangJingGeUiLayer::showMoveAnim( short idx )
{
	CCPoint tarPt = ccp(0.f, 0.f);
	CCPoint desPt = _seNode->getPosition();
	ItemNode* moveNode = m_pItemMarixLayer->GetItemNode(idx);
//	ItemNode* newItemNode = ItemNode::create();

	_seNodePt = moveNode->getPosition();
	//newItemNode->setPosition(_seNodePt);
	m_SEItemIdx = moveNode->getTag();
	tarPt = (m_pItemMarixLayer->getItemContent())->convertToWorldSpace(_seNodePt);
	_seNodePt = m_MainFrame->convertToNodeSpace(tarPt);
	moveNode->retain();
	moveNode->removeFromParent();
	
	moveNode->setPosition(_seNodePt);
	m_MainFrame->addChild(moveNode);
	moveNode->release();
	CCMoveTo* nodeMov = CCMoveTo::create(0.3f, desPt);
	//CCCallFuncN* cal = CCCallFuncN::create(this , callfuncN_selector(CangJingGeUiLayer::onSECalback));
	CCFiniteTimeAction* seq = CCSequence::create(nodeMov, CCRemoveSelf::create(), NULL);
	moveNode->runAction(seq);
//	moveNode->runMoveAction(moveNode->getPosition(), _toWuxueBtn->getPosition(), 1, false);
	//m_pItemMarixLayer->insteadChildNode(newItemNode);
	//newItemNode->setTag(m_SEItemIdx);
	//newItemNode->VisibleBlock(false);
	if(m_bIsNeedSE)
		m_bIsNeedSE = false;
//	this->updateGongFaTemp();
}

// void CangJingGeUiLayer::onSECalback( CCNode* pSender )
// {
// 	pSender->removeFromParent();
// 	//CC_SAFE_RELEASE(pSender);
// }

void CangJingGeUiLayer::updateDisplay()
{
	if (_verticalList->getItemCount() > 0)
		return;
	_verticalList->clear();
	const std::vector<CangJingGeListItemData>& datas = CangJingGeListItemDataMgr::getInstance()->getData();
	for(std::vector<CangJingGeListItemData>::const_iterator iter = datas.begin(); iter != datas.end(); ++ iter)
	{
		const CangJingGeListItemData &data = *iter;
		CangJingGeListItem *item=new CangJingGeListItem(); 
		item->setData(data);
		_verticalList->addItem(item);
	}
	_verticalList->updateDisplay();
}

void CangJingGeUiLayer::updateMoney()
{
	PackageManager *manager = PackageManager::getInstance();
	if(m_yuanBao)
	{
		INT64 num = manager->getYuanBao();
		std::ostringstream ostr;
		ostr << num;
		m_yuanBao->setString(ostr.str());
	}
	if(m_zuanShi)
	{
		INT64 num = manager->getDiamond();
		std::ostringstream ostr;
		ostr << num;
		m_zuanShi->setString(ostr.str());
	}	
	if(m_jinBi)
		m_jinBi->setString(getMoneyStr(manager->getJinBi()));

}

std::string CangJingGeUiLayer::getMoneyStr( INT64 num )
{
	 	std::ostringstream ostr;
	 	if(num >= 100000)
	 	{
	 		ostr << num / 10000 << GET_STR(9033).c_str();
	 	}
	 	else
	 	{
	 		ostr << num;
	 	}
		return ostr.str();
}

void CangJingGeUiLayer::updateBless(int curValue)
{
	int maxProess=NumericalIniMgr::getInstance()->gongfa_benison_max;
	if(m_blessGoEffect)
	{
		m_blessGoEffect->setPosition(ccp(m_blessProgress->getContentSize().width*(float)curValue/maxProess-20.0,m_blessGoEffect->getPositionY()));
	}
	if(curValue>=maxProess)
	{
		m_blessDoneEffect->setVisible(true);
	}
	else
	{
		m_blessDoneEffect->setVisible(false);
	}
	float precent=curValue*100.0/maxProess;
	m_blessProgress->setPercentage(precent);
	stringstream ss;
	ss<<curValue<<"/"<<maxProess;
	m_blessLabel->setString(ss.str());
}

void CangJingGeUiLayer::updateYuanBaoCost(mohun_update_yuanbao_cost* trans)
{
	int costYuanBao;
	if ( (trans->times+1) > (GambleMgr::getInstance()->getMapSize()-1) )
	{
		costYuanBao = GambleMgr::getInstance()->getYuanBaoCost(0);
	}
	else
	{
		costYuanBao = GambleMgr::getInstance()->getYuanBaoCost(trans->times+1);
	} 
	std::string costStr;
	safe_sprintf(costStr,"%d",costYuanBao);
	m_yuanbaofengmo->setString(costStr.c_str());
}

void CangJingGeUiLayer::onWuXueList1BtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	updateDisplay();
	mainListNode->setVisible(true);
	m_pItemMarixLayer->setItemNodeTouchEnable(false);
}








// void CangJingGeUiLayer::setSELocation( short posIdx )
// {
// 	_SELocation = m_MainFrame->convertToNodeSpace(m_pItemMarixLayer->GetItemNode(posIdx)->getPosition());
// 	_SELocation = m_pItemMarixLayer->GetItemNode(posIdx)->getPosition();
// }

CangJingGeListItem::CangJingGeListItem()
{
	//CCPoint pos = ccp(0,0);
	for(int i = NT_Name; i <= NT_FUHAO; i ++)
	{
		LabelFT * label=Helper::createLabelFT(16,1); 
// 		CCLabelTTF *label = CCLabelTTF::create();
// 		label->setFontSize(16);
		label->setAnchorPoint(ccp(0.0f, 1.0f));
		label->setTag(i);
		_node->addChild(label);
	}
	CCSprite *sprite=CCSprite::create();
	CCSpriteFrame* frame=CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("cangjinggeui_line");
	if (frame!=NULL)
	{
		sprite->setDisplayFrame(frame);
		sprite->setAnchorPoint(ccp(0.0f, 1.0f));
		sprite->setPosition(ccp(0,-18.0f));
	}
	_node->addChild(sprite);
}

CangJingGeListItem::~CangJingGeListItem()
{

}
LabelFT * CangJingGeListItem::getLabel( eCangJingListItemTag tag )
{
	return dynamic_cast<LabelFT*>(_node->getChildByTag(tag));
}

void CangJingGeListItem::onTouch( CCTouch *touck )
{

}

void CangJingGeListItem::setData( const CangJingGeListItemData &data )
{
	_data = data;
	getLabel(NT_Name)->setString(_data.name.c_str());
	getLabel(NT_Att)->setString(CCString::createWithFormat("%s",_data.att.c_str())->getCString());
	getLabel(NT_Att)->setColor(ccc3(0x92, 0xd0, 0x50));
	if (_data.attNum!=0)
	{
		getLabel(NT_AttNum)->setString(CCString::createWithFormat("%d", _data.attNum)->getCString());
		getLabel(NT_AttNum)->setColor(ccc3(0xff, 0xb7, 0x00));
		getLabel(NT_Att2)->setString(CCString::createWithFormat("%s%s","\xEF\xBC\x8C",_data.att2.c_str())->getCString());
		getLabel(NT_Att2)->setColor(ccc3(0x92, 0xd0, 0x50));
	}
	if (_data.att2Num!=0)
	{
		getLabel(NT_Att2Num)->setString(CCString::createWithFormat("%d",_data.att2Num)->getCString());
		getLabel(NT_Att2Num)->setColor(ccc3(0xff, 0xb7, 0x00));
		getLabel(NT_FUHAO)->setString(CCString::createWithFormat("%s","\xE3\x80\x82")->getCString());
		getLabel(NT_FUHAO)->setColor(ccc3(0x92, 0xd0, 0x50));
	}
	int nQuality =_data.quality;
	ccColor3B color;
//	{ccc3(0xfe,0xf8,0xd8),ccc3(0x3f,0xd4,0x16),ccc3(0x1d,0xad,0xe7),ccc3(0x91,0x13,0xbc),
//		ccc3(0xe0,0x78,0x09),ccc3(0xe1,0xe4,0x00)};
	switch(nQuality){
	case 0:
		color = ccc3(0xfe,0xf8,0xd8);
		break;
	case 1:
		color = ccc3(0x3f,0xd4,0x16);
		break;
	case 2:
		color =ccc3(0x1d,0xad,0xe7);
		break;
	case 3:
		color = ccc3(0x91,0x13,0xbc);
		break;
	case 4:
		color = ccc3(0xe0,0x78,0x09);
		break;
	case 5:
		color = ccc3(0xe1,0xe4,0x00);
		break;
	default:
		color = ccc3(0xff, 0xff, 0xff); 
		break;
	}
	getLabel(NT_Name)->setColor(color);
	CCPoint pos = ccp(0,0);
	for(int i = NT_Name; i <= NT_FUHAO; i ++)
	{
		CCNode *label = _node->getChildByTag(i);
		if (i==NT_Att)
		{
			label->setPosition(ccp(100,0));
		}
		else
		{
			label->setPosition(pos);
		}
		pos.x = label->getPosition().x + label->getContentSize().width;
	}
}

CangJingGeListItemDataMgr::CangJingGeListItemDataMgr()
{
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM gongfazhanshiData");
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	CangJingGeListItemData dad;
	//int index = 0;
	while(table->retrieve_row())
	{
		unsigned int idx = table->get_index("id");
		//int name = table->get_integer32(idx);
		idx = table->get_index("name");
		dad.name = table->get_text(idx);
		idx = table->get_index("desc");
		dad.att = table->get_text(idx);
		idx = table->get_index("min");
		dad.attNum = table->get_integer32(idx);
		idx = table->get_index("desc1");
		dad.att2 = table->get_text(idx);
		idx = table->get_index("max");
		dad.att2Num = table->get_integer32(idx);
		idx = table->get_index("quality");
		dad.quality = table->get_integer32(idx);
		_allData.push_back(dad);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
}

CangJingGeListItemDataMgr::~CangJingGeListItemDataMgr()
{

}

CangJingGeListItemDataMgr* CangJingGeListItemDataMgr::getInstance()
{
	static CangJingGeListItemDataMgr mgr;
	return &mgr; 
}

const std::vector<CangJingGeListItemData>& CangJingGeListItemDataMgr::getData()
{
	return _allData;
}

float CangJingGeListItem::getItemHeight() 
{
	return getContentSize().height+28;
}
