#ifndef ROLEHEADUI_H
#define ROLEHEADUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"
#include "TouchSprite.h"
#include "ProgressBar.h"
#include "CDButton.h"
#include "GameActionNode.h"
#include "AnimationCache.h"
#include "ConcernMgr.h"

using namespace cocos2d;
using namespace cocos2d::extension;

struct s_net_cmd;
class RoleHeadUiLoaderLayer;
class CDButton;
struct wear_change_event;

const float wear_effect_show_time = 2 * 60;

enum eBattleMode
{
	BM_NULL = 3,
	BM_LineBtn = 5,			//线路按钮
	BM_RechargeBtn = 30, //充值按钮;
	BM_FightNumSP = 31,				//战斗力字体			31
	BM_FightNumSE = 32,				//战斗力特效			32
	BM_FightPromote = 40,		//战力提升按钮
	BM_LineLabel = 44,			//线路文字
	BM_XiaomiBtn = 46,         //小蜜按钮
	BM_CelebrateBg = 100,
	BM_CelebrateLabel = 101,
	BM_CelebrateBtn = 102,
	BM_ConcernSprite = 103,
	BM_ConcernBtn = 104,
	BM_SkyStoneSprite = 105,
	BM_GroundStoneSprite = 106,
	BM_RoleStoneSprite = 107,
	BM_WearCueBtn = 140,
};
class RoleHeadUi 
 	: public CCLayer
{
public:

	RoleHeadUi();
	~RoleHeadUi();
	CREATE_FUNC(RoleHeadUi);
	bool init();
	void setLevel(int level);
	void LoadEffectHead();
	void RunHeadEffect();
	void setRoleName(const char *name);
	void setRoleName(const wchar_t *name);
	void setHead();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	//void setPetHead(CCSpriteFrame *frame);
	//void setHp(float hp);
	//void setMp(float mp);
	void setExp(float exp);
	//void setPetHp(float petHp);
	void runPerpaidEffect(int times = 5);
	eBattleMode getCurrentBattleMode();
	void setZhandouli(int v);

	//new player guide
	CCRect getRoleHeadGuidePos();
	CCRect getRechargeBtnPos();
	void update(float delta);

	void ZhanDouLiUpdate(float fdt);
	void setKilledTypeId(int id) { m_nTypeId = id;}
	int getKilledTypeId() { return m_nTypeId;}
	void setShowFightPromote(bool isshow);
public:
	void onHpChanged(int hp , int mhp);
	void onMpChanged(int mp , int mmp);
	RoleHeadUiLoaderLayer * GetRoleUI(){return m_pLayer;}
	void onRoleHeadPressed(TouchSprite *touchSprite, bool touched);
	void onVIPPressed(TouchSprite *TouchSprite, bool touched);
	unsigned int onServerBattleModeChanged(s_net_cmd* cmd);
	void updateVIPIcon(bool isShow = false);
	unsigned int getVIPId(int level);
	
	/*
	void setBuffhpCD(float duration, float max);
	void setBuffmpCD(float duration, float max);
	void setBuffexpCD(float duration, float max);
	void setBufffangCD(float duration, float max);
	void setBuffXuanYunCD( float duration, float max );
	void setBuffGongCD(float duration,float max);
	*/


	void setBuffCD(unsigned int buffId, float curTime, float maxTime,int overlap=9);
	void set_buff_overlap(unsigned int buff_id,int overlap);

	void runRechargeAnimation();
	void stopRechargeAnimation();
	void setHideFightPromote(float fdt);
	void updateBattleMode();
	void SetShowShoe(bool show);
	void setShoeEnabled(bool value);
	void showConcern(int type);
	void updateConcern(int type);
	void SysMsgSetCelebrateShow(bool isShow);
	void showCelebrate(bool isShow);
	void showCelebrate( HearSayChannel* data ,std::string name);
	void showZumaStoneState(int state);
	void updateZumaStoneState();
	void setShowLine(short index);
	void setBtnHighLight();
	void revokeBtnHighLight();
	void setXiaomiShow(bool isShow);

	void initBuffBtn();
	inline void reset_wear_effect_time(){m_wear_effect_time = wear_effect_show_time;}
SIGNALS:
	//c_signal<void> signalHeadPressed;
/*	c_signal<void> signalVIPPressed;*/
	c_signal<void, int> signalBattleModeChanged;

	virtual void onExit();

	void setPlist(std::set<std::string> const& list){sheetPlist = list;}

private:
	void update_wear_effect_time(float delta);
	void setBuffBtnCD(CDButton * btn,float duration,float max,int overlap);

private:
	RoleHeadUiLoaderLayer* m_pLayer;

	typedef map<unsigned int,CDButton *> CDBtnMap ;
	typedef map<unsigned int, string> BuffEffectPic;
	CDBtnMap m_buffBtns;
	//BuffEffectPic m_buff_effect_name;
	vector<CDButton *> m_visibleCDBtns;

	CCSprite *_buffframe;  //24

	CCSprite *_vipFrame;
	LabelFT *_level;  //3
	LabelFT *_name; //4
	TouchSprite *_head;  //1
	TouchSprite *_headNew;  //1;  //1
	TouchSprite *_vip; //15
	CCSprite *_hp;  //7
	CCSprite *_mp;  //8
	CCSprite *_exp; //12
	CCSprite *_FramProgress; //210
	CCControlButton* _battleMode;
	//CCSprite *_petHead;  //10
	//CCSprite *_petHp; //9
	CCNode *_prepaidBtn;
	ProgressBar *_hpProgress;
	ProgressBar *_mpProgress;
	ProgressBar *_expProgress;
//	CCLabelTTF *_zhandouli;
	CCLabelBMFont* _zhandouli;
	//CCLabelTTF *_detailMode[BM_NULL];
	CCControlButton *_rechargeBtn; 
	CCSprite *_rechargeEffect;
	CCSprite *_backGroundSprite;

	std::list<unsigned char> m_BattleValueList;
	bool m_bIsAdd;
	int m_nNowBattleValue;
	int m_nSaveBattleValue;
	int m_nLessNum;
	int m_nTypeId;
	CCControlButton* pFPNode;
	CCSprite *m_SpriteEffectOne;
	CCSprite *m_SpriteEffectTwo;
	std::set<std::string>  sheetPlist;


	CCLayer *frame;
	CCControlButton* _xiaomiBtn;//46
	CCPoint m_orignalPos;
	float m_wear_effect_time;
	//AnimationCache::AnimateList m_anims;
	//AnimationCache::AnimateList m_anims1;
};

class RoleHeadUiLoaderLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(RoleHeadUiLoaderLayer, create);
	RoleHeadUiLoaderLayer():_ShoeBtn(NULL),_shoeText(NULL),_tempx(0) ,_tempy(0),_mapid(""),_npcid(-1),_stateLine(NULL),m_wear_cue(NULL),m_wear_cue_point(ccp(0,0)){};
	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();

	void guildModePressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent );
	void prepaidPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void rechargeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onFightPressedBtn(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onHudonghePressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onHudonghaoyouPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onxiaofeixiePressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onXianLuPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onXiaomiPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onWearCue(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void SetShowShoe(bool show);
	void updateBattleMode();

	void showConcernCallBack();
	void showConcern(int type);
	void ConfirmOneKeyTransmit();
	void updateConcern(int type);
	void runMsg(const std::string &msg);
	void createMSG(std::list<std::string> msgListData ,std::list<std::string> msgListColor);
	ccColor3B getChangeColor(std::string str);
	void SysMsgSetCelebrateShow(bool isShow);
	void showCelebrate(bool isShow);
	void showCelebrate(HearSayChannel* data,std::string name);
	void showRoleLevelUp( HearSayChannel* data ,std::string name);
	void showEquipStrength( HearSayChannel* data ,std::string name);
	void showGongfaLevelUp( HearSayChannel* data ,std::string name);
	void showEquipUpGread( HearSayChannel* data ,std::string name);
	void showRideUpGread( HearSayChannel* data ,std::string name);
	void showRechargeReward( HearSayChannel* data ,std::string name);
	void showAddYuanbao( HearSayChannel* data ,std::string name);
	void showEquipFusion( HearSayChannel* data ,std::string name);
	void showZumaStoneState(int state);
	void updateZumaStoneState();
	void setShowLine(short index);
	void gotoMoney();
	void gotoStoreUi();

	std::string GetMapidStr(){return _mapid;}
	float GetQuestPosx() {return static_cast<float>(_tempx);}
	float GetQuestPosy() {return static_cast<float>(_tempy);}

	int GetNpcId(){return _npcid;}
	void  SetNpcId(int npcid) {_npcid = npcid;}

	void SetMapidStr(std::string str){ _mapid = str;}
	void SetQuestPosx(int x) {_tempx = x;}
	void SetQuestPosy(int y) {_tempy = y;}
	void setShoeEnabled(bool value);
	void setFllowerBtn(bool isShow);
	void hide_wear_effect();
private:
	GameActionNode* getFightSuperEffect();					//创建一个战斗力特效
	void SendGoto_Quest_Pos_Msg();
	void wear_change(wear_change_event* event);
	void play_ware_effect();
	void play_ware_end();
	void create_wear_button();

private:
	GameActionNode* _fightNumAcNode;				//战斗力特效
	std::set<std::string> _plist;				//保存特效名称
	CCSprite *battleModeBackSprite; //战斗模式地图
	CCControlButton* _ShoeBtn; //小飞鞋按钮
	CCLabelTTF * _shoeText;

	CCSprite* m_pCelebrateBg;
	CCLabelTTF* m_pCelebrateLabel;
	CCControlButton* m_pCelebrateBtn;
	CCSprite* m_pHongBaoSpr;
	AnimationCache::AnimateList _anims;

	CCSprite* m_pConcernSprite;
	CCControlButton* m_pConcernBtn;
	CCControlButton* m_wear_cue;
	ConcernData m_pConcernData;
	CCPoint m_pConcernSpritePt;
	CCPoint m_wear_cue_point;
	int m_pConcernType;
	bool m_pIsRunning;
	bool m_pCelebrateCanShow;
	bool m_pCelebrateIsShow;
	std::list<LabelFT*> m_pLaberList;
	HearSayCelebrateData m_pCelebrateData;

	CCSprite* m_pSkyStone;
	CCSprite* m_pGroundStone;
	CCSprite* m_pRoleStone;



	LabelFT* m_pLineLabel;
	CCControlButton* m_pLineBtn;

	CCLabelTTF* _stateLine;

	int _tempx , _tempy,_npcid;
	std::string _mapid;
	std::string lineStr;//线路字符串
};

class RoleHeadUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(RoleHeadUiLoader, loader);

protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(RoleHeadUiLoaderLayer);
};


#endif //ROLEHEADUI_H