#include "TransmitMgr.h"
#include "DBMgr.h"
#include "World.h"
#include "QuestProto.h"
#include "TCPClient.h"
#include "NPCTalkUi.h"
#include "UiManager.h"
#include "PackageManager.h"
#include "InstanceProto.h"
#include "StringMgr.h"
#include "ToolTip.h"
#include "MessageBoxUi.h"
#include "RoleManager.h"
#include "LocalPlayer.h"
#include "ExchangeBusinessMgr.h"
#include "FileInputStream.h"
#include "CCLuaEngine.h"
#include "InstanceMgr.h"
#include "ActivityMgr.h"
#include "CommonDefine.h"
#include "Movie.h"
#include "NPCChatMgr.h"
#include "FMBManager.h"
#include "BloodFightMgr.h"
#include "f_string_table.h"
#include "f_zhuzai_mgr.h"
#include "GuildMgr.h"
#include "f_string_util.h"
#include "QuestMgr.h"
#include "SBKSDManager.h"
#include "GuildBossManager.h"

void newteleport(unsigned int dwID, const char* crcstr, const char* name,unsigned int FubenID)
{
	TransmitMgr::getInstance()->InsertTeleport(dwID, crcstr, name, FubenID );
}

//////////////////////////////////////////////////////////////////////////
//!这一部分是数据部分
TransmitMgr::TransmitMgr()
{

	/*
	//!老兵1
	std::vector<s_map_desc> page1;
	s_map_desc md1;
	md1.crcstr = "m1";
	md1.name = "\xE9\x93\xB6\xE6\x9D\x8F\xE6\x9D\x91";
	page1.push_back(md1);
	md1.crcstr = "m5";
	md1.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page1.push_back(md1);
	md1.crcstr = "m18";
	md1.name = "\xE9\x93\xB6\xE6\x9C\x88\xE5\xB2\x9B";
	page1.push_back(md1);
	md1.crcstr = "m11";
	md1.name = "\xE7\x99\xBD\xE6\x97\xA5\xE9\x81\x93\xE8\xA7\x82";
	page1.push_back(md1);
	md1.crcstr = "m15";
	md1.name = "\xE5\xB0\x81\xE9\xAD\x82\xE8\xB0\xB7";
	page1.push_back(md1);
	md1.crcstr = "m16";
	md1.name = "\xE9\xAD\x94\xE9\xBE\x99\xE5\x9F\x8E\xE5\xAF\xA8";
	page1.push_back(md1);
	_trMap[1002011] = page1;
	//!老兵2
	std::vector<s_map_desc> page2;
	s_map_desc md2;
	md2.crcstr = "d118";
	md2.name = "\xE7\x9F\xBF\xE6\xB4\x9E";
	page2.push_back(md2);
	md2.crcstr = "m3";
	md2.name = "\xE7\x8E\x8B\xE5\x9F\x8E";
	page2.push_back(md2);
	md2.crcstr = "m18";
	md2.name = "\xE9\x93\xB6\xE6\x9C\x88\xE5\xB2\x9B";
	page2.push_back(md2);
	md2.crcstr = "m11";
	md2.name = "\xE7\x99\xBD\xE6\x97\xA5\xE9\x81\x93\xE8\xA7\x82";
	page2.push_back(md2);
	md2.crcstr = "m15";
	md2.name = "\xE5\xB0\x81\xE9\xAD\x82\xE8\xB0\xB7";
	page2.push_back(md2);
	md2.crcstr = "m16";
	md2.name = "\xE9\xAD\x94\xE9\xBE\x99\xE5\x9F\x8E\xE5\xAF\xA8";
	page2.push_back(md2);
	_trMap[1003014] = page2;
	//!老兵3
	std::vector<s_map_desc> page3;
	s_map_desc md3;
	md3.crcstr = "m5";
	md3.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page3.push_back(md3);
	md3.crcstr = "m3";
	md3.name = "\xE7\x8E\x8B\xE5\x9F\x8E";
	page3.push_back(md3);
	md3.crcstr = "m11";
	md3.name = "\xE7\x99\xBD\xE6\x97\xA5\xE9\x81\x93\xE8\xA7\x82";
	page3.push_back(md3);
	_trMap[1019006] = page3;
	//!老兵4
	std::vector<s_map_desc> page4;
	s_map_desc md4;
	md4.crcstr = "m5";
	md4.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page4.push_back(md4);
	md4.crcstr = "m3";
	md4.name = "\xE7\x8E\x8B\xE5\x9F\x8E";
	page4.push_back(md4);
	md4.crcstr = "m11";
	md4.name = "\xE7\x99\xBD\xE6\x97\xA5\xE9\x81\x93\xE8\xA7\x82";
	page4.push_back(md4);
	_trMap[1016001] = page4;
	//!老兵5
	std::vector<s_map_desc> page5;
	s_map_desc md5;
	md5.crcstr = "m5";
	md5.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page5.push_back(md5);
	_trMap[1118001] = page5;
	//!老兵6
	std::vector<s_map_desc> page6;
	s_map_desc md6;
	md6.crcstr = "d102";
	md6.name = "\xE9\xAA\xB7\xE9\xAB\x85\xE6\xB4\x9E\xEF\xBC\x88\x33\x30\x2D\x34\x30\xE7\xBA\xA7\xEF\xBC\x89";
	page6.push_back(md6);
	md6.crcstr = "d105";
	md6.name = "\xE5\x8F\xA4\xE4\xBB\xA3\xE7\x9F\xB3\xE5\xA2\x93\xE4\xB8\x80\xE5\xB1\x82\xEF\xBC\x88\x34\x30\x2D\x35\x30\xE7\xBA\xA7\xEF\xBC\x89";
	page6.push_back(md6);
	md6.crcstr = "d111";
	md6.name = "\xE5\xB9\xBD\xE5\x86\xA5\xE5\xBA\x9C\xE4\xB8\x80\xE5\xB1\x82\xEF\xBC\x88\x35\x30\x2D\x36\x30\xE7\xBA\xA7\xEF\xBC\x89";
	page6.push_back(md6);
	md6.crcstr = "d113";
	md6.name = "\xE5\x85\x88\xE7\xA5\x96\xE7\xA5\x9E\xE6\xAE\xBF\xEF\xBC\x88\x36\x30\x2D\x36\x35\xE7\xBA\xA7\xEF\xBC\x89";
	page6.push_back(md6);
	md6.crcstr = "d114";
	md6.name = "\xE5\x83\xB5\xE5\xB0\xB8\xE6\xB4\x9E\xEF\xBC\x88\x36\x35\x2D\x37\x30\xE7\xBA\xA7\xEF\xBC\x89";
	page6.push_back(md6);
	md6.crcstr = "d116";
	md6.name = "\xE9\xAD\x94\xE9\xBE\x99\xE9\xA2\x86\xE5\x9F\x9F\xEF\xBC\x88\x37\x30\x2D\x38\x30\xE7\xBA\xA7\xEF\xBC\x89";
	page6.push_back(md6);
	_trMap[1003018] = page6;
	//!老兵7
	std::vector<s_map_desc> page7;
	s_map_desc md7;
	md7.crcstr = "m5";
	md7.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page7.push_back(md7);
	_trMap[1800003] = page7;
	//!老兵8
	std::vector<s_map_desc> page8;
	s_map_desc md8;
	md8.crcstr = "m5";
	md8.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page8.push_back(md8);
	_trMap[1800003] = page8;
	//!老兵9
	std::vector<s_map_desc> page9;
	s_map_desc md9;
	md9.crcstr = "d103";
	md9.name = "\xE6\xB2\x99\xE5\x9F\x8E\xE5\xAF\x86\xE9\x81\x93";
	page9.push_back(md9);
	md9.crcstr = "m9";
	md9.name = "\xE6\xB2\x99\xE5\x9F\x8E";
	page9.push_back(md9);
	md9.crcstr = "d110";
	md9.name = "\xE5\x9C\xB0\xE5\xAE\xAB\xE7\xA5\x9E\xE6\xAE\xBF\x28\xE5\x9C\xB0\xE4\xB8\x8B\xE5\xA4\xBA\xE5\xAE\x9D\x29\x20";
	page9.push_back(md9);
	md9.crcstr = "d106";
	md9.name = "\xE5\x8F\xA4\xE4\xBB\xA3\xE7\x9F\xB3\xE5\xA2\x93\x32\xE5\xB1\x82\xEF\xBC\x88\xE7\x9F\xB3\xE5\xA2\x93\xE5\xA4\xBA\xE5\xAE\x9D\xEF\xBC\x89";
	page9.push_back(md9);
	//新增竞技场（行会）
	md9.crcstr = "d109";
	md9.name = "\xE7\xAB\x9E\xE6\x8A\x80\xE5\x9C\xBA\x28\xE8\xA1\x8C\xE4\xBC\x9A\x50\x4B\x29";
	page9.push_back(md9);
	_trMap[1003016] = page9;


	//!老兵10
	std::vector<s_map_desc> page10;
	s_map_desc md10;
	md10.crcstr = "m3";
	md10.name = "\xE7\x8E\x8B\xE5\x9F\x8E";
	page10.push_back(md10);
	_trMap[1511001] = page10;
	_trMap[1511003] = page10;
	_trMap[1511004] = page10;
	_trMap[1511005] = page10;
	_trMap[1511006] = page10;
	_trMap[1511007] = page10;
	_trMap[1511008] = page10;
	_trMap[1511009] = page10;

	//!老兵11
	std::vector<s_map_desc> page11;
	s_map_desc md11;
	md11.crcstr = "d120";
	md11.name = "\xE5\xA4\xA7\xE6\xBC\xA0\xE6\xBF\x80\xE6\x88\x98\x28\x4C\x56\x33\x30\x29";
	page11.push_back(md11);

	md11.crcstr = "d121";
	md11.name = "\xE9\x87\x91\xE6\xB2\x99\xE8\xA1\x80\xE6\x88\x98\x28\x4C\x56\x34\x30\x29";
	page11.push_back(md11);

	md11.crcstr = "d122";
	md11.name = "\xE5\xA4\xA7\xE5\x9C\xB0\xE5\xAE\x88\xE6\x8A\xA4\xE8\x80\x85\x28\x4C\x76\x35\x30\x29";
	page11.push_back(md11);

	md11.crcstr = "d123";
	md11.name = "\xE9\xBB\x91\xE6\x9A\x97\xE5\x9B\x9E\xE5\xBB\x8A\x28\x4C\x76\x35\x35\x29";
	page11.push_back(md11);
	_trMap[1003025] = page11;

	//!老兵12
	std::vector<s_map_desc> page12;
	s_map_desc md12;
	md12.crcstr = "d124";
	md12.name = "\xE5\x86\xB0\xE9\x9B\xAA\xE4\xB9\x8B\xE9\xA2\xA0\x28\x4C\x76\x36\x30\x29";
	page12.push_back(md12);

	md12.crcstr = "d125";
	md12.name = "\xE5\x89\xA7\xE6\xAF\x92\xE4\xB9\x8B\xE6\xA3\xAE\x28\x4C\x76\x36\x35\x29";
	page12.push_back(md12);

	md12.crcstr = "d126";
	md12.name = "\xE6\xAD\xBB\xE4\xBA\xA1\xE7\x9F\xBF\xE4\xBA\x95\x28\x4C\x76\x37\x30\x29";
	page12.push_back(md12);

	md12.crcstr = "d127";
	md12.name = "\xE5\xB0\x81\xE5\x8D\xB0\xE4\xB9\x8B\xE5\x9C\xB0\x28\x4C\x76\x37\x35\x29";
	page12.push_back(md12);
	_trMap[1003027] = page12;

	//!老兵13
	std::vector<s_map_desc> page13;
	s_map_desc md13;
	md13.crcstr = "m3";
	md13.name = "\xE7\x8E\x8B\xE5\x9F\x8E";
	page13.push_back(md13);
	_trMap[1511002] = page13;

	//!土城公告牌 
	std::vector<s_map_desc> page14;
	s_map_desc md14;
	md14.crcstr = "d140";
	md14.name = "\xE7\x84\xB0\xE7\x81\xAB\xE5\xB1\xA0\xE9\xAD\x94";
	page14.push_back(md14);
	//藏经阁 gx add 2013
	//md14.crcstr = "d146";
	//md14.name = "\xE8\x97\x8F\xE7\xBB\x8F\xE9\x98\x81";
	//page14.push_back(md14);

	//比武场
	md14.crcstr = "d158";
	md14.name = "\xE6\xAF\x94\xE6\xAD\xA6\xE5\x9C\xBA";
	page14.push_back(md14);

	_trMap[1003008] = page14;


	//!竞技场(行会PK)
	std::vector<s_map_desc> page15;
	s_map_desc md15;
	md15.crcstr = "m5";
	md15.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page15.push_back(md15);
	_trMap[1511010] = page15;

	//!老谭
	std::vector<s_map_desc> page16;
	s_map_desc md16;
	md16.crcstr = "m5";
	md16.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page16.push_back(md16);

	md16.crcstr = "m3";
	md16.name = "\xE7\x8E\x8B\xE5\x9F\x8E";
	page16.push_back(md16);
	_trMap[1001002] = page16;

	//!藏经阁相关
	std::vector<s_map_desc> page17;//二层传送使者
	s_map_desc md17;
	md17.crcstr = "d147";
	md17.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE4\xBA\x8C\xE5\xB1\x82";
	page17.push_back(md17);
	_trMap[1511011] = page17;

	std::vector<s_map_desc> page18;//三层传送使者
	s_map_desc md18;
	md18.crcstr = "d148";
	md18.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE4\xB8\x89\xE5\xB1\x82";
	page18.push_back(md18);
	_trMap[1511012] = page18;

	std::vector<s_map_desc> page19;//四层传送使者
	s_map_desc md19;
	md19.crcstr = "d149";
	md19.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE5\x9B\x9B\xE5\xB1\x82";
	page19.push_back(md19);
	_trMap[1511013] = page19;

	std::vector<s_map_desc> page20;//五层传送使者
	s_map_desc md20;
	md20.crcstr = "d150";
	md20.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE4\xBA\x94\xE5\xB1\x82";
	page20.push_back(md20);
	_trMap[1511014] = page20;

	std::vector<s_map_desc> page21;//六层传送使者
	s_map_desc md21;
	md21.crcstr = "d151";
	md21.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE5\x85\xAD\xE5\xB1\x82";
	page21.push_back(md21);
	_trMap[1511015] = page21;

	std::vector<s_map_desc> page22;//七层传送使者
	s_map_desc md22;
	md22.crcstr = "d152";
	md22.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE4\xB8\x83\xE5\xB1\x82";
	page22.push_back(md22);
	_trMap[1511016] = page22;

	std::vector<s_map_desc> page23;//八层传送使者
	s_map_desc md23;
	md23.crcstr = "d153";
	md23.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE5\x85\xAB\xE5\xB1\x82";
	page23.push_back(md23);
	_trMap[1511017] = page23;

	std::vector<s_map_desc> page24;//九层传送使者
	s_map_desc md24;
	md24.crcstr = "d154";
	md24.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE4\xB9\x9D\xE5\xB1\x82";
	page24.push_back(md24);
	_trMap[1511018] = page24;

	std::vector<s_map_desc> page25;//十层传送使者
	s_map_desc md25;
	md25.crcstr = "d155";
	md25.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE5\x8D\x81\xE5\xB1\x82";
	page25.push_back(md25);
	_trMap[1511019] = page25;

	std::vector<s_map_desc> page26;//十一层传送使者
	s_map_desc md26;
	md26.crcstr = "d156";
	md26.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE5\x8D\x81\xE4\xB8\x80\xE5\xB1\x82";
	page26.push_back(md26);
	_trMap[1511020] = page26;

	std::vector<s_map_desc> page27;//十二层传送使者
	s_map_desc md27;
	md27.crcstr = "d157";
	md27.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE5\x8D\x81\xE4\xBA\x8C\xE5\xB1\x82";
	page27.push_back(md27);
	_trMap[1511021] = page27;

	std::vector<s_map_desc> page28;//离开传送使者
	s_map_desc md28;
	md28.crcstr = "m5";
	md28.name = "\xE5\x9C\x9F\xE5\x9F\x8E";
	page28.push_back(md28);
	_trMap[1511022] = page28;
	//
	//!玉洞活动使者 gx add 2014.2.11
	std::vector<s_map_desc> page29;
	s_map_desc md29;
	md29.crcstr = "d146";
	md29.name = "\xE6\x97\xA0\xE9\x87\x8F\xE7\x8E\x89\xE6\xB4\x9E\xE4\xB8\x80\xE5\xB1\x82 ";
	page29.push_back(md29);
	_trMap[1002030] = page29;
	//
	*/

}

TransmitMgr::~TransmitMgr()
{
	//TCP_CLIENT->unregister_net_cmd("NET_SIS_posthouse" , this , &TransmitMgr::onPostHouse);
}

TransmitMgr* TransmitMgr::getInstance()
{
	static TransmitMgr tmg;
	return &tmg;
}
void TransmitMgr::init()
{
    //等待时间执行
    
    //读取Lua文件
    std::string filename = CFGReader::instance()->get_profile_string("Scheme" , "Script" , "Script/");
    std::stringstream ss;
    ss<<filename<<"npcteleport.lua"<<'\0';
	CCString* buff  = CCString::createWithContentsOfFile(ss.str().c_str(),true);

   // FileInputStream script(ss.str().c_str(),EM_SMALL,true);
    //size_t sz = script.getSize();
    //char* mem = (char*)malloc(sz + 1);
   // script.readBlock(mem , sz);
    //mem[sz]  = 0;
    CCLuaEngine* pEngine = CCLuaEngine::defaultEngine();
    pEngine->executeString(buff->getCString());
    //free(mem);
    
    pEngine->executeGlobalFunction("func_newteleport");

    TCP_CLIENT->register_net_cmd("NET_SIS_posthouse" , this , &TransmitMgr::onPostHouse);
}
void TransmitMgr::destroy()
{
	TCP_CLIENT->unregister_net_cmd("NET_SIS_posthouse" , this , &TransmitMgr::onPostHouse);
	_trMap.clear();
}
void TransmitMgr::doTransScript( unsigned int npcid , unsigned int sid)
{
	//加载!	[bing] 因为安卓在这里加载会卡死所以换到用脚本的时候加载一次
	//static bool bIsExecute = false;
	//if(!bIsExecute)
	//{
	//	bIsExecute = true;
	//	c_lua_manager::getInstance()->execute<void>("func_newteleport");
	//}

	std::map<unsigned int , std::vector<s_map_desc> >::iterator iter =  _trMap.find(npcid);
	if(iter!= _trMap.end())
	{
		_npcSID = sid;
		_npcID = npcid;
		//镇守大将界面特殊处理
		if (_npcID == 1007001)
		{
			World::getInstance()->getNPCDialog()->appendDaJiangItem(_npcID , "", true , true, NPCTalkUi::TEXTT_INSTANCE);
		}
// 		else if (1511037 == npcid)//祖玛阁阁主
// 		{
// 			World::getInstance()->getNPCDialog()->appendItem(1 ,"\xE8\xBF\x9B\xE5\x85\xA5\xE7\xA5\x96\xE7\x8E\x9B\xE9\x98\x81\xE5\x89\xAF\xE6\x9C\xAC", true , true, NPCTalkUi::TEXTT_INSTANCE);
// 		}
// 		else if (1511038 == npcid)//祖玛阁爱心大使
// 		{
// 			World::getInstance()->getNPCDialog()->appendItem(1 ,"\xE5\x8F\xAC\xE5\x94\xA4\x42\x4F\x53\x53\xEF\xBC\x88\xE9\x9C\x80\xE8\xA6\x81\
// 		\xE4\xB8\x80\xE5\xBC\xA0\xE5\x8F\xAC\xE5\x94\xA4\xE5\x8D\xB7\xE6\x88\x96\x31\x30\xE5\x85\x83\xE5\xAE\x9D\xEF\xBC\x89", true , true, NPCTalkUi::TEXTT_INSTANCE);
// 		}
		else if (_npcID == 1143001
			||_npcID == 1143002
			||_npcID == 1143003)
		{
			bool is_zhuzai = f_zhuzai_mgr::get_singleton().lp_is_master_in_instance();
			CC_ASSERT(!iter->second.empty());
			if (is_zhuzai)
			{
				for(size_t i = 0 ; i < iter->second.size() ; ++i)
					World::getInstance()->getNPCDialog()->appendItem(i , iter->second[i].name.c_str(), true , true, NPCTalkUi::TEXTT_INSTANCE);
			}
			else
			{
				World::getInstance()->getNPCDialog()->appendItem(iter->second.size()-1 , iter->second.back().name.c_str(), true , true, NPCTalkUi::TEXTT_INSTANCE);
			}
		}
		else if (_npcID == GUILD_MAP_TASK)
		{
			for(size_t i = 0 ; i < iter->second.size() ; ++i)
			{
				GuildMgr* guildMgr = GuildMgr::getInstance();
				QuestMgr* questMgr = QuestMgr::getInstance();
				if (i == 1)
				{
					std::string taskNumber;
					safe_sprintf(taskNumber,iter->second[i].name.c_str(),guildMgr->getGuildTaskMax());
					World::getInstance()->getNPCDialog()->appendItem(guildMgr->getGuildTaskID(),taskNumber.c_str(),false,false);
				}
				else if ( i == 3 )
				{
					if (questMgr->getGuildQuestState() == QS_READY_FINISH)
					{
						World::getInstance()->getNPCDialog()->appendItem(questMgr->getCurGuildQuestID(),iter->second[i].name.c_str(),false,true);
					}
				}
				else
				{
					World::getInstance()->getNPCDialog()->appendItem(i , iter->second[i].name.c_str(), false , false,NPCTalkUi::TEXTT_INSTANCE);
				}
			}
		}
		else
		{
			for(size_t i = 0 ; i < iter->second.size() ; ++i)
				World::getInstance()->getNPCDialog()->appendItem(i , iter->second[i].name.c_str(), true , true, NPCTalkUi::TEXTT_INSTANCE);
		}		
	}
	else
	{
		_npcID = 0;
	}
}

void TransmitMgr::onSelect(unsigned int idx )
{
	if(_npcID)
	{
		/*	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
		if(!lp)
		return;*/
		////首先判断当前玩家的状态
		//if (lp->isInRoleStateAny(RA_ShuangXiu))
		//{
		//	ToolTip::getInstance()->push(GET_STR(2101));
		//	return;
		//}
		//if (lp->isInRoleStateAny(RA_Stall))
		//{
		//	ToolTip::getInstance()->push(GET_STR(2102));
		//	return;
		//}
		//if (lp->isInRoleStateAny(RA_Exchange))
		//{
		//	ExchangeBusinessMgr::getInstance()->CancleExchange();
		//	return;
		//}
		if (1511038 == _npcID)
		{
			if (idx == 0)
				InstanceMgr::getInstance()->SummonZumaBoss(false);
			else if(idx == 1)
				InstanceMgr::getInstance()->SummonZumaBoss(true);
			return;
		}
		else if (1511037 == _npcID)
		{
			if (idx == 0)
			{
				InstanceMgr::getInstance()->gotoZumaFuben();
			}
			else if (idx == 1)
			{
				bool is_open = TeamMgr::getInstance()->open_quick_team(e_open_zumage);
				if(is_open)
				{
					World::getInstance()->getNPCDialog()->show(false);
				}
			}
			else if (idx == 2)
			{
				World::getInstance()->getNPCDialog()->show(false);
				CMovie::GetInstance().doNPCScript(6);
				NPCChatMgr::getInstance()->setNeedShowUi(true);
				NPCChatMgr::getInstance()->setSelectIndex(idx);
			}
			return;
		}
		else if (1007001 == _npcID && 2 ==  idx)
		{
			InstanceMgr::getInstance()->gotoPalaceFuben();
			return;
		}
		else if (1900001 == _npcID)
		{
			InstanceMgr::getInstance()->gotoFaneFuben();
			return;
		}
		else if (1900002 == _npcID)
		{
			InstanceMgr::getInstance()->SummonFaneBoss();
			return;
		}
		else if(1002008 == _npcID)	//[bing] 进多人副本NPC
		{
			if (idx == 0)
			{
				OPEN_UI(WCT_FubenDuoRenUI);
				World::getInstance()->getNPCDialog()->show(false);
			}
			else if (idx == 1)
			{
				World::getInstance()->getNPCDialog()->show(false);
				CMovie::GetInstance().doNPCScript(7);
				NPCChatMgr::getInstance()->setNeedShowUi(true);
				NPCChatMgr::getInstance()->setSelectIndex(idx);
			}
			return;
		}
		else if (1143001 == _npcID)//管家
		{
			if (idx ==0)//邀请界面
			{
				f_zhuzai_mgr::get_singleton().open_invite_layer();
			}
			else if (idx == 1)//说明
			{
				CMovie::GetInstance().doNPCScript(8);
				NPCChatMgr::getInstance()->setNeedShowUi(true);
				NPCChatMgr::getInstance()->setSelectIndex(idx);
			}
			World::getInstance()->getNPCDialog()->show(false);

		}
		else if (1143002 == _npcID)//宝物管理员
		{
			bool close = false;
			if (idx == 3)//说明
			{
				CMovie::GetInstance().doNPCScript(9);
				NPCChatMgr::getInstance()->setNeedShowUi(true);
				NPCChatMgr::getInstance()->setSelectIndex(idx);
				close = true;
			}
			else
			{
				close = true;
				//close = f_zhuzai_mgr::get_singleton().try_to_calltb(idx);
				f_zhuzai_mgr::get_singleton().show_call_msgbox(idx +4);
			}
			World::getInstance()->getNPCDialog()->show(!close);
		}
		else if (1143003 == _npcID)//boss管理员
		{
			bool close = false;
			if (idx == 3)//说明
			{
				CMovie::GetInstance().doNPCScript(10);
				NPCChatMgr::getInstance()->setNeedShowUi(true);
				NPCChatMgr::getInstance()->setSelectIndex(idx);
				close = true;
			}
			else
			{
				//close = f_zhuzai_mgr::get_singleton().try_to_callboss(idx);
				f_zhuzai_mgr::get_singleton().show_call_msgbox(idx+1);
				close = true;
			}
			World::getInstance()->getNPCDialog()->show(!close);
		}
		//大小乔消耗副本令牌
		if (1003027 == _npcID || 1003025 == _npcID)
		{
			//OPEN_UI(WCT_FubenDuoRenUI);
			/*
			int level = GetNormalInstanceLevelLimit(_npcID,idx);
			LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
			if(!ploc)
				return;
			if (level > 0)
			{
				if (ploc->getLevel() < level)
				{
					ToolTip::getInstance()->push(GET_STR(238));
					return;
				}
			}
			f_item* pItem = PackageManager::getInstance()->getItem(EICT_Bag,(unsigned int)Instance_Need_Item);
			if (!IS_VALID_PTR(pItem))
			{
				MessageBoxUi *instanceUI = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(245).c_str(), "\xE8\xB4\xAD\xE4\xB9\xB0","\xE5\x8F\x96\xE6\xB6\x88");
				World::getInstance()->getScene()->addChild(instanceUI, WZ_MESSAGEBOX);
				instanceUI->signalOkBtnPressed.connect(this, &TransmitMgr::OpenMall);
				return;
			}
			*/
		}

		//公告牌消耗烟火
		else if (1003008 == _npcID && 0 == idx)
		{
/*
			int level = GetNormalInstanceLevelLimit(_npcID,idx);
			LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
			if(!ploc)
				return;
			if (level > 0)
			{
				if (ploc->getLevel() < level)
				{
					ToolTip::getInstance()->push(GET_STR(238));
					return;
				}
			}

			if (0 == idx)
			{
				f_item* pItem = PackageManager::getInstance()->getItem(EICT_Bag,(unsigned int)Instance_Need_Fire);
				if (!IS_VALID_PTR(pItem))
				{
					MessageBoxUi *instanceUI = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(2055).c_str(), "\xE8\xB4\xAD\xE4\xB9\xB0","\xE5\x8F\x96\xE6\xB6\x88");
					World::getInstance()->getScene()->addChild(instanceUI, WZ_MESSAGEBOX);
					instanceUI->signalOkBtnPressed.connect(this, &TransmitMgr::OpenMall);
					return;
				}			
			}*/
		}
		else if(FMBManager::getInstance()->get_fmb_npc_id() == _npcID )
		{
			FMBManager::getInstance()->show_fmb_layers(idx);
			return;
		}
		else if (BloodFightMgr::getInstance()->get_bf_npc_id() == _npcID)
		{
			BloodFightMgr::getInstance()->processEnterNPCChat(idx);
			World::getInstance()->getNPCDialog()->show(false);
			return;
		}
		else if(GUILD_BQCTRANS_NPCID ==_npcID || GUILD_MCTRANS_NPCID == _npcID )
		{
			GuildMgr::getInstance()->send_enter_guild_map();
			World::getInstance()->getNPCDialog()->show(false);
			return;
		}
		else if (GUILD_MAP_TASK == _npcID)
		{
			GuildMgr::getInstance()->showIndex(idx);
			World::getInstance()->getNPCDialog()->show(false);
			return;
		}
		else if (GUILD_MAP_ASSIGN == _npcID)
		{
			LocalPlayer* localPlayer = RoleManager::getInstance()->getLocalPlayer();
			if (localPlayer->can_guild_assign())
			{
				QuestMgr::getInstance()->guild_assign();
			}
			return;
		}
		else if (GUILD_MAP_BOSS == _npcID)
		{
			GuildMgr::getInstance()->getBossManager()->showPlayDesc();
			World::getInstance()->getNPCDialog()->show(false);
			return;
		}
		else if(1002030 == _npcID)
		{
			if(1 == idx)
			{
				bool is_open = TeamMgr::getInstance()->open_quick_team(e_open_mohundian);
				if(is_open)
				{
					World::getInstance()->getNPCDialog()->show(false);
				}
				return;
			}
		}
		else if (SHENDIANNPC == _npcID)
		{
			SBKSDManager::get_singleton_ptr()->showIndex(idx);
			World::getInstance()->getNPCDialog()->show(false);
		}
		else
		{
			//暂无限制
			//[bing] 接多人副本界面的关键 mark一下
			//OPEN_UI(WCT_FubenDuoRenUI);
		}
		unsigned int activityId = 0;
		std::map<unsigned int , std::vector<s_map_desc> >::iterator IT = _trMap.find(_npcID);
		std::vector<s_map_desc>::iterator iter = IT->second.begin();
		int tempIndex = 0;
		while(iter != IT->second.end())
		{
			if (tempIndex == idx)
			{
				activityId = iter->FubenID;
				std::string mapName = "m9";
				if (std::strcmp(iter->crcstr.c_str(),mapName.c_str()) == 0)
				{
					if (ActivityMgr::getInstance()->can_enter_sbk_result() == false)
					{
						return;
					}
				}
				break;
			}
			++tempIndex;
			++iter;
		}
		NET_SIC_posthouse po;
		po.dwNPCID = _npcID;
		po.nIndex = idx;
		po.by_type = 0;
		po.dwMapID = 0;
		po.dwPosID = INVALID;
		po.FubenID = activityId;
		TCP_CLIENT->send_net_cmd(&po , NP_NORMAL , false);
	}
}

unsigned int TransmitMgr::onPostHouse( s_net_cmd *cmd )
{
	NET_SIS_posthouse* msg = (NET_SIS_posthouse*)cmd;
	if(msg->dw_error_code == 0)
	{ 
		//!成功，跳转到新地图
		World::getInstance()->getNPCDialog()->show(false);
	}
	else
	{
		LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
		if (player == NULL)
			return 0;
		switch( msg->dw_error_code )
		{
		case E_Role_Dak_Activity_Not_Open:
			ToolTip::getInstance()->push(GET_STR(7004));
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open1:
			ToolTip::getInstance()->push(GET_STR(7031));
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open2:
			ToolTip::getInstance()->push(GET_STR(7032));
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open3:
			ToolTip::getInstance()->push(GET_STR(7033));
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open4:
			ToolTip::getInstance()->push(GET_STR(7034));
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open5:
			ToolTip::getInstance()->push(GET_STR(7035));
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open6:
			ToolTip::getInstance()->push(GET_STR(7036));
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open7:  
			//ToolTip::getInstance()->push(GET_STR(7037));

			//镇守大将沙城传送提示
			if (ActivityMgr::getInstance()->isRemoveFirstAttackCityLimit())
			{
				ToolTip::getInstance()->push(GET_STR(2412)); //周日21点开启沙巴克攻城
			}else
			{
				ToolTip::getInstance()->push(GET_STR(2413)); //第2周周日21点开启首次攻城
			}
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open8:
			ToolTip::getInstance()->push(GET_STR(7038));
			return INVALID;
			break;
		case E_Role_Dak_Activity_Not_Open9:
			ToolTip::getInstance()->push(GET_STR(7039));
			return INVALID;
			break;
		case E_Dak_NotEnough_Level:
			ToolTip::getInstance()->push(GET_STR(7274));
			break;
		case E_Dak_Not_Team:
			ToolTip::getInstance()->push(GET_STR(9152));
			break;
		case E_Dak_Not_Team_Leader:
			ToolTip::getInstance()->push(GET_STR(9144));
			break;
		case E_Dak_Team_Role_Not_Enough:
			ToolTip::getInstance()->push(GET_STR(9154));
			break;
		case E_Dak_Already_Join_Prepare:
			ToolTip::getInstance()->push(GET_STR(9171));
			break;
		case E_Dak_Role_State_Limit:
			ToolTip::getInstance()->push(STRING_TABLE["mabi_trans_tip"]);
			break;
		case E_Dak_Role_Not_Online:
		case E_Dak_Role_level_Limit:
		case E_Dak_Role_SaoDang:
		case E_Dak_Role_Stall:
		case E_Dak_Role_Exchange:			
		case E_Dak_Role_ComPractice:		
		case E_Dak_Role_Dead:				
		case E_Dak_Role_In_Sbk:			
		case E_Dak_Role_In_Sbk_Palace:
		case E_Dak_Role_Not_Same_Map:
		case E_Dak_Role_Enter_Num_Limit:
			{
				std::string baseStr1 = "";
				std::string baseStr2 = "";
				if (msg->dw_error_code == E_Dak_Role_Not_Online)
				{
					baseStr2 = GET_STR(9153);
				}
				else if (msg->dw_error_code == E_Dak_Role_level_Limit)
				{
					baseStr1 = GET_STR(9156);
					baseStr2 = GET_STR(9155);
				}
				else if (msg->dw_error_code == E_Dak_Role_SaoDang)
				{
					baseStr1 = GET_STR(9162);
					baseStr2 = GET_STR(9161);
				}
				else if (msg->dw_error_code == E_Dak_Role_Stall)
				{
					baseStr1 = GET_STR(9174);
					baseStr2 = GET_STR(9173);
				}
				else if (msg->dw_error_code == E_Dak_Role_Exchange)
				{
					baseStr1 = GET_STR(9164);
					baseStr2 = GET_STR(9163);
				}
				else if (msg->dw_error_code == E_Dak_Role_ComPractice)
				{
					baseStr1 = GET_STR(9176);
					baseStr2 = GET_STR(9175);
				}
				else if (msg->dw_error_code == E_Dak_Role_Dead)
				{
					baseStr1 = GET_STR(9208);
					baseStr2 = GET_STR(9207);
				}
				else if (msg->dw_error_code == E_Dak_Role_In_Sbk)
				{
					baseStr1 = GET_STR(9166);
					baseStr2 = GET_STR(9165);
				}
				else if (msg->dw_error_code == E_Dak_Role_In_Sbk_Palace)
				{
					baseStr1 = GET_STR(9168);
					baseStr2 = GET_STR(9167);
				}
				else if (msg->dw_error_code == E_Dak_Role_Not_Same_Map)
				{
					baseStr1 = STRING_TABLE["E_Dak_Role_Not_Same_Map1"];
					baseStr2 = STRING_TABLE["E_Dak_Role_Not_Same_Map2"];
				}
				else if (msg->dw_error_code == E_Dak_Role_Enter_Num_Limit)
				{
					baseStr1 = GET_STR(9136);
					baseStr2 = GET_STR(9137);
				}
				if (msg->dw_role_id == player->getId())
				{
					if (!baseStr1.empty())
						ToolTip::getInstance()->push(baseStr1);
				}
				else
				{
					std::ostringstream oss;
					const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(msg->dw_role_id);
					if (data)
						oss<<data->strName;
					else
						oss<<"";
					std::string str = replaceStr(baseStr2,"**",oss.str());
					ToolTip::getInstance()->push(str);
				}
			}
			break;
		}
	}
	return 0;
}

void TransmitMgr::OpenMall()
{
	OPEN_UI(WCT_STOREUI);
}

int TransmitMgr::GetNormalInstanceLevelLimit( unsigned int npcID,unsigned int index )
{
	//大桥
	if (1003027 == _npcID)
	{
		if (0 == index)
		{
			return 60;
		}
		else if (1 == index)
		{
			return 65;
		}
		else if (2 == index)
		{
			return 70;
		}
		else if (3 == index)
		{
			return 75;
		}
	}
	//小乔
	else if (1003025 == _npcID)
	{
		if (0 == index)
		{
			return 30;//
		}
		else if (1 == index)
		{
			return 40;
		}
		else if (2 == index)
		{
			return 50;
		}
		else if (3 == index)
		{
			return 55;
		}
	}
	//公告板
	else if (1003008 == _npcID)
	{
		if (0 == index)
		{
			return 40;//
		}
		else if (1 == index)
		{
			return 1;
		}
	}
	else
	{
		//do nothing
	}
	return 0;
}

void TransmitMgr::InsertTeleport( unsigned int dwID, const char* crcstr, const char* name , unsigned int FubenID)
{
	s_map_desc md;
	std::map<unsigned int , std::vector<s_map_desc> >::iterator IT = _trMap.find(dwID);
	if(IT != _trMap.end())
	{
		md.crcstr = crcstr;
		md.name = name;
		md.FubenID = FubenID;
		IT->second.push_back(md);
	}
	else
	{
		md.crcstr = crcstr;
		md.name = name;
		md.FubenID = FubenID;
		std::vector<s_map_desc> page;
		page.push_back(md);
		_trMap[dwID] = page;
	}
}

void TransmitMgr::sendPosthouse( unsigned int dwNPCID, unsigned int nIndex, unsigned int dwPosID,unsigned char by_type,unsigned int dwMapID,unsigned int FubenID )
{
	NET_SIC_posthouse cmd;
	cmd.dwNPCID = dwNPCID;
	cmd.nIndex = nIndex;
	cmd.dwPosID = dwPosID;
	cmd.FubenID = FubenID;
	cmd.by_type = by_type;
	cmd.dwMapID = dwMapID;
	TCP_CLIENT->send_net_cmd(&cmd,NP_NORMAL,false);
}

