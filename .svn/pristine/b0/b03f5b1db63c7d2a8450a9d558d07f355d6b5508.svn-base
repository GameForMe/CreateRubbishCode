#ifndef CHATUI_H
#define CHATUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "ListItem.h"
#include "ChatDefine.h"
#include "VerticalList.h"
#include "UiInterface.h"
#include "Signals.h"
#include "item.h"
#include "GameActionNode.h"
#include "Signals.h"
#include "cc_timer.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class TouchLabel;
class CheckButton;
class TouchSprite;


struct S_BiaoQingData
{
	int nCount;
	char szFileName[10];
};
struct s_Chat_UserData
{
	s_Chat_UserData(): m_type(0), m_value(0)
	{

	}
	int m_type;		//1装备  2 语音 3队伍
	unsigned long long m_value;
};

class CBiaoQingData
{
public:
	static CBiaoQingData &inst()
	{
		static CBiaoQingData IsSalf;
		return IsSalf;
	}

	CBiaoQingData()
	{
		int nIdx = 1;

		S_BiaoQingData* pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "1_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "2_");
		pData->nCount = 3;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "3_");
		pData->nCount = 4;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "4_");
		pData->nCount = 3;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "5_");
		pData->nCount = 4;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "6_");
		pData->nCount = 3;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "7_");
		pData->nCount = 6;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "8_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "9_");
		pData->nCount = 6;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "10_");
		pData->nCount = 5;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "11_");
		pData->nCount = 3;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "12_");
		pData->nCount = 4;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "13_");
		pData->nCount = 4;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "14_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "15_");
		pData->nCount = 4;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "16_");
		pData->nCount = 4;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "17_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "18_");
		pData->nCount = 4;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "19_");
		pData->nCount = 4;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "20_");
		pData->nCount = 10;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "21_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "22_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "23_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "24_");
		pData->nCount = 10;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "25_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "26_");
		pData->nCount = 6;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "27_");
		pData->nCount = 6;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "28_");
		pData->nCount = 5;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "29_");
		pData->nCount = 3;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "30_");
		pData->nCount = 3;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "31_");
		pData->nCount = 5;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "32_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "33_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "34_");
		pData->nCount = 7;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "35_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "36_");
		pData->nCount = 2;
		biaoqingmap[nIdx++] = pData;

		pData = new S_BiaoQingData();
		strcpy(pData->szFileName, "37_");
		pData->nCount = 7;
		biaoqingmap[nIdx++] = pData;
	}

	~CBiaoQingData()
	{
		std::map< int, S_BiaoQingData* >::iterator it = biaoqingmap.begin();
		while( it != biaoqingmap.end() )
		{
			CC_SAFE_DELETE(it->second);

			it++;
		}
		biaoqingmap.clear();
	}

	static void  SetBiaoQingTexture( GameActionNode* pActionNode, S_BiaoQingData* pData )
	{
		int nNum = 1;
		for(int i = 0; i < pData->nCount; ++i)
		{
			std::stringstream ss;

			ss << pData->szFileName;

			if(nNum < 10)
				ss << 0;

			ss << nNum;

			ss << '\0';
			pActionNode->AddTextureFromIcon(ss.str().c_str());
			nNum++;
		}
	}

	std::map< int, S_BiaoQingData* > biaoqingmap;
};

//[bing] 为什么要自己写一个 是为了能获取它的输入事件 然后做文本替换
//#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
class CustomTextFieldTTF : public CCTextFieldTTF, public CCTouchDelegate
// #else
// class CustomTextFieldTTF : public CCTextFieldTTF
// #endif
{
public:
	CustomTextFieldTTF();
	virtual ~CustomTextFieldTTF();
	virtual void insertText(const char * text, int len);
	virtual void deleteBackward();
	void initPasteSprite();

	void SetGSString( std::string& GSstring );
	void SetGSString( const char* pChar )
	{
		m_GSstr = pChar;
	}
	std::string& GetGSString();

private:
	std::string m_GSstr;	//[bing] 准备发给服务器的真实string 和input显示的不一样

protected:
	bool _dirty;
#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
protected:
	virtual void keyboardWillShow(CCIMEKeyboardNotificationInfo& info);
	virtual void keyboardDidShow(CCIMEKeyboardNotificationInfo& info);
	virtual void keyboardWillHide(CCIMEKeyboardNotificationInfo& info);
	virtual void keyboardDidHide(CCIMEKeyboardNotificationInfo& info);

public:
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onEnter();
	virtual void onExit();

	void updateLongPress(float dt);
	void onLongPress();
	void pasteStrFromOSPasteboard();

private:
	CCPoint m_startPoint;
	bool m_isTouch;
	bool m_isMove;
	bool m_isschedule;
	bool m_isLongPress;
	float m_pressTime;
	CCScale9Sprite *m_pasteSprite;
#endif
};

const float CHAT_FONT_SIZE = 16.0f;

class ChatListItem : public ListItem
{
public:
	enum eNodeTag
	{
		NT_Label = 0,
		NT_ChatBtn,
		NT_GroupBtn,
	};

	ChatListItem(float width, int i = 0);
	virtual ~ChatListItem();
	virtual CCSize getContentSize();
	virtual float getItemHeight();

	void setData(const s_receive_chat_info &chatInfo);
	const s_receive_chat_info &getData() const { return _chatInfo; }
	bool setFilter(ESendChatChannel filter);
	void eraseYYFuHaoInformation(long long id);
	virtual void onTouch(CCTouch *touck);

	CCNode* GetNode() { return _node; }
	CCLabelTTF *getLabel(){return dynamic_cast<CCLabelTTF*>(_node->getChildByTag(NT_Label));}
	void runDecreeEffect();
	void setDecreeBaseBoard();
	int GetRowCount() 
	{
		return m_nRowCount;
	}
	void playFuhaoInYYItem(long long id);

private:
	bool isTeam(std::string &str, int &curCharPos, std::list<CCNode*> &list, float &curWidth);
	bool isItem(std::string &str, int &curCharPos, std::list<CCNode*> &list, float &curWidth);
	bool isEmoji(std::string &str, int &curCharPos, std::list<CCNode*> &list, float &curWidth);
	bool isColor(std::string &str, int &curCharPos, std::list<CCNode*> &list, float &curWidth);
	bool isImage(std::string &str, int &curCharPos, std::list<CCNode*> &list, float &curWidth, long long yuYinID, int &_time);
	bool isEnter(std::string &str, int &curCharPos);
	bool isEnd(std::string &str, int &curCharPos);

	bool isOutOfWidth(const char * labelStr, float &curWidth);
	void addNewLabel(std::list<CCNode*>& list, const char* labelStr, const ccColor3B& color, float &curWidth,  s_Chat_UserData* pData=NULL);
	void moveToNewLine(std::list<CCNode*>& list, float &curWidth);

protected:
	//[bing] 字符串解析
	void strParse(std::string &str, long long yuYinID, int time = 3);
	//void StrParse( std::string &str, long long yuYinID, int time = 3 );
	bool parseTeam(std::string const& str,int& nApos,int& nBpos,int& nCpos,int& nDpos,int& nSize,int& nState,int& nId,ccColor3B& color,std::list<CCNode*>& LabelList );
protected:
	s_receive_chat_info _chatInfo;
	float _vMargin;
	float _excursionH;
	int m_nRowCount;	//行数
	std::map<long long,GameActionNode*> _yyFuhaoMap;

	std::vector<s_Chat_UserData*>		_userDatas;
	std::string _tmpNormalStr;
};

//点击聊天中和任务相关的条目，可以弹出操作按钮
class ChatOpBtnGroup : public CCNode ,public CCTouchDelegate
{
public:
	CREATE_FUNC(ChatOpBtnGroup);
	bool init();
	void setData(unsigned int roleId, const std::string &roleName);

	void onChatBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGroupBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGuanzhuBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onLaheiBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onSonghuaBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void showBtn(const CCPoint &pt);
	void hideBtn();

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onEnter();
	virtual void onExit();

private:
	unsigned int _roleId;
	std::string _roleName;
	CCSprite *_bgSprite;
};

class ChatUiLayer;

class ChatUi : public UiInterface
{
	friend class ChatUiLayer;
public:
	virtual CCNode* openUi();
	virtual eWorldZorder getZorder() { return WZ_ChatUi; }
	virtual bool canClose() { return false; }

	void sendMessageTo(unsigned int id, const std::string &roleName);
	//信息;
	void appendMsg(const s_receive_chat_info &msgInfo);
	void deleteMsg(const s_receive_chat_info &msgInfo);
	//号令天下;
	void appendDecree(const s_receive_chat_info &msgInfo);
	void deleteDecree(const s_receive_chat_info &msgInfo);
	void setDecreeRemainTime(unsigned int timeRef,bool b_isHaveDecree = false);
	void clearInputName(bool siliao, const std::string &text);
	void showUi( bool show );
	void showVoice(bool show);

	void setPrivateId(unsigned int id);
	void getPrivateId();
	void setChatChannel(ESendChatChannel channel);
	void DetachPhoneText();
	void ClearCharText();
	void resetChannelBtn();
	void resetShowState();
	void hideChatUi(bool isShowTask);

	
};
//因装备展示需要用到，所以从 class ChatUiLayer中提了出来 add by XSea 2014.07.09
enum eFrameTag
{
	FT_ChatRecord = 0,//记录
	FT_Input,//输入(整个聊天大框)
	FT_Channel,//频道(频道选择列表已打开待选择频道)
	FT_NULL,//收益
	FT_biaoqing,//表情框
	FT_btn,//聊天控制按钮
	FT_btnWorld,//世界语音按钮
	FT_btnGuild,//行会语音按钮
	FT_btnTeam,//组队语音按钮
	IT_btnYY,	//聊天内部按钮节点
	FT_Num
};

struct CoverChatUiMainSV;
struct show_chat_ui;

class ChatUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class ChatUi;

	enum eInputTag
	{
		IT_InputContent = 0,//输入的内容
		IT_All,//综合
		IT_World,	//世界
		IT_Guild,	//行会
		IT_Group,	//组队
		IT_Personal,	//私聊
		IT_NearBy,		//附近
		IT_System,		//系统
		IT_RecordContent,	//记录内容？
		IT_ChannelBtn,		//各频道的切换按钮
		IT_YYBtn,			//聊天界面内部的语音输入按钮
	};

	enum
	{
		MOVE_Distance = 100
	};

	enum eYYBtn
	{
		YY_btnYY,		//聊天内部按钮节点
		YY_btnWorld,	//世界语音按钮
		YY_btnGuild,	//行会语音按钮
		YY_btnTeam,		//组队语音按钮
		YY_btnNumber
	};
public:
	ChatUiLayer();
	~ChatUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(ChatUiLayer, create);

	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);

	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void onCloseBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCloseBtnPressed2(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChannelBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onDelBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onSendBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChatBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onHaolingBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChuanyinBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onWorldBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGuildBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGroupBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onNearBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void DetachPhoneText();//关闭手机输入框
	void ClearCharText();
	void onBiaoqingBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	//void onAutoScrollCheckChanged(CheckButton *btn, bool state);
	//void onAutoScrollLabelTouched(TouchSprite*, bool);
	void onAllLabelTouched(TouchSprite*, bool);
	void onWorldLabelTouched(TouchSprite*, bool);
	void onGuildLabelTouched(TouchSprite*, bool);
	void onGroupLabelTouched(TouchSprite*, bool);
	void onNearbyTouched(TouchSprite*, bool);
	void onPersonalTouched(TouchSprite*, bool);
	void onSystemTouched(TouchSprite*, bool);

	void sendMessageTo(unsigned int id, const std::string &roleName);

	//信息;
	void appendMsg(const s_receive_chat_info &msgInfo);
	void deleteMsg(const s_receive_chat_info &msgInfo);
	void deleteFrontMsg();
	//号令天下;
	void appendDecree(const s_receive_chat_info &msgInfo);
	void deleteDecree(const s_receive_chat_info &msgInfo);
	void setDecreeRemainTime(unsigned int timeRef,bool b_isHaveDecree = false);
	unsigned int getDecreeRemainTime() {return _DecreeRemainTime;}
	void deleteFrontDecree();

	void InputItemInfo( f_item* pItem ); //如物品信息
	void showFrame(eFrameTag tag, bool show, bool anim = true); //因装备展示需要，所以提入public
	bool getShowState(){ return _showState; }
	void doscheduleEvent(float ft);
	void animationCallback();

	void showYYChatBtn(bool show);
	void showVoiceBtn(bool show);
	void resumeVoiceBtnSet();
	GameActionNode* getNodeE1_126() { return pNodeE1_126;}

	void hideInput();
	void  showInput();

	void yyChatEnd();
	void yyChatCancel();

	void showChatUI(show_chat_ui* trans);
	void resetZolder();
private:
	void onEventChangeSVPriority(CoverChatUiMainSV* pEvent);

protected:
	TouchSprite *getAreaFrameTouchSprite(eInputTag tag);
	//CheckButton *getChnanelFrameCheckBtn(eChannelTag tag);

	
	bool ifFrameShow(eFrameTag tag);
	void setRecordFilter(ESendChatChannel filter);
	void setFilterLabelHigh(eInputTag label);

	void updateDisplay();


	void hidChatUi(bool isShowTask);
	//void showChatFrame(bool show);
	//void showFilterFrame(bool show);
	void showRecordFrame(bool show, bool anim);
	void showInputFrame(bool show, bool anim);
	void changeShowState(bool flag);
	void setInputAsSiliao(bool siliao, const std::string &text);

	void setPrivateId(unsigned int id){_targetId = id;}
	unsigned int getPrivateId();
	void setChatChannel(ESendChatChannel channel){_sendChannel = channel;}
	void resetChannelBtn();
	bool isChatInfoEqual(const s_receive_chat_info &d1, const s_receive_chat_info &d2);
	void updateFudongMsg();
	void delFudongMeg();
	//void setChatRecordFrameHeight(float height);
	void resetShowState();
	void setYYBeginTime();
	unsigned int getYYSpeakTime();
	void setYYBtnSpriteFrame(CCNode* node,const std::string btnSprite);
	void yyChatGo();
	
	std::string get_item_rich_text(f_item* item);
	std::string get_item_title(f_item* item);
protected:
	int		_oriPrioritySV;
	//int		_oriPriorityLayer;
	CCNode *_frame[FT_Num];
	CCNode*	_small_sv_root;
	CCSprite *_yyFrame;
	CCSpriteFrame* _yyQuxiaoFrame;
	CCSpriteFrame* _yyFanhuiFrame;
	CCPoint _srcFramePos[FT_Num];
	bool _isFrameShow[FT_Num];

	//float _chatRecordFrameBottom;
	//float _schatRecordFrameBottom;
	CCPoint _startPt;
	float _yyBeginTime;
	//chat record frame
	CCNode *_recordContent;
	CCSprite* _yySprite;				//点击语音后显示提示精灵
	CCScrollView *_chatRecordscrollView;//大聊天框
	CCScrollView *_small_chatRecordscrollView;//小的聊天框
	CCScrollView *_small_decree_scrollview;//小的聊天框号令
	VerticalList<ChatListItem> *_chatRecordList;
	VerticalList<ChatListItem> *_decreeList;
	VerticalList<ChatListItem> *_small_chatRecordList;
	VerticalList<ChatListItem> *_small_decreeList;
//	VerticalList<ChatListItem> *_verticalList;
	bool _autoScroll;
	ESendChatChannel _filter;
	ESendChatChannel _sendChannel;
	float _chatRecordFrameMinHeight;
	//float _schatRecordFrameMinHeight;
	float _chatRecordItemHeightAdd;
	unsigned int _DecreeRemainTime;
	bool _dragRecordFrame;
	bool _showState;
	bool _isChatUiOpen;
	bool _isCheckYY;
	bool _isShowYYChatBtn;
	eYYBtn _isCheckYYOne;
	//input frame
	CustomTextFieldTTF *_inputLabel;
	CCControlButton* _YYBtn;
	//私聊的目标玩家
	unsigned int _targetId;

	std::map<eInputTag, std::string> _highTab;
	std::map<eInputTag, std::string> _normalTab;
	ChatOpBtnGroup *_chatOpBtnGroup;
	//系统漂浮用label
	CCNode* fudongNode;
	LabelFT* fudongLabel_1;
	LabelFT* fudongLabel_2;
	LabelFT* fudongLabel_3;
	LabelFT* fudongLabel_4;
	std::list<std::string> fudongAllChatData;//浮动显示的数据

	tagDWORDTime lastTime;
	std::string siLiaoName;
	GameActionNode* pNodeE1_126;
	GameActionNode* BiaoQingIcon;
	bool m_updateMessage;
	bool m_messageOut;

	profile_util::cc_timer m_VoiceSendInterval;
	profile_util::cc_timer m_TouchLength;
	bool m_IsVoiceReturn;
};

//[bing] 自定义label 支持标签换行
class CustomLabel : public CCNode
{
public:

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(CustomLabel, create);

	CustomLabel();
	~CustomLabel();

	void SetString(std::string& str);

	void SetFontSize(int nSize)
	{
		m_nFontSize = nSize;
	}
	void SetMargin(int nMargin)
	{
		_vMargin = nMargin;
	}
	void SetFontName(const char* pName)
	{
		m_strFontName = pName;
	}

	void addNewLabel(std::list<CCNode*>& list, const char* labelStr, const ccColor3B& color, float &curWidth);
	void moveToNewLine(std::list<CCNode*>& list, float &curWidth);
	bool isColor(std::string &str, int &curCharPos, std::list<CCNode*> &list, float &curWidth);
	bool isEnter(std::string &str, int &curCharPos, std::list<CCNode*> &list, float &curWidth);
	bool isEnd(std::string &str, int &curCharPos);
	bool isOutOfWidth(const char * str, float &curWidth);

private:
	std::string m_strFontName;
	int m_nFontSize;
	int _vMargin;
	std::string _tmpNormalStr;
	float _maxLineWidth;
	int _nRow;
};
#endif //CHATUI_H