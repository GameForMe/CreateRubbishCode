#include "ProgressBar.h"
#include "UiTools.h"
#include "Helper.h"

ProgressBar::ProgressBar()
	: _label(NULL)
	, _progress(NULL)
{

}

ProgressBar::~ProgressBar()
{
	CC_SAFE_RELEASE(_label);
	CC_SAFE_RELEASE(_progress);
}

void ProgressBar::initBarWithSprite( CCSprite *sprite, int fontSize/*=12*/, bool leftToRight /*= true*/ , bool showNum /*= true*/,bool IsVertical /*= false*/)
{
	if(sprite != NULL)
	{
		_leftToRight = leftToRight;

		if (_progress)
		{
			_progress->removeFromParent();
			CC_SAFE_RELEASE_NULL(_progress);
		}

		_progress = initHProgressBarWithSprite(sprite, leftToRight,IsVertical);
		sprite->setVisible(false);
		_progress->retain();

		if(showNum)
		{
			TTFConfig cfg;
			cfg.fontSize =fontSize;
			cfg.fontFilePath  = FT_FONTFACE;
			cfg.outlineSize =1;
			
			_label = LabelFT::createWithTTF(cfg,"");
			_label->retain();
			_label->setPosition(sprite->getPosition());
		}
	}
}

void ProgressBar::setCircleProgress( int cur, int max)
{
	if(_label != NULL)
	{
		_label->setVisible(false);
	}
	if (cur == max)
	{
		_progress->setVisible(false);
		return;
	}
	else
	{
		_progress->setVisible(true);
	}
	float pec;
	if (cur <= max)
	{
		pec = 100.f * (float)cur / (float)max;
	}else{
		pec = 100.f * (float)max / (float)max;
	}
	pec = 100.f - pec;
	_progress->setPercentage(pec);
}
void ProgressBar::setProgress( int cur, int max, const std::string &pre /*= ""*/, const std::string &sub /*= ""*/ )
{
	if(_label != NULL)
	{
		std::ostringstream ostr;
		ostr << pre << " ";
		ostr << cur << "/" << max;
		ostr << " " << sub;
		_label->setString(ostr.str().c_str());
	}
	float pec;
	if (cur <= max)
	{
		pec = 100.f * (float)cur / (float)max;
	}else{
		pec = 100.f * (float)max / (float)max;
	}
	if(!_leftToRight)
		pec = 100.f - pec;
	_progress->setPercentage(pec);
}

/*
void ProgressBar::setFontSize( int size )
{
	if (_label)
	{
		TTFConfig cfg = _label->getTTFConfig();
		std::string oldString  = _label->getString();
		if (cfg.fontSize != size)
		{
			cfg.fontSize  = size;
			LabelFT* newlabel = LabelFT::createWithTTF(cfg,oldString);
			CC_ASSERT(newlabel);
			newlabel->setTextColor(_label->getTextColor());
			newlabel->setAnchorPoint(_label->getAnchorPoint());
			newlabel->setPosition(_label->getPosition());
			newlabel->setDimensions(_label->getDimensions().width,_label->getDimensions().width);

			_label->removeFromParent();
			CC_SAFE_RELEASE(_label);

			_label=  newlabel;
			CC_SAFE_RETAIN(_label);
		}
	}
}
*/
void ProgressBar::addToParent( CCNode *parent )
{
	if(parent != NULL)
	{
		parent->addChild(_progress);
		if(_label != NULL)
			parent->addChild(_label);
	}
}

void ProgressBar::setFontColor( int r, int g, int b )
{
	if(_label != NULL)
		_label->setTextColor(Helper::converColor3B_2_4B(ccc3(r, g, b)));
}

void ProgressBar::setVisible( bool visible )
{
	_progress->setVisible(visible);
	if(_label != NULL)
		_label->setVisible(visible);
}

void ProgressBar::setScaleX( float scalex )
{
	if (_progress != NULL)
	{
		_progress->setScaleX(scalex);
	}
}

void ProgressBar::setRotate( float rotate )
{
	if (_progress != NULL)
	{
		_progress->setRotation(rotate);
	}
}

void ProgressBar::setPosition(CCPoint pt)
{
	if (_progress != NULL)
	{
		_progress->setPosition(pt);
	}
}

void ProgressBar::initWithCCSprite(CCSprite* sp)
{
	if (_progress != NULL)
	{
		//_progress->initWithSprite(sp);
		_progress->setReverseDirection(!_leftToRight);

		_progress->setSprite(sp);
		//_progress->setType(kCCProgressTimerTypeBar);
		//_progress->setMidpoint(ccp(0.0, 0.0));
		//_progress->setBarChangeRate(ccp(1.0, 0.0));
		//if(!_leftToRight)

		_progress->setPercentage(100);
	}
}

void ProgressBar::setMidpoint(CCPoint pt)
{
	if (_progress != NULL)
	{
		_progress->setBarChangeRate(ccp(1.0, 0.0));
	}
}
void ProgressBar::setBarChangeRate(CCPoint pt)
{
	if (_progress != NULL)
	{
		_progress->setBarChangeRate(pt);
	}
}

void ProgressBar::setLabelPosition(CCPoint pt)
{
	if(_label != NULL)
	{
		_label->setPosition(pt);
	}
}

void ProgressBar::setLabelVisible( bool visible)
{
	if(_label != NULL)
		_label->setVisible(visible);
}

void ProgressBar::setString( std::string str )
{
	if (_label)
	{
		_label->setString(str);
	}
}
