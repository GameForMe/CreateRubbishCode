#include "f_cache_data_mgr.h"
#include "f_cache_data_base.h"

f_cache_data_mgr::f_cache_data_mgr()
{

}

f_cache_data_mgr::~f_cache_data_mgr()
{
    CacheDataFactoryMap::iterator it    = mCacheDataFactoryMap.begin();
    CacheDataFactoryMap::iterator itEnd = mCacheDataFactoryMap.end();
    for ( ; it != itEnd; ++it )
    {
        it->second->destroy_instance( it->first );        
    }

    mCacheDataFactoryMap.clear();
    mCacheDataList.clear();
}


bool f_cache_data_mgr::init()
{
    typedef instance_type_register_helper<f_cache_data_base>::instance_type_map_t InstanceTypeMap;
    InstanceTypeMap& map = instance_type_register_helper<f_cache_data_base>::get_instance_type_map();

    InstanceTypeMap::iterator it    = map.begin();
    InstanceTypeMap::iterator itEnd = map.end();

    for ( ; it != itEnd; ++it )
    {
        f_cache_data_base* pNewDataBase = it->second->create_instance();
        CC_ASSERT(pNewDataBase);

        mCacheDataList.push_back( pNewDataBase );
        mCacheDataFactoryMap[pNewDataBase] = it->second;
    }

    return true;
}

void f_cache_data_mgr::load()
{
	CacheDataList::iterator iter = mCacheDataList.begin();
	CacheDataList::iterator end = mCacheDataList.end();

	for (;iter!=end;++iter)
	{
		(*iter)->load();
	}
}

void f_cache_data_mgr::destroy()
{
	CacheDataList::iterator iter = mCacheDataList.begin();
	CacheDataList::iterator end = mCacheDataList.end();

	for (;iter!=end;++iter)
	{
		(*iter)->clear();
	}
}
