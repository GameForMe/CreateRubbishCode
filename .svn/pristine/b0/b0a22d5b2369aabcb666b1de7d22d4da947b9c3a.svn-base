#ifndef CDBUTTON_H
#define CDBUTTON_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"
using namespace cocos2d;
using namespace cocos2d::extension;

class CDButtonLoader;

typedef enum
{
	CC_TOUCH_EVENT_BEGAN,
	CC_TOUCH_EVENT_MOVED,
	CC_TOUCH_EVENT_ENDED,
	CC_TOUCH_EVENT_CANCELED
}CCTouchEventType;

class CDButton : public CCNode, public CCTouchDelegate
{
public:
	

	friend class CDButtonLoader;
public:
	CDButton();
	CREATE_FUNC(CDButton);
	static CDButton *createWithSprites(CCSprite *btnSprite, CCSprite *cdSprite);
	void initWithSprites(CCSprite *btnSprite, CCSprite *cdSprite);
	void setCDTime(float duration, float max = -1);
	void set_overlap(int overlap);
	bool run(bool f = false);
	void stop();
	void setBtnSprite(CCNode *btnSprite);
	void setCDSprite(CCSprite *cdSprite);
	virtual const CCSize& getContentSize();
	void setVisibleWhenStoped(bool visible) { _visibleStop = visible; }
	float getDurations() { return _duration; }

	void setBtnTag(int pTag) { _iBtnTag = pTag;}
	int getBtnTag() { return _iBtnTag;}

	void sync_cd_time(float cur,float max);
protected:
	bool init();
	void prepared();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);

	
SIGNALS:
	c_signal<void> signalClicked;
	c_signal<void> signalClickEnded;
	c_signal<void> signalClicmove;

	c_signal<void,int> signalClicmoveAndTag;
	c_signal<void,int> signalClickedAndTag;
	c_signal<void,int,bool> signalClickedEndedAndTag;
	c_signal<void,CCPoint,CCTouchEventType,int> signalClickedEvent;
private:
	CCNode *_btnSprite;
	CCProgressTimer *_cdProgress;

	LabelFT*		m_overlap;

	float _duration;
	float _max;
	bool _prepared;
	bool _visibleStop;

	int _iBtnTag;
	bool _isTouchNow;
	CCPoint _touchBeginPos;
};

class CDButtonLoader : public cocos2d::extension::CCNodeLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(CDButtonLoader, loader);
	virtual void onHandlePropTypeString(CCNode * pNode, CCNode * pParent, const char* pPropertyName, const char * pString, CCBReader * pCCBReader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(CDButton);
};


#endif //CDBUTTON_H