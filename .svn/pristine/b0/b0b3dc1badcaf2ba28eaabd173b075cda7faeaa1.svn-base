#ifndef EQUIPFUSIONMANAGER_H
#define EQUIPFUSIONMANAGER_H

#include "ItemDefine.h"
#include "BaseDefine.h"
#include "item.h"
#include "Signals.h"
#include <string>
#include "cocos2d.h"
using namespace cocos2d;

struct s_net_cmd;

const int FUSION_POWDER		= 1003223;  //融合粉
const int SECONDARY_FUSION_POWDER		= 1003228;  //次级融合粉
#pragma pack(push, 1)

// 物品信息(新建通用)
struct tagItemSerial
{
	unsigned long long n64ItemID; //流水号
	short n16Num;  //数量
	tagItemSerial() { 
		memset(this,0,sizeof(*this));
		//ZeroMemory(this, sizeof(*this)); 
	}
};

#pragma pack(pop)

struct tagFusionCostItemNumTable 
{
	int lockCost;
	int assignCost;

	tagFusionCostItemNumTable()
		:lockCost(0)
		,assignCost(0)
	{

	}
};

struct equip_quality_att
{
	int id;
	int att;
	int hp;
	int mp;
	int wuli_min;
	int wuli_max;
	int mofa_min;
	int mofa_max;
	int daosu_min;
	int daosu_max;
	int wufang_min;
	int wufang_max;
	int mofang_min;
	int mofang_max;
	int hit_rate;
	int dodge;
	int cirt;
	int fan_cirt;
	int fudong;
};

struct equip_reinforcement
{
	int idx;
	unsigned int stuffId;
	int num;
	int levelUp;
};

class EquipFusionManager
{
public:
	EquipFusionManager();
	~EquipFusionManager();

	void init();
//	typedef std::map<unsigned int, EquipFusionTypeData> EquipFusionData;
	typedef std::vector<int> attr_List;
	static EquipFusionManager *getInstance();
	std::string getIconFrameName( unsigned int dataId );
	CCSpriteFrame * getIconFrameByName( unsigned int dataId );
	void getAllEquipDate();
	std::map<short, f_item*> getEquipFusionItemMap();
	void setItemTagIndex(int i){itemTagIndex = i;};
	int getItemTagIndex(){return itemTagIndex;};
	void setEquipment(f_equipment* equip);//当前要操作的装备
	f_equipment* getEquipment(){
		return equipment;
	};
	void removeEndItem();
	int getCurEquipLevel(INT64 equipId);
	int getEquipLv(){return equipLv;};
	int getEquipReferLv(){return equipReferLv;};
	int getNeedStrengTimes(){return needStrengTimes;};
	void setNeedStrengTimes(int times){needStrengTimes = times;};
	void setHoldAttr(const attr_List&list);
	const attr_List& getHoldAttr();
	EquipAddAtt ERA2EAA(ERoleAttribute eRoleAttribut);
	static ERoleAttribute EAA2ERA(EquipAddAtt eRoleAttribut);
	void sendEquipFusionSpecify();
	std::string getItemAttRangeText(f_equipment * equip,int att);
	bool getEquipAttBaseRangeVal(int item_model_id,int item_quanlity,int att,float&  min,float& max);
	float getEquipAttWeightPct(int item_model_id);

	int getFusionCost(int nLockNum,int nAssignNum);	

	const equip_quality_att* getEquipQualityAtt(int qualityIndex);
	const equip_reinforcement* getEquipReinforcement(int reinIndex);
private:
	std::vector<tagFusionCostItemNumTable>	_funsionCostTable;

	std::map<short, f_item*> EquipFusionItemMap;
	void clearItemMap();
	int itemTagIndex;
	f_equipment* equipment;
	int equipLv;//装备等级
	int equipReferLv;//装备公式计算的等级
	int needStrengTimes;//需要强化的次数,强化暂时没有管理类,所以先写在融合管理类里
	attr_List mAttLists;
	std::map<int,float> equip_level_att;
	void initEquipLevelAtt();

	std::map<int,equip_quality_att> m_equip_quality;
	void initEquipQualityAtt();

	std::map<int,equip_reinforcement> m_equip_rein;
	void initEquipReinforcement();
};

#endif //PACKAGEMANAGER_H