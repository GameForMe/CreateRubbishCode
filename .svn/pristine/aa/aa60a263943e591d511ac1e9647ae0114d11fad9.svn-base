#include "RankListItem.h"
#include "Attres.h"
#include "StringMgr.h"
#include "GuildMgr.h"
#include "Helper.h"
#include "f_zhuzai_mgr.h"
#include "CfgReader.h"

std::string RankLevelData::getString( int column )const
{
	if(column == 0)
	{
		std::ostringstream ostr;
		ostr << levelRank;
		return ostr.str();	
	}
	else if(column == 1)
	{
		return name;
	}
	else if(column == 2)
	{
		switch(profession)
		{
		case RT_Warrior:
			return GET_STR(8);
		case RT_Mage:
			return GET_STR(9);
		case RT_Taoist:
			return GET_STR(10);
		}
	}
	else if(column == 3)
	{
		std::ostringstream ostr;
		ostr << level;
		return ostr.str();
	}
	else if ( column == 4)
	{
		std::ostringstream ostr;
		ostr << title;
		return ostr.str();
	}
	else if(column == 5)
	{
		const tagTitleProto *titleProto = Attres::getInstance()->getTitleProto(titleId);
		if(titleProto != NULL)
			return titleProto->stName;
	}
	return "";
}

//////////////////////////////////////////////////////////////////////////

std::string RankZhanliData::getString( int column )const
{
	if(column == 0)
	{
		std::ostringstream ostr;
		ostr << zhanliRank;
		return ostr.str();
	}
	else if(column == 1)
	{
		return name;
	}
	else if(column == 2)
	{
		switch(profession)
		{
		case RT_Warrior:
			return GET_STR(8);
		case RT_Mage:
			return GET_STR(9);
		case RT_Taoist:
			return GET_STR(10);
		}
	}
	else if(column == 3)
	{
		std::ostringstream ostr;
		ostr << zhanli;
		return ostr.str();
	}
	else if ( column == 4)
	{
		std::ostringstream ostr;
		ostr << title;
		return ostr.str();
	}
	else if(column == 5)
	{
		const tagTitleProto *titleProto = Attres::getInstance()->getTitleProto(titleId);
		if(titleProto != NULL)
			return titleProto->stName;
	}
	return "";
}

//////////////////////////////////////////////////////////////////////////


std::string RankMeiliData::getString( int column )const
{
	if(column == 0)
	{
		std::ostringstream ostr;
		ostr << meiliRank;
		return ostr.str();
	}
	else if(column == 1)
	{
		return name;
	}
	else if(column == 2)
	{
		switch(profession)
		{
		case RT_Warrior:
			return GET_STR(8);
		case RT_Mage:
			return GET_STR(9);
		case RT_Taoist:
			return GET_STR(10);
		}
	}
	else if(column == 3)
	{
		std::ostringstream ostr;
		ostr << meili;
		return ostr.str();
	}
	else if ( column == 4)
	{
		std::ostringstream ostr;
		ostr << title;
		return ostr.str();
	}
	else if(column == 5)
	{
		const tagTitleProto *titleProto = Attres::getInstance()->getTitleProto(titleId);
		if(titleProto != NULL)
			return titleProto->stName;
	}
	return "";
}


//////////////////////////////////////////////////////////////////////////

std::string RankGuildData::getString( int column )const
{
	if(column == 0)
	{
		std::ostringstream ostr;
		ostr << guildRank;
		return ostr.str();
	}
	else if(column == 1)
	{
		return name;
	}
	else if(column == 2)
	{
		return leaderName;
	}
	else if(column == 3)
	{
		std::ostringstream ostr;
		ostr << nlevel;
		return ostr.str();
	}
	else if(column == 4)
	{
		std::ostringstream ostr;
		ostr << memCount;
		return ostr.str();
	}
	return "";
}
///////////////////////////////////////////////////////////////////////////
std::string RankMasterData::getString( int column ) const
{
	if(column == 0)
	{
		std::ostringstream ostr;
		ostr << masterRank;
		return ostr.str();	
	}
	else if(column == 1)
	{
		return name;
	}
	else if(column == 2)
	{
		switch(profession)
		{
		case RT_Warrior:
			return GET_STR(8);
		case RT_Mage:
			return GET_STR(9);
		case RT_Taoist:
			return GET_STR(10);
		}
	}
	else if(column == 3)
	{
		std::ostringstream ostr;
		ostr << chushiCount;
		return ostr.str();
	}
	else if ( column == 4)
	{
		std::ostringstream ostr;
		ostr << title;
		return ostr.str();
	}
	else if(column == 5)
	{
		const tagTitleProto *titleProto = Attres::getInstance()->getTitleProto(titleId);
		if(titleProto != NULL)
			return titleProto->stName;
	}
	return "";
}

std::string RankRichData::getString( int column ) const
{
	if(column == 0)
	{
		std::ostringstream ostr;
		ostr << richRank;
		return ostr.str();
	}
	else if(column == 1)
	{
		return name;
	}
	else if(column == 2)
	{
		switch(profession)
		{
		case RT_Warrior:
			return GET_STR(8);
		case RT_Mage:
			return GET_STR(9);
		case RT_Taoist:
			return GET_STR(10);
		}
	}
	else if(column == 3)
	{
		std::ostringstream ostr;
		ostr << level;
		return ostr.str();
	}
	else if ( column == 4)
	{
		std::ostringstream ostr;
		ostr << title;
		return ostr.str();
	}
	else if(column == 5)
	{
		const tagTitleProto *titleProto = Attres::getInstance()->getTitleProto(titleId);
		if(titleProto != NULL)
			return titleProto->stName;
	}
	return "";
}



//////////////////////////////////////////////////////////////////////////

RankListIItem::RankListIItem()
	: _visible(true)
{
	for(int i = 0; i < 5; i ++)
	{
		TTFConfig config;
		config.fontFilePath=  FT_FONTFACE;
		config.fontSize = 16;
		config.outlineSize = 1;

		LabelFT *label = LabelFT::createWithTTF(config,"");
		//CCLabelTTF *label = CCLabelTTF::create();
		label->setAnchorPoint(ccp(0.5f, 1.0f));
		//label->setFontSize(16);
		label->setPosition(ccp(50 + i * 100, 0.f));
		label->setTag(i);
		label->setTextColor(Helper::converColor3B_2_4B(ccc3(0xfe, 0xf8, 0xd8)));
		_node->addChild(label);
	}
}

RankListIItem::~RankListIItem()
{

}

CCSize RankListIItem::getContentSize()
{
	if(_visible)
		return _contentSize;
	else
		return CCSize(0.f, 0.f);
}

void RankListIItem::setData( const RankListData &data, int index )
{
	_index = index;
	_roleId = data.roleId;
	for(int i = 0; i < 5; i ++)
	{
		getLabel(i)->setString(data.getString(i).c_str());
		//ÅÅÐÐ°ñ1-5ÁÐÑÕÉ« add by XSea 2014 .09.19
		ccColor3B color;
		switch( i )
		{
		case 0:
			color = ccc3(0x88,0xe5,0x00);
			//getLabel(i)->setTextColor(Helper::converColor3B_2_4B(ccc3(0x88,0xe5,0x00)));//vv
			break;
		case 1:
			color = ccc3(0xe5,0xc0,0x04);
			//getLabel(i)->setTextColor(Helper::converColor3B_2_4B(ccc3(0xe5,0xc0,0x04));
			break;
		case 2:
			color = ccc3(0xff,0xff,0xff);
			//getLabel(i)->setTextColor(Helper::converColor3B_2_4B(ccc3(0xff,0xff,0xff));
			break;
		case 3:
			color = ccc3(0xe5,0xc0,0x04);
			//getLabel(i)->setTextColor(Helper::converColor3B_2_4B(ccc3(0xe5,0xc0,0x04));
			break;
		case 4:
			color = ccc3(0x17,0xd5,0xce);
			//getLabel(i)->setTextColor(Helper::converColor3B_2_4B(ccc3(0x17,0xd5,0xce));
			break;
		}
		getLabel(i)->setTextColor(Helper::converColor3B_2_4B(color));
	}

	updateContent();
}

LabelFT* RankListIItem::getLabel( int column )
{
	return dynamic_cast<LabelFT*>(_node->getChildByTag(column));
}

void RankListIItem::updateContent()
{
	float height = 0.f;
	for(int i = 0; i < 5; i ++)
	{
		float tmpH = _node->getChildByTag(i)->getContentSize().height;
		if(height < tmpH)
			height = tmpH;
	}

	_contentSize = CCSize(530.f, height);
}

float RankListIItem::getItemHeight()
{
	if(_visible)
		return ListItem::getItemHeight();
	else
		return 0.f;
}

void RankListIItem::setVisible( bool visible )
{
	_node->setVisible(visible);
	 _visible = visible;
	 if(visible)
	 {
		_marginH = 7.f;
	 }
	 else
	 {
		 _marginH = 0.f;
	 }
}

void RankListIItem::setRank(int rank, bool isGuild)
{
	if (isGuild)
	{
		CCSprite* firstGuild = CCSprite::createWithSpriteFrameName("ectypeui_qizi");
		firstGuild->setPosition(ccp(90,-7));
		_node->addChild(firstGuild);
	}
	if (rank == 1)
	{
		CCSprite* oneRank = CCSprite::createWithSpriteFrameName("rankui_one");
		oneRank->setPosition(ccp(49,-6));
		_node->addChild(oneRank);
	}
	else if (rank == 2)
	{
		CCSprite* twoRank = CCSprite::createWithSpriteFrameName("rankui_two");
		twoRank->setPosition(ccp(49,-7));
		_node->addChild(twoRank);
	}
	else if (rank == 3)
	{
		CCSprite* threeRank = CCSprite::createWithSpriteFrameName("rankui_three");
		threeRank->setPosition(ccp(49,-8));
		_node->addChild(threeRank);
	}
	if (f_zhuzai_mgr::get_singleton_ptr()->player_is_zhuzai(_roleId))
	{
		std::string filepath = CFGReader::instance()->get_profile_string("Art", "ICON", "") + "SingleUI/zhuzaizhebiaozhi.png" ;
		filepath = CCFileUtils::sharedFileUtils()->fullPathForFilename(filepath.c_str());
		CCSpriteFrame *frame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(filepath.c_str());
		if(frame == NULL)
		{
			CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(filepath.c_str());
			frame = CCSpriteFrame::createWithTexture(texture,CCRect(0.0,0.0,texture->getPixelsWide(),texture->getPixelsHigh()));
			CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(frame,filepath.c_str());
		}

		CCSprite* pPic = CCSprite::create();
		pPic->setDisplayFrame(frame);
		pPic->setPosition(ccp(81,-7));
		_node->addChild(pPic);
	}
	return;
}

//////////////////////////////////////////////////////////////////////////

RankLabItem::RankLabItem()
{
	CCSprite *sprite = CCSprite::create();
	sprite->setAnchorPoint(ccp(0.f, 1.0f));
	sprite->setPosition(ccp(-15.f, 0.f));
	sprite->setTag(0);
	_node->addChild(sprite);
}

RankLabItem::~RankLabItem()
{

}

void RankLabItem::setData( const std::string &spriteFrameName, const std::string &highFrame, int index )
{
	_index = index;
	_normalFrame = spriteFrameName;
	_highFrame = highFrame;

	setSelect(false);
}

cocos2d::CCSize RankLabItem::getContentSize()
{
	CCNode *node = _node->getChildByTag(0);
	if(node != NULL)
		return node->getContentSize();

	return CCSize();
}

void RankLabItem::setSelect( bool select )
{
	CCSpriteFrame *spriteFrame = NULL;
	if(select)
		spriteFrame= CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(_highFrame.c_str());
	else
		spriteFrame= CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(_normalFrame.c_str());
	if(spriteFrame != NULL)
	{
		CCSprite *sprite = dynamic_cast<CCSprite*>(_node->getChildByTag(0));
		if(sprite != NULL)
		{
			sprite->setDisplayFrame(spriteFrame);
		}
	}
}
