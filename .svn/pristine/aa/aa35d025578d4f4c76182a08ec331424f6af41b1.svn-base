#ifndef SKILLUI_H
#define SKILLUI_H

#include "TouchSprite.h"
#include "cocos2d.h"
#include "cocos-ext.h"
#include "SkillListItemUi.h"
#include "UiInterface.h"
#include "Signals.h"
#include "DropDragDelegate.h"

using namespace cocos2d;
using namespace cocos2d::extension;

struct SkillData;

class CheckButton;
class FrameSprite;

enum FastAddSkillExpResult
{
//结果0=成功,1=本日快速领悟已达上限,2=元宝不足
	SUCCESS,
	UPPER,
	YUANBAONOTENOUGH
};

class QuickUi : public UiInterface
{
public:
	~QuickUi() {_usedPlistFile.clear();}
	static QuickUi *getInstace();
	CCNode* openUi();
	void open();
	bool isOpen();
	virtual void closeUI();
private:
	std::set<std::string> _usedPlistFile;
	int _type;
};

class QuickUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
friend class SkillManager;
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(QuickUiLayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	bool ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent );
	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onMinBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onMaxBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onSubBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAddBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onQuickBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void updateLabel();
	void updateYuanbao();
	virtual void onEnter();
	virtual void onExit();
private:
	int _dayCount;
	int _temp;
	int _yuanbao;
	int _moneyExp;
	int _studyNum;
};

class SkillUi : public UiInterface
{
	friend class NewPlayerGuider;
	
public:
	virtual CCNode *openUi();
	virtual void closeUI();

	void updateData();
	void updateJinengdian();
	void setSkill(const SkillData *data);
	void showFastAddSkillExpResult(int type);//显示快速领悟的结果
	void noticeRecharge();//充值跳转
	void setStudyBtnShowState(bool isShow);
	//std::string getSkillIcon(int index);
	//int getSkillId(int index);

	//new player guide
	enum eGuidePos
	{
		GP_StudyBtn,
		GP_CloseBtn,
		GP_Item0,
		GP_Item1,
	};

	CCRect getGuildBtnPos(int tag);
};

class SkillUiLayer 
	: public DropDragInterface
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class SkillUi;
	friend class QuickUiLayer;
public:
	SkillUiLayer() : _activityState(false),_skillAutoEffect(NULL),_needBookState(NULL),_progressBarBlank(NULL),_skillNestDes(NULL) {}
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SkillUiLayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void onHelpBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCloseDescBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);		 //说明面板关闭事件
	void onKnowBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);			 //说明面板确定事件

	void closeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onMessageBoxAutoWenyunOk();
	void onInputMessageBoxBtn();
	void activityBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void studyBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onQuickStudyBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);     //【ji】::::::::::::快速领悟按钮
	//是否开启修炼状态
	void onActivityStateChange(CheckButton* checkbut, bool);

	virtual void onEnter();
	virtual void onExit();
	//virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void update(float dt);

	virtual short getItemBegin(CCTouch &touch, eGetResult &result);
	virtual short getItemEnd(CCTouch &touch, eGetResult &result, EItemConType src, short itemIndex);
	virtual bool onClicked(CCTouch &touch);
	virtual bool onDoubleClicked(CCTouch &touch) { return false; }
	virtual EItemConType getConType() { return EICT_SKILL; };

	void setJinengdian(int value);
	void setSuoxujinengdian(int value,int max);
	void setDetailIcon(const char *frameName);
	void setDetailName(const char *name);
	void setDetailLevel(int level,int index);
	void setDetailSkillSkill(float value);
	void setDetailCd(float second);
	void setDetailMp(int mp);
	void setDetailNextLevel(int level);
	void setDetailDesc(const char *desc);
	void setDetailActivityState(bool activityState);
	void setDetailData(SkillItemData &data);
	void setDetailProficient(int cur, int max);
	
	void onItemSelect(SkillItemData &data);
	void setSkill(const SkillItemData &data);
	void setSkill(const SkillData *data);
	void addSkillFromSkillManager();

	void updateData();
	void updateJinengdian();

	std::string getSkillIconName(int index);
	int getSkillId(int index);
	int getSkillIndex(){return _skillIndex;}
	void clearSkillIndex(){_skillIndex = -1;}
	bool getSkillIsNoLearn(int index);
	//new player guide
	CCRect getGuildBtnPos(int tag);
	void setStudyBtnShowState(bool isShow);
	void openQuickUi();
private:
	CCProgressTimer *initHProgressBar(CCSprite * sprite);
	int getSkillIndexFormId(int skillId);
	void setNextSkillDes( const char *name );
	static bool SkillUiLayerSkillcompfn( const SkillData *data1, const SkillData *data2 );
	void showTips(CCNode *pNode);
protected:
	//FrameSprite *_descframe;     //说明界面

	SkillListItemUi *_listItems;

	CCSprite *_mainFrame;
	TouchSprite *_skillListBtn;
	TouchSprite *_jingmaiBtn;
	CCSprite *_skillListHBtn;
	CCSprite *_jingmaiHBtn;
	CCLayer *_skillListLayer;
	CCNode *_needBookState;
	CCScrollView *_skillListView;
	CCSprite *_detailFrame;
	CCSprite *_skillIcon;
	//CCControlButton *_activityBtn;
    bool _activityState;
	CCSprite * _skillAutoEffect;
	CCSprite *_progressBar;
	CCSprite *_progressBarBlank;
	CCProgressTimer *_progressTimer;
	SkillItemData _detailData;
	int _skillIndex;
	CCScale9Sprite *_tipsBgSprite;
	LabelFT *_jinengdian;
	LabelFT *_autoWenzi;//自动施法文字
	LabelFT *_skillName;
	LabelFT *_skillLevel;
	LabelFT *_skillNestDes;
	LabelFT *_cd;
	LabelFT *_mp;
	LabelFT *_nextLevel;
	LabelFT *_desc;
	LabelFT *_suoxujinengdian;
};

#endif //SKILLUI_H
