#ifndef REWARDQUESTMGR_H_INCLUDE
#define REWARDQUESTMGR_H_INCLUDE
#include <map>
#include <set>
#include <vector>
#include <string>
#include "QuestProto.h"
#include "BaseDefine.h"

#define		RewardQuestUpdateNum	6
#define		RewardQuestNull			0
#define     RewardUpdateTime        3600


enum enumRewardQuestGrade
{
	ERQG_SSS	= 0,
	ERQG_SS		= 1,
	ERQG_S		= 2,
	ERQG_A		= 3,
	ERQG_B		= 4,
	ERQG_C		= 5,
	ERQG_D		= 6,
	ERQG_End	= 7,
};

enum enumRewardQuestType
{
	ERQT_Attact		= 0,
	ERQT_Recharge	= 1,
	ERQT_Fuben		= 2,
	ERQT_Boss		= 3,
	ERQT_Help		= 4,
};

struct RewardQuestProto
{
	short		questId;		//任务Id
	BYTE		questGrade;		//任务等级
	BYTE		type;			//任务类型
	short		acceptAmount;	//已领取份数
	short		amount;			//任务总份数
	UINT        fighting;		//战斗力
	int			needNum;		//需要数量
	UINT		attactId;		//怪物ID
	UINT        NPCId;			//目标Id
	UINT		exp;			//奖励经验
	UINT		liQuan;			//奖励礼券
	UINT        GoldNum;        //奖励金币
	int         number;        //任务今天可完成的数量
	std::string title  ;        //显示在任务栏中的标题
	std::string target;        //标题
	std::string	explainStr;		//任务说明
	int        expId;         //经验Id
	int        goldId;        //金币id
	int        liQuanId;      //奖励礼券的id
	RewardQuestProto()
	{
		questId			= 0;
		questGrade		= 0;
		type			= 0;
		acceptAmount	= 0;		
		amount			= 0;
		fighting        = 0;
		title           = "";
		target          = "";
		needNum			= 0;	
		attactId		= 0;
		NPCId           = 0;
		exp				= 0;	
		liQuan			= 0;	
		GoldNum         = 0;
		explainStr		= "";
		number          = 0;
		expId           = 0;
		goldId          = 0;
		liQuanId        = 0;
	}
};

struct  AllRewardQuestProto
{
	short		questId;		//任务Id
	BYTE		questGrade;		//任务等级
	BYTE		type;			//任务类型
	short		acceptAmount;	//已领取份数
	short		amount;			//任务总份数
	UINT        fighting;		//战斗力
	int			needNum;		//需要数量
	UINT		attactId;		//怪物ID
	UINT        NPCId;			//目标Id
	UINT		exp[8];			//奖励经验
	UINT		liQuan[8];		//奖励礼券
	UINT        GoldNum[8];     //奖励金币
	int         number;        //任务今天可完成的数量
	std::string title  ;        //显示在任务栏中的标题
	std::string target;        //标题
	std::string	explainStr;		//任务说明
	int        expId;         //经验Id
	int        goldId;        //金币id
	int        liQuanId;      //奖励礼券的id
	int		   accept_level; //j接取最小等级
	AllRewardQuestProto()
		:questId(0)
		,questGrade(0)
		,type(0)
		,acceptAmount(0)
		,amount(0)
		,fighting(0)
		,needNum(0)
		,attactId(0)
		,NPCId(0)
		,number(0)
		,expId(0)
	    ,goldId(0)
	    ,liQuanId(0)
		,accept_level(0)
	{
		memset(exp,0,sizeof(UINT) * 8);
		memset(liQuan,0,sizeof(UINT) * 8);
		memset(GoldNum,0,sizeof(UINT) * 8);
		//memset(this, 0, sizeof(*this));
	}
};

struct PathInfo{
	int x;
	int y;
	std::string mapTag;
	PathInfo(){
		x = 0;
		y = 0;
		mapTag = "";
	}
};

struct s_net_cmd;
class RewardQuestMgr
{
private:
	RewardQuestMgr();
	~RewardQuestMgr();
	void initQuestMap();
public:
	void init();
	void destroy();
	static RewardQuestMgr* getInstance();
	static void destoryInstance()
	{
		if (m_pQuestMgr)
		{
			delete m_pQuestMgr;
			m_pQuestMgr =NULL;
		}
	}
	
public:
	void findRewardQusetInfo(RewardQuestProto& quest);
	static bool compare(const RewardQuestProto* quest1,const RewardQuestProto* quest2);

public:
	void sendAcceptQuest(unsigned int questId);
	void sendCompleteQuest(unsigned int questId);
	void sendAbandonQuest(unsigned int questId);
	void sendUpdateQuestState();
	void sendUpdateQuestList(unsigned int type);

	unsigned int onServerAccept( s_net_cmd *cmd );
	unsigned int onServerComplete( s_net_cmd *cmd );
	unsigned int onServerAbandon( s_net_cmd *cmd );
	unsigned int onServerQuestState( s_net_cmd *cmd );
	unsigned int onServerUpdateQuestList( s_net_cmd *cmd );

	void setCurrentQuestData();

	PathInfo getRolePathInfo(int roleId);

	//PathInfo getBossPathInfo(int roleId);

	void runToNPC(int roleID);

	RewardQuestProto *getFirstReward();

	bool isShowRedPoint();

	inline void setIsDataFreshed(bool isDataFreshed)
	{
		_isDataFreshed = isDataFreshed;
	}

	inline RewardQuestData* getCurQuestData() {return &m_pQuestData;}
	AllRewardQuestProto* get_one_reward_quest_data(short quest_id);
	inline bool getIsNoneAcceptQuest() {return _isNoneAcceptQuest;}
private:
	static RewardQuestMgr* m_pQuestMgr;
	bool m_pInit;
	RewardQuestData		m_pQuestData;//当前接取任务
	std::map<unsigned short,AllRewardQuestProto> m_pAllQuestMap;
	
	bool _isNoneAcceptQuest;
	bool _isDataFreshed;
	RewardQuestProto* _rewardQuest ;
public:
	typedef std::list<RewardQuestProto*>		REWARDQUESTLIST;
	REWARDQUESTLIST								m_pQuestList;//悬赏任务列表

	std::list<RewardQuestProto*> getQuestList();

};

#endif