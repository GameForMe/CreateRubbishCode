#ifndef EQUIPFUSIONUI_H
#define EQUIPFUSIONUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiTools.h"
#include "UiInterface.h"
#include "item.h"
#include "ItemNode.h"
#include "ProgressBar.h"
#include "GameActionNode.h"
#include "MessageBoxUi.h"
using namespace cocos2d;
using namespace cocos2d::extension;

class FubenRankUiLayer;
class ItemMarixLayer;
struct MutilGroupRefresh;
struct UpdateFusionFu;

enum eFubenRankUiTag
{
	EQUIPNAME = 1,//武器名字
	FIGHTCAPACITY=2,//战斗力
	QUALITYLIFT,//品质左
	QUALITYRIGHT,//品质右
	QUALITYMIDDLE,//品质中
	EQUIPATTR1=6,//属性1
	EQUIPATTR2=7,//属性1
	EQUIPATTR3=8,//属性1
	EQUIPATTR4=9,//属性1
	EQUIPATTR5=10,//属性1
	EQUIPATTR6,//属性1
	EXPENDITURE=16,//花费
	EXPPROGRESS = 30,//经验条
	EQUIPITEM = 4,//装备图片
	RUNENAME = 19,//符文名称
	RUNENUM = 24,//符文数量
	EQUIPFUSIONNAME = 22,//融合的装备名字
	UPQUALITYLABEL = 18,//下面品质文字图片
	DOWNQUALITYLABEL = 17,//上面品质文字图片
	EQUIPARROW1=11,
	EQUIPARROW2=12,
	EQUIPARROW3=13,
	EQUIPARROW4=14,
	EQUIPARROW5=15,
	EQUIPBTN1=41,
	EQUIPBTN2=42,
	EQUIPBTN3=43,
	EQUIPBTN4=44,
	EQUIPBTN5=45,
	CHECKBTN=46,//自动选择材料
	FUSIONITEM= 56,//洗练符文字
};

class EquipFusionUi : public UiInterface
{
public:
	EquipFusionUi();
	~EquipFusionUi();
	CCNode* openUi();
	virtual void closeUI();
	void setEquipFusionResultDate(s_net_cmd* cmd);
	void updateFusionQianData();
	void updateNum();
	//CCNode* create();
};

struct AttOption
{
	CheckButton*	cb;
	LabelFT*		label;

	AttOption():cb(nullptr),label(nullptr){}

	AttOption(CheckButton* c,LabelFT* l):cb(c),label(l)
	{

	}

};
class FrameSprite;
class EquipFusionUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	enum eEquipFusionTag
	{
		EFT_FightNumSE1=1,			//战斗力特效node			31
		EFT_FightNumSP1,			//战斗力文字精灵			32
		FightNumValue = 35,						//战斗力								32
		EFT_EquipClean = 36,		//装备洗练后显示特效
	};
	enum eEquipAttTag
	{
		EAA_ExAttackMin		= 0,		// 物攻下限
		EAA_ExAttackMax		= 1,		// 物攻上限
		EAA_InAttackMin		= 2,		// 魔攻下限
		EAA_InAttackMax		= 3,		// 魔攻上限
		EAA_ArmorEx			= 4,		// 道攻下限
		EAA_ArmorIn			= 5,		// 道攻上限
		EAA_ExAttack		= 6,		// 物防下限
		EAA_ExDef			= 7,		// 物防上限
		EAA_InAttack		= 8,		// 魔防下限
		EAA_InDefense		= 9,		// 魔防上限
		EAA_HitRate			= 10,		// 命中
		EAA_Dodge			= 11,		// 闪避
		EAA_Crit_Rate		= 12,		// 暴击
		EAA_UnCrit_Rate		= 13,		// 反暴击
		EAA_MaxHP			= 14,		// hp
		EAA_MaxMP			= 15,		// mp	
		EAA_End,
	};
public:

	EquipFusionUiLayer():_appointframe(NULL),_currNum(0),_tryToLockPos(0){}
	~EquipFusionUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(EquipFusionUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

	//界面初始化加载时执行
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	int getItemUnderPoint( const CCPoint &pos );
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onEnter();
	void noticeRecharge(); //add by vvv 2014.11.05跳转到充值界面
	//界面退出后执行
	virtual void onExit();

	void UpdateScrollViewDate();
	unsigned int setEquipFusionLvUpResultDate(s_net_cmd* cmd);
	unsigned int setEquipFusionResultDate(s_net_cmd* cmd);
	unsigned int setEquipCleanResultDate(s_net_cmd* cmd);
	unsigned int setEquipLock(s_net_cmd* cmd);
	unsigned int onServerEquipFusionSpecify(s_net_cmd* cmd);
	//按钮事件
	void onEquipHighFusionbtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onEquipSpeedFusionbtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onEquipCleanbtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onEquipFusionbtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onEquipLevelUpbtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onOptionBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//指定洗练
	void onHelpBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//进阶说明
	void onHelp1Btn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//洗练说明
	void onCloseDescBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);		 //说明面板关闭事件
	//void onKnowBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);			 //说明面板确定事件
	void onKnowBtn1Pressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);	           //指定洗练界面确定事件

	void onCloseBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAtt1PressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAtt2PressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAtt3PressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAtt4PressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAtt5PressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onDropEndItem( CCNode* pNode, short nIdx );
	void onClickDropEndItem( short nIdx );
	void onDoubleClickDropEndItem( short nIdx );

	CCRect GetFusionPos(unsigned int dwItemID);
	CCRect GetBtnPos(int nTag);
	int GetFusionNum(unsigned int dwItemID);
	void onEquipCleanFusionOk();
	void onEquipSpeedFusionOk();
	void onEquipHighFusionOk();
	//更新界面上的数值
	void SetFusionQianData();
	void togECBTip(bool state);

	//messbox
	void onMessageBoxEquipLevelUpOk(); //升阶
	void onMessageBoxEquipLockOk();//锁定
	void onMessageBoxEquipUnLockOk();//解锁

	void onLockStateChange(int id,int lock);
	void lockEquip(int idx,int state);
	void updateNum();
	void updateHideEquipFusionAllControl();
private:
	void onChangeCheckBtnState(CheckButton* btn,bool bSel);
	//void updateCheckButtonState(int equipFlag,int att,CheckButton* ckbtn);
	std::string qualitytoAppointNum(EItemQuality quality);
	//void updateAddNum(MutilGroupRefresh * mug);//更新最大指定数值
	void saveLockedEquipAttType(int addEquip);
	void eraseLockedEquipAttType(int addEquip);

	void updateCheckOptionEnableState();
	bool isLockedAtt(int attType)const;
	int getAttTypeFromCheckBtn(CheckButton* cb)const;
	int getOriAttTypeByLabel(LabelFT* label);

	std::string getEquipOriString(f_equipment* equip,int equipAttType);

	typedef std::map<CCNode * ,std::pair<string ,string> > Label2StringPairMap;
	Label2StringPairMap  _labelToStringPair; 

	typedef std::map<int,AttOption> OptionMap;
	OptionMap	_optMap;
	AttOption const* getOption(int attType);

	struct tagEquipAttDisplayData 
	{
		LabelFT*		label;
		int					equipAttType;

		tagEquipAttDisplayData()
			:label(nullptr)
			,equipAttType(-1)
		{

		}

		tagEquipAttDisplayData(LabelFT*l,int att)
			:label(l)
			,equipAttType(att)
		{

		}
	};
	std::vector<tagEquipAttDisplayData>  _equipAttTextLabels;
	void changeEquipAttDisplayData(size_t pos,int equipAttType);
	size_t getAttLabelPosByEquipAttType(int equipAttType);

	std::map<CheckButton * ,int> _checkBtnToEquipAttType;//选项-》属性枚举；

	std::vector<CheckButton *> allOptionCheckBtn;
	std::map<int,LabelFT *> allOptionTextLable;

	void updateOptionNumString();

	void setDefaultFusionOption(std::vector<int>const& defualtAttList);

	bool checkPolicy(CheckButton* sender);
	int getCheckedNotLocked();

	bool reallyChecked(CheckButton const* btn) const;
	//bool attOptionChecked(int equipAttType)const;
	CheckButton* getCbByEquipAttType(int equipAttType)const;

	int getFusinCost(int& nItemNeedNum)const;

	void resetLabelAnim(f_equipment* equip);

	int getLinkedCheckBtnAttType(LabelFT* label);
	//MultiSelectButtonGroup::CheckPolicy 
	//std::vector<CCLabelTTF * > allLabel;
private:
	void InitItemData(int nRefreshFlag=0);	//0:初始化 1:升品质 2:洗练刷新
	//void setItemData(f_equipment* equip);
	void setQualityLift(unsigned char qualityCode);
	std::string getEquipName(unsigned int equipId);
	//std::string converQualityToString( EItemQuality quality );
	//void updateItemData();
	std::string setItemFuIcon(EItemQuality quality);
	void setExp( int cur, int max );
	void initAttrNameStr();
	std::string getEquipAttToString(ERoleAttribute eRoleAtt,int eValue);
	std::string fusionConverQualityToString( EItemQuality quality );
	int getEquipLv(unsigned int equipId);
	GameActionNode* getFightNumSuperEffect();					//获得战斗力特效			【Ji：】
	void refreshQuanlityChar(f_equipment* equip);
	//std::string initArrows(double att,int randAtt);
	void updateLock(std::string icon,CCControlButton *btn);
	//void setLockMessage(int attId,int lockFlag);
	int getLockAttNum() const;
	GameActionNode* setEquipEffect();
	void onSECalback(float dt);
	void playSuccessSE();
	void playFontEffect();
	GameActionNode* getNodeEffect();
	void showEquipCleanEffect(LabelFT* attLabel/*, std::string beforeShowAtt*/);//装备洗练后出现的特效
	void updateItemCostNum();
	void UpdateFusionLabel(UpdateFusionFu * updatemsg);

	int calRealyCheckedNum() const;
	bool anyChecked()const{return calRealyCheckedNum() >0;}
	void updateChecked(f_equipment* p,std::vector<int>& attList);
	//void playLabelAnim(int att,bool play);
	void switchLabelString(CCNode * object);

	void delayPlaySwtich();
	void playSwitch(LabelFT* label);

	int getMaxAttNum();

	std::map<CCNode *,CCSprite *> _attCharPics;
private:
	//MultiSelectButtonGroup _checkBtnGroup;

	//int lockAppointNum;
	float fPct;
	int _currNum;
	CCLabelBMFont* _fightNumBLabel;				//战斗力艺术字label //add by vvv 2014.11.12
	MessageBoxUi * messageBox;//add by vvv 2014.11.10
	CCSprite *_frame;
	CCLayer *_contentLayer;
	CCScrollView *_scrollView;
	std::map<short, f_item*> _items;

	int itemIndex2,rowItem;

	CCNode *_container;
	//FrameSprite *_descframe;     //升级说明界面
	FrameSprite * _appointframe;//指定洗练界面
	CCSprite* bgsprite;

	LabelFT* equipName;//武器名字

	LabelFT* fightCapacity;//战斗力
	//LabelFT* qualityLift;//品质左
	//CCLabelTTF* qualityRight;//品质右
	//CCLabelTTF* qualityMiddle;//品质中
	LabelFT* equipAttr_1;//属性1
	LabelFT* equipAttr_2;//属性1
	LabelFT* equipAttr_3;//属性1
	LabelFT* equipAttr_4;//属性1
	LabelFT* equipAttr_5;//属性1

	size_t _tryToLockPos;
	//CCLabelTTF* equipAttr_6;//属性1

	//size_t  getAttLabelPosByAttType(int equipAttType) const;
	LabelFT* getAttLabelByAttType(int equipAttType)const;
	void modifyAttLabelByPos(size_t pos,int newEquipAttType);
	size_t  getReplaceAttPosByAttType(int equipAttType);
	bool isLinked(LabelFT* label)const;

	std::map<CheckButton*,LabelFT*>		_cbToAttLabelLink;
	void updatelink(bool bDelay =false);
	void updateLabelAnim(bool delay_anim);

	void replaceAnonymousLable();

	LabelFT* expenditure;//花费
	LabelFT * currequipQuality;//当前装备品质
	LabelFT * _funsionOptNumText;//最大指定个数；

	std::vector<CCSprite*>  _checkPics;
	f_equipment * pEquip;


	std::vector<int> _lockAttList; 
	//CCLabelTTF* curExp;//当前经验
	CCSprite* equipItem;//装备图片
	CCSprite* equipfu;//合成需要的符
	ProgressBar *_expProgress;//装备融合经验条
	std::map<ERoleAttribute, std::string> _indentifyAttrStr;

	void enableOptionState(int attType, bool bEnable);

	ItemMarixLayer* itemFusionLayer;
	int tempItemIndex;
	unsigned int dwAddExp;
	//战斗力特效				【Ji：】
	std::set<std::string> _plist;									//保存特效plist名称
	GameActionNode* _fightNumAcNode;

	LabelFT* runeName;//符文名称
	LabelFT* runeNum;//符文数量
	LabelFT* equipFusionName;//融合的装备名字

	std::string runeNameStr;
	int runeId;

	CCSprite* upQualityLabel;//上面品质文字图片
	CCSprite* downQualityLabel;//下面品质文字图片
	int equipAtt[EAA_End];
	CCSprite *equipArrow1;
	CCSprite *equipArrow2;
	CCSprite *equipArrow3;
	CCSprite *equipArrow4;
	CCSprite *equipArrow5;
	CCControlButton *equipBtn1;
	CCControlButton *equipBtn2;
	CCControlButton *equipBtn3;
	CCControlButton *equipBtn4;
	CCControlButton *equipBtn5;
	int equipAttNum1;
	int equipAttNum2;
	int equipAttNum3;
	int equipAttNum4;
	int equipAttNum5;
	int equipAttFlag1;
	int equipAttFlag2;
	int equipAttFlag3;
	int equipAttFlag4;
	int equipAttFlag5;
	int _attId;
	int _lockFlag;
	int xinghunIconId ;
	int fac_str[5];
	int factAttNum;
	CCSprite *effectSprite;
	CCSprite *effect;
	GameActionNode* _successAcNode;
	GameActionNode* fontAcNode;
	bool m_lockMsgLock;
	bool m_cleanMsgLock;
	//bool m_noShowCleanEffect;
	//MultiSelectButtonGroup * mugs;
	//bool isAppoint;
};

/*
class EquipFusionUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(EquipFusionUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(EquipFusionUiLayer);
};*/

#endif //EQUIPFUSIONUI_H