#ifndef NPC_H
#define NPC_H

#include "Role.h"
#include "BSAnimate.h"
#include "AnimationCache.h"
#include "PlayerState.h"
#include "MapManager.h"
#include "QuestMgr.h"
#include "LocalPlayer.h"

//npc状态
enum NpcState{
	CanAccept,//有未接取的任务
	Finish,//有已完成但是未点击“完成任务”按钮的任务
	NoAccept, //无可接任务
};

enum eNPCAnims
{
	NA_STAND = 0,
	NA_NUN
};

class NPC : public Role
{
public:
	NPC();
	virtual ~NPC();

	virtual CCPoint getHeadPos() const;
	virtual void update(float dt);

	void updateShowTaskNpcHead(NpcState state); 


	virtual void initFsm();
	virtual void runStandAni();
	virtual void runRunAni(){}
	virtual void runAttrackAni(){}
	virtual void runAttrackedAni(){}
	virtual void runSitAni(){}
	virtual void runDeadAni(){}

	void runTaskNpcHeadBegin();
	void runTaskNpcHeadFinish();
	void stopTaskNpcHead();

	virtual void stopAni();
	virtual void setAlpha(bool alpha);
	virtual bool loadAnimate(unsigned int id = 0);
	virtual int getRoleDir() { return 0; }
	void setNpcChat(std::string desstr,int count,bool isRotation);
	void updateStandChat(RoleManager::Npctalk info,bool isRotation);

	virtual void destroyFsm();
public:
	virtual void updateAnimConfig(){}

	void updateQuestTraceFlag(float fdt);
protected:
	GameActionNode *_taskNpcHead;//任务npc头顶标识
	CCSprite *_body;
	CCSprite *_shadow;
	CCNode *_entity;
	LabelFT* _mChatLabel;
	AnimationCache::AnimateList _anims;
	CCScale9Sprite *_npcChat;
	float _mStandTime;
	float _mUpdateTaskTime;
	float _mFightTime;
	float _mstandlast;//持续多久消失
	float _mFightlast;//持续多久消失
	bool _mIsStandLast;//是否开始待机持续消失
	bool _mIsFightLast;//是否开始战斗持续消失
	RoleManager::Npctalk _talkinfo;
	bool runTaskHead;
};

#endif //NPC_H