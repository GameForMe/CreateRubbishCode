#include "TradingSellLeftItemNoList.h"
#include "UiTools.h"
#include "TradingUI.h"
#include "UiManager.h"
#include "TCPClient.h"
#include "CfgReader.h"
#include "ListControl.h"
#include "LocalPlayer.h"
#include "CommonClient.h"
#include "TradingProto.h"
#include "PackageManager.h"
#include "Signals.h"

TradingSellLeftItemNoList::TradingSellLeftItemNoList()
	:m_pItemName(NULL)
	,m_PClickBtn(NULL)
	,m_pNewItemName(NULL)
{

}

TradingSellLeftItemNoList::~TradingSellLeftItemNoList()
{	

}		

cocos2d::extension::SEL_CCControlHandler TradingSellLeftItemNoList::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

bool TradingSellLeftItemNoList::onAssignCCBMemberVariable( CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode )
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pItemName);
	CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,"mClickBtn",CCControlButton*,m_PClickBtn);

	return false;
}

void TradingSellLeftItemNoList::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	m_pNewItemName = Helper::replaceLabelTTFWithLabelFTAndRemove(m_pItemName);
	CC_ASSERT(NULL != m_pNewItemName);
}

void TradingSellLeftItemNoList::refreshData(const std::string info)
{
	m_pNewItemName->setString(info.c_str());
}

TradingSellLeftItemNoList* TradingSellLeftItemNoList::createItem( const char* szFile,CCObject*pOwner,UiInterface* holder )
{
	CCNodeLoaderLibrary* lib  = CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
	CCBReader* reader = new CCBReader(lib);
	reader->autorelease();
	std::string strFullPath  = CFGReader::instance()->get_ui_ccbi_filepath(szFile);
	CCNode* node = reader->readNodeGraphFromFile(strFullPath.c_str(),pOwner);
	TradingSellLeftItemNoList* item = dynamic_cast<TradingSellLeftItemNoList*>(node);

	if (holder)
		holder->mergeSheet(reader->getLoadedSpriteSheet());

	return item;
}