#ifndef PLAYERSTATE_H
#define PLAYERSTATE_H

#include "Player.h"

//[bing] 这是摇杆移动触发
class LocalPlayerStateRun : public State<Role>
{
public:
	LocalPlayerStateRun() : _dt(0.f) {}
	static LocalPlayerStateRun *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);

private:
	float _dt;
	CCPoint direction;
};

class LocalPlayerStateStand : public State<Role>
{
public:
	LocalPlayerStateStand():_attackState(false){}

	static LocalPlayerStateStand *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);

	void cancel_atk_state(Role*);
protected:
	CCPoint _lastPos;
	bool _attackState;
};

/*
class LocalPlayerPerAttack : public State<Role>
{
public:
	static LocalPlayerPerAttack *getInstance();
	virtual void Enter(Role*);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};
*/

//[bing] 这是鼠标点击/触屏移动触发方式
class LocalPlayerStateRunPath: public State<Role>
{
public:
	LocalPlayerStateRunPath() : _dt(0.f) {}
	static LocalPlayerStateRunPath *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
private:
	float _dt;
	CCPoint direction;
};

class LocalPlayerStatePreAttack: public State<Role>
{
public:
	LocalPlayerStatePreAttack() : _dt(0.f),m_last_show_tip_time(0) {}
	static LocalPlayerStatePreAttack *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
private:
	float _dt;
	unsigned int	m_last_show_tip_time;		//上次显示蓝不足的时间，10S后提示下一次
	CCPoint direction;
};

class LocalPlayerStateAttack: public State<Role>
{
public:
	static LocalPlayerStateAttack *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
private:
	float _dt;
	bool _End;
};

//攻击之前要下马，准备攻击
class LocalPlayerStateAttackUnRide : public State<Role>
{
public:
	static LocalPlayerStateAttackUnRide *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class LocalPlayerStateManualAttack: public State<Role>
{
public:
	static LocalPlayerStateManualAttack *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};


class LocalPlayerStateBeAttack: public State<Role>
{
public:
	static LocalPlayerStateBeAttack *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};


class LocalPlayerStateDead: public State<Role>
{
public:
	static LocalPlayerStateDead *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class LocalPlayerStateRepel: public State<Role>
{
public:
	static LocalPlayerStateRepel *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class LocalPlayerStateAssault: public State<Role>
{
public:
	static LocalPlayerStateAssault *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
private:
	const static int AssaultSkillId = 1010701;
};


class LocalPlayerStateSit: public State<Role>
{
public:
	static LocalPlayerStateSit *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class LocalPlayerAutoUse: public State<Role>
{
public:
	static LocalPlayerAutoUse *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);

	void revertToPreviousState(Role *role);

private:
	float _dt;
};

class LocalPlayerDizzyState : public State<Role>
{
public:
	static LocalPlayerDizzyState *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class LocalPlayerTieState : public State<Role>
{
public:
	static LocalPlayerTieState *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateRunTo : public State<Role>
{
public:
	static RoleStateRunTo *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateStandTo : public State<Role>
{
public:
	static RoleStateStandTo *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateStand : public State<Role>
{
public:
	RoleStateStand()
	{
		_dt = 0.0;
		bIsPerAttack = false;
	}

	static RoleStateStand *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);

private:
	bool bIsPerAttack;
	float _dt;
};


class RoleStateAttack : public State<Role>
{
public:
	static RoleStateAttack *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};


class RoleStateDead : public State<Role>
{
public:
	static RoleStateDead *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateBeAttack : public State<Role>
{
public:
	static RoleStateBeAttack *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateRepel: public State<Role>
{
public:
	static RoleStateRepel *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateAssault: public State<Role>
{
public:
	static RoleStateAssault *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
private:
	const static int AssaultSkillId = 1010701;
};


class RoleStateSit: public State<Role>
{
public:
	static RoleStateSit *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateDizzy : public State<Role>
{
public:
	static RoleStateDizzy *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateUpdateDisplay : public State<Role>
{
public:
	static RoleStateUpdateDisplay *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

class RoleStateTie : public State<Role>
{
public:
	static RoleStateTie *getInstance();
	virtual void Enter(Role*,bool);
	virtual void Execute(Role*, float);
	virtual void Exit(Role*);
	virtual bool OnMessage(Role*, const Telegram&);
};

#endif //PLAYERSTATE_H