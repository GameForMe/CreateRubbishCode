#include "World.h"
#include "SelectRole.h"
#include "CreateRole.h"
#include "JoyStick.h"
#include "TCPClient.h"
#include "LocalPlayer.h"
#include "UpMgr.h"
#include "ToolTip.h"
#include "NameMgr2.h"
#include "RoleManager.h"
#include "ActionProto.h"
#include "LoginProto.h"
#include "RoleInfoProto.h"
#include "CombatProto.h"
#include "PlayerState.h"
#include "ExchangeMgr.h"
#include "RoleHeadUi.h"
#include "QuestMgr.h"
#include "SelectRoleHeadUi.h"
#include "MiniMapUi.h"
#include "SystemUi.h"
#include "ShortCutUi.h"
#include "SkillUi.h"
#include "SkillManager.h"
#include "MessageBoxUi.h"
#include "SelectRole.h"
#include "WorldMapUi.h"
#include "MessageDispatcher.h"
#include "MarryMgr.h"
#include "Monster.h"
#include "NPC.h"
#include "ClientUpdate.h"
#include "SkillAnimManager.h"
#include "TaskTraceUi.h"
#include "NPCTalkUi.h"
#include "StoreMgr.h"
#include "PackageUi.h"
#include "TransmitMgr.h"
#include "PackageManager.h"
#include "CfgReader.h"
#include "AnimationCache.h"
#include "RewardMgr.h"
#include "TaskUi.h"
#include "RoleEquipUi.h"
#include "DropDragDelegate.h"
#include "RoleAttrUi.h"
#include "GroundItemManager.h"
#include "FriendUi.h"
#include "SocialMgr.h"
#include "NewPlayerGuide.h"
#include "WelcomeUi.h"
#include "NewPlayerGuide.h"
#include "BSAnimate.h"
#include "TeamMgr.h"
#include "GambleMgr.h"
#include "Phyx.h"
#include "ShopMgr.h"
#include "MallMgr.h"
#include "RemoteRoleStateMgr.h"
#include "Auto_ActionMgr.h"
#include "ChatMgr.h"
#include "FMBManager.h"
#include "WingManager.h"
#include "PlacardManager.h"
#include "FilterMgr.h"
#include "HearSayMgr.h"
#include "ChatUi.h"
#include "SystemMsg.h"
#include "role_title_protocol.h"
#include "ShuangXiuMgr.h"
#include "ExchangeBusinessMgr.h"
#include "InstanceMgr.h"
#include "GuildMgr.h"
#include "UiManager.h"
#include "UiTools.h"
#include "RoleProxy.h" 
#include "tools.h"
#include <fstream>
#include "NewPlayerGuide.h"
#include "CrossSceneUI.h"
#include "DBMgr.h"
#include "VIPMgr.h"
#include "HookSetUi.h"
#include "StallMgr.h"
#include "Monster.h"
#include "ExchangeMgr.h"
#include "MasterPrenticeMgr.h"
#include "OffLineExpUi.h"
#include "ServerActivityUi.h"
#include "RankMgr.h"
#include "InputSerialUi.h"
#include "BattlefieldUi.h"
#include "BattlefieldMgr.h"
#include "LoginGiftUi.h"
#include "NoticeBoardUi.h"
#include "change_gs_protocol.h"
#include "LoginProto.h"
#include "md5.h"
#include "ccMacros.h"
#include "CommonMsgDefine.h"
#include "FubenUI.h"
#include "WorldPacket.h"
#include "FubenSaoDangUI.h"
#include "FubenRankUI.h"
#include "EquipUpStarUIMgr.h"
#include "EquipLevelUpUiMgr.h"
#include "ArenaMainMgr.h"
#include "NpcChatLuaMgr.h"
#include "MailRewardMgr.h"
#include "BossPKMgr.h"
#include "NewStallUI.h"
#include "FubenInfoUI.h"
#include "MysteryBoxUi.h"
#include "ArenaMainUI.h"
#include "Stall_define.h"
#include "NumericalIniMgr.h"
#include "MountUi.h"
#include "Movie.h"
#include "UiResourceMgr.h"
#include "GongfaTip.h"
#include "ArenaRankUi.h"
#include "ChongZhiActivityMgr.h"
#include "ChongZhiActivityFarmeUI.h"
#include "RebateUi.h"
#include "PvpDeathUi.h"
#include "PlayerStallUi.h"
#include "FragmentCompoundUi.h"
#include "ItemTip.h"
#include "EquipTipUi.h"
#include "ReceiveRewardUi.h"
#include "AttackAction.h"
#include "ImmediateEquipUi.h"
#include "DaRongLu.h"
#include "PlayerStallMgr.h"
#include "MysteryBoxUi.h"
#include "UiManager.h"
#include "cangjinggeui.h"
#include "WuXueUi.h"
#include "PackageManager.h"
#include "InstanceProto.h"
#include "TeamMgr.h"
#include "InstanceMgr.h"
//#include "QuickConfig.h"
#include "BaseDefine.h"
#include "NewFuncGuider.h"
#include "GameEventDefine.h"
#include "MiniMapNode.h"
#include "MapManager.h"
#include "RewardQuestMgr.h"
#include "QuestProto.h"
#include "cc_profiler.h"
#include "ActivityMgr.h"
#include "RebateMgr.h"
#include "StateMachine.h"
#include "InviteListView.h"
#include "cocoa/CCObject.h"
#include "TeamUi.h"
#include "AppDelegate.h"
//#include "QuickConfig.h"
#include "CommonView.h"
#include "BePKRemindEffect.h"
#include "DelayUi.h"
#include "ForgingMgr.h"
#include "InputMessageBox.h"
#include "KaifuHuodongMgr.h"
#include "Auto_ActionMgr.h"
#include "TradingMgr.h"
#include "TradingProto.h"
#include "PenaltyUi.h"
#include "ClientCfg.h"
#include "AutoSelfProtect_define.h"
#include "Huabanyu.h"
#include "BossSkillManager.h"
#include "MysteryBoxUi.h"
#include "FuncGuideMgr.h"
#include "MysteryShop.h"
#include "BuySetUi.h"
#include "ActionProto.h"
#include "NPCTalkUi.h"
#include "LevelEquipUi.h"
#include "CrossSceneFuBenUI.h"
#include "FMBattleMgr.h"
#include "GvGProtocol.h"
#include "f_string_table.h"
#include "GuaJiManager.h"
#include "FlashSellShopMgr.h"
#include "BloodFightMgr.h"
#include "AutoSelfProtect.h"
#ifdef CC_PROFILE_ENABLE
#include "ProfileListener.h"
#endif
#include "FindBackUi.h"
#include "boost/lexical_cast.hpp"
#include "DeathUi.h"
#include "NotificationManager.h"
#include "ServerListUi.h"
#include "f_zhuzai_mgr.h"
#include "ForgingDecomUI.h"
#include "AnswerManager.h"
#include "NewRoleTitleUi.h"
#include "BuffEffectShow.h"
#include "RoleDefine.h"
#include "SBKSDManager.h"

#include "SecondVerifyMgr.h"
#include "GuildNaturalGiftMgr.h"
#include "WorldLevelMgr.h"
#if ENABLE_GOTYE==1
#include "voice/VoiceMgr.h"
#endif

#include "f_simple_res_guard.h"

using namespace boost;


/*
#if (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)
#include <vld.h>
#endif
*/
//std::ofstream testOf;
#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
#include "wzolJni.h"
#endif
class CoreTreeUiLayer;
class WorldFuncCallback : public CCObject
{
public:
	static WorldFuncCallback *getInstance()
	{
		static WorldFuncCallback callBack;
		return &callBack;
	}

	void hpEffectCallback(CCNode *node)
	{
		World::getInstance()->hpChangeEffectCallback(node);
	}

	void monsterDeadCallback(CCNode *node)
	{
		World::getInstance()->monsterDeadCallback(node);
	}

	// 	void taskEffectCallback()
	// 	{
	// 		World::getInstance()->taskEffectFinishedCallback();
	// 	}
};

unsigned int static _crc32(const unsigned short* sz_buffer_)
{
	unsigned char* p_data = (unsigned char*)sz_buffer_;
	if( !(*p_data || *(p_data+1)) ) 
		return (unsigned int)-1;
	unsigned int n_result = *p_data++ << 24;
	n_result |= *p_data++ << 16;
	if( *p_data || *(p_data+1) )
	{
		n_result |= *p_data++ << 8;
		n_result |= *p_data++;
	}
	n_result = ~ n_result;
	int n_count = 0;
	while( (n_count&1) ? true : (*p_data || *(p_data+1)) )
	{
		n_result = (n_result << 8 | *p_data) ^ crc32_table[n_result >> 24];
		++p_data;
		++n_count;
	}
	return ~n_result;
}

World * World::getInstance()
{
	static World world;
	return &world;
}

World::World()
	: _miniMapUi(NULL)
	, _roleHeadUi(NULL)
	, _selectRoleHeadUi(NULL)
	, _taskTraceUi(NULL)
	, _gotoNewMap(false)
	, _newMapId((unsigned int)-1)
	, _bDeadName(false)
	, _killRoleID((unsigned int)-1)
	, _payIcon(NULL)
	, _pFlashShopBtn(NULL)
	, m_recast_button(NULL)
	, m_cur_show_button_type(e_null)
	//, _isPayClick(false)
	, _isPayClickBegin(false)
	, _payEffect(NULL)
	//, _serverEffect(NULL)
	,//_serverBtn(NULL)
	_serverEffectShowN(false)
	//, _giftuiIsOpen(false)
	//, _acceptTaskAcNode(NULL)
	//, _finishTaskAcNode(NULL)
	,_curHPMsg(0)
	, _isInTrigger(false)
	,_loginEnterSceneFlag(false)
	, addSpeedUpTime(0.0f)
	,addOffLineTime(0.0f)
	//,_fightRecord(NULL)
	,_BallCount(0)
	,bezier1x(0)
	,bezier1y(0)
	,bezier2x(0)
	,bezier2y(0)
	,_luandouTimeLabel(NULL)
	,_topSprite(NULL)
	,_bottomSprite(NULL)
	,beginIndex(0)
	,_isOpen(false)
	,ReSetIsAutoFight(true)
	,_recvHeartDelay(0)
	, _randMsgNums(0)
	,_getTLEXP(false)
	,_getTLEXPNums(0)
	,_underAttackEffect(NULL)
	,m_is_show_fmb_btn(false)
	,m_payIconEnable(true)
	,_in_move_action(false)
{
	_attached = false;
	_scene = NULL;
	IsAutoFight.Clear();

	//test
	//testOf.open("1.txt");

	_heartbeatInterval = CFG(float,"IntervalTime",2.0f);
	_heartbeatDelay = CFG(float,"DelayTime",2.0f);
	_disconnectionTims = CFG(float,"DisconnectionTime",10.0f);
	_accumulateTime = CFG(float,"AccumulateTime",2.0f);
	_intervalTime = 0.0f;
	_delayTime = 0.0f;
	_sendHeartbeat = true;
	_startSend = false;
	_repetLoginState = false;
	_repetCanGotoMap = false;
	_repetCanClose = false;
	_canOpenOffLine = true;
	_canAutoRun = true;
	_isOpenChange=false;
	_isShowFlashBtn = false;
	_isPlayUnderAttackBegin = false;
	_isPlayUnderAttackEnd = false;

	init_recharge_data();
}

World::~World()
{
	//testOf.close();
}

void World::close( bool isRepetLogin /*= false*/ )
{
#ifdef CC_PROFILE_ENABLE
	//ProfileListener* p = ProfileListener::create();
	//p->setZOrder(-128);
	//p->setPosition(ccp(0,500));
	//CCNode* p = getScene()->getChildByTag(111222);

	//g_Profiler.removeListener((ProfileListener*)p);
#endif

	//add by lpf
#if ENABLE_GOTYE==1
	VoiceMgr::getSingleton()->process(YYS_LOGIN, YY_CPLOGOUT, "");
	//	VoiceMgr::getSingleton()->destroy();
#endif

	_heartSendTimer.reset();
	_heartTimer.reset();
	_recvHeartDelay = 0;
	TradingMgr::getInstance()->Destroy();

	AudioPlayer::getSigletonPtr()->stopAllSoundEffect();
	_isOpen = false;
	RewardMgr::getInstance()->clearActivitySignList();
	getMiniMapUi()->setBtnHighLight(WCT_HUODONGBTN);
	//UiResourceMgr::getInstance()->releasePlistFile(_plist);					//释放特效资源【Ji：】

	CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this);
	openWingsBtnChange(false);
	//std::string sSEDir = CFGReader::instance()->get_profile_string("Art", "Effect", "");
	//std::string sSETask = sSEDir + "E1_31.plist";
	//CCSpriteFrameCache::sharedSpriteFrameCache()->removeSpriteFramesFromFile(sSETask.c_str());
	//sSETask = sSEDir + "E1_36.plist";
	//CCSpriteFrameCache::sharedSpriteFrameCache()->removeSpriteFramesFromFile(sSETask.c_str());

	//停止受击特效
	stopUnderAttackEffect();

	NewPlayerGuider::getInstance()->destroy();
	//_giftuiIsOpen = false;
	//_isPayClick = false;
	_miniMapUi->stopShouChongAnimation();
	_miniMapUi->removeFromParentAndCleanup(true);
	_miniMapUi = NULL;

	onFlashSellEffDone();
	destroy_pay_icon();

	if (_pFlashShopBtn)
	{
		_pFlashShopBtn->removeFromParentAndCleanup(true);
		_pFlashShopBtn = NULL;
	}

	if (m_recast_button)
	{
		m_recast_button->removeFromParentAndCleanup(true);
		m_recast_button = NULL;
	}

	register_update(false);
	/*stopLevleAim();
	if (_levelEquipBtn)
	{
	_levelEquipBtn->removeFromParentAndCleanup(true);
	_payIcon=NULL;
	}*/
	// 	if (_fightRecord)
	// 	{
	// 		_fightRecord->removeFromParentAndCleanup(true);
	// 		_fightRecord = NULL;
	// 	}
	//stopServerAnimation();
	_attached = false;
	PackageManager::getInstance()->destroy();

	ChongZhiActivityMgr::getInstance()->destroy();
	DropDragDelegate::getInstance()->detachFromScene();
	DropDragDelegate::getInstance()->destroy();

	ShuangXiuMgr::getInstance()->clear();
	SkillAnimManager::getInstance()->clearAll();
	SkillManager::getInstance()->destroy();
	RoleManager::getInstance()->freeAll();
	Huabanyu::getInstance()->Destory();
	LevelEquipMgr::getInstance()->Destroy();
	FlashSellShopMgr::getInstance()->Destroy();
	//AnimationCache::getInstance()->releaseAllAnis();
	FindBackUI * findBack=GET_UI(FindBackUI,WCT_FindBackUi);
	if(findBack)
		findBack->Destory();
	//在_scene销毁前调用
	_startSend = false;
	DelayUi::getInstace()->close();
	if (isRepetLogin == false)
	{
		CrossSceneUI::getInstance()->close();
	}
	else
	{
		//不清除过场动画
		CrossSceneUI::getInstance()->retain();
	}

	CC_SAFE_RELEASE_NULL(_scene);
	//_scene->release();
	//_scene = NULL;

	resetData();
	MapManager::getInstance()->resetData();
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if(player)
	{
		player->resetData();
	}

	//
	GambleMgr::getInstance()->Destroy();
	MallMgr::getInstance()->Destroy();
	RemoteRoleStateMgr::getInstance()->Destroy();
	SocialMgr::getInstance()->Destroy();
	TeamMgr::getInstance()->Destroy();
	AutoActionMgr::getInstance()->Destroy();
	ChatMgr::getInstance()->Destroy();
	FMBManager::getInstance()->Destroy();
	WingManager::getInstance()->Destroy();
	PlacardManager::getInstance()->Destroy();
	HearSayMgr::getInstance()->Destroy();
	//FilterMgr::getInstance()->Destroy();
	ExchangeBusinessMgr::getInstance()->Destroy();
	InstanceMgr::getInstance()->Destroy();
	ShopMgr::getInstance()->destroy();
	GroundItemManager::getInstance()->destroy();
	VIPMgr::getInstance()->Destroy();
	GuildMgr::getInstance()->destroy();//gx add
	QuestMgr::getInstance()->destroy();//gx add
	StallMgr::getInstance()->Destroy();
	TradingMgr::getInstance()->destroy();
	ExchangeMgr::getInstance()->Destroy();//gx add
	MasterPrenticeMgr::getInstance()->Destroy();//gx add 2013.12.12 多牛逼的一天啊。
	RankMgr::getInstance()->Destroy();//gx add 2014.1.9
	NameMgr2::getInstance()->Destroy();//gx add 2014.1.10
	//	BattlefieldMgr::getInstance()->Destroy(); 
	RewardMgr::getInstance()->destroy();//gx add 2014.3.13
	UNREG_NAME_CB(this , &World::onGetName);

	TransmitMgr::getInstance()->destroy();

	SystemMsg::getInstance()->clear();

	FubenMgr::GetInstance().ClearDataMap();
	NewStallMgr::GetInstance().cleardata();	//[bing] 玩家登出或返回角色大厅时需要清空一下摆摊数据

	ArenaMainMgr::getInstance()->clearjjcData();//清除jjc数据

	MailRewardMgr::getInstance()->clearAllMail();//清除邮件数据

	clearRemoteList();

	RoleActionMgr::GetInstance()->Destory();

	RewardQuestMgr::getInstance()->destroy();
	ConcernMgr::getInstance()->Destroy();
	CelebrateMgr::getInstance()->Destroy();
	KaifuHuodongMgr::getInstance()->destroy();

	ForgingMgr::getInstance()->resetData();
	SkillManager::getInstance()->resetData();
	BossPKMgr::getInstance()->Destory();
	FMBattleMgr::getInstance()->Destroy();
	//add 16.4
	MirValuableBookMgr::getInstance()->resetChangeStrongNums();

	GuaJiManager::getInstance()->destroy();

	GuildNaturalGiftMgr::getInstance()->Destroy();
	BloodFightMgr::getInstance()->Destroy();

	f_zhuzai_mgr::get_singleton().destroy();
	AnswerManager::get_singleton_ptr()->destory();
	SecondVerifyMgr::getInstance()->Destroy();
	WorldLevelMgr::getInstance()->Destroy();
	SBKSDManager::get_singleton_ptr()->destory();

	AutoSelfProtectMgr::getInstance()->SwitchHpCheck(true);
	//FuncGuideMgr::getInstance()->destory();//屏蔽

	//FuncGuideMgr::getInstance()->destory();

	addStoneAnim(false);
	//SystemMsg::getInstance()->clear();		//[bing] 析构时造成崩溃跳错 故注释掉 2014.6.27

	set_is_show_fmb_btn(false);

	//不是延迟重连才销毁
	if (isRepetLogin == false)
	{
		TCP_CLIENT->unregister_net_cmd(NET_G2C_DAY_FIRST_RECHARGE_STATE, this, &World::onDayFirstRechargeState);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_DAY_SECOND_RECHARGE_STATE, this, &World::onDaySecondRechargeState);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_VIPLV_CHANGE_INFO, this, &World::onVipLvChangeInfo);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_RIDING_BY_RIDE_LV, this, &World::onMountResult);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_STALL_BAG_NOT_ENOUGH,this,&World::onStallBagNotEnough);//服务器通知摊主背包空间不足
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_GET_MAIL_REWARD_RESULT,this,&World::onGetMailRewardResult);//服务器通知客户端请求领取邮件奖励结果
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_ALL_MAIL_REWARD,this,&World::onAddAllMailReward);//接收所有邮件
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_ADD_MAIL_REWARD,this,&World::onAddMailReward);//接收单个邮件
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_JJC_RANK,this,&World::onjjcRankResult);//接收接收jjc总排名
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_JJC_PK_RESULT,this,&World::onjjcPkResult);//接收jjcpk结果信息
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_JJC_INFO,this,&World::onUpdatejjcData);//接收jjc首页信息
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_JJC_PK_RESULT,this,&World::onRequestjjcPKResult);//接收jjc是否可以挑战的信息
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_JJC_WIN_REWARD_INFO,this,&World::onjjcWinRewardInfo);//接收竞技场挑战胜利奖励信息
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_EQUIP_STAR_LEVEL_UP_RESULT,this,&World::onEquipmentNext);//接收下一集升星
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_EQUIP_LEVEL_UP_RESULT,this,&World::onUplevelEquipment);  //接收下一级装备基本属性
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_BUY_EQUIP_LEVEL_UP_ITEM_RESULT,this,&World::onGetLevelUpStuff); //接收购买装备升级材料结果
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_KUNGFU_PICK_UP_RESULT,this,&World::onGetKungfuPickUpResult); //接收功法拾取结果
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PLAY_SCENE_EFFECT, this, &World::jieshoutexiao);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_synchronize_stand", this, &World::onSynchronizeStand);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_synchronize_walk", this, &World::onSynchronizeWalk);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_ROLE_TELEPORT, this, &World::onRoleTeleport);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_get_remote_role_state", this, &World::onGetRemoteRoleState);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_remove_remote", this, &World::onRemoveRemote);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_skill", this, &World::onSkill);
		//TCP_CLIENT->unregister_net_cmd("NET_SIS_get_name_by_nameid", this, &World::onGetName);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_hp_change", this, &World::onHPChange);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_dead", this, &World::onRoleDead);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_die_Penalty", this, &World::onRoleDiePenalty);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_revive", this, &World::onRevive);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_single_role_att_change", this, &World::onMainAttrChange);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_mutiple_role_att_change", this, &World::onMultiAttrChange);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_single_remote_att_change", this, &World::onOtherAttrChange);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_get_remote_creature_state", this, &World::onGetRemoteCreatureState);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_change_role_level", this, &World::onRoleLevelChanged);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_special_move", this, &World::onSpecialMove);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_hit_target", this, &World::onHitTarget);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_change_role_exp", this, &World::onRoleExpChanged);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_goto_new_map", this, &World::onGotoNewMap);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_day_clear", this, &World::onGetLocalRoleDayClearData);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_day_clear_two", this, &World::onGetLocalRoleDayClearDataTwo);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_day_clear_two_data", this, &World::onGetLocalRoleDayData);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_enum_role", this, &World::onEnumRoleList);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_return_role_select", this, &World::onReturnSelectRole);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SKILL_EXP_INFO, this, &World::onSkillExpInfo);//接收领悟数据

		//点卡相关
		TCP_CLIENT->unregister_net_cmd("NET_SIS_card_deadline_message", this, &World::onCardDeadLineInfo);
		//玩家时间信息相关
		TCP_CLIENT->unregister_net_cmd("NET_SIS_player_time_message", this, &World::onPlayerTimeMessage);
		//称号
		TCP_CLIENT->unregister_net_cmd("NET_SIS_get_role_titles", this, &World::onGetRoleTitles);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_use_role_title", this, &World::onUseRoleTitle);	
		TCP_CLIENT->unregister_net_cmd("NET_SIS_net_titles", this, &World::onAddRoleTitle);	
		TCP_CLIENT->unregister_net_cmd("NET_SIS_delete_title", this, &World::ondeleteRoleTitle);	 
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_title_change_broad", this, &World::onOtherRoleTitleChange);	
		TCP_CLIENT->unregister_net_cmd("NET_SIS_get_active_info", this, &World::onInitActiveInfo);	

		//角色更名
		TCP_CLIENT->unregister_net_cmd("NET_SIS_change_role_name", this, &World::onChangeRoleName);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_guild_change_name", this, &World::changeGuildState);
		//登陆送礼
		TCP_CLIENT->unregister_net_cmd("NET_SIS_get_daily_online_reward",this,&World::onGetDailyReward);
		//角色脚本数据
		TCP_CLIENT->unregister_net_cmd("NET_SIS_set_role_script_data_array",this,&World::onGetRoleScriptData);
		//角色其余的一些基本数据，客户端需要的
		TCP_CLIENT->unregister_net_cmd("NET_SIS_get_role_some_data",this,&World::onGetRoleSomeData);
		//摇钱树
		TCP_CLIENT->unregister_net_cmd("NET_SIS_get_recharge_feedback_flag",this,&World::onGetRechargeFeedbackOpen);

		TCP_CLIENT->unregister_net_cmd("NET_SIS_cgs_begin_change",this,&World::onCgsBegin);

		TCP_CLIENT->unregister_net_cmd("NET_L2C_proof_result" , this , &World::onLoginProof);

		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_MAP_LIMIT_INFO, this, &World::onRecvMapLimitInfo);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_LEAVE_INSTANCE_RESULT, this, &World::onRecvLeaveInstance); //离开副本
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_SAODANG_INFO, this, &World::onRecvSaodangInfo);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_FUBEN_FINAL_INFO, this, &World::onRecvFubenFinalInfo);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_FUBEN_RET, this, &World::onRecvFubenRet);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_DUORENFUBEN_RET, this, &World::onRecvDuoRenFubenRet);

		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_BOSS_LIST, this, &World::onGetBossData);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PLAY_TALK, this, &World::onPlayTalk);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_CONFIRM_STALL_ITEM_RESULT, this, &World::onG2C_CONFIRM_STALL_ITEM_RESULT);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_STALL_START_RESULT, this, &World::onG2C_REQUEST_STALL_START_RESULT);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_LOOK_OTHER_STALL_RESULT, this, &World::onLOOK_OTHER_STALL_RESULT);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_STALL_DOWN_RESULT, this, &World::onG2C_REQUEST_STALL_DOWN_RESULT);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_STALL_BUY_RESULT, this, &World::onG2C_REQUEST_STALL_BUY_RESULT);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_STALL_END_RESULT, this, &World::onG2C_REQUEST_STALL_END_RESULT);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_OPEN_TREASURE_RESULT, this, &World::onMysteryBoxReward);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_OPEN_TREASURESHOP_RESULT, this, &World::onSynchronizeMysteryShop);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_OPEN_TREASURESHOP,this,&World::onMysteryShopOpen);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_BUY_TREASURESHOP, this, &World::onBuyTreasureShopItem);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_TREASURE_GET_REWARD_RESULT, this, &World::onGetMysteryBoxResult);

		//服务器向客户端发送提示信息
		TCP_CLIENT->unregister_net_cmd(NET_G2C_SEND_TIP_MSG, this, &World::onG2C_SendTipMsg);
		//充值赠礼相关	【J】2014.12.16
		TCP_CLIENT->unregister_net_cmd(NET_G2C_TOTAL_RECHARGE_REWARD_STATE, this, &World::onRechargeGiftLevelGet);
		TCP_CLIENT->unregister_net_cmd(NET_G2C_TOTAL_RECHARGE_CHANGE, this, &World::onTotalRechargeChange);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_stall_get_title", this, &World::onGetStallName);
		//注销合成消息
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_ITEM_COMPOSE_RESULT,this,&World::onUpdateData);
		//注销大熔炉温度消息
		TCP_CLIENT->unregister_net_cmd(NET_G2C_PROC_FUSION_DEGREES_RESULT,this,&World::onDarongluDegree);
		//注销战报结算消息
		TCP_CLIENT->unregister_net_cmd("NET_G2C_End_sbk",this,&World::receiveZhanbaoResult);
		//注销战报消息
		TCP_CLIENT->unregister_net_cmd("NET_SIC_sbk_rank",this,&World::receiveZhanbaoRequest);

		//离线池有关
		TCP_CLIENT->unregister_net_cmd("NET_SIS_leave_exp_clueon", this, &World::onGetLeaveExpInfo);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_pickup_leave_exp", this, &World::onPickupLeaveExp);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_day_all_Flower", this, &World::onGetLocalRoleDayFlower);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_day_all_Doublepair", this, &World::onGetLocalRoleDayDoublepair);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_day_all_RedEnvelope", this, &World::onGetLocalRoleDayRedEnvelope);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_day_all_byself", this, &World::onGetLocalRoleDayByself);
		//TCP_CLIENT->unregister_net_cmd("NET_SIS_role_day_all_startTime", this, &World::onGetLocalRoleDayStartTime);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_all_day_clear_data_sync", this, &World::onGetLocalRoleAllDayClearData);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_Summon_Boss", this, &World::onServerSummonBoss);

		//小飞鞋
		TCP_CLIENT->unregister_net_cmd("NET_SIS_Goto_Quest_Pos", this, &World::onGotoQuestPos);

		TCP_CLIENT->unregister_net_cmd("NET_SIS_Skill_Stone",this,&World::onServerSkillStone);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_logout_to_relation",this,&World::onLogoutToRelation);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_login_to_relation",this,&World::onLoginToRelation);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_heartbeat", this, &World::onServerHeartbeat);
		TCP_CLIENT->unregister_net_cmd("NET_SIS_get_role_init_state_att", this, &World::onRoleInitStateAtt);

		//小蜜信息
		TCP_CLIENT->unregister_net_cmd("NET_SIS_show_girl_data", this, &World::onXiaomiInfo);

		TCP_CLIENT->unregister_net_cmd("NET_SIS_daily_act_transmit", this, &World::onDailyacttransmit);	

		//月卡
		TCP_CLIENT->unregister_net_cmd("NET_SIS_role_month_card_state", this, &World::onMonthCardState);
		//月卡使用情况
		TCP_CLIENT->unregister_net_cmd("NET_SIS_MonthCardBegin", this, &World::onMonthCardBeginTime);

		TCP_CLIENT->unregister_net_cmd("NET_SIS_set_path", this, &World::onSetPath);

		TCP_CLIENT->unregister_net_cmd("NET_S2C_gvg_login_Group", this, &World::onReceiveWarTeamState);
		TCP_CLIENT->unregister_net_cmd("NET_SIC_gvg_bet_push", this, &World::onShowFMBBet);

		//TCP_CLIENT->clear();

		MapManager::getInstance()->unregisterCmd();
	}

	ToolTip::getInstance()->clear();
	addSpeedUpTime = 0.0f;
	addOffLineTime = 0.0f;
	_isShowFlashBtn = false;
	_isOpenChange = false;
	_in_move_action = false;
	_heartSendTimer.reset();
	_heartTimer.reset();

	GET_UI(HookSetUi, WCT_HookSetUi)->set_data_dirty(true);
}

void World::open( bool isRepetLogin /*= false*/ )
{	
	if (isRepetLogin)
	{
		_canOpenOffLine = false;
		_canAutoRun = false;
	}
	else
	{
		_canOpenOffLine = true;
		_canAutoRun = true;
	}
	_intervalTime = 0.0f;
	_delayTime = 0.0f;
	_finalTime = 0.0f;
	_sendHeartbeat = true;
	_startSend = true;
	openWingsBtnChange(false);
	_isShowFlashBtn = false;
	_isOpenChange = false;
	_in_move_action = false;
	_recvHeartDelay = 0;
	recvOldHeartTime = ServerTime::getInstance()->cal_current_server_dword_time();
	TradingMgr::getInstance()->Destroy();
	resetData();

	//配置文件初始化
	NumericalIniMgr::getInstance()->Init();


	NET_SIC_get_role_init_state getRoleInit;
	if (isRepetLogin == false)
	{
		getRoleInit.eType = ERIT_EnterGame;
		TCP_CLIENT->send_net_cmd(&getRoleInit, NP_CRITICAL, false);
	}
	else
	{
		getRoleInit.eType = ERIT_Att;
		TCP_CLIENT->send_net_cmd(&getRoleInit, NP_CRITICAL, false);

		getRoleInit.eType = ERIT_RepetEnterGame;
		TCP_CLIENT->send_net_cmd(&getRoleInit, NP_CRITICAL, false);
	}

	//_CrtCheckMemory();
	ClientUpdate::getInstance()->_currentScene = ST_WORLDSCENE;
	RewardMgr::getInstance()->init();
	NameMgr2::getInstance()->init();	
	RankMgr::getInstance()->init();	
	TransmitMgr::getInstance()->init();
	KaifuHuodongMgr::getInstance()->init();
	//打开一个遮挡的ui
	//30级装备消息
	LevelEquipMgr::getInstance()->init();
	//限时商店 Init
	FlashSellShopMgr::getInstance()->init();
	//经验找回
	FindBackUI * findBack=GET_UI(FindBackUI,WCT_FindBackUi);
	if(findBack)
		findBack->init();

	LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (localPlayer == NULL)
		return;
	RoleManager::getInstance()->getLocalPlayer()->sendInitTitle();

	// 	if(_scene == NULL)
	// 	{
	// 		_scene = CCScene::create();
	// 		_scene->retain();
	// 	}
	getScene(true);

	UiMgr::getInstance()->openUi(WCT_CROSSSCENEFUBEN,false);

	initHpChangeAttData();
	GET_UI(HookSetUi,WCT_HookSetUi)->read_config_from_local_file(); 
	GET_UI(MountUi, WCT_MountUi)->setMountConfig();
	//初始化技能管理器
	SkillManager::getInstance()->init();

	//FuncGuideMgr::getInstance()->initData();//屏蔽

	//初始化NpcChatLua脚本
	NpcChatLuaMgr::getInstance();
	//初始化Movie脚本
	CMovie::GetInstance();
	CMovie::GetInstance().ClearList();
	//副本扫荡消息注册
	InstanceMgr::getInstance()->Init();
	//goto _ForbitUI;
	//封魔榜mgr
	FMBattleMgr::getInstance()->init();
	//挂机数据的获取
	GuaJiManager::getInstance()->init();
	GuaJiManager::getInstance()->sendInitData();

	SecondVerifyMgr::getInstance()->Init();
	//答题manager
	AnswerManager::get_singleton_ptr()->init();
	SBKSDManager::get_singleton_ptr()->init();
	//付费图标按钮初始化;
	std::string uiDir = CFGReader::instance()->get_profile_string("Art", "UI", "");
	std::string mainuiList = uiDir + std::string("ccbResources/smallmapui.plist");
	CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile(mainuiList.c_str());//vv 2014.9.27 改变图片读取路径

	init_pay_icon();

	/*_levelEquipBtn=createControlButton("","smallui_first","smallui_first","smallui_first");
	_levelEquipBtn->setAnchorPoint(ccp(0.f,1.0f));
	_levelEquipBtn->setZoomOnTouchDown(true);
	_levelEquipBtn->setPosition(ccp(size.width - 170.0f,size.height * 0.7-70.0f));
	_levelEquipBtn->setTouchPriority(2);
	_levelEquipBtn->addTargetWithActionForControlEvents(PayClickCallBack::getInstance(), SEL_CCControlHandler(&PayClickCallBack::onLevelEquipBtnPressed), CCControlEventTouchUpInside);
	_levelEquipBtn->setTouchEnabled(false);
	_levelEquipBtn->setVisible(false);
	_scene->addChild(_levelEquipBtn,WZ_MINIMAPUI);
	_LevelEquipTimeLab = CCLabelBMFont::create();
	_LevelEquipTimeLab->setFntFile("Art/Scene/fontNum_12_0.fnt");
	_levelEquipBtn->addChild(_LevelEquipTimeLab,0);
	_LevelEquipTimeLab->setPosition(ccp(48,-2));
	_LevelEquipTimeLab->setScale(0.9);*/


	AnimationCache::getInstance()->setupEffectAnim(AT_Sin,"E1_216",true);
	AnimationCache::getInstance()->setupEffectAnim(AT_Sin,"E1_217",true);

	/*	_frame->getChildByTag(TTF_Tiao)->setZOrder(_origPrice->getZOrder()+1);
	_origPrice->setPosition(_frame->getChildByTag(TTF_OrigPrice)->getPosition());
	_origPrice->setScale(0.7);*/
	//战报按钮
	// 	_fightRecord = FightLayer::create();
	// 	_fightRecord->setVisible(false);
	// 	CCSize size = CCDirector::sharedDirector()->getWinSize();
	// 	_fightRecord->setPosition(ccp(size.width - 100,size.height/2 + 115));  
	// 	_scene->addChild(_fightRecord, WZ_MINIMAPUI);	
	//sbkGCZShowLianshaNode();
	//控制杆
	//Joystick *joyStick = Joystick::JoystickWithCenter(ccp(75,100), 50);
	//_scene->addChild(joyStick, WZ_JOY);
	//joyStick->Active();
	OPEN_UI(WCT_JoyStick);
	GET_UI(JoyStickUi, WCT_JoyStick)->setActivity(true);	

	//被选中的人物头像UI
	_selectRoleHeadUi = SelectRoleHeadUi::create();
	_scene->addChild(_selectRoleHeadUi, WZ_SELECTROLEHEADUI);
	_selectRoleHeadUi->setVisible(false);
	_selectRoleHeadUi->setBtnVisible(false);

	//小地图UI
	_miniMapUi = MiniMapUi::create();
	_scene->addChild(_miniMapUi, WZ_MINIMAPUI);
	CCSize mapSize = MapManager::getInstance()->getMap()->getContentSize();
	_miniMapUi->setMapSize(mapSize.width, mapSize.height);
	CCPoint rolePos = RoleManager::getInstance()->getLocalPlayer()->getPosition();
	_miniMapUi->onFocusPointChanged(rolePos);
	_miniMapUi->changeAreaName(MapManager::getInstance()->getMapName(MapManager::getInstance()->getCurMapId()).c_str());

	World::getInstance()->getMiniMapUi()->LPLvSetBtnVisible(localPlayer->getLevel(), true);

	//人物头像UI
	_roleHeadUi = RoleHeadUi::create();
	_scene->addChild(_roleHeadUi, WZ_MINIMAPUI);
	_roleHeadUi->setLevel(localPlayer->getLevel());
	_roleHeadUi->setExp(100.0f * localPlayer->getCurLevelExp() / localPlayer->getMaxLevelExp());
	_roleHeadUi->onHpChanged(localPlayer->getAttribute(RA_HP), localPlayer->getAttribute(RA_MaxHP));
	_roleHeadUi->onMpChanged(localPlayer->getAttribute(RA_MP), localPlayer->getAttribute(RA_MaxMP));
	_roleHeadUi->updateVIPIcon();	

	//系统UI
	OPEN_UI(WCT_SystemUi);
	//SystemUi *systemUi = dynamic_cast<SystemUi*>(OPEN_UI(WCT_SystemUi));
	//_systemUi = SystemUi::create();
	//_scene->addChild(_systemUi, WZ_SYSTEMUI);
	//SetRoleHeadTouch();

	//快捷键UI
	OPEN_UI(WCT_ShorCutUi);
	//ShortCutUi *shortCutUi = dynamic_cast<ShortCutUi*>(OPEN_UI(WCT_ShorCutUi));
	ShortCutUiLayer *shortCutLayer = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	//shortCutUi->setManualAttrackBtnDisplayFrame(localPlayer->getManualAttackBtnFrame().c_str());

	//简单任务ui
	_taskTraceUi = TaskTraceUi::create();
	_scene->addChild(_taskTraceUi, WZ_TASKTRACEUI);
	_taskTraceUi->signalSelectItem.connect(QuestMgr::getInstance() , &QuestMgr::onQuestTraceSelect);
	// 
	if(InstanceMgr::getInstance()->getIsInDragon())//如果是龙卫副本，再进入一次
	{
		InstanceMgr::getInstance()->onEnterLongWei();
	}

	//NPC对话
	NPCTalkUi *talk = NPCTalkUi::create();
	_scene->addChild(talk, WZ_POPUI, WCT_NPCDIALOG);
	talk->show(false);
	talk->signalSelectItem.connect(QuestMgr::getInstance() , &QuestMgr::onSelect);
	talk->signalSelectItemShop.connect(ShopMgr::getInstance() , &ShopMgr::onSelect);
	talk->signalSelectItemInstance.connect(TransmitMgr::getInstance() , &TransmitMgr::onSelect);
	talk->signalSelectItemInstance.connect(ExchangeMgr::getInstance() , &ExchangeMgr::onSelect);
	talk->signalSelectItemInstance.connect(UpMgr::getInstance() , &UpMgr::onSelect);
	talk->signalSelectItemInstance.connect(MarryMgr::getInstance() , &MarryMgr::onSelect);
	talk->signalSelectItemInstance.connect(StoreMgr::getInstance() , &StoreMgr::onSelect);
	talk->signalSelectItemInstance.connect(InstanceMgr::getInstance(),&InstanceMgr::onSelect);
	talk->signalSelectDaronglu.connect(DaRongLuUiMgr::GetInstance(),&DaRongLuUiMgr::onSelect);

	talk->signalAccept.connect(QuestMgr::getInstance() , &QuestMgr::onAccept);
	talk->signalFinished.connect(QuestMgr::getInstance() , &QuestMgr::onFinish);
	/*
	BePKRemindEffect *uiEffect = BePKRemindEffect::create();
	CCSize screenSize = CCEGLView::sharedOpenGLView()->getFrameSize();
	const CCSize& uiEffectSize = uiEffect->getContentSize();
	uiEffect->setScale(screenSize.width / uiEffectSize.width, screenSize.height / uiEffectSize.height);
	_scene->addChild(uiEffect,WZ_NewPlayerGuideLayer,WCT_BePKRemindEffect);
	uiEffect->setVisible(false);
	*/

	//BuffEffectShow* buff_effect = BuffEffectShow::create();
	//_scene->addChild(buff_effect,WZ_NewPlayerGuideLayer,WCT_BUFF_EFFECT_SHOW);	
	//	buff_effect->setVisible(false);

	//判断20%hp以下是否播放正在音效
	//bool isLowHpSoundPlaying = false;
	//聊天ui
	OPEN_UI(WCT_ChatUi);

	//systemUi->signalTaskBtnPressed.connect(this, &World::onSystemUiTaskBtnPressed);
	//systemUi->signalCharacterBtnPressed.connect(this, &World::onSystemUiCharacterBtnPressed);
	//shortCutLayer->signalAttrackBtnPressed.connect(this, &World::onAttackBtnPressed);
	shortCutLayer->signalSkillBtnPressed.connect(this, &World::onManualAttrackBtnPressed);

	//不是延迟重连才注册
	if (isRepetLogin == false)
	{
		TCP_CLIENT->register_net_cmd(NET_G2C_DAY_FIRST_RECHARGE_STATE, this, &World::onDayFirstRechargeState);
		TCP_CLIENT->register_net_cmd(NET_G2C_DAY_SECOND_RECHARGE_STATE, this, &World::onDaySecondRechargeState);
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_VIPLV_CHANGE_INFO, this, &World::onVipLvChangeInfo);
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_RIDING_BY_RIDE_LV, this, &World::onMountResult);
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_STALL_BAG_NOT_ENOUGH,this,&World::onStallBagNotEnough);//服务器通知摊主背包空间不足
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_GET_MAIL_REWARD_RESULT,this,&World::onGetMailRewardResult);//服务器通知客户端请求领取邮件奖励结果
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_ALL_MAIL_REWARD,this,&World::onAddAllMailReward);//接收所有邮件
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_ADD_MAIL_REWARD,this,&World::onAddMailReward);//接收单个邮件
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_JJC_RANK,this,&World::onjjcRankResult);//接收jjc总排名
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_JJC_PK_RESULT,this,&World::onjjcPkResult);//接收jjcpk结果信息
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_JJC_INFO,this,&World::onUpdatejjcData);//接收jjc首页信息
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_JJC_PK_RESULT,this,&World::onRequestjjcPKResult);//接收jjc是否可以挑战的信息
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_EQUIP_STAR_LEVEL_UP_RESULT,this,&World::onEquipmentNext);
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_JJC_WIN_REWARD_INFO,this,&World::onjjcWinRewardInfo);//接收竞技场挑战胜利奖励信息
		//【ji】：
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_EQUIP_LEVEL_UP_RESULT,this,&World::onUplevelEquipment);			
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_BUY_EQUIP_LEVEL_UP_ITEM_RESULT,this,&World::onGetLevelUpStuff);		//获得升级所需材料
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_KUNGFU_PICK_UP_RESULT,this,&World::onGetKungfuPickUpResult); //接收功法拾取结果
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_BOSS_LIST,this,&World::onGetBossData);	
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_OPEN_TREASURE_RESULT,this,&World::onMysteryBoxReward);				//接收打开宝箱数据
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_OPEN_TREASURESHOP_RESULT,this,&World::onSynchronizeMysteryShop);
		TCP_CLIENT->register_net_cmd(NET_G2C_OPEN_TREASURESHOP,this,&World::onMysteryShopOpen);
		TCP_CLIENT->register_net_cmd(NET_G2C_BUY_TREASURESHOP,this,&World::onBuyTreasureShopItem);
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_TREASURE_GET_REWARD_RESULT,this,&World::onGetMysteryBoxResult);	//接收领取宝箱奖励结果
		TCP_CLIENT->register_net_cmd(NET_G2C_PLAY_SCENE_EFFECT, this, &World::jieshoutexiao);
		TCP_CLIENT->register_net_cmd("NET_SIS_synchronize_stand", this, &World::onSynchronizeStand);
		TCP_CLIENT->register_net_cmd("NET_SIS_synchronize_walk", this, &World::onSynchronizeWalk);
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_ROLE_TELEPORT, this, &World::onRoleTeleport);
		TCP_CLIENT->register_net_cmd("NET_SIS_get_remote_role_state", this, &World::onGetRemoteRoleState);
		TCP_CLIENT->register_net_cmd("NET_SIS_remove_remote", this, &World::onRemoveRemote);
		TCP_CLIENT->register_net_cmd("NET_SIS_skill", this, &World::onSkill);
		//TCP_CLIENT->register_net_cmd("NET_SIS_get_name_by_nameid", this, &World::onGetName);
		TCP_CLIENT->register_net_cmd("NET_SIS_role_hp_change", this, &World::onHPChange);
		TCP_CLIENT->register_net_cmd("NET_SIS_role_dead", this, &World::onRoleDead);
		TCP_CLIENT->register_net_cmd("NET_SIS_role_die_Penalty", this, &World::onRoleDiePenalty);
		//点卡相关
		TCP_CLIENT->register_net_cmd("NET_SIS_card_deadline_message", this, &World::onCardDeadLineInfo);

		//玩家时间信息相关
		TCP_CLIENT->register_net_cmd("NET_SIS_player_time_message", this, &World::onPlayerTimeMessage);
		//称号
		TCP_CLIENT->register_net_cmd("NET_SIS_get_role_titles", this, &World::onGetRoleTitles);
		TCP_CLIENT->register_net_cmd("NET_SIS_use_role_title", this, &World::onUseRoleTitle);
		TCP_CLIENT->register_net_cmd("NET_SIS_net_titles", this, &World::onAddRoleTitle);	
		TCP_CLIENT->register_net_cmd("NET_SIS_delete_title", this, &World::ondeleteRoleTitle);	
		TCP_CLIENT->register_net_cmd("NET_SIS_role_title_change_broad", this, &World::onOtherRoleTitleChange);	
		TCP_CLIENT->register_net_cmd("NET_SIS_get_active_info", this, &World::onInitActiveInfo);	

		TCP_CLIENT->register_net_cmd("NET_SIS_role_revive", this, &World::onRevive);
		TCP_CLIENT->register_net_cmd("NET_SIS_single_role_att_change", this, &World::onMainAttrChange);
		TCP_CLIENT->register_net_cmd("NET_SIS_mutiple_role_att_change", this, &World::onMultiAttrChange);
		TCP_CLIENT->register_net_cmd("NET_SIS_single_remote_att_change", this, &World::onOtherAttrChange);
		TCP_CLIENT->register_net_cmd("NET_SIS_get_remote_creature_state", this, &World::onGetRemoteCreatureState);
		TCP_CLIENT->register_net_cmd("NET_SIS_change_role_level", this, &World::onRoleLevelChanged);
		TCP_CLIENT->register_net_cmd("NET_SIS_special_move", this, &World::onSpecialMove);
		TCP_CLIENT->register_net_cmd("NET_SIS_hit_target", this, &World::onHitTarget);
		TCP_CLIENT->register_net_cmd("NET_SIS_change_role_exp", this, &World::onRoleExpChanged);
		TCP_CLIENT->register_net_cmd("NET_SIS_goto_new_map", this, &World::onGotoNewMap);
		TCP_CLIENT->register_net_cmd("NET_SIS_role_day_clear", this, &World::onGetLocalRoleDayClearData);//gx add.
		TCP_CLIENT->register_net_cmd("NET_SIS_role_day_clear_two", this, &World::onGetLocalRoleDayClearDataTwo);//gx add.
		TCP_CLIENT->register_net_cmd("NET_SIS_role_day_clear_two_data", this, &World::onGetLocalRoleDayData);
		TCP_CLIENT->register_net_cmd("NET_SIS_enum_role", this, &World::onEnumRoleList);
		TCP_CLIENT->register_net_cmd("NET_SIS_return_role_select", this, &World::onReturnSelectRole);
		TCP_CLIENT->register_net_cmd(NET_G2C_SKILL_EXP_INFO, this, &World::onSkillExpInfo);

		//角色更名
		TCP_CLIENT->register_net_cmd("NET_SIS_change_role_name", this, &World::onChangeRoleName);
		TCP_CLIENT->register_net_cmd("NET_SIS_guild_change_name", this, &World::changeGuildState);

		//在此处注册登陆送礼消息，根据服务器返回的消息控制登陆送礼;
		TCP_CLIENT->register_net_cmd("NET_SIS_get_daily_online_reward", this, &World::onGetDailyReward);

		//角色脚本数据
		TCP_CLIENT->register_net_cmd("NET_SIS_set_role_script_data_array",this,&World::onGetRoleScriptData);

		//角色其余的一些基本数据，客户端需要的
		TCP_CLIENT->register_net_cmd("NET_SIS_get_role_some_data",this,&World::onGetRoleSomeData);

		//摇钱树
		TCP_CLIENT->register_net_cmd("NET_SIS_get_recharge_feedback_flag",this,&World::onGetRechargeFeedbackOpen);

		//[bing] 跨分流相关
		TCP_CLIENT->register_net_cmd("NET_SIS_cgs_begin_change",this, &World::onCgsBegin);
		TCP_CLIENT->register_net_cmd("NET_L2C_proof_result" , this , &World::onLoginProof);

		//[bing] 副本信息相关
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_MAP_LIMIT_INFO ,this, &World::onRecvMapLimitInfo);
		//离开副本
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_LEAVE_INSTANCE_RESULT ,this, &World::onRecvLeaveInstance);
		//扫荡信息
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_SAODANG_INFO, this, &World::onRecvSaodangInfo);
		//副本完成奖励页面
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_FUBEN_FINAL_INFO, this, &World::onRecvFubenFinalInfo);
		//副本返回值
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_FUBEN_RET, this, &World::onRecvFubenRet);
		//多人副本返回消息
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_DUORENFUBEN_RET, this, &World::onRecvDuoRenFubenRet);

		//剧情对话
		TCP_CLIENT->register_net_cmd(NET_G2C_PLAY_TALK, this, &World::onPlayTalk);
		//离线池有关
		TCP_CLIENT->register_net_cmd("NET_SIS_leave_exp_clueon", this, &World::onGetLeaveExpInfo);
		TCP_CLIENT->register_net_cmd("NET_SIS_pickup_leave_exp", this, &World::onPickupLeaveExp);
		TCP_CLIENT->register_net_cmd("NET_SIS_role_day_all_Flower", this, &World::onGetLocalRoleDayFlower);
		TCP_CLIENT->register_net_cmd("NET_SIS_role_day_all_Doublepair", this, &World::onGetLocalRoleDayDoublepair);
		TCP_CLIENT->register_net_cmd("NET_SIS_role_day_all_RedEnvelope", this, &World::onGetLocalRoleDayRedEnvelope);
		TCP_CLIENT->register_net_cmd("NET_SIS_role_day_all_byself", this, &World::onGetLocalRoleDayByself);
		//TCP_CLIENT->register_net_cmd("NET_SIS_role_day_all_startTime", this, &World::onGetLocalRoleDayStartTime);
		TCP_CLIENT->register_net_cmd("NET_SIS_all_day_clear_data_sync", this, &World::onGetLocalRoleAllDayClearData);
		TCP_CLIENT->register_net_cmd("NET_SIS_Summon_Boss", this, &World::onServerSummonBoss);

		//服务器发给客户端确认摆摊物品结果  结果[0 = 成功,非0 = 错误代码]
		TCP_CLIENT->register_net_cmd(NET_G2C_CONFIRM_STALL_ITEM_RESULT, this, &World::onG2C_CONFIRM_STALL_ITEM_RESULT);
		//服务器发给客户端开始摆摊结果  结果[0 = 成功,非0 = 错误代码]
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_STALL_START_RESULT, this, &World::onG2C_REQUEST_STALL_START_RESULT);
		//服务器发给客户端查看摊位信息  摊主ID(DWORD) + Count(INT) + << type(0 = Item,1 = Equip) + 物品结构(struct) + 价格(INT32) + 栏位索引(INT16)>>
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_LOOK_OTHER_STALL_RESULT, this, &World::onLOOK_OTHER_STALL_RESULT);
		//服务器发给客户端摆摊下架结果  结果[0 = 成功,非0 = 错误代码]
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_STALL_DOWN_RESULT, this, &World::onG2C_REQUEST_STALL_DOWN_RESULT);
		//服务器发给客户端购买结果  结果[0 = 成功 + 摊主ID(DWORD) + 摆摊栏位IDX(INT),非0 = 错误代码]
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_STALL_BUY_RESULT, this, &World::onG2C_REQUEST_STALL_BUY_RESULT);
		//服务器发给客户端收摊结果  结果[0 = 成功,非0 = 错误代码]
		TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_STALL_END_RESULT, this, &World::onG2C_REQUEST_STALL_END_RESULT);
		//服务器向客户端发送提示信息
		TCP_CLIENT->register_net_cmd(NET_G2C_SEND_TIP_MSG, this, &World::onG2C_SendTipMsg);
		//充值赠礼相关
		TCP_CLIENT->register_net_cmd(NET_G2C_TOTAL_RECHARGE_REWARD_STATE, this, &World::onRechargeGiftLevelGet); //服务器通知客户端充值赠礼状态
		TCP_CLIENT->register_net_cmd(NET_G2C_TOTAL_RECHARGE_CHANGE, this, &World::onTotalRechargeChange); //通知客户端充值总数改变
		TCP_CLIENT->register_net_cmd("NET_SIS_stall_get_title", this, &World::onGetStallName);
		//注册合成消息
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_ITEM_COMPOSE_RESULT,this,&World::onUpdateData);
		//注册大熔炉温度
		TCP_CLIENT->register_net_cmd(NET_G2C_PROC_FUSION_DEGREES_RESULT,this,&World::onDarongluDegree);
		//注册战报结算消息
		TCP_CLIENT->register_net_cmd("NET_G2C_End_sbk",this,&World::receiveZhanbaoResult);
		//注册战报消息
		TCP_CLIENT->register_net_cmd("NET_SIC_sbk_rank",this,&World::receiveZhanbaoRequest);
		TCP_CLIENT->register_net_cmd("NET_SIS_Skill_Stone",this,&World::onServerSkillStone);

		//小飞鞋
		TCP_CLIENT->register_net_cmd("NET_SIS_Goto_Quest_Pos", this, &World::onGotoQuestPos);

		TCP_CLIENT->register_net_cmd("NET_SIS_logout_to_relation",this,&World::onLogoutToRelation);
		TCP_CLIENT->register_net_cmd("NET_SIS_login_to_relation",this,&World::onLoginToRelation);
		TCP_CLIENT->register_net_cmd("NET_SIS_heartbeat", this, &World::onServerHeartbeat);
		TCP_CLIENT->register_net_cmd("NET_SIS_get_role_init_state_att", this, &World::onRoleInitStateAtt);

		//小蜜信息
		TCP_CLIENT->register_net_cmd("NET_SIS_show_girl_data", this, &World::onXiaomiInfo);

		TCP_CLIENT->register_net_cmd("NET_SIS_daily_act_transmit", this, &World::onDailyacttransmit);

		TCP_CLIENT->register_net_cmd("NET_SIS_set_path", this, &World::onSetPath);

		//月卡使用情况
		TCP_CLIENT->register_net_cmd("NET_SIS_role_month_card_state", this, &World::onMonthCardState);
		//月卡使用情况
		TCP_CLIENT->register_net_cmd("NET_SIS_MonthCardBegin", this, &World::onMonthCardBeginTime);

		TCP_CLIENT->register_net_cmd("NET_S2C_gvg_login_Group", this, &World::onReceiveWarTeamState);
		TCP_CLIENT->register_net_cmd("NET_SIC_gvg_bet_push", this, &World::onShowFMBBet);

		//注册消息
		MapManager::getInstance()->registerCmd();
	}

	NET_SIC_get_leave_exp getLeaveExp;
	TCP_CLIENT->send_net_cmd(&getLeaveExp, NP_IDLE, false);
	//交易行
	NET_C2G_Load_Trading_Role_Up getRoleUp;
	getRoleUp.dwClientRoleID = localPlayer->getId();
	TCP_CLIENT->send_net_cmd(&getRoleUp, NP_IDLE, false);

	NET_C2G_Load_Trading_Role_Get_Item	getItemMsg;
	getItemMsg.dwClientRoleID = localPlayer->getId();
	TCP_CLIENT->send_net_cmd(&getItemMsg, NP_IDLE, false);

	//注册摆摊物品更新
	SystemMsg::getInstance();

	//判断玩家是否死亡;
	if(localPlayer->isDead())
	{
		MapManager::getInstance()->getMap()->setGray();
		//unsigned int curMapId = MapManager::getInstance()->getCurMapId();
		//int sceneType = MapManager::getInstance()->getCurSceneType(curMapId);
		int sex = localPlayer->getAttribute(RA_SEX);
		if(sex == 0)
		{//女
			AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
		}
		else
		{//男
			AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
		}
		//先不这么做，上线需要处理的消息太多
		//int enemyId = localPlayer->getEnemyId();
		//if (localPlayer->getEnemyId() != NULL && IS_PLAYER(enemyId) && sceneType != 12)
		//{
		//	std::string roleName("");
		//	//首先获得玩家的名称
		//	if (NameMgr2::getInstance()->queryName(enemyId,roleName))
		//	{//人物杀死
		//		OPEN_UI(WCT_PvpDeathUi);
		//		PvpDeathUi* pUI =  GET_UI(PvpDeathUi, WCT_PvpDeathUi);
		//		if (pUI)
		//		{
		//			//临时的一个变量，用来表识是沙巴克攻方还是守方
		//			int sbkGuidType = 0; //0: 攻方 1: 守方 2： 非沙巴克不显示原地 3： 非沙巴克显示原地
		//			int dwTime = 0;
		//			//如果当前地图是沙巴克地图
		//			unsigned int mapId = MapManager::getInstance()->getCurMapId();
		//			if (mapId == SBK_MAP_CRC_ID/* || mapId == SBK_CASTLE_MAP_CRC_ID*/)
		//			{
		//				const guildSBKAttackData* SBKowner = GuildMgr::getInstance()->getSBKOwnerInfo();
		//				if (SBKowner->dwData[0] == localPlayer->getGuildID())
		//				{
		//					sbkGuidType = 1; //守方
		//					dwTime = 2000; //随便设置一个值，希望沙巴克成员第一次被杀死之后需要三秒复活
		//				}	
		//			}
		//			else
		//			{
		//				sbkGuidType = 3;
		//			}					
		//			pUI->updateData(_killRoleID,sbkGuidType,dwTime,-1);
		//		}
		//	}
		//	else//若暂不存在
		//	{
		//		_bDeadName = true;
		//		_killRoleID = localPlayer->getEnemyId();
		//	}
		//}
		//else
		{
			MessageBoxUi *dieUi = MessageBoxUi::createWithTwoBtn("", GET_STR(9373).c_str()
				,STRING_TABLE["original_position"]
				, STRING_TABLE["back_to_city"]);
			_scene->addChild(dieUi, WZ_MESSAGEBOX);
			dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
			dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);
		}
	} 

	//gx add 特殊几个类的初始化
	ShopMgr::getInstance()->init();
 	GuildMgr::getInstance()->init();
 	GuildMgr::getInstance()->sendWantJoinList();
	QuestMgr::getInstance()->init();
	//end

	//交易行
	TradingMgr::getInstance()->init();
	//gx add好友消息注册
	SocialMgr::getInstance()->Init();
	//end
	//gx add 组队消息注册
	TeamMgr::getInstance()->Init();
	//end
	//gx add 师徒消息注册
	MasterPrenticeMgr::getInstance()->Init();
	//end
	//每日清零标记复位
	SetDayClearFlag(false);
	memset(_RoleScriptData,0,sizeof(_RoleScriptData));
	//特殊处理签到大奖领取标记
	//_RoleScriptData[4] = (unsigned int)INVALID;

	//初始化背包
	PackageManager::getInstance()->init();
	//初始化掉落
	GroundItemManager::getInstance()->init();
	//初始化dropdrag
	DropDragDelegate::getInstance()->init();
	DropDragDelegate::getInstance()->attachToScene();
	//初始化boss
	BossPKMgr::getInstance()->Init();

	//!获取完成的任务
	NET_SIC_get_role_init_state roleInitState;
	roleInitState.eType = ERIT_CompleteQuest;
	TCP_CLIENT->send_net_cmd(&roleInitState, NP_NORMAL, false);
	//!获取未完成的任务
	roleInitState.eType = ERIT_IncompleteQuest;
	TCP_CLIENT->send_net_cmd(&roleInitState, NP_NORMAL, false);
	//同步boss信息
	WorldPacket C2G_Msg(NET_C2G_REQUEST_BOSS_LIST);
	TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_NORMAL, false);
	//同步活跃信息
	//localPlayer->sendInitActiveData();
	//同步好友信息
	roleInitState.eType = ERIT_FrindAndEnemy;
	TCP_CLIENT->send_net_cmd(&roleInitState, NP_INSIGNIFICANT, false);
	//同步师徒信息 gx add 2013.12.05
	roleInitState.eType = ERIT_MasterPrentice;
	TCP_CLIENT->send_net_cmd(&roleInitState, NP_INSIGNIFICANT, false);
	//同步玩家每日清零数据 gx add 
	roleInitState.eType = ERIT_Other;
	TCP_CLIENT->send_net_cmd(&roleInitState, NP_INSIGNIFICANT, false);

	//!获取帮会信息
	if(RoleManager::getInstance()->getLocalPlayer()->getGuildID() != 0xFFFFFFFF)
	{
		roleInitState.eType = ERIT_Guild;
		TCP_CLIENT->send_net_cmd(&roleInitState, NP_INSIGNIFICANT, false);	
	}
	//获取沙巴克行会信息
	GuildMgr::getInstance()->sendSBKDataRequest();
	//获取所有公会信息
	GuildMgr::getInstance()->sendAllGuildRequest(false);
	//获取玩家名字
	std::string localname;
	if(NameMgr2::getInstance()->queryName(RoleManager::getInstance()->getLocalPlayer()->getId() , localname))
	{
		RoleManager::getInstance()->getLocalPlayer()->setName(localname.c_str());
		_roleHeadUi->setRoleName(localname.c_str());
		//登陆通讯
#ifdef _USE_SDK

		CCLog("------------ World::open 1");

		extern bool g_sendgameinfo;
		if (g_sendgameinfo==false)
		{
			g_sendgameinfo = true;
			extern int g_zoneid;
			extern std::string g_zonename;
			extern std::string g_zonenum;
			extern std::string g_areaName;
			LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
			WzolJni::getInstance()->loginGameInfo(3,player->getId(), localname.c_str(), player->getLevel(), g_zoneid, g_zonename.c_str(), g_zonenum.c_str(), _accountId,g_areaName.c_str());
			CCLog("----------g_zonename.c_str() %s",g_zonename.c_str());
			//_accountId = 0;
		}

		CCLog("------------ World::open 2");
		WzolJni::getInstance()->ryLoginSuccess();
#endif
	}

	//新手引导
	NewPlayerGuider::getInstance()->init();

	//读取数据库抽奖信息
	GambleMgr::getInstance()->Init();
	//商城初始化
	MallMgr::getInstance()->OpenMall();
	//聊天消息注册

	ChatMgr::getInstance()->Init();
	FMBManager::getInstance()->Init();
	WingManager::getInstance()->Init();
	PlacardManager::getInstance()->Init();
	HearSayMgr::getInstance()->Init();
	//玩家交易消息注册
	ExchangeBusinessMgr::getInstance()->Init();
	//血战到底管理
	BloodFightMgr::getInstance()->Init();
	//行会天赋
	GuildNaturalGiftMgr::getInstance()->Init();
	//世界等级加成管理
	WorldLevelMgr::getInstance()->Init();
	//查看远程玩家注册
	RemoteRoleStateMgr::getInstance()->init();
	AutoActionMgr::getInstance()->Init();
	//VIP消息注册
	VIPMgr::getInstance()->Init();
	//摆摊消息注册
	StallMgr::getInstance()->Init();

	//初始化悬赏任务
	RewardQuestMgr::getInstance()->init();
	ConcernMgr::getInstance()->Init();
	CelebrateMgr::getInstance()->Init();
	//
	NameMgr2::getInstance()->init();
	REG_NAME_CB(this , &World::onGetName);

	//组队信息刷新 gx add
	TeamMgr::getInstance()->Refresh_GroupInfo();

	//提前获取榜单数据
	RankMgr::getInstance()->sendLvlTopten(true);
	RankMgr::getInstance()->sendBattleTopten(true);
	RankMgr::getInstance()->sendBeautifulTopten(true);
	RankMgr::getInstance()->sendGuildTopten(true);
	RankMgr::getInstance()->sendMasterTopten(true);
	RankMgr::getInstance()->sendReachTopten(true);

	//gx add 2014.3.11登陆送领奖信息
	NET_SIC_get_daily_online_reward getOLReward;
	TCP_CLIENT->send_net_cmd(&getOLReward, NP_IDLE, false);
	//end by gx
	ExchangeMgr::getInstance()->Init();//gx add

	//ssb add
	RewardMgr::getInstance()->sendServerActivityNotice();

	//add 16.4
	MirValuableBookMgr::getInstance()->initChangeStrongNums();

	// gx add 2014.3.15摇钱树相关
	_bOpenRechargeFeedback = false;//默认不开启
	NET_SIC_get_recharge_feedback_flag getFeedback;
	TCP_CLIENT->send_net_cmd(&getFeedback, NP_INSIGNIFICANT, false);

	//add 2016.4.19 月卡消息
	NET_C2S_MonthCardBegin getMonthCardBegin;
	TCP_CLIENT->send_net_cmd(&getMonthCardBegin, NP_NORMAL, false);
	//主宰者
	f_zhuzai_mgr::get_singleton().init();

	//开服活动 付费图标特效;
	//runAnimation();
	//加载特效资源图片(接收，完成任务)			【Ji：】add
	//std::string sSEDir = CFGReader::instance()->get_profile_string("Art", "Effect", "");
	//std::string sSEAcceptTask = sSEDir + "E1_31.plist";
	//std::string sSEFinishTask = sSEDir + "E1_36.plist";
	//std::string sSEActivity = sSEDir + "E1_60.plist";					//活动可参与特效
	//_plist.insert(sSEAcceptTask);
	//_plist.insert(sSEFinishTask);
	//_plist.insert(sSEActivity);
	//UiResourceMgr::getInstance()->retainPlistFile(_plist);
	//CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile(sSEAcceptTask.c_str());
	//CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile(sSEFinishTask.c_str());

	//同步信息
	NET_SIC_load_complete loadComplete;
	TCP_CLIENT->send_net_cmd(&loadComplete, NP_NORMAL, false);
	CCScene *scene = World::getInstance()->getScene();
	//副本倒计时艺术字
	_fubenNumBLabel = CCLabelBMFont::create();
	_fubenNumBLabel->setFntFile("Art/Scene/fontNum2.fnt");
	scene->addChild(_fubenNumBLabel,10);
	_fubenNumBLabel->setPosition(ccp(scene->getContentSize().width / 2 - 100,scene->getContentSize().height / 2 + 120));
	_fubenNumBLabel->setAnchorPoint(ccp(0.0f, 0.5f));
	_fubenNumBLabel->setVisible(false);

	_luandouTimeLabel = CCLabelTTF::create();
	_luandouTimeLabel->setFontSize(20);
	scene->addChild(_luandouTimeLabel,10);
	_luandouTimeLabel->setPosition(ccp(scene->getContentSize().width / 2,scene->getContentSize().height - 100));
	_luandouTimeLabel->setString("");

	std::string dir = CFGReader::instance()->get_profile_string("Art", "ICON", "") + "SingleUI/";
	std::string	str = dir + "luandou_top.png";
	CCSpriteFrame *Frame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(str.c_str());
	if(Frame == NULL){
		CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(str.c_str());
		Frame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(Frame, str.c_str());
	}
	_topSprite = CCSprite::create();
	_topSprite->setDisplayFrame(Frame);
	scene->addChild(_topSprite,10);
	_topSprite->setPosition(ccp(-440,scene->getContentSize().height/2+100));


	std::string dir01 = CFGReader::instance()->get_profile_string("Art", "ICON", "") + "SingleUI/";
	std::string	str01 = dir01 + "luandou_bottom.png";
	CCSpriteFrame *Frame01 = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(str01.c_str());
	if(Frame01 == NULL){
		CCTexture2D *texture01 = CCTextureCache::sharedTextureCache()->addImage(str01.c_str());
		Frame01 = CCSpriteFrame::createWithTexture(texture01, CCRect(0.0, 0.0, texture01->getPixelsWide(), texture01->getPixelsHigh()));
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(Frame01, str01.c_str());
	}
	_bottomSprite = CCSprite::create();
	_bottomSprite->setDisplayFrame(Frame01);
	scene->addChild(_bottomSprite,10);
	_bottomSprite->setPosition(ccp(scene->getContentSize().width+440,scene->getContentSize().height/2-40));

	unsigned int curMapId = MapManager::getInstance()->getCurMapId();
	if (curMapId == TAOYUAN_MIJING_MAP/* || curMapId == FIRE_MASSACRE_MAP*/)
	{
		WorldPacket C2G_Msg(NET_C2G_REQUEST_LEAVE_INSTANCE);//组装消息头 
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_NORMAL, false);//发送
	}
	addUpTime = 0;

	RoleActionMgr::GetInstance()->LoadRoleAction();
	Huabanyu::getInstance()->Init();

	create_recast_button();
	showFlashSellShopEffBtn(true);
	register_update(true);

	//CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::loopShowFlashSellAndFistBtn),this,7.0f,false);
	//ChatMgr::getInstance()->getBossInMap();

#ifdef _WIN32
	bool bEnable = CFG(int,"enable_menu",0)==1;

	if (bEnable)
	{
		struct menu_def
		{
			const char* szText;
			SEL_MenuHandler handler;
		}menu_array[]=
		{
			{"test",menu_selector(World::justTest)},
			{NULL,NULL},
		};

		CCMenu* menu = CCMenu::create();
		scene->addChild(menu);
		menu->setPosition(CCPointZero);
		//menu->setHandlerPriority(1);

		CCSize winSize = CCDirector::sharedDirector()->getWinSize();
		for (int i = 0; menu_array[i].szText != NULL  ; i++)
		{
			CCLabelTTF* label = CCLabelTTF::create(menu_array[i].szText,FONT_NAME,24);
			CCMenuItemLabel* mi = CCMenuItemLabel::create(label,this,menu_array[i].handler);
			menu->addChild(mi);
			mi->setPosition(ccp(winSize.width -50,winSize.height - (260+30*(i+1))));
		}

#ifdef CC_PROFILE_ENABLE
		//ProfileListener* p = ProfileListener::create();
		//p->setZOrder(-128);
		//p->setPosition(ccp(10,500));
		//scene->addChild(p,2000,111222);

		//g_Profiler.addListener(p);
#endif
	}
#endif 
	_isOpen = true;
	/*
	CrossSceneUIFuBen * crossFuBen = new CrossSceneUIFuBen();
	if(crossFuBen != NULL)
	{
	crossFuBen->open();
	}*/
}

void World::setLeftlabel(std::string leftTime,int leftNumber){
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	CCPoint lpposition = lp->getPosition();
	//unsigned int mapid = MapManager::getInstance()->getCurMapId();
	int mapIndex = MapManager::getInstance()->getCurMapIndex();
	if(mapIndex ==113 && leftTime!= "" ){
		_luandouTimeLabel->setString(CCString::createWithFormat("%s%s",STRING_TABLE["start_to_fight"],leftTime.c_str())->getCString());
	}else{
		_luandouTimeLabel->setString("");
	}
	if(leftNumber == 0){
		landouhuiStart();
	}
}
void World::landouhuiStart(){
	int mapIndex = MapManager::getInstance()->getCurMapIndex();
	if(beginIndex == 0 && mapIndex == 113){
		CCScene *scene = World::getInstance()->getScene();
		CCMoveTo* bottomMoveTo = CCMoveTo::create(0.5f,ccp(scene->getContentSize().width-200,scene->getContentSize().height/2-40));
		CCMoveTo* topMoveTo = CCMoveTo::create(0.5f,ccp(scene->getContentSize().width-200,scene->getContentSize().height/2+100));
		CCFadeOut *bottomfadeOut = CCFadeOut::create(1.5f);
		CCFadeOut *topfadeOut = CCFadeOut::create(1.5f);
		CCSequence *bottomAnimation = CCSequence::createWithTwoActions(bottomMoveTo, bottomfadeOut);
		CCSequence *topAnimation = CCSequence::createWithTwoActions(topMoveTo, topfadeOut);
		_bottomSprite->runAction(bottomAnimation);
		_topSprite->runAction(topAnimation);
	}
	beginIndex ++;
}

void World::setLevelRewardBtnState( int openCount )
{
	if (_scene == NULL)
		return;
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	if (pUI == NULL)
		return;
	CCControlButton* pMiniMapLayer = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(35));//等级奖励物品
	switch(openCount)
	{
	case 8:
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward65","smallui_levelreward65","smallui_levelreward65");
		break;
	case 7:
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward60","smallui_levelreward60","smallui_levelreward60");
		break;
	case 6:
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward55","smallui_levelreward55","smallui_levelreward55");
		break;
	case 5:
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward50","smallui_levelreward50","smallui_levelreward50");
		break;
	case 4:
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward45","smallui_levelreward45","smallui_levelreward45");
		break;
	case 3:
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward40","smallui_levelreward40","smallui_levelreward40");
		break;
	case 2:
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward30","smallui_levelreward30","smallui_levelreward30");
		break;
	case 1 :
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward20","smallui_levelreward20","smallui_levelreward20");
		break;
	case 0:
		setButtonSpriteFrame(pMiniMapLayer,"smallui_levelreward10","smallui_levelreward10","smallui_levelreward10");
		break;
	default:
		pMiniMapLayer->setVisible(false);
		break;
	}
}

void World::setLevelReward()
{
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer(); 
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	if (!pUI)
		return;
	CCControlButton* pMiniMapLayer = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(35));//等级奖励物品
	CCSprite* pReword = dynamic_cast<CCSprite*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(101));//等级奖励静态字
	if (!pReword)
	{
		return;
	}
	//pMiniMapLayer->setPreferredSize(CCSize(58, 68));
	unsigned int openCount = World::getInstance()->GetRoleScriptDataByIndex(6);
	if (lp->getLevel() < 5)
	{
		pMiniMapLayer->setVisible(false);
	}
	else//大于60级
	{
		pMiniMapLayer->setVisible(true);
		setLevelRewardBtnState(openCount);
		int rewordLevel =  getLingJiangLevelByRoleScriptData6(openCount);
		if (lp->getLevel() >= rewordLevel)
		{
			if (!isMenuEffect(pMiniMapLayer,WT_CCCONTROLBUTTON,WCT_LevelRewardEffect ))
			{
				SetMenuEffect(pMiniMapLayer,WT_CCCONTROLBUTTON,WCT_LevelRewardEffect,"E1_113",true,32,33);
			}
			pReword->setVisible(false);
		}
		else
		{
			if (isMenuEffect(pMiniMapLayer,WT_CCCONTROLBUTTON,WCT_LevelRewardEffect))
			{
				SetMenuEffect(pMiniMapLayer,WT_CCCONTROLBUTTON,WCT_LevelRewardEffect,"E1_113",false);
			}
			if (openCount <= 8)
				pReword->setVisible(true);
			else
				pReword->setVisible(false);
		}
	}
}

unsigned int World::onEquipmentNext( s_net_cmd *cmd )
{
	EquipUpStarUIMgr::getInstance()->setEquipmentNext(cmd);
	return 0;
}

unsigned int World::onUpdatejjcData( s_net_cmd *cmd )
{
	ArenaMainMgr::getInstance()->onUpdatejjcData(cmd);
	return 0;
}

unsigned int World::onUplevelEquipment( s_net_cmd *cmd )
{
	EquipLevelUpUiMgr::getInstance()->setUplevelEquip(cmd);
	return 0;
}

unsigned int World::onGetLevelUpStuff( s_net_cmd* cmd )
{
	EquipLevelUpUiMgr::getInstance()->getBuyStuffResult(cmd);
	return 0;
}



unsigned int World::onGetBossData( s_net_cmd* cmd )
{
	BossPKMgr::getInstance()->getBossData(cmd);
	return 0;
}


unsigned int World::onjjcRankResult( s_net_cmd *cmd )
{//Count(INT) + << tagJJCTargetRoleInfo(struct) >>
	WorldPacket Msg((const void*)cmd);
	int count;
	Msg >> count;
	ArenaMainMgr::getInstance()->setjjcRankCount(count);
	tagJJCTargetRoleInfo tempRoleInfo;
	for (int i = 0;i < count;i++)
	{
		Msg >> tempRoleInfo;
		ArenaMainMgr::getInstance()->setChallengePlayerRankAttr(i,tempRoleInfo);
	}
	ArenaRankUiLayer* pUI = getUiNodeByTag<ArenaRankUiLayer>(WCT_ARENARANKUI);
	if(pUI)
	{
		pUI->updateArenaRankData();
	}
	return 0;
}

unsigned int World::onAddMailReward( s_net_cmd *cmd )
{//接收单个邮件
	MailRewardMgr::getInstance()->onAddMailReward(cmd);
	return 0;
}


unsigned int World::onAddAllMailReward( s_net_cmd *cmd )
{//接收全部邮件
	MailRewardMgr::getInstance()->onAddAllMailReward(cmd);
	return 0;
}

unsigned int World::onStallBagNotEnough( s_net_cmd *cmd )
{//空协议
	ToolTip::getInstance()->push(STRING_TABLE["package_full_for_trading"]);
	return 0;
}

unsigned int World::onGetMailRewardResult( s_net_cmd *cmd )
{//服务器通知客户端请求领取邮件奖励结果
	//结果(DWORD[0 = 成功, 非0 = 错误代码]
	WorldPacket Msg((const void*)cmd);
	unsigned int isSuccess;
	Msg >> isSuccess;

	if (isSuccess == 0)
	{
		INT64 mail_id =0;
		Msg>>mail_id;
		//int nindex = (MailRewardMgr::getInstance()->getCurrentReceiveIndex() == 0)? 0:(MailRewardMgr::getInstance()->getCurrentReceiveIndex()-1);
		MailRewardMgr::getInstance()->erase_mail(mail_id);
		MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
		if (!pUI)
			return 0;
		CCControlButton* pMiniMapLayer = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(10));
		if (World::getInstance()->isHighLight( pMiniMapLayer , WT_CCCONTROLBUTTON , WCT_MAILREWARDUI ))
		{
			World::getInstance()->SetHighLight(pMiniMapLayer,WT_CCCONTROLBUTTON,WCT_MAILREWARDUI,0,false);
		}
		int mailCount = MailRewardMgr::getInstance()->getMailConut();
		if (mailCount > 0)
		{
			World::getInstance()->SetHighLight(pMiniMapLayer,WT_CCCONTROLBUTTON,WCT_MAILREWARDUI,mailCount,true,-20,5);
		}

		ReceiveRewardUiMgr::GetInstance()->openRewardUi();
	} 
	else
	{
		switch(isSuccess)
		{
		case E_Role_Mail_Reward_Bag_Not_Enough:
			ReceiveRewardUiMgr::GetInstance()->clearItemBowl();
			ToolTip::getInstance()->push(STRING_TABLE["package_full_warning"]);
			break;
		}
	}
	return 0;
}

unsigned int World::onjjcPkResult( s_net_cmd *cmd )
{
	ArenaMainMgr::getInstance()->onUpdateLosejjcData(cmd);
	ArenaMainMgr::getInstance()->setCheckedChallengeIndex(-1);//挑战者序号置为-1
	int nState = ArenaMainMgr::getInstance()->getShowRoleState(); //取出当时是否屏蔽人物的状态
	//如果处于屏蔽人物则继续将人物屏蔽
	if( nState == 2 )
		RoleManager::getInstance()->hideOtherRole(true);
	return 0;
}


unsigned int World::onRequestjjcPKResult(s_net_cmd *cmd)
{//结果[0=成功+ OP(INT)[0=验证,1=进入],非=错误代码]
	WorldPacket Msg((const void*)cmd);
	int isSuccess;
	Msg >> isSuccess;
	if (isSuccess == 0)
	{
		ArenaMainMgr::getInstance()->setIsJJCResult(true);
		int nState = GET_UI(HookSetUi, WCT_HookSetUi)->getGameSetData().roleShowNum; //是否屏蔽人物 1=显示,2=屏蔽
		ArenaMainMgr::getInstance()->setShowRoleState(nState); //保存当时是否屏蔽人物的状态
		//如果处于屏蔽人物则解除屏蔽人物
		if( nState == 2 )
			RoleManager::getInstance()->hideOtherRole(false);
	}else{
		switch(isSuccess)
		{
		case E_Role_JJC_Rank_Changes:
			ToolTip::getInstance()->push(STRING_TABLE["arena_rank_changed"]);
			break;
		case E_Role_JJC_PK_NOT_CD:
			ToolTip::getInstance()->push(STRING_TABLE["arena_challenge_in_cd"]);
			break;
		case E_Role_JJC_PK_NOT_COUNT:
			ToolTip::getInstance()->push(STRING_TABLE["arena_challenge_not_enough"]);
			break;
		case E_Role_JJC_Request_PK_Error: //此处不可挑战竞技场
			ToolTip::getInstance()->push(STRING_TABLE["arena_challenge_wrong_place"]); 
			break;
		case E_Role_JJC_ShuangXiu_Error:
			ToolTip::getInstance()->push(GET_STR(2101));
			break;
		case E_Role_JJC_Exchange_Error:
			ToolTip::getInstance()->push(GET_STR(7218));
			break;
		case E_Role_JJC_Stall_Error:
			ToolTip::getInstance()->push(GET_STR(2102));
			break;
		case E_Role_JJC_Dead_Error:
			ToolTip::getInstance()->push(GET_STR(2167)); 
			break;
		case E_Role_JJC_Tie:
			ToolTip::getInstance()->push(STRING_TABLE["mabi_trans_tip"]); 
			break;
		default:
			break;
		}
		CLOSE_UI(WCT_ARENAPKUI);
	}
	//E_Role_JJC_Rank_Changes				 = 550, // 竞技场排名已发生变化
	//E_Role_JJC_PK_NOT_CD				 = 551, // 挑战时间正在冷却中
	//E_Role_JJC_PK_NOT_COUNT				 = 552, // 挑战次数不足
	return 0;
}

unsigned int World::onDayFirstRechargeState(s_net_cmd *cmd)
{//每日首冲状态(BYTE)[0=未首冲,1=已首冲,2=已领取首冲]
	WorldPacket Msg((const void*)cmd);
	unsigned char success = 0;
	Msg >> success;
	ChongZhiActivityMgr::getInstance()->setFisrtRechargeState(success);
	return 0;
}

unsigned int World::onDaySecondRechargeState(s_net_cmd *cmd)
{
	WorldPacket Msg((const void*)cmd);
	unsigned char success = 0;
	Msg >> success;
	ChongZhiActivityMgr::getInstance()->set_second_recharge_state(success);

	refresh_second_recharge evt;
	SEND_EVENT(&evt);

	return 0;
}

unsigned int World::onBuyTreasureShopItem( s_net_cmd *cmd )
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if( !player )
		return 0;
	MysteryShopUi* ui = GET_UI(MysteryShopUi, WCT_MysteryShopUi);
	if(ui == NULL)
	{
		return -1;
	}
	if(IS_UI_OPEN(WCT_MysteryShopUi))
	{
		ui->ShopCanTouchEnable(false);
	}
	unsigned int uResult = 0;
	unsigned int ItemCount = 0;
	unsigned int shopId = 0;
	unsigned int PlayerId = 0;
	unsigned int ItemId = 0;
	unsigned int nQuality = 0;
	unsigned int nBuyNum = 0;
	WorldPacket Msg((const void*)cmd);
	Msg >> uResult;

	if(uResult == 0 || uResult == 3 )
	{
		Msg >> shopId;
		Msg >> ItemCount;
		switch(shopId)
		{
		case 11:
			{
				if(ItemCount == 0)
				{
					Msg >> PlayerId;
					Msg >> ItemId;
					Msg >> nQuality;
					Msg >> nBuyNum;
					std::vector<MysteryBoxUiData> vecBoxList = PackageManager::getInstance()->getMysteryShopList1();
					MysteryBoxUiData strData;
					strData.PlayerId = PlayerId;
					strData.ItemId = ItemId;
					strData.nQuality = nQuality;
					strData.num = nBuyNum;
					if(vecBoxList.size() == 20)
					{
						PackageManager::getInstance()->RemoveFirstOfMysteryShopList1();
						PackageManager::getInstance()->PushBackMysteryShopList1(strData);
					}
					else
					{
						PackageManager::getInstance()->PushBackMysteryShopList1(strData);
					}
				}
				else
				{
					PackageManager::getInstance()->ClearMysteryShopList1();
					for(int i = 0;i <(int)ItemCount;i++)
					{
						Msg >> PlayerId;
						Msg >> ItemId;
						Msg >> nQuality;
						Msg >> nBuyNum;
						std::vector<MysteryBoxUiData> vecBoxList = PackageManager::getInstance()->getMysteryShopList1();
						MysteryBoxUiData strData;
						strData.PlayerId = PlayerId;
						strData.ItemId = ItemId;
						strData.nQuality = nQuality;
						strData.num = nBuyNum;
						if(vecBoxList.size() == 20)
						{
							PackageManager::getInstance()->RemoveFirstOfMysteryShopList1();
							PackageManager::getInstance()->PushBackMysteryShopList1(strData);
						}
						else
						{
							PackageManager::getInstance()->PushBackMysteryShopList1(strData);
						}
					}


				}
				if(IS_UI_OPEN(WCT_MysteryShopUi))
				{
					ui->UpdateNoticeList1();
					//ui->upDataItemList1();
					ui->updateMoney();
				}
				break;
			}
		case 12:
			{
				if(ItemCount == 0)
				{
					Msg >> PlayerId;
					Msg >> ItemId;
					Msg >> nQuality;
					Msg >> nBuyNum;
					std::vector<MysteryBoxUiData> vecBoxList = PackageManager::getInstance()->getMysteryShopList();
					MysteryBoxUiData strData;
					strData.PlayerId = PlayerId;
					strData.ItemId = ItemId;
					strData.nQuality = nQuality;
					strData.num = nBuyNum;
					if(vecBoxList.size() == 20)
					{
						PackageManager::getInstance()->RemoveFirstOfMysteryShopList();
						PackageManager::getInstance()->PushBackMysteryShopList(strData);
					}
					else
					{
						PackageManager::getInstance()->PushBackMysteryShopList(strData);
					}
				}
				else
				{
					PackageManager::getInstance()->ClearMysteryShopList();
					for(int i = 0;i <(int)ItemCount;i++)
					{
						Msg >> PlayerId;
						Msg >> ItemId;
						Msg >> nQuality;
						Msg >> nBuyNum;
						std::vector<MysteryBoxUiData> vecBoxList = PackageManager::getInstance()->getMysteryShopList();
						MysteryBoxUiData strData;
						strData.PlayerId = PlayerId;
						strData.ItemId = ItemId;
						strData.nQuality = nQuality;
						strData.num = nBuyNum;
						if(vecBoxList.size() == 20)
						{
							PackageManager::getInstance()->RemoveFirstOfMysteryShopList();
							PackageManager::getInstance()->PushBackMysteryShopList(strData);
						}
						else
						{
							PackageManager::getInstance()->PushBackMysteryShopList(strData);
						}
					}


				}
				if(IS_UI_OPEN(WCT_MysteryShopUi))
				{
					ui->UpdateNoticeList();
					//ui->upDataItemList();
					ui->updateMoney();
				}
				break;
			}
		case 13:
			{
				unsigned int uIndex = 0;
				unsigned int uCanBuyNum = 0;
				unsigned int uTotalNum = 0;
				unsigned int uTip = 0;

				Msg >> uIndex;
				Msg >> uCanBuyNum;
				Msg >> uTotalNum;
				Msg >> uTip;
				PackageManager::getInstance()->ChangeMysteryShopGoodsList(uIndex,uCanBuyNum,uTotalNum,uTip);

				if(IS_UI_OPEN(WCT_MysteryShopUi))
				{
					if(ui->GetIsMysteryShop() == false)
					{
						if(uResult == 3)
						{
							ToolTip::getInstance()->push(GET_STR(9526));
						}
						ui->upDataItemList();
						ui->updateMoney();
					}
				}

				break;
			}
		case 14:
			{
				if(IS_UI_OPEN(WCT_MysteryShopUi))
				{
					ui->updateMoney();
				}
				break;
			}
		default:
			break;
		}

	}
	else
	{
		if(IS_UI_OPEN(WCT_MysteryShopUi))
		{
			ui->showErrorMessage(uResult);
		}
	}
	if(IS_UI_OPEN(WCT_MysteryShopUi))
	{
		ui->ShopCanTouchEnable(true);
	}
	return 0;
}

unsigned int World::onMysteryShopOpen( s_net_cmd *cmd )
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if( !player )
		return 0;
	unsigned int  IsOpenMystery = 0;
	unsigned int  IsOpenGem = 0;
	//世界聊天扣钱
	unsigned int  IsOpenChar = 0;
	unsigned int  uCharNum = 0;


	WorldPacket Msg((const void*)cmd);
	Msg >> IsOpenMystery;
	Msg >> IsOpenGem;
	Msg >> IsOpenChar;
	Msg >> uCharNum;
	ChatMgr::getInstance()->SetIsWorldCharDeleteMoney(IsOpenChar);
	ChatMgr::getInstance()->SetWorldCharDeleteMoneyNum(uCharNum);
	PackageManager::getInstance()->SetIsOpen(IsOpenMystery);
	PackageManager::getInstance()->SetIsGemOpen(IsOpenGem);
	return 0;
}
unsigned int World::onSynchronizeMysteryShop( s_net_cmd *cmd )
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if( !player )
		return 0;
	MysteryShopUi* ui = GET_UI(MysteryShopUi, WCT_MysteryShopUi);
	if(ui == NULL)
	{
		return -1;
	}
	if(IS_UI_OPEN(WCT_MysteryShopUi))
	{
		ui->ShopCanTouchEnable(false);
	}
	unsigned int dwShopId = 0;
	unsigned int byDataNum = 0;
	unsigned int  nFreshVerSion = 0;
	WorldPacket Msg((const void*)cmd);
	Msg >> dwShopId;
	Msg >> byDataNum;
	Msg >> nFreshVerSion;
	if(dwShopId == 12)
	{
		if(IS_UI_OPEN(WCT_MysteryShopUi))
		{
			if(ui->GetIsMysteryShop() == false)
			{
				PackageManager::getInstance()->SetFreshVersion(nFreshVerSion);
				BuySetUi::getInstance()->close();
			}
		}
		PackageManager::getInstance()->ClearMysteryShopGoodsList();
	}
	else if(dwShopId == 11)
	{
		if(IS_UI_OPEN(WCT_MysteryShopUi))
		{
			if(ui->GetIsMysteryShop())
			{
				PackageManager::getInstance()->SetFreshVersion(nFreshVerSion);
			}
		}
		PackageManager::getInstance()->ClearMysteryShopGoodsList1();
	}
	INT32 uItemID = 0;				
	INT32 uPrice = 0;	  
	INT32 uQuality = 0;
	INT32 uTipType = 0;	
	INT32 MoneyType = 0;	
	INT32 CanBuyNum = 0;	
	INT32 ItemNum = 0;	
	INT32 IsBind = 0;	
	INT32 IsNotice = 0;	
	INT32 IsLimit = 0;	
	INT32 NextFreshTime = 0;	

	for (int i=1; i <= (int)byDataNum; ++i)
	{
		Msg >> uItemID;
		Msg >> uPrice;
		Msg >> uQuality;
		Msg >> uTipType;
		Msg >> MoneyType;
		Msg >> CanBuyNum;
		Msg >> ItemNum;
		Msg >> IsBind;
		Msg >> IsNotice;
		Msg >> IsLimit;

		MysteryShopUiData strData;
		strData.ItemId = uItemID;
		strData.nPrice = uPrice;
		strData.nQuality = uQuality;
		strData.nTipType = uTipType;
		strData.nMoneyType = MoneyType;
		strData.nCanbuyNum = CanBuyNum;
		strData.nItemNum = ItemNum;
		strData.nIsBind = IsBind;
		strData.nIsNotice = IsNotice;
		strData.nIsLimit = IsLimit;
		if(dwShopId == 12)
		{
			PackageManager::getInstance()->PushBackMysteryShopGoodsList(strData);
		}
		else if(dwShopId == 11)
		{
			PackageManager::getInstance()->PushBackMysteryShopGoodsList1(strData);
		}

	}

	Msg >> NextFreshTime;


	if(IS_UI_OPEN(WCT_MysteryShopUi))
	{

		if(dwShopId == 12)
		{
			ui->upDataItemList();
			ui->ShopCanTouchEnable(true);
			ui->upDataFreshTime(NextFreshTime);
		}
		else if(dwShopId == 11)
		{
			ui->upDataItemList1();
			ui->ShopCanTouchEnable(true);
			ui->upDataFreshTime(NextFreshTime);
			ui->updateMoney();

		}

	}

	return 0;
}

//同步站立
unsigned int World::onSynchronizeStand( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_synchronize_stand"))
	{
		NET_SIS_synchronize_stand *syncStand = (NET_SIS_synchronize_stand*)cmd;

		//if(syncStand->dw_role_id == RoleManager::getInstance()->getLocalPlayer()->getId()||
		//	(RoleManager::getInstance()->isHideOtherRole() && IS_PLAYER(syncStand->dw_role_id)))
		//	return 0;
		LocalPlayer* localPlayer = RoleManager::getInstance()->getLocalPlayer();
		unsigned int localId = localPlayer->getId();
		if(syncStand->dw_role_id == localId)
			return 0;

		//testOf << syncStand->dw_role_id << " syncStand (" << syncStand->curPos[0] << ", " << syncStand->curPos[1] << ")	";

		Role *role = RoleManager::getInstance()->findRole(syncStand->dw_role_id, true);
		if(role == NULL)
		{
			//testOf << "create RoleProxy" << std::endl;
			CCProfileBegin("new RoleProxy");
			RoleProxy *roleProxy = new RoleProxy;
			CCProfileEnd("new RoleProxy");

			if(CrossSceneUI::getInstance()->isInCross())
				roleProxy->setAsNewMapRole(true);
			//roleProxy->initBloodUi();
			roleProxy->setId(syncStand->dw_role_id);
			if (RoleManager::getInstance()->isCanShowOtherPlayer(roleProxy))
				roleProxy->initFsm();
			else
				roleProxy->destroyFsm();
			roleProxy->setPosition(ccp(syncStand->curPos[0], syncStand->curPos[2]));
			roleProxy->setDirection(ccp(syncStand->faceTo[0], syncStand->faceTo[2]));
			RoleManager::getInstance()->addProxy(roleProxy);
			role = roleProxy;
			role->addToMap();
			role->update(0.f);
			//zhjl：添加发送单个角色请求，先不用吧，可能会造成服务器压力
			//RoleManager::getInstance()->sendRoleRequestOne(syncStand->dw_role_id);
		}
		//else
		//{
		//	if(role->getCreatureType() == CT_PLAYER)
		//		testOf << "player" << std::endl;
		//	else if(role->getCreatureType() == CT_NPC)
		//		testOf << "NPC" << std::endl;
		//	else if(role->getCreatureType() == CT_MONSTER)
		//		testOf << "Monster" << std::endl;
		//	else if(role->getCreatureType() == CT_Proxy)
		//		testOf << "Proxy" << std::endl;
		//	else
		//		testOf << std::endl;
		//}

		//testOf.flush();
		//给客户端同步位置 add by XSea 2014.09.26
		/*role->setPosition(ccp(syncStand->curPos[0], syncStand->curPos[2]));
		role->setDirection(ccp(syncStand->faceTo[0], syncStand->faceTo[2]));*/

		if (!(RoleManager::getInstance()->isCanShowOtherPlayer(role)))
		{
			role->setPosition(ccp(syncStand->curPos[0], syncStand->curPos[2]));
			role->setDirection(ccp(syncStand->faceTo[0], syncStand->faceTo[2]));
		}
		role->setEndFace(ccp(syncStand->faceTo[0], syncStand->faceTo[2]));
		CCPoint destPoint(syncStand->curPos[0], syncStand->curPos[2]);
		role->setDestMovePoint(destPoint);
		MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, role, M_STAND, &destPoint);
	}
	return 0;
}

unsigned int World::jieshoutexiao(s_net_cmd* cmd){
	MapBackFunc::getInstance()->jieshoutexiao(cmd);
	return 0;
}

unsigned int World::onSynchronizeWalk( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_synchronize_walk"))
	{
		NET_SIS_synchronize_walk *syncWalk = (NET_SIS_synchronize_walk*)cmd;

		//if(syncStand->dw_role_id == RoleManager::getInstance()->getLocalPlayer()->getId()||
		//	(RoleManager::getInstance()->isHideOtherRole() && IS_PLAYER(syncStand->dw_role_id)))
		//	return 0;
		LocalPlayer* localPlayer = RoleManager::getInstance()->getLocalPlayer();
		unsigned int localId = localPlayer->getId();
		if(syncWalk->dw_role_id == localId)
		{
			return 0;
		}


		//testOf << syncWalk->dw_role_id << " syncWalk src = (" << syncWalk->srcPos[0] << ", " << syncWalk->srcPos[2] << 
		//	")	dest = (" << syncWalk->dstPos[0] <<", " << syncWalk->dstPos[2] << ")	time = " << syncWalk->curTime << "		speed = " << syncWalk->fXZSpeed << "	";

		Role *role = RoleManager::getInstance()->findRole(syncWalk->dw_role_id, true);
		if(role == NULL)
		{
			//testOf << "create RoleProxy" << std::endl;
			RoleProxy *roleProxy = new RoleProxy;
			if(CrossSceneUI::getInstance()->isInCross())
				roleProxy->setAsNewMapRole(true);
			//roleProxy->initBloodUi();
			roleProxy->setId(syncWalk->dw_role_id);
			if (RoleManager::getInstance()->isCanShowOtherPlayer(roleProxy))
				roleProxy->initFsm();
			else
				roleProxy->destroyFsm();
			getPosFromDirection(ccp(syncWalk->srcPos[0], syncWalk->srcPos[2]), ccp(syncWalk->dstPos[0], syncWalk->dstPos[2]), syncWalk->curTime, syncWalk->fXZSpeed);
			//roleProxy->setPosition(ccp(syncWalk->dstPos[0], syncWalk->dstPos[2]));
			RoleManager::getInstance()->addProxy(roleProxy);
			role = roleProxy;
			role->addToMap();
			role->update(0.f);
		}
		//else
		//{
		//	if(role->getCreatureType() == CT_PLAYER)
		//		testOf << "player" << std::endl;
		//	else if(role->getCreatureType() == CT_NPC)
		//		testOf << "NPC" << std::endl;
		//	else if(role->getCreatureType() == CT_MONSTER)
		//		testOf << "Monster" << std::endl;
		//	else if(role->getCreatureType() == CT_Proxy)
		//		testOf << "Proxy" << std::endl;
		//	else
		//		testOf << std::endl;
		//}

		//testOf.flush();

		role->setAttribute(RA_SPEED, syncWalk->fXZSpeed);
		if (!(RoleManager::getInstance()->isCanShowOtherPlayer(role)))
		{
			role->setPosition(ccp(syncWalk->dstPos[0], syncWalk->dstPos[2]));
		}
		CCPoint dest(syncWalk->dstPos[0], syncWalk->dstPos[2]);
		MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, role, M_RUNTO, &dest);
	}
	return 0;
}

unsigned int World::onGetRemoteRoleState( s_net_cmd *cmd )
{
	if(cmd->id == message_id_crc("NET_SIS_get_remote_role_state"))
	{
		NET_SIS_get_remote_role_state *roleState = (NET_SIS_get_remote_role_state*)cmd;
		//unsigned int id = roleState->RoleData.dwID;
		//testOf << roleState->RoleData.dwID << "	get role msg" << std::endl;

		addRemoteRoleState(roleState);
	}
	return 0;
}

unsigned int World::onGetRemoteCreatureState( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_get_remote_creature_state"))
	{
		NET_SIS_get_remote_creature_state *roleState = (NET_SIS_get_remote_creature_state*)cmd;

		//testOf << roleState->CreatureData.dwID << "		get role msg" << std::endl;

		addRemoteCreatureState(roleState);
	}
	return 0;
}

unsigned int World::onRemoveRemote( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_remove_remote"))
	{
		NET_SIS_remove_remote *removeRemote = (NET_SIS_remove_remote*)cmd;
		int num = ( removeRemote->size - sizeof(NET_SIS_remove_remote) ) / sizeof(unsigned int) + 1;
		for(int i = 0; i < num; i ++)
		{
			//testOf << removeRemote->dw_role_id[i] << "	remove remote" << std::endl;
			//testOf.flush();

			int id = removeRemote->dw_role_id[i];
			Role* role = RoleManager::getInstance()->findRole(id);
			if (role != NULL && role->getCreatureType()!= CT_Proxy)
			{
				//RoleManager::CreatureInfo creatureInfo = RoleManager::getInstance()->getCreatureInfo(role->getTypeID());
				stCreateProto const* proto =  RoleManager::getInstance()->getCreatureProto(role->getTypeID());
				if (proto&&proto->nFuncType == RoleManager::EFNPCT_LiHua)
				{
					AudioPlayer::getSigletonPtr()->stopSoundSceneEffect(AudioPlayer::getSigletonPtr()->getNoStopAudio());
					AudioPlayer::getSigletonPtr()->setNoStopAudio(0);
				}
			}
			if (role && CT_PLAYER == role->getCreatureType())
			{
				PlayerStallUiLayer* layer = (PlayerStallUiLayer*)getUiNodeByTag<PlayerStallUiLayer>(WCT_StallUi);
				if (layer)
				{
					layer->CloseStall(id);
				}
			}
			RoleManager::getInstance()->freeRole(id);
		}
	}
	return 0;
}

CCScene * World::getScene(bool bIfNullCreate)
{
	if (bIfNullCreate)
	{
		if(_scene == NULL)
		{
			_scene = CCScene::create();
			_scene->retain();
		}
		return _scene;
	}
	else
	{
		//CC_ASSERT(_scene);
		return _scene; 
	}
	//  	if(_scene == NULL)
	//  	{
	//  		_scene = CCScene::create();
	//  		//_scene->retain();
	//  	}
	// 	CC_ASSERT(_scene);
	// 
	// 	return _scene;
}

void World::onSystemUiTaskBtnPressed()
{
	//CCNode *node = _scene->getChildByTag(WCT_TASKUI);
	//if(node == NULL)
	//{
	//	node = TaskUi::create();
	//	_scene->addChild(node, WZ_POPUI, WCT_TASKUI);
	//}
}

void World::onAttackBtnPressed()
{
	//首先进行状态限制
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if (!IS_VALID_PTR(ploc))
		return;
	if (ploc->isInRoleStateAny(RA_ShuangXiu) || ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))
	{
		if (ploc->isInRoleStateAny(RA_Exchange))
		{
			ExchangeBusinessMgr::getInstance()->CancleExchange();
		}
		return;
	}

	//TODO:取消自动（攻击键）
	if (AutoActionMgr::getInstance()->Get_Auto_Action())//gx add
	{
		AutoActionMgr::getInstance()->Set_Auto_Action(false);
	}

	//ZHJL：在攻击状态时不处理
	//if (RoleManager::getInstance()->getLocalPlayer()->getAttackState())
	//	return;

	//!是否选中人物
	//RoleManager::getInstance()->autoSelectCanAttackRole();
	select_enemy_immediately evt;
	SEND_EVENT(&evt);

	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	SkillManager::getInstance()->planUseManual(-1);
	if(roleId != INVALID_ID)
	{
		//RoleManager::getInstance()->getLocalPlayer()->setEnterAttackState();
		RoleManager::getInstance()->getLocalPlayer()->attackTo(roleId);
	}
}

void World::checkRedFlag()
{
	//检测神秘宝箱
	//先获取角色
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if( !player )
		return;
	//-----------------------------------------------------------------------------------------
	//开服7天乐
	unsigned int dwRecv = 0; //领取标记
	bool bFlag = false; //是否已显示红点
	int nDay = getServerActivityDay(); //开服天数
	int nOpenStage = getOpenStage(); //开服状态，开服2 合服;
	switch( nOpenStage )
	{
	case 1: //开服
		{
			std::map<int, SPacket_Activity> activityList = KaifuHuodongMgr::getInstance()->GetActivityList();
			std::map<int, SPacket_Activity>::iterator it = activityList.begin();
/*			int index = 0;*/
			for (; it != activityList.end(); it++)
			{
				for (int i = 0; i < PACKET_ACT_MAX_TAR; i++)
				{
					if ((*it).second.byData[i].m_iID == 0)
					break;
					if ((*it).second.byData[i].m_iValue == 1)
					{
						//如果没有红点则显示红点
						getMiniMapUi()->setBtnHighLight(WCT_ServerActivityUi);
						//找到一个就跳出
						bFlag = true;
						break;
					}
				}
				if (bFlag)
					break;
// 				if ((*it).second.byData[index].m_iValue == 1)
// 				{
// 					//如果没有红点则显示红点
// 					getMiniMapUi()->setBtnHighLight(WCT_ServerActivityUi);
// 					//找到一个就跳出
// 					bFlag = true;
// 					break;
// 				}
// 				index++;
			}
		}
		break;
	case 2: //合服
		for( int i = SAUT_LevelSprint; i <= SAUT_GodsTop; ++i )
		{
			//合服七天乐领奖标记
			dwRecv = GetRoleScriptDataByIndex(2);
			//标记为已领取
			if( dwRecv & (1 << i) )
				continue;

			//沙城争霸特殊处理
			if( i == SAUT_ShangchengCraft )
			{
				//沙巴克公会id
				unsigned int sbkGuildID = GuildMgr::getInstance()->getSBKGuildId();
				//沙巴克与自己公会id合法
				if( sbkGuildID > 0 && player->getGuildID() > 0 )
				{
					if( sbkGuildID == player->getGuildID() )
					{
						//当天可领
						if( nDay - i == 1 )
						{
							//如果没有红点则显示红点
							getMiniMapUi()->setBtnHighLight(WCT_ServerActivityUi);
							//找到一个就跳出
							bFlag = true;
							break;
						}
					}
				}
			}
			else
			{
				//当天可领
				if( nDay - i == 1 )
				{
					//如果没有红点则显示红点
					getMiniMapUi()->setBtnHighLight(WCT_ServerActivityUi);
					//找到一个就跳出
					bFlag = true;
					break;
				}
			}
		}
		break;
	default:
		break;
	}

	if( !bFlag )
	{
		//有红点则移除红点
		getMiniMapUi()->revokeBtnHighLight(WCT_ServerActivityUi);
	}
	//-------------------------------------------------------------------
	//每日首冲
	unsigned char tmpState = ChongZhiActivityMgr::getInstance()->getFisrtRechargeState();
	if (tmpState == 0)//0=未首冲
	{
		ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_FIRSTRECHARGEUI);
	}
	else
	{
		if (tmpState == 2)//2=已领取首冲
		{
			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_FIRSTRECHARGEUI);
		}
		else
		{
			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_FIRSTRECHARGEUI);
		}
	}


	//-------------------------------------------------------------------
	//每日次冲
	unsigned char tmpState1 = ChongZhiActivityMgr::getInstance()->get_second_recharge_state();
	if (tmpState1 == 0)//0=未首冲
	{
		ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_SECONDRECHARGEUI);
	}
	else
	{
		if (tmpState1 == 2)//2=已领取首冲
		{
			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_SECONDRECHARGEUI);
		}
		else
		{
			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_SECONDRECHARGEUI);
		}
	}




	//聚划算
	//是否购买聚划算奖励 0=没买，1=买了
	unsigned int openCount = GetRoleScriptDataByIndex(7);
	if (openCount == 1)
	{
		unsigned int rechargeCount = GetRoleScriptDataByIndex(8);
		if (rechargeCount < 7)
		{
			LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
			if (!pLocPlayer->getRoleDayClearInfoTwo(ERDCT_GET_YUANBAO_REWARD))//0=未领，1=已领
			{
				ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_JUHUASUANUI);
			}
			else
			{
				ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_JUHUASUANUI);
			}
		}
		else
		{
			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_JUHUASUANUI);
		}
	} 
	else
	{
		ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_JUHUASUANUI);
	}
	//充值好礼
	rechargeGiftShowFlag();
	// 	int nRechargeGiftLv = ChongZhiActivityMgr::getInstance()->getRechargeGiftsLevel();
	// 	int m_nTotalChargeYB = PackageManager::getInstance()->getTotalChargeYuanBao();
	// 	if (m_nTotalChargeYB >= 10 && m_nTotalChargeYB < 300)
	// 	{
	// 		if (nRechargeGiftLv < 1)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 300 && m_nTotalChargeYB < 1000)
	// 	{
	// 		if (nRechargeGiftLv < 2)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 1000 && m_nTotalChargeYB < 3000)
	// 	{
	// 		if (nRechargeGiftLv < 3)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 3000 && m_nTotalChargeYB < 6000)
	// 	{
	// 		if (nRechargeGiftLv < 4)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 6000 && m_nTotalChargeYB < 10000)
	// 	{
	// 		if (nRechargeGiftLv < 5)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 10000 && m_nTotalChargeYB < 20000)
	// 	{
	// 		if (nRechargeGiftLv < 6)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 20000 && m_nTotalChargeYB < 50000)
	// 	{
	// 		if (nRechargeGiftLv < 7)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 50000 && m_nTotalChargeYB < 100000)
	// 	{
	// 		if (nRechargeGiftLv < 8)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 100000 && m_nTotalChargeYB < 300000)
	// 	{
	// 		if (nRechargeGiftLv < 9)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 300000 && m_nTotalChargeYB < 600000)
	// 	{
	// 		if (nRechargeGiftLv < 10)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}	else if(m_nTotalChargeYB >= 600000 && m_nTotalChargeYB < 1000000)
	// 	{
	// 		if (nRechargeGiftLv < 11)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}
	// 	else if(m_nTotalChargeYB >= 1000000)
	// 	{
	// 		if (nRechargeGiftLv < 12)
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 		else
	// 		{
	// 			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
	// 			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	// 		}
	// 	}

	bool bRebateFlag = false; //消费返利是否显示领奖标记标识
	//消费返利
	for (int i = 0; i < REWARDBOXNUM; ++i)
	{
		if (PackageManager::getInstance()->CanGetConsumeReplyReward(i))	
		{
			bRebateFlag = true;
			break;
		}
	}
	if( bRebateFlag )
	{
		if (RebateMgr::getInstance()->isHasRebateActivity())
		{
			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_REBATEUI);
		}
	}else
		ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_REBATEUI);

	/*int m_nNeedYB = PackageManager::getInstance()->GetToalConsumeYB();
	unsigned int rebateCount = PackageManager::getInstance()->GetConsumeReplyData(); //消费奖励领奖标记
	if (m_nNeedYB >= 680 && m_nNeedYB < 1880)
	{
	//下标从0开始
	if (rebateCount & (1 << 0))
	{
	ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_REBATEUI);
	}
	else
	{
	ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_REBATEUI);
	}
	}
	else if (m_nNeedYB >= 1880 && m_nNeedYB < 5000)
	{
	if (rebateCount & (1 << 1))
	{
	ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_REBATEUI);
	}
	else
	{
	ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_REBATEUI);
	}
	}
	else if (m_nNeedYB >= 5000 && m_nNeedYB < 20000)
	{
	if (rebateCount & (1 << 2))
	{
	ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_REBATEUI);
	}
	else
	{
	ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_REBATEUI);
	}
	}
	else if (m_nNeedYB >= 20000 && m_nNeedYB < 50000)
	{
	if (rebateCount & (1 << 3))
	{
	ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_REBATEUI);
	}
	else
	{
	ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_REBATEUI);
	}
	}
	else if (m_nNeedYB >= 50000)
	{
	if (rebateCount & (1 << 4))
	{
	ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_REBATEUI);
	}
	else
	{
	ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_REBATEUI);
	}
	}*/
	//std::list<eWroldChildTag> temptemptemp = ChongZhiActivityMgr::getInstance()->getChongzhiActivitySignList();
	//整体刷一次添加充值活动的叹号标识
	if (ChongZhiActivityMgr::getInstance()->getChongzhiActivitySignList().size() > 0)
	{
		getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	} 
	else
	{
		getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	}

	//在线时间奖励
	if(RewardMgr::getInstance()->isTimeArrivalOfOnlineReward())
	{
		getMiniMapUi()->setBtnHighLight(WCT_ZAIXIANCHARGE);
	}
	else
	{
		getMiniMapUi()->revokeBtnHighLight(WCT_ZAIXIANCHARGE);
	}
	//boss提醒
	if(BossPKMgr::getInstance()->getBossCount() > 0 && player->getLevel() >= 20)
	{
		RewardMgr::getInstance()->setActivitySignList(WCT_BOSSPKUI);
	}
	else
	{
		RewardMgr::getInstance()->deleteActivitySignList(WCT_BOSSPKUI);
		getMiniMapUi()->revokeBtnHighLight(WCT_BOSSPKUI);
	}

	//竞技场
	if (NewFuncGuider::get_singleton_ptr()->isForceOpen(NewFuncGuider::eArena))
	{
		if (ArenaMainMgr::getInstance()->getcountDownTime() == 0 && ArenaMainMgr::getInstance()->getLocaljjcAccessoryInfo().challengeTimes > 0)
		{
			RewardMgr::getInstance()->setActivitySignList(WCT_ARENAMAINUI);
		}
		else
		{
			RewardMgr::getInstance()->deleteActivitySignList(WCT_ARENAMAINUI);
			getMiniMapUi()->revokeBtnHighLight(WCT_ARENAMAINUI);
		}
	}

	//战役
	if(player->getLevel() >= GetFunOpenLevel(EFOL_SingleInstance))
	{
		if (player->GetRoleData(RA_TiLiZhi) >= 60)
		{
			RewardMgr::getInstance()->setActivitySignList(WCT_FubenUI);
		}else
		{
			RewardMgr::getInstance()->deleteActivitySignList(WCT_FubenUI);
			getMiniMapUi()->revokeBtnHighLight(WCT_FubenUI);
		}
	}

	//悬赏
	if (player->getLevel() >= GetFunOpenLevel(EFOL_XuanShang))
	{
		if (RewardQuestMgr::getInstance()->isShowRedPoint())
		{
			RewardMgr::getInstance()->setActivitySignList(WCT_RewardQuestUi);
		}else
		{
			RewardMgr::getInstance()->deleteActivitySignList(WCT_RewardQuestUi);
			getMiniMapUi()->revokeBtnHighLight(WCT_RewardQuestUi);
		}
	}

	// 	离线经验
	tagDWORDTime curTime = ServerTime::getInstance()->cal_current_server_dword_time();
	LocalPlayer* lp = RoleManager::getInstance()->getLocalPlayer();
	tagDWORDTime loginTime = NULL;
	if(lp)
	{
		loginTime = lp->getLoginTime();
	}
	unsigned onlineTime = CalcTimeDiff(curTime,loginTime);//在线时长
	if (player->GetLeaveExp() > 0 && (onlineTime >= 300 && onlineTime < 360))
	{
		RewardMgr::getInstance()->setActivitySignList(WCT_OffLineExpUi);
	}
	/*else
	{
	RewardMgr::getInstance()->deleteActivitySignList(WCT_OffLineExpUi);
	getMiniMapUi()->revokeBtnHighLight(WCT_OffLineExpUi);
	}*/

	//if(player->getAttribute(RA_TiLiZhi) >= VIPMgr::getInstance()->getLocalVipData().tiliTop
	//	&& RoleManager::getInstance()->getLocalPlayer()->getLevel() >= 20)
	//{
	//	RewardMgr::getInstance()->setActivitySignList(WCT_FubenUI);
	//}
	//else
	//{
	//	RewardMgr::getInstance()->deleteActivitySignList(WCT_FubenUI);
	//}

	//活跃提醒
	//if(getMiniMapUi()->getHuoYueRewardNum() > 0)
	//{
	//	RewardMgr::getInstance()->setActivitySignList(WCT_HuoyueUi);
	//}
	//else
	//{
	//	RewardMgr::getInstance()->deleteActivitySignList(WCT_HuoyueUi);
	//}
	// 	CCLayer* miniMapLayer=_miniMapUi->getLayer();
	// 	isShow = false;
	// 	//藏宝阁 2015年9月16日
	// 	data = guider->getModelData(NewFuncGuider::eTreasureRoom);
	// 	if (data)
	// 	{
	// 		if (data->nType == NewFuncGuider::eTargetNPC)
	// 		{
	// 			if (player->getLevel() >= data->nParam)
	// 				isShow = true;
	// 		}
	// 		if (data->nType == NewFuncGuider::eTargetAct)
	// 		{
	// 			if (guider->questIsInNewFuncGuide(data->nIndex))
	// 				isShow = true;
	// 		}
	// 	}
	// 	if(miniMapLayer->getChildByTag(MiniMapUi::NT_TreasureLoftBtn)==NULL){
	// 		assert(miniMapLayer->getChildByTag(MiniMapUi::NT_TreasureLoftBtn)==NULL);
	// 	}
	// 	if(miniMapLayer->getChildByTag(MiniMapUi::NT_TreasureLoftBtn)->isVisible()){
	// 		isShow=true;
	// 	}else{
	// 		isShow=false;
	// 	}
	// 	if (isShow)
	// 	{
	// 		//藏宝阁是否有免费的摇色子次数
	// 		if (player->getRoleDayClearInfo(ERDCT_CBG_FreeGamble) < 1 && player->getLevel() >= 50)
	// 		{
	// 			RewardMgr::getInstance()->setActivitySignList(WCT_TreasureLoftUi);
	// 		}
	// 		else
	// 		{
	// 			RewardMgr::getInstance()->deleteActivitySignList(WCT_TreasureLoftUi);
	// 		}
	// 	}
	// 	else
	// 	{
	// 		RewardMgr::getInstance()->deleteActivitySignList(WCT_TreasureLoftUi);
	// 	}
	//神秘宝箱2015年9月16日
	/*isShow = false;
	data = guider->getModelData(NewFuncGuider::eTreasureBox);
	if (data)
	{
	if (data->nType == NewFuncGuider::eTargetNPC)
	{
	if (player->getLevel() >= data->nParam)
	isShow = true;
	}
	if (data->nType == NewFuncGuider::eTargetAct)
	{
	if (guider->questIsInNewFuncGuide(data->nIndex))
	isShow = true;
	}
	}
	if(miniMapLayer->getChildByTag(MiniMapUi::BT_MysteryBox)==NULL){
	assert(miniMapLayer->getChildByTag(MiniMapUi::BT_MysteryBox)==NULL);
	}
	if(miniMapLayer->getChildByTag(MiniMapUi::BT_MysteryBox)->isVisible()){
	isShow=true;
	}else{
	isShow=false;
	}
	if (isShow)
	{
	//神秘宝箱
	if (World::getInstance()->GetIsShowMysteryEffect() > 0 && player->getLevel() >= 37)
	{
	RewardMgr::getInstance()->setActivitySignList(WCT_MysteryBoxUi);
	}	
	else
	{
	RewardMgr::getInstance()->deleteActivitySignList(WCT_MysteryBoxUi);
	}
	}
	else
	RewardMgr::getInstance()->deleteActivitySignList(WCT_MysteryBoxUi);
	*/
	if (RewardMgr::getInstance()->getActivitySignList().size() > 0)
	{
		getMiniMapUi()->setBtnHighLight(WCT_HUODONGBTN);
	}
	else
	{
		getMiniMapUi()->revokeBtnHighLight(WCT_HUODONGBTN);
	}
	bool bStart = ActivityMgr::getInstance()->isThereActStart();
	bool isCanRecieve = ActivityMgr::getInstance()->isHasCanRecieveReward();
	//by zhang活动和活跃放在一个界面内，所以能领取活跃度时和限时活动开启时都添加提示小数字
	if((bStart && ActivityMgr::getInstance()->GetStartActIndex() > 0) || isCanRecieve)
	{
		if (ActivityMgr::getInstance()->GetStartActIndex() != ACT_LUANDOU_INDEX)
		{
			getMiniMapUi()->setBtnHighLight(WCT_HuoyueUi);
		}
		else
		{
			getMiniMapUi()->revokeBtnHighLight(WCT_HuoyueUi);
		}
	}
	else
	{
		if (ActivityMgr::getInstance()->isLuanDouHuiPrepareState())
		{
			getMiniMapUi()->setBtnHighLight(WCT_HuoyueUi);
		}
		else
		{
			getMiniMapUi()->revokeBtnHighLight(WCT_HuoyueUi);
		}
	}
	//刷新充值活动的可领取图标
	if (IS_UI_OPEN(WCT_ChongZhiActivityFarmeUI))
	{
		ChongZhiActivityFarmeUILayer* layer = GET_UI(ChongZhiActivityFarmeUI,WCT_ChongZhiActivityFarmeUI)->getUiLayer();
		if (layer)
		{
			layer->setBtnVisible();
		}
	}
	//二级密码
	if (SecondVerifyMgr::getInstance()->isShowRedPointOnUi())
	{
		GET_UI(SystemUi, WCT_SystemUi)->setBtnHighLight(SystemUi::BT_Set);
	}
	if (!SecondVerifyMgr::getInstance()->isShowRedPointOnUi())
	{
		GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_Set);
	}

	//-----------------------------------------------------------------------------------------------------------------------------------------------
	//人物头像
	EGuildMemberPos pos=RoleManager::getInstance()->getLocalPlayer()->getGuildPos();
	if (SkillManager::getInstance()->isShowRedPoint() || ForgingMgr::getInstance()->isForgingShowRedPoint() /*|| GuildMgr::getInstance()->haveRequestLeague()*/
		|| TradingMgr::getInstance()->getIsShowRedFlag()/*交易行移到systemUI，by lw 16.2.12*/ /*|| GuildMgr::getInstance()->getWantJoinList().size() !=0  */
		)
	{
 		getRoleHeadUi()->setBtnHighLight();
// 		EGuildMemberPos pos=RoleManager::getInstance()->getLocalPlayer()->getGuildPos();
// 		if (pos!=EGMP_BangZhong)
// 		{
// 			if (GuildMgr::getInstance()->getWantJoinList().size()!=0 && IsManager(pos))
// 			{
// 				getRoleHeadUi()->setBtnHighLight();
// 			}else if (GuildMgr::getInstance()->haveRequestLeague() && pos!=EGMP_BangZhong)
// 			{
// 				getRoleHeadUi()->setBtnHighLight();
// 			}
// 		}
// 		else
// 			getRoleHeadUi()->revokeBtnHighLight();
 	}
	else if (GuildMgr::getInstance()->getWantJoinList().size()!=0 && IsManager(pos))
	{
		getRoleHeadUi()->setBtnHighLight();
	}
	else if (GuildMgr::getInstance()->haveRequestLeague() && pos!=EGMP_BangZhong)
	{
		getRoleHeadUi()->setBtnHighLight();
	}
	else if (isGuildHuoDongRed())
	{
		getRoleHeadUi()->setBtnHighLight();
	}
	else if (SecondVerifyMgr::getInstance()->isShowRedPointOnUi())
	{
		getRoleHeadUi()->setBtnHighLight();
	}
	else
	{
		getRoleHeadUi()->revokeBtnHighLight();
	}

	GUAJIBTNNEEDCANGET trans;
	if (GuaJiManager::getInstance()->getSecExp()==GuaJiManager::getInstance()->getAllExp() && GuaJiManager::getInstance()->getAllExp()!=0 )
	{
		trans.needHeightLight = true;
	}
	else
	{
		trans.needHeightLight = false;
	}
	SEND_EVENT(&trans);

	//系统
	if (SkillManager::getInstance()->isShowRedPoint())
	{
		GET_UI(SystemUi, WCT_SystemUi)->setBtnHighLight(SystemUi::BT_Skill);
	}else
	{
		GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_Skill);
	}
	if (ForgingMgr::getInstance()->isForgingShowRedPoint())
	{
		GET_UI(SystemUi, WCT_SystemUi)->setBtnHighLight(SystemUi::BT_Forge);
	}else
	{
		GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_Forge);
	}
	if (GuildMgr::getInstance()->haveRequestLeague() && RoleManager::getInstance()->getLocalPlayer()->getGuildPos()!=EGMP_BangZhong)
	{
		GET_UI(SystemUi, WCT_SystemUi)->setBtnHighLight(SystemUi::BT_Guild);
	}
	else
	{
		GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_Guild);
	}
	if ( (GuildMgr::getInstance()->getWantJoinList().size()!=0) && IsManager(RoleManager::getInstance()->getLocalPlayer()->getGuildPos()))
	{
		GET_UI(SystemUi, WCT_SystemUi)->setBtnHighLight(SystemUi::BT_Guild);
	}else
	{
		GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_Guild);
	}
	if (isGuildHuoDongRed())
	{
		GET_UI(SystemUi, WCT_SystemUi)->setBtnHighLight(SystemUi::BT_Guild);
	}
	else
	{
		GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_Guild);
	}
	//交易行 systemUi
	// 	if (TradingMgr::getInstance()->getIsShowRedFlag()){
	// 		GET_UI(SystemUi, WCT_SystemUi)->setBtnHighLight(SystemUi::BT_JiaoyiHang);
	// 	}else{
	// 		GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_JiaoyiHang);
	// 	}

	if (TradingMgr::getInstance()->getIsShowRedFlag()){
		getMiniMapUi()->setBtnHighLight(WCT_TradingUI);	
	}else{
		getMiniMapUi()->revokeBtnHighLight(WCT_TradingUI);
	}

	if (BossPKMgr::getInstance()->getFuctionOpen())
	{
		if (getMiniMapUi())
		{
			if (BossPKMgr::getInstance()->isBossNeedShow())
			{
				getMiniMapUi()->showOutBoss(true);
			}
			else
			{
				getMiniMapUi()->showOutBoss(false);
			}
		}
	}
	if(KaifuHuodongMgr::getInstance()->checkHaveYunyingReward()){
		if(getMiniMapUi()){
			getMiniMapUi()->setBtnHighLight(WCT_BusinessUi);
		}
	}else{
		if(getMiniMapUi()){
			getMiniMapUi()->revokeBtnHighLight(WCT_BusinessUi);
		}
	}
}

void World::update( float dt )
{
	if (_scene == NULL)
		return;

	if (_miniMapUi)
		_miniMapUi->showExpLixianBtn(true);

	update_auto_combat_in_idle_state();

	updateRemoteRoleState();

	updateRemoteCreatureState();

	addUpTime += dt;
	if (addUpTime >= 5)//每5秒执行一次
	{
		slow_update();
		addUpTime = 0;
	}
}

void World::enter_wolrd_form_create_role_update(float dt)
{
	if (!_loginEnterSceneFlag)
		return;

	_gotoNewMapStep++;

	static int pecBegin = CrossSceneUI::getInstance()->getPec();
	static int pecEnd = 100;
	//static int openMapStepIndex = 0;
	//int openMapStepMax = 60; //102
	//if ( MapManager::getInstance()->IsBigMap() )
	//	openMapStepMax = 102;
	int setpTotal = 2 + MapManager::getInstance()->getMaxLoadStep();
	//static int openMapStepIndexCur = 0;
	static int retSetp = 0;

	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
	if (_gotoNewMapStep==1)
	{
		//openMapStepIndex++;
		//openMapStepIndexCur = openMapStepIndex;
		bool isOK = MapManager::getInstance()->open_map(/*0, retSetp*/);
		if (isOK)
		{
			_gotoNewMapStep = 1;
			//openMapStepIndex = 0;
		}
		else
			_gotoNewMapStep = 0;
	}
	else if (_gotoNewMapStep==2)
	{
		World::getInstance()->open();
		CCDirector::sharedDirector()->replaceScene(World::getInstance()->getScene(true));

		extern NET_SIS_get_role_init_state_att *g_roleStateMsg;
		//LocalPlayer Buff
		RoleHeadUi *roleHeadUi = World::getInstance()->getRoleHeadUi();
		for(int i = 0; i < g_roleStateMsg->nBuffNum; i ++)
		{
			const tagBuffMsgInfo &buffInfo = g_roleStateMsg->Buff[i];
			player->addPLBuffer(buffInfo.dwBuffTypeID,buffInfo.dwSrcRoleId,buffInfo.nWarpTimes);
			if (roleHeadUi)
				roleHeadUi->setBuffCD(buffInfo.dwBuffTypeID, buffInfo.nPersistTimeLeft, buffInfo.nMaxPersistTime,buffInfo.nWarpTimes);
		}

		delete [](char*)g_roleStateMsg;
		g_roleStateMsg = NULL;

		player->initFsm();
		player->loadAnimate();
		player->addToMap();

		CrossSceneUI::getInstance()->close();

		RoleManager::getInstance()->addNewMapRole();

		ChatMgr::getInstance()->updateBossMassage();
		//[bing] 直接进入新手副本动画
		CMovie::GetInstance().doNPCScript(1);
#ifdef _USE_SDK
		WzolJni *jni = WzolJni::getInstance();
		if (jni->getIsFirstCreate())
		{
			string params;
			jni->logToServer(LOG_FLASHSTART, params);
		}
#endif

		//创建角色建立风沙离子特效 //add by XSea 2014.11.13
		MapManager::getInstance()->playSandParticleEffect();

		_loginEnterSceneFlag = false;
	}

	CrossSceneUI::getInstance()->setPec(pecBegin+ (_gotoNewMapStep+retSetp) * (pecEnd-pecBegin)/setpTotal);

}

void World::enter_world_from_select_role_update( float dt )
{
	if (!_loginEnterSceneFlag)
		return;

	_gotoNewMapStep++;

	static int pecBegin = CrossSceneUI::getInstance()->getPec();
	static int pecEnd = 100;
	//static int openMapStepIndex = 0;
	//int openMapStepMax = 60; //102
	//if ( MapManager::getInstance()->IsBigMap() )
	//	openMapStepMax = 102;
	int setpTotal = 2 + MapManager::getInstance()->getMaxLoadStep();

	//static int openMapStepIndexCur = 0;
	static int retSetp = 0;

	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
	if (_gotoNewMapStep==1)
	{
		//openMapStepIndex++;
		//openMapStepIndexCur = openMapStepIndex;
		bool isOK = MapManager::getInstance()->open_map(/*0, retSetp*/);
		if (isOK /*openMapStepIndex>=openMapStepMax*/)
		{
			_gotoNewMapStep = 1;
			//openMapStepIndex = 0;
		}
		else
			_gotoNewMapStep = 0;
	}
	else if (_gotoNewMapStep==2)
	{
		World::getInstance()->open();
		//World::getInstance()->SetRoleHeadTouch();

		extern NET_SIS_get_role_init_state_att *g_roleStateMsg;
		RoleHeadUi* roleHeadUi = World::getInstance()->getRoleHeadUi();

		for(int i = 0; i < g_roleStateMsg->nBuffNum; i ++)
		{
			const tagBuffMsgInfo &buffInfo = g_roleStateMsg->Buff[i];
			player->addPLBuffer(buffInfo.dwBuffTypeID,buffInfo.dwSrcRoleId,buffInfo.nWarpTimes);
			if (roleHeadUi)
				roleHeadUi->setBuffCD(buffInfo.dwBuffTypeID, buffInfo.nPersistTimeLeft, buffInfo.nMaxPersistTime,buffInfo.nWarpTimes);
			SkillAnimManager::getInstance()->useBuffer(buffInfo.dwBuffTypeID, player->getId(), player->getId());
		}

		delete [](char*)g_roleStateMsg;
		g_roleStateMsg = NULL;

		MapManager::getInstance()->enterMapRemind(MapManager::getInstance()->getCurMapId());

		//modify by lpf 2015-09-11  传奇宝典不再有等级限制 
		//  		MiniMapUi *mUi = World::getInstance()->getMiniMapUi();
		//  		if(mUi)
		//  		{
		//  			LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
		//  			if(player->getLevel() >= 34)
		//  				mUi->setBaoDianBtnVisible(true);
		//  			else
		//  				mUi->setBaoDianBtnVisible(false);
		//  		}

		player->initFsm();
		player->loadAnimate();
		player->addToMap();

		RoleManager::getInstance()->addNewMapRole();

		//World::getInstance()->getNPCDialog()->show(false);
		InputMessageBox::getInstace()->close();

		CCDirector::sharedDirector()->replaceScene(World::getInstance()->getScene());
		CrossSceneUI::getInstance()->close();

		ChatMgr::getInstance()->updateBossMassage();

		_loginEnterSceneFlag = false;
	}

	CrossSceneUI::getInstance()->setPec(pecBegin+ (_gotoNewMapStep+retSetp) * (pecEnd-pecBegin)/setpTotal);

}

void World::go_through_map_in_world(  )
{
	if(!_gotoNewMap) return;

	_gotoNewMapStep++;

	do_sth_before_close_map();

	MapManager::getInstance()->open_map(/*0, retSetp*/);

	do_sth_reenter_new_map();

	_gotoNewMap = false;
}

// void World::repetLoginUpdate( float dt )
// {
// 	if(!_gotoNewMap)
// 		return;
// 	static int pecBegin = CrossSceneUI::getInstance()->getPec();
// 	static int pecEnd = 100;
// 	static int openMapStepIndex = 0;
// 
// 	int setpTotal = getWorldMaxLoadStep() + MapManager::getInstance()->getMaxLoadStep();
// 
// 	static int retSetp = 0;
// 
// 	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
// 	if (_gotoNewMapStep==1)
// 	{
// 		retSetp = 0;
// 		CLOSE_ALL_UI();
// 		CrossSceneUI::getInstance()->setMessage();
// 		if (ItemTip::getInstace()->isOpen())
// 			ItemTip::getInstace()->close();
// 		EquipTipUiLayer* pNode = (EquipTipUiLayer*)getScene()->getChildByTag(WCT_EQUIP_TIPS_UI_TAG);
// 		if(pNode)
// 			pNode->close();
// 		GongfaTip::getInstace()->close();
// 	}
// 	else if (_gotoNewMapStep==2)
// 	{
// 		retSetp = 0;
// 		ShuangXiuMgr::getInstance()->clear();
// 	}
// 	else if (_gotoNewMapStep==3)
// 	{
// 		retSetp = 0;
// 		SkillAnimManager::getInstance()->clearAll();
// 	}
// 	else if (_gotoNewMapStep==4)
// 	{
// 		retSetp = 0;
// 	}
// 	else if (_gotoNewMapStep==5)
// 	{
// 		retSetp = 0;
// 		GroundItemManager::getInstance()->destroy();
// 	}
// 	else if (_gotoNewMapStep==6)
// 	{
// 		retSetp = 0;
// 
// 		MapManager::getInstance()->closeMap();
// 	}
// 	else if (_gotoNewMapStep==7)
// 	{
// 		retSetp = 0;
// 		//停止播放特戒特效
// 		LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
// 		if( localPlayer )
// 		{
// 			localPlayer->stopAllRingEffect();
// 			if(localPlayer->getAttribute(RA_RideState) != 0 )
// 			{
// 				if(MapManager::getInstance()->getCurMapId() == SBK_MAP_CRC_ID/* || MapManager::getInstance()->getCurMapId() == SBK_CASTLE_MAP_CRC_ID*/)
// 					RoleManager::getInstance()->sendUnRideMsg();
// 			}
// 		}
// 	}
// 	else if(_gotoNewMapStep == 8)
// 	{
// 		//是否收到了跳转地图的包，此处判断了，下面就不需要了
// 		if (_repetCanGotoMap)
// 		{
// 			++openMapStepIndex;
// 			bool isOK = MapManager::getInstance()->openMapStep(openMapStepIndex, retSetp);
// 			if (isOK)
// 			{
// 				openMapStepIndex = 0;
// 			}
// 			else
// 				--_gotoNewMapStep;
// 		}
// 		else
// 			return;
// 	}
// 	else if(_gotoNewMapStep == 9)
// 	{
// 		GroundItemManager::getInstance()->init();
// 	}
// 	else if(_gotoNewMapStep == 10)
// 	{
// 		LocalPlayer* pLp = RoleManager::getInstance()->getLocalPlayer();
// 		pLp->addToMap();
// 		if(!MapManager::getInstance()->isCrossMaping())
// 			pLp->stateMachine()->ChangeState(LocalPlayerStateStand::getInstance());
// 
// 		pLp->loadAnimate();
// 		std::vector<buffDestInfo> buffersId = pLp->getBuffersId();
// 		for(std::vector<buffDestInfo>::iterator iter = buffersId.begin(); iter != buffersId.end(); ++ iter)
// 		{
// 			SkillAnimManager::getInstance()->continueBufferAnims(iter->buffId, pLp->getId(), pLp->getId());
// 		}
// 
// 		//更新一下沙巴克城主衣服效果
// 		pLp->updateSBKMasterEffect(PackageManager::getInstance()->wearSBKMasterEquip());
// 
// 		pLp->autoSEToNewMap();
// 		MapManager::getInstance()->enterMapRemind(MapManager::getInstance()->getCurMapId());
// 		_miniMapUi->changeAreaName(MapManager::getInstance()->getMapName(MapManager::getInstance()->getCurMapId()).c_str());
// 	}
// 	else if(_gotoNewMapStep == 11)
// 	{
// 		_gotoNewMap = false;
// 		CrossSceneUI::getInstance()->close();
// 		RoleManager::getInstance()->addNewMapRole();
// 		if (_battlefieldIsEnd)
// 		{
// 			_battlefieldIsEnd = false;
// 		}
// 		_repetLoginState = false;
// 	}
// 	CrossSceneUI::getInstance()->setPec(pecBegin+ (_gotoNewMapStep+retSetp) * (pecEnd-pecBegin)/setpTotal);
// 
// 	if (_gotoNewMapStep >= 11)
// 	{
// 		_gotoNewMapStep = 12;
// 	}
// 	++_gotoNewMapStep;
// }

void World::repetLoginUpdate( float dt )
{
	return;

	//remark by gh 
// 	if (!_gotoNewMap)
// 		return;
// 	_gotoNewMapStep++;
// 
// 	static int pecBegin = CrossSceneUI::getInstance()->getPec();
// 	static int pecEnd = 100;
// 	static int openMapStepIndex = 0;
// 	int setpTotal = 2 + MapManager::getInstance()->getMaxLoadStep();
// 
// 	static int openMapStepIndexCur = 0;
// 	static int retSetp = 0;
// 
// 	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
// 
// 	if (_gotoNewMapStep==1)
// 	{
// 		retSetp = 0;
// 		CLOSE_ALL_UI();
// 		if (ItemTip::getInstace()->isOpen())
// 			ItemTip::getInstace()->close();
// 		EquipTipUiLayer* pNode = (EquipTipUiLayer*)getScene()->getChildByTag(WCT_EQUIP_TIPS_UI_TAG);
// 		if(pNode)
// 			pNode->close();
// 		GongfaTip::getInstace()->close();
// 		MapManager::getInstance()->closeMap();
// 	}
// 	else if (_gotoNewMapStep==2)
// 	{
// 		openMapStepIndex++;
// 		openMapStepIndexCur = openMapStepIndex;
// 		bool isOK = MapManager::getInstance()->openMapStep(openMapStepIndex, retSetp);
// 		if (isOK /*openMapStepIndex>=openMapStepMax*/)
// 		{
// 			_gotoNewMapStep = 2;
// 			openMapStepIndex = 0;
// 		}
// 		else
// 			_gotoNewMapStep = 1;
// 	}
// 	else if (_gotoNewMapStep>=3)
// 	{
// 		World::getInstance()->open(true);
// 		//World::getInstance()->SetRoleHeadTouch();
// 
// 		MapManager::getInstance()->enterMapRemind(MapManager::getInstance()->getCurMapId());
// 
// 		player->loadAnimate();
// 		player->addToMap(true);
// 		RoleManager::getInstance()->addNewMapRole();
// 
// 		CCDirector::sharedDirector()->replaceScene(World::getInstance()->getScene());
// 		CrossSceneUI::getInstance()->close(true);
// 		_gotoNewMap = false;
// 		_repetCanGotoMap = false;
// 		_repetLoginState = false;
// 	}
// 	CrossSceneUI::getInstance()->setPec(pecBegin+ (_gotoNewMapStep+retSetp) * (pecEnd-pecBegin)/setpTotal);
}

// void World::gotoNewMapUpdate( float dt )
// {
// 	if(_gotoNewMap)
// 	{//跳转地图;
// 		if(_gotoNewMapStep == 0)
// 		{
// 			CLOSE_ALL_UI();
// 			CrossSceneUI::getInstance()->setPec(15);
// 			CrossSceneUI::getInstance()->setMessage();
// 			if (ItemTip::getInstace()->isOpen())
// 				ItemTip::getInstace()->close();
// 			EquipTipUiLayer* pNode = (EquipTipUiLayer*)getScene()->getChildByTag(WCT_EQUIP_TIPS_UI_TAG);
// 			if(pNode)
// 				pNode->close();
// 			GongfaTip::getInstace()->close();
// 		}
// 		else if(_gotoNewMapStep == 1)
// 		{
// 			ShuangXiuMgr::getInstance()->clear();
// 			CrossSceneUI::getInstance()->setPec(20);
// 		}
// 		else if(_gotoNewMapStep == 2)
// 		{
// 			SkillAnimManager::getInstance()->clearAll();
// 			CrossSceneUI::getInstance()->setPec(25);
// 		}
// 		else if(_gotoNewMapStep == 3)
// 		{
// 			//RoleManager::getInstance()->clearAllRemote(false);
// 			CrossSceneUI::getInstance()->setPec(30);
// 		}
// 		else if(_gotoNewMapStep == 4)
// 		{
// 			//CCProfile("MapManager::getInstance()->changeMap");
// 			MapManager::getInstance()->changeMap(_newMapId);
// 			CrossSceneUI::getInstance()->setPec(35);
// 		}
// 		else if(_gotoNewMapStep == 5)
// 		{
// 			//CCProfile("GroundItemManager::getInstance()->destroy");
// 			//GroundItemManager::getInstance()->destroy();
// 			CrossSceneUI::getInstance()->setPec(40);
// 		}
// 		else if(_gotoNewMapStep == 6)
// 		{
// 			//CCProfile("MapManager::getInstance()->closeMap");
// 			MapManager::getInstance()->closeMap();
// 			CrossSceneUI::getInstance()->setPec(45);
// 		}
// 		else if(_gotoNewMapStep == 7)
// 		{
// 			//[bing] 之前2帧后清资源会造成卡顿 现在放在loading条的时候放资源试试
// 			//AnimationCache::getInstance()->checkAndReleaseAllAnis();
// 			//CCTextureCache::sharedTextureCache()->removeUnusedTextures();
// 			//ZHJL：这里不能直接都把不用的资源全部删除，因为过完场景马上就有玩家，马上还要重新加载，
// 			//ZHJL:先全部释放，然后再全部加载，不科学，明知道要再次加载，还要先删掉？？？
// 			//ZHJL:按照时间戳进行排序，多长时间用不到的资源，才进行释放删除比较科学，待做。
// 
// 			//停止播放特戒特效
// 			LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
// 			if( localPlayer )
// 				localPlayer->stopAllRingEffect();
// 
// 			CrossSceneUI::getInstance()->setPec(60);
// 		}
// 		else if(_gotoNewMapStep == 8)
// 		{
// 			//CCProfile("MapManager::getInstance()->openMap()");
// 			MapManager::getInstance()->openMap();
// 			CrossSceneUI::getInstance()->setPec(65);
// 		}
// 		else if(_gotoNewMapStep == 9)
// 		{
// 			//CCProfile("GroundItemManager::getInstance()->init()");
// 			GroundItemManager::getInstance()->init();
// 			CrossSceneUI::getInstance()->setPec(70);
// 		}
// 		else if(_gotoNewMapStep == 10)
// 		{
// 			//CCProfile("LocalPlayer land");
// 			RoleManager::getInstance()->getLocalPlayer()->addToMap();
// 			if(!MapManager::getInstance()->isCrossMaping())
// 				RoleManager::getInstance()->getLocalPlayer()->stateMachine()->ChangeState(LocalPlayerStateStand::getInstance());
// 
// 			LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
// 			localPlayer->loadAnimate();
// 			std::vector<buffDestInfo> buffersId = localPlayer->getBuffersId();
// 			for(std::vector<buffDestInfo>::iterator iter = buffersId.begin(); iter != buffersId.end(); ++ iter)
// 			{
// 				SkillAnimManager::getInstance()->continueBufferAnims(iter->buffId, localPlayer->getId(), localPlayer->getId());
// 			}
// 			localPlayer->autoSEToNewMap();
// 			MapManager::getInstance()->enterMapRemind(MapManager::getInstance()->getCurMapId());
// 			_miniMapUi->changeAreaName(MapManager::getInstance()->getMapName(MapManager::getInstance()->getCurMapId()).c_str());
// 			CrossSceneUI::getInstance()->setPec(75);
// 		}
// 		else if(_gotoNewMapStep == 11)
// 		{
// 			//CCProfile("RoleManager::getInstance()->addNewMapRole();");
// 			_gotoNewMap = false;
// 			setRepetCanAutoRun(true);
// 
// 			//AnimationCache::getInstance()->releaseUnUsedAnims();
// 			CrossSceneUI::getInstance()->setPec(95);
// 
// 			World::getInstance()->getNPCDialog()->show(false);
// 			InputMessageBox::getInstace()->close();
// 
// 			CrossSceneUI::getInstance()->close();
// 
// 			RoleManager::getInstance()->addNewMapRole();
// 
// 			if (_battlefieldIsEnd)
// 			{
// 				OPEN_UI(WCT_BattlefieldUi);
// 				//GET_UI(BattlefieldUi,WCT_BattlefieldUi)->updateData();
// 				_battlefieldIsEnd = false;
// 			}	
// 			if (FubenMgr::GetInstance().getFubenPageIndex() != 0 && FubenMgr::GetInstance().getFubenUiId() != 0 && FubenMgr::GetInstance().getIsOpenFubenUi())
// 			{
// 				FubenMgr::GetInstance().openFenUi();
// 			}			
// 		}
// 		_gotoNewMapStep ++;
// 	}
// }

void World::hpChangeEffect( int value, eHpChangeType type, const CCPoint &pos, float zOrder, bool bLocal )				//【Ji：】血量变化特效
{
	ccColor3B color;
	switch(type)
	{
	case HCT_OtherCrit:
	case HCT_OtherNormal:
		color = ccc3(0xff, 0x3c, 0x00);
		break;
	case HCT_CRIT:
	case HCT_REDUCE:
		color = ccc3(0xff, 0x00, 0x00);
		break;
	case HCT_Add:
		color = ccc3(0x00, 0xff, 0x00);
		break;
	}

	//if(type == HCT_CRIT || type == HCT_OtherCrit)
	//{
	//	CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
	//	if(label == NULL)
	//		return;
	//	CCString *str = CCString::createWithFormat("\xe6\x9a\xb4%d", value);
	//	label->setZOrder(MZ_ROLE_HP_EFFECT);
	//	label->setString(str->getCString());
	//	//CCLabelBMFont *label = CCLabelBMFont::create(str->getCString(), "Art/Scene/bmfont.fnt");
	//	//m->addChild(label, zOrder); 
	//	label->setPosition(ccpAdd(ccp(0.0f, 120.0f), pos));
	//	label->setAnchorPoint(ccp(0.5f, 0.5f));
	//	label->setAlignment(kCCTextAlignmentCenter);
	//	label->setColor(color);
	//	CCMoveTo *moveAction = CCMoveTo::create(0.2f, ccpAdd(ccp(0.0f, 120.0f), pos));
	//	CCFadeOut *outAction = CCFadeOut::create(1.3);
	//	CCScaleTo *scale1 = CCScaleTo::create(0.1f, 1.5f, 1.5f);
	//	CCSpawn *spawn1 = CCSpawn::createWithTwoActions(moveAction, outAction);
	//	CCSpawn *spawn2 = CCSpawn::createWithTwoActions(spawn1, scale1);
	//	CCSpawn *spawn = CCSpawn::createWithTwoActions(spawn1, spawn2);
	//	CCSequence *action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	//	label->runAction(action);
	//	label->setVisible(true);
	//	label->setOpacity(255);
	//}
	//else if( type == HCT_Add )							//加血轨迹
	//{
	//	CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
	//	if(label == NULL)
	//		return;
	//	CCString *str = CCString::createWithFormat("%d", value);
	//	label->setZOrder(MZ_ROLE_HP_EFFECT);
	//	label->setString(str->getCString());
	//	label->setPosition(ccpAdd(ccp(0.0f, 100.0f), pos));
	//	label->setColor(color);
	//	//int i = CCRANDOM_0_1() * 10;
	//	CCMoveTo *moveAction = CCMoveTo::create(0.8f,ccpAdd(ccp(50.0f, 130.0f),pos));
	//	CCFadeOut *outAction = CCFadeOut::create(1.3);
	//	CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
	//	CCSequence *action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	//	label->runAction(action);
	//	label->setVisible(true);
	//	label->setOpacity(255);
	//}
	//else									
	//{
	//	CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
	//	if(label == NULL)
	//		return;
	//	CCString *str = CCString::createWithFormat("%d", value);
	//	label->setZOrder(MZ_ROLE_HP_EFFECT);
	//	label->setString(str->getCString());
	//	//CCLabelBMFont *label = CCLabelBMFont::create(str->getCString(), "Art/Scene/bmfont.fnt");
	//	//m->addChild(label, zOrder);
	//	label->setPosition(ccpAdd(ccp(0.0f, 100.0f), pos));
	//	label->setColor(color);
	//	label->setScale(1.0f);
	//
	//	if (bLocal)
	//	{
	//		CCMoveTo *moveAction = CCMoveTo::create(0.4f,ccpAdd(ccp(0.0f, 130.0f),pos));
	//		CCFadeOut *outAction = CCFadeOut::create(0.4);
	//		//CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
	//		//CCSequence *action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	//		CCSequence *action = CCSequence::create(moveAction, outAction, 
	//			CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)), NULL);
	//		label->runAction(action);
	//		label->setVisible(true);
	//		label->setOpacity(255);
	//	}
	//	else
	//	{
	//		label->setPosition(ccpAdd(ccp(0.0f, 80.0f), pos));
	//		static unsigned char i = 0;
	//		CCJumpTo *moveAction;
	//		if(i == 0)
	//		{
	//			i = 1;
	//			moveAction = CCJumpTo::create(/*CCRANDOM_0_1() +*/ 0.5, ccpAdd(ccp(0.0f, 110.0f), ccp(pos.x - 100,pos.y)),15.0f,1);
	//		}
	//		else
	//		{
	//			i = 0;
	//			moveAction = CCJumpTo::create(/*CCRANDOM_0_1()+*/ 0.5, ccpAdd(ccp(0.0f, 110.0f), ccp(pos.x + 100,pos.y)),15.0f,1);
	//		}
	//		CCFadeOut *outAction = CCFadeOut::create(0.4);
	//		//CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
	//		//CCSequence *action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	//		CCSequence *action = CCSequence::create(moveAction, outAction, 
	//			CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)), NULL);
	//		label->runAction(action);
	//		label->setVisible(true);
	//		label->setOpacity(255);
	//	}		
	//}



	if (type == HCT_OtherCrit)
	{
		CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
		if(label == NULL)
			return;
		//CCString *str = CCString::createWithFormat("\xE6\x9A\xB4\xE5\x87\xBB%d", value);
		//label->setFntFile("Art/Scene/fontNum6.fnt");
		CCString *str = CCString::createWithFormat(STRING_TABLE["critical_char"], value);
		label->setZOrder(MZ_ROLE_HP_EFFECT);
		label->setString(str->getCString());
		label->setPosition(ccpAdd(ccp(_hpChangeAttData[HCT_OtherCrit].StartPosX, _hpChangeAttData[HCT_OtherCrit].StartPosY), pos));
		label->setAnchorPoint(ccp(0.5f, 0.5f));
		label->setAlignment(kCCTextAlignmentCenter);
		label->setScale(_hpChangeAttData[HCT_OtherCrit].InitZoom);
		label->setColor(color);
		CCMoveTo *moveAction = CCMoveTo::create(_hpChangeAttData[HCT_OtherCrit].ThenMoveTime, ccpAdd(ccp(_hpChangeAttData[HCT_OtherCrit].EndPosX, _hpChangeAttData[HCT_OtherCrit].EndPosY), pos));
		CCFadeOut *outAction = CCFadeOut::create(_hpChangeAttData[HCT_OtherCrit].DisappearTime);
		CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
		CCSequence *action;
		if (_hpChangeAttData[HCT_OtherCrit].InitMidTime != 0 && _hpChangeAttData[HCT_OtherCrit].MidEndTime != 0)
		{
			CCScaleTo *scale1 = CCScaleTo::create(_hpChangeAttData[HCT_OtherCrit].InitMidTime,_hpChangeAttData[HCT_OtherCrit].MidZoom);
			CCScaleTo *scale2 = CCScaleTo::create(_hpChangeAttData[HCT_OtherCrit].MidEndTime,_hpChangeAttData[HCT_OtherCrit].EndZoom);
			CCSequence* seq = CCSequence::create(scale1,scale2,spawn,NULL);
			action = CCSequence::createWithTwoActions(seq, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		else
		{
			action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		label->runAction(action);
		label->setVisible(true);
		label->setOpacity(255);
	}
	else if( type == HCT_OtherNormal)
	{
		CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
		if(label == NULL)
			return;
		CCString *str = CCString::createWithFormat("%d", value);
		//label->setFntFile("Art/Scene/fontNum6.fnt");
		label->setZOrder(MZ_ROLE_HP_EFFECT);
		label->setString(str->getCString());
		label->setPosition(ccpAdd(ccp(_hpChangeAttData[HCT_OtherNormal].StartPosX, _hpChangeAttData[HCT_OtherNormal].StartPosY), pos));
		label->setAnchorPoint(ccp(0.5f, 0.5f));
		label->setAlignment(kCCTextAlignmentCenter);
		label->setScale(_hpChangeAttData[HCT_OtherNormal].InitZoom);
		label->setColor(color);
		static unsigned char i = 0;
		CCJumpTo *moveAction;
		CCSequence* action;
		if(i == 0)
		{
			i = 1;
			moveAction = CCJumpTo::create(/*CCRANDOM_0_1() +*/ _hpChangeAttData[HCT_OtherNormal].ThenMoveTime, 
				ccpAdd(ccp(-_hpChangeAttData[HCT_OtherNormal].EndPosX, _hpChangeAttData[HCT_OtherNormal].EndPosY),pos),_hpChangeAttData[HCT_OtherNormal].JumpHeight,1);
		}
		else
		{
			i = 0;
			moveAction = CCJumpTo::create(/*CCRANDOM_0_1()+*/ _hpChangeAttData[HCT_OtherNormal].ThenMoveTime, 
				ccpAdd(ccp(_hpChangeAttData[HCT_OtherNormal].EndPosX, _hpChangeAttData[HCT_OtherNormal].EndPosY),pos),_hpChangeAttData[HCT_OtherNormal].JumpHeight,1);
		}
		CCFadeOut *outAction = CCFadeOut::create(_hpChangeAttData[HCT_OtherNormal].DisappearTime);
		CCSequence *spawn = CCSequence::createWithTwoActions(moveAction, outAction);
		if (_hpChangeAttData[HCT_OtherNormal].InitMidTime != 0 && _hpChangeAttData[HCT_OtherNormal].MidEndTime != 0)
		{
			CCScaleTo *scale1 = CCScaleTo::create(_hpChangeAttData[HCT_OtherNormal].InitMidTime,_hpChangeAttData[HCT_OtherNormal].MidZoom);
			CCScaleTo *scale2 = CCScaleTo::create(_hpChangeAttData[HCT_OtherNormal].MidEndTime,_hpChangeAttData[HCT_OtherNormal].EndZoom);
			CCSequence* seq = CCSequence::create(scale1,scale2,spawn,NULL);
			action = CCSequence::createWithTwoActions(seq, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		else
		{
			action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		label->runAction(action);
		label->setVisible(true); 
		label->setOpacity(255);
	}
	else if (type == HCT_CRIT)
	{
		CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
		if(label == NULL)
			return;
		//CCString *str = CCString::createWithFormat("\xE6\x9A\xB4\xE5\x87\xBB%d", value);
		//label->setFntFile("Art/Scene/fontNum5.fnt");
		CCString *str = CCString::createWithFormat(STRING_TABLE["critical_char"], value);
		label->setZOrder(MZ_ROLE_HP_EFFECT);
		label->setString(str->getCString());
		label->setPosition(ccpAdd(ccp(_hpChangeAttData[HCT_CRIT].StartPosX, _hpChangeAttData[HCT_CRIT].StartPosY), pos));
		label->setAnchorPoint(ccp(0.5f, 0.5f));
		label->setAlignment(kCCTextAlignmentCenter);
		label->setScale(_hpChangeAttData[HCT_CRIT].InitZoom);
		label->setColor(color);
		CCMoveTo *moveAction = CCMoveTo::create(_hpChangeAttData[HCT_CRIT].ThenMoveTime, ccpAdd(ccp(_hpChangeAttData[HCT_CRIT].EndPosX, _hpChangeAttData[HCT_CRIT].EndPosY), pos));
		CCFadeOut *outAction = CCFadeOut::create(_hpChangeAttData[HCT_CRIT].DisappearTime);
		CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
		CCSequence* action;
		if (_hpChangeAttData[HCT_CRIT].InitMidTime != 0 && _hpChangeAttData[HCT_CRIT].MidEndTime != 0)
		{
			CCScaleTo *scale1 = CCScaleTo::create(_hpChangeAttData[HCT_CRIT].InitMidTime,_hpChangeAttData[HCT_CRIT].MidZoom);
			CCScaleTo *scale2 = CCScaleTo::create(_hpChangeAttData[HCT_CRIT].MidEndTime,_hpChangeAttData[HCT_CRIT].EndZoom);
			CCSequence* seq = CCSequence::create(scale1,scale2,spawn,NULL);
			action = CCSequence::createWithTwoActions(seq, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		else
		{
			action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		label->runAction(action);
		label->setVisible(true);
		label->setOpacity(255);
	}
	else if (type == HCT_REDUCE)
	{
		CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
		if(label == NULL)
			return;
		CCString *str = CCString::createWithFormat("%d",value);
		//label->setFntFile("Art/Scene/fontNum5.fnt");
		label->setZOrder(MZ_ROLE_HP_EFFECT);
		label->setString(str->getCString());
		label->setPosition(ccpAdd(ccp(_hpChangeAttData[HCT_REDUCE].StartPosX, _hpChangeAttData[HCT_REDUCE].StartPosY), pos));
		label->setAnchorPoint(ccp(0.5f, 0.5f));
		label->setAlignment(kCCTextAlignmentCenter);
		label->setScale(_hpChangeAttData[HCT_REDUCE].InitZoom);
		label->setColor(color);
		CCMoveTo *moveAction = CCMoveTo::create(_hpChangeAttData[HCT_REDUCE].ThenMoveTime, ccpAdd(ccp(_hpChangeAttData[HCT_REDUCE].EndPosX, _hpChangeAttData[HCT_REDUCE].EndPosY), pos));
		CCFadeOut *outAction = CCFadeOut::create(_hpChangeAttData[HCT_REDUCE].DisappearTime);
		CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
		CCSequence* action;
		if (_hpChangeAttData[HCT_REDUCE].InitMidTime != 0 && _hpChangeAttData[HCT_REDUCE].MidEndTime != 0)
		{
			CCScaleTo *scale1 = CCScaleTo::create(_hpChangeAttData[HCT_REDUCE].InitMidTime,_hpChangeAttData[HCT_REDUCE].MidZoom);
			CCScaleTo *scale2 = CCScaleTo::create(_hpChangeAttData[HCT_REDUCE].MidEndTime,_hpChangeAttData[HCT_REDUCE].EndZoom);
			CCSequence* seq = CCSequence::create(scale1,scale2,spawn,NULL);
			action = CCSequence::createWithTwoActions(seq, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		else
		{
			action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		label->runAction(action);
		label->setVisible(true);
		label->setOpacity(255);
	}
	else if( type == HCT_Add )							//加血轨迹
	{
		CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
		if(label == NULL)
			return;
		//CCString *str = CCString::createWithFormat("\x2B%d", value);
		//label->setFntFile("Art/Scene/fontNum7.fnt");
		CCString *str = CCString::createWithFormat("%d", value);
		label->setZOrder(MZ_ROLE_HP_EFFECT);
		label->setString(str->getCString());
		label->setPosition(ccpAdd(ccp(_hpChangeAttData[HCT_Add].StartPosX, _hpChangeAttData[HCT_Add].StartPosY), pos));
		label->setScale(_hpChangeAttData[HCT_Add].InitZoom);
		label->setColor(color);
		CCMoveTo *moveAction = CCMoveTo::create(_hpChangeAttData[HCT_Add].ThenMoveTime,ccpAdd(ccp(_hpChangeAttData[HCT_Add].EndPosX, _hpChangeAttData[HCT_Add].EndPosY),pos));
		CCFadeOut *outAction = CCFadeOut::create(_hpChangeAttData[HCT_Add].DisappearTime);
		CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
		CCSequence* action;
		if (_hpChangeAttData[HCT_Add].InitMidTime != 0 && _hpChangeAttData[HCT_Add].MidEndTime != 0)
		{
			CCScaleTo *scale1 = CCScaleTo::create(_hpChangeAttData[HCT_Add].InitMidTime,_hpChangeAttData[HCT_Add].MidZoom);
			CCScaleTo *scale2 = CCScaleTo::create(_hpChangeAttData[HCT_Add].MidEndTime,_hpChangeAttData[HCT_Add].EndZoom);
			CCSequence* seq = CCSequence::create(scale1,scale2,spawn,NULL);
			action = CCSequence::createWithTwoActions(seq, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		else
		{
			action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
		}
		label->runAction(action);
		label->setVisible(true);
		label->setOpacity(255);
	}
}

void World::missEffect( const CCPoint &pos,const CCPoint &srcPos ,float zOrder ,bool isSelf)
{
	//CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
	//if(label == NULL)
	//	return;
	////CCString *str = CCString::createWithFormat("\xe6\x9a\xb4%d", value);
	//label->setZOrder(MZ_ROLE_HP_EFFECT);
	//label->setString("\xE9\x97\xAA\xE9\x81\xBF");//闪避
	//label->setPosition(ccpAdd(ccp(0.0f, 120.0f), pos));
	//label->setAnchorPoint(ccp(0.5f, 0.5f));
	//label->setAlignment(kCCTextAlignmentCenter);
	//label->setColor(ccc3(10, 240, 10));
	//CCMoveTo *moveAction = CCMoveTo::create(0.2f, ccpAdd(ccp(0.0f, 120.0f), pos));
	//CCFadeOut *outAction = CCFadeOut::create(1.3);
	//CCScaleTo *scale1 = CCScaleTo::create(0.1f, 1.5f, 1.5f); //add by vvv 2015.01.22  闪避字体缩小 与暴击同大
	//CCSpawn *spawn1 = CCSpawn::createWithTwoActions(moveAction, outAction);
	//CCSpawn *spawn2 = CCSpawn::createWithTwoActions(spawn1, scale1);
	//CCSpawn *spawn = CCSpawn::createWithTwoActions(spawn1, spawn2);
	//CCSequence *action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	//label->runAction(action);
	//label->setVisible(true);
	//label->setOpacity(255);



	CCLabelBMFont *label = MapManager::getInstance()->getLabelFromCache();
	if(label == NULL)
		return;
	//if (isSelf)
	//{
	//	label->setFntFile("Art/Scene/fontNum5.fnt");
	//}
	//else if (!isSelf)
	//{
	//	label->setFntFile("Art/Scene/fontNum6.fnt");
	//}
	CCPoint pt;
	if (srcPos.x - pos.x > 0.0)
	{
		pt = ccpAdd(ccp(-_hpChangeAttData[HCT_Miss].EndPosX, _hpChangeAttData[HCT_Miss].EndPosY), pos);
	}
	else if (srcPos.x - pos.x <= 0.0)
	{
		pt = ccpAdd(ccp(_hpChangeAttData[HCT_Miss].EndPosX, _hpChangeAttData[HCT_Miss].EndPosY), pos);
	}
	label->setZOrder(MZ_ROLE_HP_EFFECT);
	label->setString(STRING_TABLE["ERA_Dodge"]);//闪避
	label->setPosition(ccpAdd(ccp(_hpChangeAttData[HCT_Miss].StartPosX, _hpChangeAttData[HCT_Miss].StartPosY), pos));
	label->setAnchorPoint(ccp(0.5f, 0.5f));
	label->setAlignment(kCCTextAlignmentCenter);
	//label->setColor(ccc3(0xff,0xff,0xff));
	label->setColor(ccc3(10, 240, 10));
	CCMoveTo *moveAction = CCMoveTo::create(_hpChangeAttData[HCT_Miss].ThenMoveTime, pt);
	CCFadeOut *outAction = CCFadeOut::create(_hpChangeAttData[HCT_Miss].DisappearTime);
	CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
	CCSequence* action;
	if (_hpChangeAttData[HCT_Miss].InitMidTime != 0 && _hpChangeAttData[HCT_Miss].MidEndTime != 0)
	{
		CCScaleTo *scale1 = CCScaleTo::create(_hpChangeAttData[HCT_Miss].InitMidTime,_hpChangeAttData[HCT_Miss].MidZoom);
		CCScaleTo *scale2 = CCScaleTo::create(_hpChangeAttData[HCT_Miss].MidEndTime,_hpChangeAttData[HCT_Miss].EndZoom);
		CCSequence* seq = CCSequence::create(scale1,scale2,spawn,NULL);
		action = CCSequence::createWithTwoActions(seq, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	}
	else
	{
		action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	}
	label->runAction(action);
	label->setVisible(true);
	label->setOpacity(255);
}

void World::hpChangeEffectCallback( CCNode *node )
{
	CCLabelBMFont *label = dynamic_cast<CCLabelBMFont*>(node);
	CC_ASSERT(label != NULL);
	label->setVisible(false);
	label->stopAllActions();
	MapManager::getInstance()->pushBackToLabelCache(label);
}

void World::monsterDeadCallback( CCNode *node )
{
	CCLabelBMFont *label = dynamic_cast<CCLabelBMFont*>(node);
	CC_ASSERT(label != NULL);
	label->setVisible(false);
	label->stopAllActions();
	MapManager::getInstance()->pushBackToLabelCache(label);
}

unsigned int World::onSkill( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_skill"))
	{
		NET_SIS_skill *msg = (NET_SIS_skill*)cmd;
		Role *role = RoleManager::getInstance()->findRole(msg->dwSrcRoleID);
		if((10107 == msg->dwSkillID /100))
		{
			switch(msg->dw_error_code)
			{
			case 0:

				break;
			case 29: //冲锋等级不够
				ToolTip::getInstance()->push(STRING_TABLE["skill_limit_by_target_lv"]);
				break;
			}
		}

		if (msg->dw_error_code == 13)
		{
			ToolTip::getInstance()->push(GET_STR(2012));//魔力不足，无法释放技能
		}
		else if (E_UseSkill_Safe_Area_Not_Attack == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(2426));
		}
		else if (E_UseSkill_Team_Not_Attack == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(9335));
		}
		else if (E_UseSkill_Not_Find_Target == msg->dw_error_code)
		{
			//目标不存在表示出现残影，直接从地图移除
			removeNotFindRole(msg->dwTarRoleID);
		}

		UINT lpID = RoleManager::getInstance()->getLocalPlayer()->getId();
		if(role != NULL)
		{

			if(msg->dwSrcRoleID == lpID)
			{
				SkillData *skillData = SkillManager::getInstance()->getSkillData(msg->dwSkillID);
				if(skillData != NULL)
				{
					GET_UI(ShortCutUi, WCT_ShorCutUi)->runSKillCd(skillData->proto->id, (float)skillData->proto->max_cd);
				}

				Role *targetRole = RoleManager::getInstance()->findRole(msg->dwTarRoleID);
				if (targetRole && IS_PLAYER(targetRole->getId()) && msg->dw_error_code == E_Success)
					MessageDispatcher::Instance()->DispatchMsg(-1.0f, NULL, targetRole, M_ATTRACKED, NULL);
			}
			else
			{
				RoleSkillStateData skillStateData;
				skillStateData.skillId = msg->dwSkillID;
				Role *targetRole = RoleManager::getInstance()->findRole(msg->dwTarRoleID);
				if(targetRole != NULL)
				{
					skillStateData.targetId = msg->dwTarRoleID;
					role->setSrcRoleId(msg->dwTarRoleID);
					Role *srcRole = RoleManager::getInstance()->findRole(msg->dwSrcRoleID);
					if(srcRole != NULL)
					{
						srcRole->setCurrentTargetPos(targetRole->getPosition());
						if (IS_PLAYER(srcRole->getId()) && lpID == msg->dwTarRoleID && msg->dw_error_code == E_Success)
						{
							MessageDispatcher::Instance()->DispatchMsg(-1.0f, NULL, targetRole, M_ATTRACKED, NULL);
							//本地玩家受到攻击播放动画特效
							if (targetRole->GetRoleData(RA_HP) <= targetRole->GetRoleData(RA_MaxHP) * 0.3)
							{
								World::getInstance()->runUnderAttackEndEffect();
							}
							else
							{
								World::getInstance()->runUnderAttackBeginEffect();
							}


							/*
							BePKRemindEffect* uiEffect = World::getInstance()->getBePKRemindEffectUi();
							if (uiEffect && uiEffect->isVisible() == false && targetRole->GetRoleData(RA_HP) <= targetRole->GetRoleData(RA_MaxHP) * 0.5)
							{
							CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::doscheduleEvent),this);
							uiEffect->setVisible(true);
							CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::doscheduleEvent),this,5.1f,false);
							}*/
						}
					}
				}

				MessageDispatcher::Instance()->DispatchMsg(-1.0f, NULL, role, M_ATTRACK, (void*)&skillStateData);
			}
		}
	}
	return 0;
}

void World::onGetName(unsigned int roleid , const std::string& name)
{
	LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (localPlayer == NULL)
		return;
	if(roleid == localPlayer->getId())
	{
		//add by XSea 2014.11.21
		bool isShowRoleName = RoleManager::getInstance()->getIsShowSelfRoleName();
		localPlayer->setName(name.c_str(),isShowRoleName);//是否显示本地玩家名字
		_roleHeadUi->setRoleName(name.c_str());
#ifdef _USE_SDK
		extern bool g_sendgameinfo;
		if (g_sendgameinfo==false)
		{

			CCLog("--------- World::onGetName 1");

			g_sendgameinfo = true;
			extern int g_zoneid;
			extern std::string g_zonename;
			extern std::string g_zonenum;
			extern std::string g_areaName;
			LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
			WzolJni::getInstance()->loginGameInfo(3,player->getId(), name.c_str(), player->getLevel(), g_zoneid, g_zonename.c_str(), g_zonenum.c_str(), _accountId,g_areaName.c_str());
			CCLog("----------g_zonename.c_str() %s",g_zonename.c_str());
			//_accountId = 0;

			CCLog("--------- World::onGetName 2");
		}
#endif
	}
	else
	{
		Role *role = RoleManager::getInstance()->findRole(roleid, false);
		if(role != NULL)
		{
			role->setName(name.c_str());
			if(role->getId() == RoleManager::getInstance()->get_select_role_id())
			{
				if(_selectRoleHeadUi->isVisible())
				{
					_selectRoleHeadUi->setRoleName(name.c_str());
				}
			}
		}
		//死亡获取杀人者名称 gx add
		if (_bDeadName && (roleid == _killRoleID))
		{
			int sex = localPlayer->getAttribute(RA_SEX);
			if(sex == 0)
			{//女
				AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
			}
			else
			{//男
				AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
			}

			if(MapManager::getInstance()->getCurMapId()==FM_BATTLE_MAP)//打开封魔战斗中死亡界面
			{
				if(FMBattleMgr::getInstance()->getLifeNum()>0)
				{
					OPEN_UI(WCT_DeathUi);
					DeathUi* pUI =  GET_UI(DeathUi, WCT_DeathUi);
					pUI->updateData(roleid);
				}
				_bDeadName = false;
				_killRoleID = -1;
			}
			else if(MapManager::getInstance()->getCurMapId() == BF_BATTLE_MAP)//打开封魔战斗中死亡界面
			{
				/*				BloodFightMgr::getInstance()->try_open_battle_result_layer();*/
				_bDeadName = false;
				_killRoleID = -1;
			}
			else
			{
				OPEN_UI(WCT_PvpDeathUi);
				PvpDeathUi* pUI =  GET_UI(PvpDeathUi, WCT_PvpDeathUi);
				if (pUI)
				{
					//临时的一个变量，用来表识是沙巴克攻方还是守方
					int sbkGuidType = 0; //0: 攻方 1: 守方 2： 非沙巴克不显示原地 3： 非沙巴克显示原地
					int dwTime = 0;
					//如果当前地图是沙巴克地图
					unsigned int mapId = MapManager::getInstance()->getCurMapId();
					if (mapId == SBK_MAP_CRC_ID/* || mapId == SBK_CASTLE_MAP_CRC_ID*/)
					{
						const guildSBKAttackData* SBKowner = GuildMgr::getInstance()->getSBKOwnerInfo();
						if (SBKowner->dwData[0] == localPlayer->getGuildID())
						{
							sbkGuidType = 1; //守方
							dwTime = 2000; //随便设置一个值，希望沙巴克成员第一次被杀死之后需要三秒复活
						}								
					}
					else
					{
						sbkGuidType = 3;
					}					
					pUI->updateData(roleid,sbkGuidType,dwTime,-1);
					_bDeadName = false;
					_killRoleID = -1;
				}
			}

			/*std::string str = replaceStr(GET_STR(2128),"**",name);
			MessageBoxUi *dieUi = MessageBoxUi::createWithTwoBtn("", str.c_str(), "\xE5\x8E\x9F\xE5\x9C\xB0", "\xE5\x9B\x9E\xE5\x9F\x8E");
			_scene->addChild(dieUi, WZ_MESSAGEBOX);
			dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
			dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);*/
		}
	}
}

NET_SIS_role_hp_change* World::getHPMsgFromCache()
{
	if (_curHPMsg>=100)
		_curHPMsg = 0;

	return &(_aHPMsg[_curHPMsg++]);
}

unsigned int World::onHPChange( s_net_cmd* cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_role_hp_change"))
	{
		NET_SIS_role_hp_change* msg = (NET_SIS_role_hp_change*)cmd;
		Role *destRole = RoleManager::getInstance()->findRole(msg->dw_role_id);//受击目标
		Role *srcRole = RoleManager::getInstance()->findRole(msg->dwSrcRoleID);//发起者
		LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();

		/*
		NET_SIS_role_hp_change* pmsg = getHPMsgFromCache();
		*pmsg = *msg;

		float fDelayTime = 0.2f;
		if (lp->getRoleType()==RT_WMAGE || lp->getRoleType()==RT_MMAGE)
		{
		fDelayTime = 0.5f;
		}

		if (destRole && destRole->getCreatureType()!=CT_Proxy && ERHPCC_SkillDamage==pmsg->eCause)
		{
		if(msg->dwSrcRoleID == lp->getId() && destRole->getId() != lp->getId())
		{//自己攻击其他角色，显示其他角色的血条
		destRole->showRoleHeadHpUi(true);
		}

		if(msg->dw_role_id == lp->getId() && msg->dwSrcRoleID != lp->getId())
		{//受到其他玩家攻击，显示其他玩家和自己的血条
		CC_ASSERT(destRole->getId() == lp->getId());
		lp->showRoleHeadHpUi(true);
		if(srcRole != NULL)
		srcRole->showRoleHeadHpUi(true);
		}
		CCCallFunc *fn1 = CCCallFuncND::create(	destRole->getRoleNode(),callfuncND_selector(World::onDelayHPMsg),(void*)pmsg);
		CCDelayTime* act = CCDelayTime::create(fDelayTime); 
		CCSequence *sequence = CCSequence::create(act,fn1,NULL);
		destRole->getRoleNode()->runAction(sequence);
		return 0;
		}*/

		if(destRole != NULL && srcRole != NULL)
		{			
			if(!msg->bMiss)
			{
				Role* _currentRole = srcRole;
				if (msg->nHPChange < 0)
				{
					_currentRole = destRole;

					//...-----------播放受击音效------
					//if(destRole)
					//{
					//	destRole->playHitSound();
					//}
					//...------------end--------------
				}
				if (msg->dwMisc == 1030602) //嗜血术技能飘字
				{
					if(msg->bCrit)
						hpChangeEffect(msg->nHPChange, HCT_CRIT, _currentRole->getPosition(), _currentRole->getZOrder(), true);
					else
						hpChangeEffect(msg->nHPChange, msg->nHPChange < 0 ? HCT_REDUCE : HCT_Add, _currentRole->getPosition(), _currentRole->getZOrder(), true);
				}
				else
				{
					if(msg->dw_role_id == lp->getId())
					{
						if(msg->bCrit)
							hpChangeEffect(msg->nHPChange, HCT_CRIT, destRole->getPosition(), destRole->getZOrder(), true);
						else
							hpChangeEffect(msg->nHPChange, msg->nHPChange < 0 ? HCT_REDUCE : HCT_Add, destRole->getPosition(), destRole->getZOrder(), true);
					}
					else if(msg->dwSrcRoleID == lp->getId() || 
						(srcRole != NULL && srcRole->getOwnerId() == lp->getId()))
					{
						if(msg->bCrit)
							hpChangeEffect(msg->nHPChange, HCT_OtherCrit, destRole->getPosition(), destRole->getZOrder());
						else
							hpChangeEffect(msg->nHPChange, HCT_OtherNormal, destRole->getPosition(), destRole->getZOrder());
					}
					else if(msg->dwSrcRoleID == SkillManager::getInstance()->getKulouID() 
						|| msg->dwSrcRoleID == SkillManager::getInstance()->getShengshouID())
					{					
						hpChangeEffect(msg->nHPChange, msg->nHPChange < 0 ? HCT_REDUCE : HCT_Add, _currentRole->getPosition(), _currentRole->getZOrder(), true);
					}
					else if(msg->dw_role_id == SkillManager::getInstance()->getKulouID() 
						|| msg->dw_role_id == SkillManager::getInstance()->getShengshouID())
					{					
						hpChangeEffect(msg->nHPChange, msg->nHPChange < 0 ? HCT_REDUCE : HCT_Add, _currentRole->getPosition(), _currentRole->getZOrder(), true);
					}
					else
					{
						if(msg->bCrit)
							hpChangeEffect(msg->nHPChange, HCT_CRIT, _currentRole->getPosition(), _currentRole->getZOrder(), true);
						else
							hpChangeEffect(msg->nHPChange, msg->nHPChange < 0 ? HCT_REDUCE : HCT_Add, _currentRole->getPosition(), _currentRole->getZOrder(), true);
					}
				}

			}
			else
			{//闪避
				if(msg->dw_role_id == lp->getId())
				{
					missEffect(destRole->getPosition(),srcRole->getPosition(), destRole->getZOrder(),true);
				}
				else if(msg->dwSrcRoleID == lp->getId() || 
					(srcRole != NULL && srcRole->getOwnerId() == lp->getId()))
				{
					missEffect(destRole->getPosition(),srcRole->getPosition(), destRole->getZOrder(),false);
				}
			}

			if(msg->dwSrcRoleID == lp->getId() && destRole->getId() != lp->getId())
			{//自己攻击其他角色，显示其他角色的血条
				destRole->showRoleHeadHpUi(true);
				Role* pKulou = RoleManager::getInstance()->findRole(SkillManager::getInstance()->getKulouID());
				if(pKulou && pKulou->getOwnerId() == msg->dwSrcRoleID)
					pKulou->showRoleHeadHpUi(true);
				Role* pShengshou = RoleManager::getInstance()->findRole(SkillManager::getInstance()->getShengshouID());
				if (pShengshou && pShengshou->getOwnerId() == msg->dwSrcRoleID)
				{
					pShengshou->showRoleHeadHpUi(true);
				}
			}

			if(msg->dw_role_id == lp->getId() && msg->dwSrcRoleID != lp->getId())
			{//受到其他玩家攻击，显示其他玩家和自己的血条
				CC_ASSERT(destRole->getId() == lp->getId());
				lp->showRoleHeadHpUi(true);
				if(srcRole != NULL)
					srcRole->showRoleHeadHpUi(true);
			}
			if(destRole->getTypeID()==2800001 || destRole->getTypeID()==2800002)
			{
				destRole->showRoleHeadHpUi(true);
			}
		}

	}
	return 0;
}
unsigned int World::onRoleDiePenalty( s_net_cmd* cmd )
{
	NET_SIS_role_die_Penalty* roleDieData = (NET_SIS_role_die_Penalty*)cmd;
	DWORD RoleId = roleDieData->roleId;
	if (RoleId == RoleManager::getInstance()->getLocalPlayer()->getId())
	{
		int typeId = roleDieData->m_typeId;
		c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM PackageData WHERE TypeId = ?1");
		cmd->set_integer32(1 , typeId);
		c_sql_table* table = c_db_manager::getSingleton()->create_table();
		std::string dataName;
		while(table->retrieve_row())
		{
			unsigned int idx = table->get_index("Name");
			dataName = table->get_text(idx);
		}
		c_db_manager::getSingleton()->destroy_table(table);
		c_db_manager::getSingleton()->end_operation(cmd);

		//std::string nameStr = replaceStr(STRING_TABLE["you_lost_item"],"**",dataName);
		PenaltyManager::getInstance()->setDataInfo(dataName);
		std::ostringstream oss;
		oss<<STRING_TABLE["you_lost_item"]<<dataName;
		//ToolTip::getInstance()->push(oss.str());
		//聊天系统频道中也给提示
		s_receive_chat_info info;
		info.send_channel = ESCC_System;
		info.chat_text = oss.str();
		ChatMgr::getInstance()->ShowInfoByChatChannel(info);

		ToolTip::getInstance()->push(oss.str());

	}
	return 0;
}
unsigned int World::onRoleDead( s_net_cmd* cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_role_dead"))
	{
		NET_SIS_role_dead* roleDead = (NET_SIS_role_dead*)cmd;

		//testOf << roleDead->dw_role_id << "	role dead" << std::endl;
		//testOf.flush();

		LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();		
		RoleManager::getInstance()->onSetRoleIsCanLive(roleDead->nCanYuandiFuHuo);
		if(roleDead->dw_role_id == localPlayer->getId())
		{
			if(localPlayer->getRoleNode()->getParent() != NULL)
				localPlayer->getRoleNode()->getParent()->reorderChild(localPlayer->getRoleNode(), MZ_ROLE_DEAD);

			//MapManager::getInstance()->getMap()->setGray();

			MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, localPlayer, M_DEAD, NULL);
			localPlayer->stopAllRingEffect(); //死亡结束所有特戒特效
			localPlayer->setColorPoisoning(255,255,255);//解毒效果
			localPlayer->delColorHoc();//解麻痹效果
			//localPlayer->stateMachine()->ChangeState(LocalPlayerStateDead::getInstance());
			//gx add 若是正常死亡
			if (roleDead->dwSrcRoleID != -1)
			{
				RoleHeadUi *ui = World::getInstance()->getRoleHeadUi();
				if (ui)
				{
					ui->setKilledTypeId(roleDead->bHitFly);
				}
				//若是玩家杀死
				if (-1 == roleDead->bHitFly)
				{
					NameMgr2::getInstance()->SetLeaderName(roleDead->dwSrcRoleID,roleDead->sz_srcRoleName);
					std::string roleName("");
					//首先获得玩家的名称
					if (NameMgr2::getInstance()->queryName(roleDead->dwSrcRoleID,roleName))
					{//人物杀死

						unsigned int curMapId = MapManager::getInstance()->getCurMapId();
						if (MapManager::getInstance()->getCurSceneType(curMapId) != 12)
						{
							int sex = localPlayer->getAttribute(RA_SEX);
							if(sex == 0)
							{//女
								AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
							}
							else
							{//男
								AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
							}
							if(MapManager::getInstance()->getCurMapId() != BF_BATTLE_MAP)
							{
								CLOSE_ALL_UI();
							}

							GongfaTip::getInstace()->close();
							ItemTip::getInstace()->close();
							ImmediateEquipUi::getInstance()->close();
							NewPlayerGuider::getInstance()->SkipNewGuide();
							EquipTipUiLayer* pNode = (EquipTipUiLayer*)getScene()->getChildByTag(WCT_EQUIP_TIPS_UI_TAG);
							if(pNode)
								pNode->close();

							if(MapManager::getInstance()->getCurMapId()==FM_BATTLE_MAP)//打开封魔战斗中死亡界面
							{
								if(FMBattleMgr::getInstance()->getLifeNum()>0)
								{
									OPEN_UI(WCT_DeathUi);
									DeathUi* pUI =  GET_UI(DeathUi, WCT_DeathUi);
									pUI->updateData(roleDead->dwSrcRoleID);
								}
							}
							else if(MapManager::getInstance()->getCurMapId() == BF_BATTLE_MAP)//打开封魔战斗中死亡界面
							{
								/*				BloodFightMgr::getInstance()->try_open_battle_result_layer();*/
							}
							else
							{
								OPEN_UI(WCT_PvpDeathUi);
								PvpDeathUi* pUI =  GET_UI(PvpDeathUi, WCT_PvpDeathUi);
								if (pUI)
								{
									std::list<penaltyInfo> _info=PenaltyManager::getInstance()->getPanaltyInfo();
									if (_info.size()>0)
									{
										OPEN_UI(WCT_PenaltyUi);
									}
									//临时的一个变量，用来表识是沙巴克攻方还是守方
									int sbkGuidType = 0; //0: 攻方 1: 守方 2： 不显示原地 3： 显示原地
									//如果当前地图是沙巴克地图
									unsigned int mapId = MapManager::getInstance()->getCurMapId();
									if (mapId == SBK_MAP_CRC_ID/* || mapId == SBK_CASTLE_MAP_CRC_ID*/)
									{
										if (roleDead->nCanYuandiFuHuo)
										{
											sbkGuidType = 3;
										}
										else
										{
											//const guildSBKAttackData* SBKowner = GuildMgr::getInstance()->getSBKOwnerInfo();
											//Role* _role = RoleManager::getInstance()->findRole(roleDead->dw_role_id);
											//if (_role!= NULL)
											//{
											//	if (SBKowner->dwData[0] == _role->getGuildID())
											//	{
											//		sbkGuidType = 1; //守方
											//		//屏蔽复活时间
											//		//if (roleDead->dwDeadTime == 0)
											//		//{
											//		//	roleDead->dwDeadTime = 2000; //随便设置一个值，希望沙巴克成员第一次被杀死之后需要三秒复活
											//		//}
											//	}
											//}
										}
									}
									else
									{
										if (roleDead->nCanYuandiFuHuo)
										{
											sbkGuidType = 3;
										}
										else
										{
											sbkGuidType = 2;
										}
									}					
									//int dwTime = roleDead->dwDeadTime;
									pUI->updateData(roleDead->dwSrcRoleID,sbkGuidType,NULL,roleDead->dwMisc, roleDead->nLevel, roleDead->nProf, roleDead->nRating);
								}
							}

							/*std::string str = replaceStr(GET_STR(2128),"**",roleName);
							MessageBoxUi *dieUi = MessageBoxUi::createWithTwoBtn("", str.c_str(), "\xE5\x8E\x9F\xE5\x9C\xB0", "\xE5\x9B\x9E\xE5\x9F\x8E");
							dieUi->setTag(WCT_DIEUI);
							_scene->addChild(dieUi, WZ_MESSAGEBOX);
							dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
							dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);*/
						}
					}
					else//若暂不存在
					{
						_bDeadName = true;
						_killRoleID = roleDead->dwSrcRoleID;
					}
				}
				//若是怪物杀死
				else
				{
					std::string monsterName("");
					getCreatureNameByID(roleDead->bHitFly,monsterName);
					if (!monsterName.empty())
					{//怪物杀死

						unsigned int curMapId = MapManager::getInstance()->getCurMapId();
						if (MapManager::getInstance()->getCurSceneType(curMapId) != 12)
						{
							int sex = localPlayer->getAttribute(RA_SEX);
							if(sex == 0)
							{//女
								AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
							}
							else
							{//男
								AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
							}
							std::string str = replaceStr(GET_STR(2128),"**",monsterName);
							MessageBoxUi *dieUi = MessageBoxUi::createWithTwoBtn("", str.c_str(), STRING_TABLE["original_position"], STRING_TABLE["back_to_city"]);
							dieUi->setTag(WCT_DIEUI);
							_scene->addChild(dieUi, WZ_MESSAGEBOX);
							dieUi->updateYandiFuHuoBtnPosition(100);
							dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
							dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);
							std::list<penaltyInfo> _info=PenaltyManager::getInstance()->getPanaltyInfo();
							if (_info.size()>0)
							{
								OPEN_UI(WCT_PenaltyUi);
							}
						}
					}
					else//防止异常
					{
						unsigned int curMapId = MapManager::getInstance()->getCurMapId();
						if (MapManager::getInstance()->getCurSceneType(curMapId) != 12)
						{
							int sex = localPlayer->getAttribute(RA_SEX);
							if(sex == 0)
							{//女
								AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
							}
							else
							{//男
								AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
							}
							MessageBoxUi *dieUi = MessageBoxUi::createWithTwoBtn("", GET_STR(9373).c_str(), STRING_TABLE["original_position"], STRING_TABLE["back_to_city"]);
							dieUi->setTag(WCT_DIEUI);
							_scene->addChild(dieUi, WZ_MESSAGEBOX);
							dieUi->updateYandiFuHuoBtnPosition(100);
							dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
							dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);
							std::list<penaltyInfo> _info=PenaltyManager::getInstance()->getPanaltyInfo();
							if (_info.size()>0)
							{
								OPEN_UI(WCT_PenaltyUi);
							}
						}
					}
				}
			}
			else//非正常死亡
			{
				unsigned int curMapId = MapManager::getInstance()->getCurMapId();
				if (MapManager::getInstance()->getCurSceneType(curMapId) != 12)
				{
					int sex = localPlayer->getAttribute(RA_SEX);
					if(sex == 0)
					{//女
						AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
					}
					else
					{//男
						AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
					}
					MessageBoxUi *dieUi = MessageBoxUi::createWithTwoBtn("", GET_STR(9373).c_str(), STRING_TABLE["original_position"], STRING_TABLE["back_to_city"]);
					dieUi->setTag(WCT_DIEUI);
					_scene->addChild(dieUi, WZ_MESSAGEBOX);
					dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
					dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);
					std::list<penaltyInfo> _info=PenaltyManager::getInstance()->getPanaltyInfo();
					if (_info.size()>0)
					{
						OPEN_UI(WCT_PenaltyUi);
					}
				}
			}
			//end
			localPlayer->setAttribute(RA_DEAD, 1);
			localPlayer->setExitAttackState();
			SkillData *skillData = SkillManager::getInstance()->getSkillData(SKILLMOFADUNTYPEID,true);
			if(localPlayer->getCreatureType() != CT_Proxy && (localPlayer->getRoleType() == RT_WMAGE || localPlayer->getRoleType() == RT_MMAGE) && skillData != NULL)
			{//如果是法师，停止释放魔法盾				
				SkillAnimManager::getInstance()->stopBuffer(roleDead->dw_role_id,skillData->proto->id);
			}
		}
		else
		{
			Role *role = RoleManager::getInstance()->findRole(roleDead->dw_role_id, false);
			if(role != NULL)
			{
				unsigned int typeId = role->getTypeID();
				if(role->getRoleNode()->getParent() != NULL)
					role->getRoleNode()->getParent()->reorderChild(role->getRoleNode(), MZ_ROLE_DEAD);

				role->stopAllRingEffect(); //死亡结束所有特戒特效
				role->setColorPoisoning(255,255,255);//解毒效果
				role->delColorHoc();//解麻痹效果
				if(role->getCreatureType() == CT_PLAYER)
				{
					if(role->getId() == RoleManager::getInstance()->get_select_role_id())
					{
						RoleManager::getInstance()->set_select_role_id(INVALID_ID);
						RoleManager::getInstance()->SetTargetRole(NULL);
					}
					MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, role, M_DEAD, NULL);
					//role->stateMachine()->ChangeState(RoleStateDead::getInstance());
					role->setAttribute(RA_DEAD, 1);
					//死亡后不设置阻挡
					Phyx::getInstance()->removePhyxObject(role->getId());
				}
				else
				{
					if (!IS_PLAYER(role->getId()))
					{
						if (2910259 == typeId || 2910260 == typeId || 2910261 == typeId)
						{
							//role->playStoneEffect();
						}
						role->setSrcRoleId(roleDead->dwSrcRoleID);
						role->runDeadAni();
					}
					else
					{
						role->setAttribute(RA_DEAD, 1);
					}
				}

				// 				if(2000005 == typeId){
				// 					//龙婷神兽死亡的倒计时
				// 					fubenLeaveTime = 15;
				// 					CCString *leaveLabel = CCString::createWithFormat("%s%d%s","\xE5\x89\xAF\xE6\x9C\xAC\x42\x4F\x53\x53\xE5\xB7\xB2\xE8\xA2\xAB\xE5\x87\xBB\xE6\x9D\x80\xEF\xBC\x8C",
				// 						fubenLeaveTime,"\xE7\xA7\x92\xE5\x90\x8E\xE5\xB0\x86\xE8\x87\xAA\xE5\x8A\xA8\xE4\xBC\xA0\xE5\x87\xBA\xE5\x89\xAF\xE6\x9C\xAC");
				// 					_fubenLeaveLabel->setString(leaveLabel->getCString());
				// 				}
				Monster* monster = dynamic_cast<Monster*>(role);
				if (monster && monster->isBoss())
				{
					WorldPacket C2G_Msg(NET_C2G_REQUEST_BOSS_LIST);
					TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_NORMAL, false);
				}

				//清理被改的龙卫怪的名字缓存
				if(monster)
				{
					InstanceMgr::getInstance()->clearDeadMonsterName(monster);
				}


				SkillData *skillData = SkillManager::getInstance()->getSkillData(SKILLMOFADUNTYPEID,true);
				if(role->getCreatureType() == CT_PLAYER && (role->getRoleType() == RT_WMAGE || role->getRoleType() == RT_MMAGE) && skillData != NULL)
				{//如果是法师，停止释放魔法盾				
					SkillAnimManager::getInstance()->stopBuffer(roleDead->dw_role_id,skillData->proto->id);
				}

				// 这段应该放在最后，以免return -1导致后面代码不执行
				if (roleDead->dwSrcRoleID == localPlayer->getId())
				{
					if (roleDead->nSrcRoleIDKillNumInSBK < 1 ||roleDead->nSrcRoleIDKillNumInSBK > 1000 )
					{
						return -1;
					}
					World::getInstance()->sbkGCZShowLianshaNode(roleDead->nSrcRoleIDKillNumInSBK);
				}
			}
		}
	}
	return 0;
}

void World::slotReviveOk()
{
	//ToolTip::getInstance()->push("\xE5\x8E\x9F\xE5\x9C\xB0\xE5\xA4\x8D\xE6\xB4\xBB\xE5\xB0\x86\xE4\xBC\x9A\xE8\x8A\xB1\xE8\xB4\xB9\xE6\x82\xA8\x31\x30\xE5\x85\x83\xE5\xAE\x9D");
	NET_SIC_role_revive cmd;
	cmd.eType = ERRT_Perfection;
	TCP_CLIENT->send_net_cmd(&cmd, NP_CRITICAL, false);
	CLOSE_UI(WCT_PenaltyUi);
}

void World::slotReviveCancel()
{
	NET_SIC_role_revive cmd;
	cmd.eType = ERRT_ReturnCity;
	TCP_CLIENT->send_net_cmd(&cmd, NP_CRITICAL, false);
	CLOSE_UI(WCT_PenaltyUi);
}

unsigned int World::onRevive( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_role_revive"))
	{
		NET_SIS_role_revive *roleRevive = (NET_SIS_role_revive*)cmd;
		LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
		if(roleRevive->dw_error_code == E_Success)
		{
			if(roleRevive->dw_role_id == localPlayer->getId())
			{	
				MapManager::getInstance()->getMap()->delGray();
				MessageBoxUi::clearSelf();

				localPlayer->setAttribute(RA_DEAD, 0);
				MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, localPlayer, M_LIVE, NULL);
				PackageManager::getInstance()->set_is_open_recast(e_revive);
				//localPlayer->stateMachine()->ChangeState(LocalPlayerStateStand::getInstance());
				if (needShowFight())
				{
					RoleHeadUi *ui = World::getInstance()->getRoleHeadUi();
					if (ui && ui->getKilledTypeId() != -1)
					{
						ui->setShowFightPromote(true);
						ui->setKilledTypeId(-1);
					}
				}
			}
			else
			{
				Role* ro = RoleManager::getInstance()->findRole(roleRevive->dw_role_id);
				if(ro)
				{
					ro->setAttribute(RA_DEAD, 0);
					MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, ro, M_LIVE, NULL);
					//ro->stateMachine()->ChangeState(RoleStateStand::getInstance());
					Phyx::getInstance()->addPhyxObject(ro->getId(), ro->getPosition().x, ro->getPosition().y);
				}
			}
		}
		else
		{
			if(roleRevive->dw_role_id == localPlayer->getId())
			{
				//std::string str("");
				////先给错误提示
				//if (59 == roleRevive->dw_error_code)//沙巴克
				//{
				//	str = GET_STR(2129);
				//}
				//else if(56 == roleRevive->dw_error_code)//元宝不足
				//{
				//	str = GET_STR(2130);
				//}
				//else if(51 == roleRevive->dw_error_code)//人物已经复活
				//{
				//	str = GET_STR(2130);
				//}
				//else 
				//{
				//	str = GET_STR(2131);
				//}
				//unsigned int curMapId = MapManager::getInstance()->getCurMapId();
				//if (MapManager::getInstance()->getCurSceneType(curMapId) != 12)
				//{
				//	std::ostringstream ss;
				//	ss<<str<<","<<GET_STR(9373).c_str();
				//	LocalPlayer* plocDie = RoleManager::getInstance()->getLocalPlayer();
				//	int sex = plocDie->getAttribute(RA_SEX);
				//	if(sex == 0)
				//	{//女
				//		AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
				//	}
				//	else
				//	{//男
				//		AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
				//	}
				//	MessageBoxUi *dieUi = MessageBoxUi::createWithTwoBtn("",ss.str().c_str() , "\xE5\x8E\x9F\xE5\x9C\xB0", "\xE5\x9B\x9E\xE5\x9F\x8E");
				//	dieUi->setTag(WCT_DIEUI);
				//	_scene->addChild(dieUi, WZ_MESSAGEBOX);
				//	dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
				//	dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);
				//}
				if (51 == roleRevive->dw_error_code)//人物已经复活
				{
					MapManager::getInstance()->getMap()->delGray();
					unsigned int curMapId = MapManager::getInstance()->getCurMapId();
					if (MapManager::getInstance()->getCurSceneType(curMapId) != 12)
					{
						LocalPlayer* plocDie = RoleManager::getInstance()->getLocalPlayer();
						int sex = plocDie->getAttribute(RA_SEX);
						if(sex == 0)
						{//女
							AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
						}
						else
						{//男
							AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
						}
					}
				}
				else
				{
					std::string str("");
					//先给错误提示
					if (59 == roleRevive->dw_error_code)//沙巴克
					{
						str = GET_STR(2129);
					}
					else if(56 == roleRevive->dw_error_code)//元宝不足
					{
						str = GET_STR(2130);
					}
					else if(51 != roleRevive->dw_error_code)
					{
						str = GET_STR(2131);
					}
					else if(E_Revive_sbk_begin_not_perfect == roleRevive->dw_error_code)
					{
						str = GET_STR(9238);
					}
					else if(E_Revive_not_sbk_map != roleRevive->dw_error_code)
					{
						str = GET_STR(9239);
					}
					else if(E_Revive_not_sbk_begin == roleRevive->dw_error_code)
					{
						str = GET_STR(9240);
					}
					else if(E_Revive_not_sbk_guild != roleRevive->dw_error_code)
					{
						str = GET_STR(9241);
					}
					unsigned int curMapId = MapManager::getInstance()->getCurMapId();
					if(curMapId==FM_BATTLE_MAP)
					{
						ToolTip::getInstance()->push(STRING_TABLE["FM_BattleTip7"]);
					}
					else if (MapManager::getInstance()->getCurSceneType(curMapId) != 12)
					{
						std::ostringstream ss;
						ss<<str<<","<<GET_STR(9373).c_str();
						LocalPlayer* plocDie = RoleManager::getInstance()->getLocalPlayer();
						int sex = plocDie->getAttribute(RA_SEX);
						if(sex == 0)
						{//女
							AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_WOMANDIE);
						}
						else
						{//男
							AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MANDIE);
						}

						//复活不成功重新刷新已经存在的提示框信息--ZG
						MessageBoxUi *dieUi = MessageBoxUi::getMessageBox();
						if( dieUi )
						{
							dieUi->updateMsgInfo("",ss.str().c_str());
						}
						else
						{
							dieUi = MessageBoxUi::createWithTwoBtn("",ss.str().c_str() , STRING_TABLE["original_position"], STRING_TABLE["back_to_city"]);
							dieUi->setTag(WCT_DIEUI);
							_scene->addChild(dieUi, WZ_MESSAGEBOX);
							dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
							dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);
						}					
					}
				}
			}
		}
	}
	return 0;
}

unsigned int World::onMainAttrChange( s_net_cmd* cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_single_role_att_change"))
	{
		NET_SIS_single_role_att_change* msg = (NET_SIS_single_role_att_change*)cmd;
		LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
		switch(msg->eType)
		{
		case ERA_HP:
			localPlayer->setAttribute(RA_HP, msg->nValue);
			break;
		case ERA_MP:
			localPlayer->setAttribute(RA_MP, msg->nValue);
			break;
		case ERA_MaxHP:
			localPlayer->setAttribute(RA_MaxHP, msg->nValue);
			break;
		case ERA_MaxMP:
			localPlayer->setAttribute(RA_MaxMP, msg->nValue);
			break;
		case ERA_HitRate:
			localPlayer->setAttribute(RA_HITRATE, msg->nValue);
			break;
		case ERA_Dodge:
			localPlayer->setAttribute(RA_DODGE, msg->nValue);
			break;
		case ERA_Crit_Rate:
			localPlayer->setAttribute(RA_CRIT_RATE, msg->nValue);
			break;
		case ERA_UnCrit_Rate:
			localPlayer->setAttribute(RA_UNCRIT_RATE, msg->nValue);
			break;
		case ERA_ExAttackMin:
			localPlayer->setAttribute(RA_ExAttackMin, msg->nValue);
			break;
		case ERA_ExAttackMax:
			localPlayer->setAttribute(RA_ExAttackMax, msg->nValue);
			break;
		case ERA_InAttackMin:
			localPlayer->setAttribute(RA_InAttackMin, msg->nValue);
			break;
		case ERA_InAttackMax:
			localPlayer->setAttribute(RA_InAttackMax, msg->nValue);
			break;
		case ERA_ArmorEx:
			localPlayer->setAttribute(RA_ArmorEx, msg->nValue);
			break;
		case ERA_ArmorIn:
			localPlayer->setAttribute(RA_ArmorIn, msg->nValue);
			break;
		case ERA_ExMinDefense:
			localPlayer->setAttribute(RA_ExMinDefense, msg->nValue);
			break;
		case ERA_ExMaxDefense:
			localPlayer->setAttribute(RA_ExMaxDefense, msg->nValue);
			break;
		case ERA_InMaxDefense:
			localPlayer->setAttribute(RA_InMaxDefense, msg->nValue);
			break;
		case ERA_InMinDefense:
			localPlayer->setAttribute(RA_InMinDefense, msg->nValue);
			break;
		case ERA_Luck:
			localPlayer->setAttribute(RA_Luck, msg->nValue);
			break;
		case ERA_TalentPoint:
			{
				s_receive_chat_info info;
				info.send_channel = ESCC_System;
				int valueChange = msg->nValue - localPlayer->getAttribute(RA_Jinengdian);
				std::stringstream ss;
				if(valueChange > 0)
				{
					ss << GET_STR(9265) << valueChange ;
				}else{
					ss << GET_STR(9266) << (-valueChange);
				}
				info.chat_text = ss.str();
				ChatMgr::getInstance()->ShowInfoByChatChannel(info);
				localPlayer->setAttribute(RA_Jinengdian, msg->nValue);
				GET_UI(SkillUi, WCT_SKILLUI)->updateJinengdian();

				if (localPlayer->getAttribute(RA_ShuangXiu) != 0)
					onShowTalentPointChange(valueChange);
			}
			break;
		case ERA_Knowledge://声望变化
			{
				int addvalue = msg->nValue-localPlayer->getAttribute(RA_Knowledge);
				localPlayer->setAttribute(RA_Knowledge,msg->nValue);
				if (addvalue <= 0)
					return 0;
				//给提示 没有声望 先不给提示 //add by XSea 2015.01.08
				/*s_receive_chat_info info;
				info.send_channel = ESCC_System;
				std::stringstream ss;
				ss<<addvalue;
				std::string str = replaceStr(GET_STR(2124),"**",ss.str());
				info.chat_text = str;
				ChatMgr::getInstance()->ShowInfoByChatChannel(info);*/
			}
			break;
		case ERA_Speed_XZ://走路速度
			localPlayer->setAttribute(RA_WalkSpeed, ROLE_BASE_SPEED * msg->nValue);
			break;
		case ERA_Speed_Mount://骑乘速度
			localPlayer->setAttribute(RA_RideSpeed, ROLE_BASE_SPEED * msg->nValue);
			break;
		case ERA_TiLi: //体力值变化
			{
				localPlayer->setAttribute(RA_TiLiZhi, msg->nValue);
				//体力值变化，体力条改变
				FubenInfoUiLayer* pUI = getUiNodeByTag<FubenInfoUiLayer>(WCT_FubenInfoUI);
				if(pUI)
				{
					pUI->SetTiLiBar(msg->nValue);
				}
				break;
			}
		case ERA_GongFa://魔魂境界发生变化
			GambleMgr::getInstance()->updateGongFaRealm(msg->nValue);
			localPlayer->updateGongFaRealmEffect(msg->nValue);
			break;
		case ERA_Derate_Wood:	// 风伤害减免 modify 2016.3.28 噬魔：攻击附带消耗敌人魔法值
			localPlayer->setAttribute(RA_Derate_Wood,msg->nValue);
			break;
		case ERA_Derate_Fire:   // 火伤害减免 modify 2016.3.28 破盾：攻击穿透敌人的魔法盾，造成额外百分比伤害（不超过没有魔法盾的伤害）
			localPlayer->setAttribute(RA_Derate_Fire,msg->nValue);
			break;
		case ERA_Derate_Water:   // 雷伤害减免 modify 2016.3.28 腐蚀：攻击附带减低敌人物防和魔防百分比
			localPlayer->setAttribute(RA_Derate_Water,msg->nValue);
			break;
		case ERA_Derate_Injury:	// 内损伤害减免 modify 2016.3.28 真伤：攻击附加真实伤害
			localPlayer->setAttribute(RA_Derate_Injury,msg->nValue);
			break;
		case ERA_Derate_InAttack:	// 远程伤害减免 modify 2016.3.28 抵抗：进入抵抗状态后，减免百分比伤害
			localPlayer->setAttribute(RA_Derate_InAttack,msg->nValue);
			break;
		default:
			break;
		}

		GET_UI(RoleAttrUi, WCT_ROLEATTRUI)->updateAttr();
	}
	return 0;
}

unsigned int World::onMultiAttrChange( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_mutiple_role_att_change"))
	{
		NET_SIS_mutiple_role_att_change *msg = (NET_SIS_mutiple_role_att_change*)cmd;
		LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
		for(int i=0; i<msg->n_num; ++i)
		{
			switch(msg->value[i].eType)
			{
			case ERA_HP:
				localPlayer->setAttribute(RA_HP, msg->value[i].nValue);
				break;
			case ERA_MP:
				localPlayer->setAttribute(RA_MP, msg->value[i].nValue);
				break;
			case ERA_MaxHP:
				localPlayer->setAttribute(RA_MaxHP, msg->value[i].nValue);
				break;
			case ERA_MaxMP:
				localPlayer->setAttribute(RA_MaxMP, msg->value[i].nValue);
				break;
			case ERA_HitRate:
				localPlayer->setAttribute(RA_HITRATE, msg->value[i].nValue);
				break;
			case ERA_Dodge:
				localPlayer->setAttribute(RA_DODGE, msg->value[i].nValue);
				break;
			case ERA_Crit_Rate:
				localPlayer->setAttribute(RA_CRIT_RATE, msg->value[i].nValue);
				break;
			case ERA_UnCrit_Rate:
				localPlayer->setAttribute(RA_UNCRIT_RATE, msg->value[i].nValue);
				break;
			case ERA_ExAttackMin:
				localPlayer->setAttribute(RA_ExAttackMin, msg->value[i].nValue);
				break;
			case ERA_ExAttackMax:
				localPlayer->setAttribute(RA_ExAttackMax, msg->value[i].nValue);
				break;
			case ERA_InAttackMin:
				localPlayer->setAttribute(RA_InAttackMin, msg->value[i].nValue);
				break;
			case ERA_InAttackMax:
				localPlayer->setAttribute(RA_InAttackMax, msg->value[i].nValue);
				break;
			case ERA_ArmorEx:
				localPlayer->setAttribute(RA_ArmorEx, msg->value[i].nValue);
				break;
			case ERA_ArmorIn:
				localPlayer->setAttribute(RA_ArmorIn, msg->value[i].nValue);
				break;
			case ERA_ExMinDefense:
				localPlayer->setAttribute(RA_ExMinDefense, msg->value[i].nValue);
				break;
			case ERA_ExMaxDefense:
				localPlayer->setAttribute(RA_ExMaxDefense, msg->value[i].nValue);
				break;
			case ERA_InMaxDefense:
				localPlayer->setAttribute(RA_InMaxDefense, msg->value[i].nValue);
				break;
			case ERA_InMinDefense:
				localPlayer->setAttribute(RA_InMinDefense, msg->value[i].nValue);
				break;
			case ERA_Luck:
				localPlayer->setAttribute(RA_Luck, msg->value[i].nValue);
				break;
			case ERA_TalentPoint:
				localPlayer->setAttribute(RA_Jinengdian, msg->value[i].nValue);
				GET_UI(SkillUi, WCT_SKILLUI)->updateJinengdian();
				break;
			case ERA_Speed_XZ://走路速度
				localPlayer->setAttribute(RA_WalkSpeed, ROLE_BASE_SPEED * msg->value[i].nValue);
				break;
			case ERA_Speed_Mount://骑乘速度
				localPlayer->setAttribute(RA_RideSpeed, ROLE_BASE_SPEED * msg->value[i].nValue);
				break;
			case ERA_TiLi:	//[bing] 体力值
				localPlayer->setAttribute(RA_TiLiZhi, msg->value[i].nValue);
				break;
			case ERA_Derate_Wood:	// 风伤害减免 modify 2016.3.28 噬魔：攻击附带消耗敌人魔法值
				localPlayer->setAttribute(RA_Derate_Wood,msg->value[i].nValue);
				break;
			case ERA_Derate_Fire:   // 火伤害减免 modify 2016.3.28 破盾：攻击穿透敌人的魔法盾，造成额外百分比伤害（不超过没有魔法盾的伤害）
				localPlayer->setAttribute(RA_Derate_Fire,msg->value[i].nValue);
				break;
			case ERA_Derate_Water:   // 雷伤害减免 modify 2016.3.28 腐蚀：攻击附带减低敌人物防和魔防百分比
				localPlayer->setAttribute(RA_Derate_Water,msg->value[i].nValue);
				break;
			case ERA_Derate_Injury:	// 内损伤害减免 modify 2016.3.28 真伤：攻击附加真实伤害
				localPlayer->setAttribute(RA_Derate_Injury,msg->value[i].nValue);
				break;
			case ERA_Derate_InAttack:	// 远程伤害减免 modify 2016.3.28 抵抗：进入抵抗状态后，减免百分比伤害
				localPlayer->setAttribute(RA_Derate_InAttack,msg->value[i].nValue);
				break;
			default:
				break;
			}
		}

		GET_UI(RoleAttrUi, WCT_ROLEATTRUI)->updateAttr();
		if(_roleHeadUi != NULL)
		{
			LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
			_roleHeadUi->onHpChanged(localPlayer->getAttribute(RA_HP), localPlayer->getAttribute(RA_MaxHP));
			_roleHeadUi->onMpChanged(localPlayer->getAttribute(RA_MP), localPlayer->getAttribute(RA_MaxMP));
			_roleHeadUi->updateVIPIcon();		
		}
	}
	return 0;
}

unsigned int World::onOtherAttrChange( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_single_remote_att_change"))
	{
		NET_SIS_single_remote_att_change* msg = (NET_SIS_single_remote_att_change*)cmd;
		RoleManager* roleMgr  =RoleManager::getInstance();
		Role *role = roleMgr->findRole(msg->dw_role_id);
		if(role != NULL)
		{
			switch(msg->eType)
			{
			case ERRA_HP:
				{
					role->setAttribute(RA_HP, msg->nValue);
					if(roleMgr->get_select_role_id() == role->getId() && _selectRoleHeadUi )
					{
						_selectRoleHeadUi->onHpChanged(role->getAttribute(RA_HP), role->getAttribute(RA_MaxHP));
					}
				}
				break;
			case ERRA_MaxHP:
				{
					role->setAttribute(RA_MaxHP, msg->nValue);
					if(roleMgr->get_select_role_id() == role->getId() && _selectRoleHeadUi )
					{
						_selectRoleHeadUi->onHpChanged(role->getAttribute(RA_HP), role->getAttribute(RA_MaxHP));
					}
				}
				break;
			case ERRA_MP:
				role->setAttribute(RA_MP, msg->nValue);
				if(roleMgr->get_select_role_id() == role->getId() && _selectRoleHeadUi )
				{
					_selectRoleHeadUi->onMpChanged(role->getAttribute(RA_MP), role->getAttribute(RA_MaxMP));
				}
				break;
			case ERRA_GongFa:
				{
					Player * player=dynamic_cast<Player*>(role);
					if(player)
						player->updateGongFaRealmEffect(msg->nValue);
				}
				break;
			default:
				break;
			}
		}
		LocalPlayer *localPlayer = roleMgr->getLocalPlayer();
		if(_roleHeadUi != NULL && msg->dw_role_id==localPlayer->getId())
		{
			_roleHeadUi->onHpChanged(localPlayer->getAttribute(RA_HP), localPlayer->getAttribute(RA_MaxHP));
			_roleHeadUi->onMpChanged(localPlayer->getAttribute(RA_MP), localPlayer->getAttribute(RA_MaxMP));
			_roleHeadUi->updateVIPIcon();	
		}

	}
	return 0;
}

unsigned int World::onRoleLevelChanged( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_change_role_level"))
	{

		NET_SIS_change_role_level* msg = (NET_SIS_change_role_level*)cmd;
		Role *role = RoleManager::getInstance()->findRole(msg->dw_role_id);
		if(role != NULL && role->getCreatureType() != CT_Proxy)
		{
			LpLevelUpEvent evt;

			Player *player = dynamic_cast<Player*>(role);
			CC_ASSERT(player != NULL);

			evt.nFrom = player->getLevel();

			CCLog("!!!Level Up Effect Played!!!");
			player->runLevelUpEffect();
			player->setLevel(msg->nLevel);
			//!查看是否有可以添加的任务追踪;
			QuestMgr::getInstance()->checkValidMainQuestTrace();

			if(role->getId() == RoleManager::getInstance()->getLocalPlayer()->getId())
			{
				evt.nTo = player->getLevel();
				SEND_EVENT(&evt);
				PackageManager::getInstance()->set_is_open_recast(e_level_change);
				World::getInstance()->getMiniMapUi()->LPLvSetBtnVisible(msg->nLevel, false);
				_roleHeadUi->setLevel(role->getLevel());
				RoleManager::getInstance()->getLocalPlayer()->updateCurMaxExp();
				MasterPrenticeMgr::getInstance()->OnServer_Chushi_TuDi_Notice(msg->nLevel);

				QuestMgr::getInstance()->queryValidSubQuest(role->getLevel(), false);
				// 如果玩家跳级也能立即获得环任务 
				if (evt.nFrom < 22 && role->getLevel() >= 22)
				{
					QuestMgr::getInstance()->queryValidHuanQuest(role->getLevel(),false);
				}
				else
				{
					QuestMgr::getInstance()->queryValidHuanQuest(role->getLevel(), false);
				}
				if(World::getInstance()->getNPCDialog()->getFinishWay() != Finish_All)
				{
					QuestMgr::getInstance()->queryValidEveryQuest(role->getLevel(), false);
				}
				if(World::getInstance()->getNPCDialog()->getBiQiFinishWay() != Finish_All)
				{
					QuestMgr::getInstance()->queryValidBiQiQuest(role->getLevel(), false);
				}
				RoleManager::getInstance()->getLocalPlayer()->showLevelUpGuideInfo(msg->nLevel);//gx add
				//GET_UI(ShortCutUi, WCT_ShorCutUi)->setManualAttrackBtnDisplayFrame(RoleManager::getInstance()->getLocalPlayer()->getManualAttackBtnFrame().c_str());

				MiniMapUi *mUi = World::getInstance()->getMiniMapUi();
				if(mUi)
				{
					//modify by lpf 2015-09-11  传奇宝典不再有等级限制 
					// 					if(msg->nLevel >= 34)
					// 						mUi->setBaoDianBtnVisible(true);
					// 					else
					// 						mUi->setBaoDianBtnVisible(false);

					if(msg->nLevel >= 35)
					{
						mUi ->SetxuanshangLockVisible(false);
					}
					else
					{
						mUi ->SetxuanshangLockVisible(true);
					}
				}

				//10级时自动设置药品保护
				if (role->getLevel() == 10)
				{
					setAutoUseDrug();
				}
				//和策划沟通暂时注释掉混乱的逻辑
				// 				std::vector<GrowthPathItemData>const& baodianDataVec = MirValuableBookMgr::getInstance()->getDataFromDB();
				// 				std::vector<GrowthPathItemData>::const_iterator iter = baodianDataVec.begin();
				// 				for(;iter != baodianDataVec.end();++iter)
				// 				{
				// 					GrowthPathItemData const& data = *iter;
				// 					if(data.openLv == role->getLevel() && data.openyesno)
				// 					{
				// 						GET_UI(MirValuableBookUi,WCT_MirValuableBookUi)->setIsShowRedPoint(true);
				// 						MiniMapUiLoaderLayer* layer = World::getInstance()->getMiniMapUi()->getMinimapUILoaderLayer();
				// 						if(layer != NULL && !layer->isTmpAcNode10Play())
				// 						{
				// 							layer->setTmpAcNode10Play(true);
				// 							break;
				// 						}
				// 					}		
				// 				}
				int changeStrongNums = MirValuableBookMgr::getInstance()->getChangeStrongNums();
				if(changeStrongNums == 0){
					MirValuableBookMgr::getInstance()->initChangeStrongNums();
				}else{
					int nowShowNums = 0;
					std::vector<StrongItemData>const& changeStrongGroup = MirValuableBookMgr::getInstance()->getChangeStrongData();
					std::vector<StrongItemData>::const_iterator iter = changeStrongGroup.begin();
					for(; iter != changeStrongGroup.end(); ++iter){
						StrongItemData const& data = *iter;
						if(data.openLv <= role->getLevel())
							++nowShowNums;
					}
					if(nowShowNums > changeStrongNums){
						MirValuableBookMgr::getInstance()->setChangeStrongNums(nowShowNums);
						MirValuableBookMgr::getInstance()->setChangeStrongRed(true);
						MiniMapUiLoaderLayer* layer = World::getInstance()->getMiniMapUi()->getMinimapUILoaderLayer();
						if(layer != NULL && !layer->isTmpAcNode10Play()){
							layer->setTmpAcNode10Play(true);
						}
					}
				}

#ifdef _USE_SDK
				extern int g_zoneid;
				extern std::string g_zonename;
				extern std::string g_zonenum;
				extern std::string g_areaName;
				std::string roleName = RoleManager::getInstance()->getLocalPlayer()->getNameUtf8();
				WzolJni* jni = WzolJni::getInstance();
				jni->loginGameInfo(4,role->getId(), roleName.c_str(), role->getLevel(), g_zoneid, g_zonename.c_str(), g_zonenum.c_str(), World::getInstance()->getAccountId(), g_areaName.c_str());

				string params;
				params += "accountId="+ jni->toString(World::getInstance()->getAccountId());
				params += "\tlevel="+ jni->toString(msg->nLevel);
				jni->logToServer(LOG_LEVELUP, params);
				if (msg->nLevel >= 30)
				{
					NotificationManager::getNotificationManager()->setTag(jni->toString(30));
				}

				tagDWORDTime roleUpgradeTime = ServerTime::getInstance()->cal_current_server_dword_time();
				int utcRoleUpgradeTime = DwordTime2UTCTime(roleUpgradeTime); 

				string roleInfo;
				roleInfo += "roleId=" + jni->toString(role->getId());
				roleInfo += "\troleName=" + roleName;
				roleInfo += "\troleLevel=" + jni->toString((int)msg->nLevel);
				roleInfo += "\tzoneId=" + jni->toString(g_zoneid);
				roleInfo += "\tzoneName=" + g_zonename;
				roleInfo += "\troleCTime=" + jni->toString(RoleManager::getInstance()->getLocalPlayer()->getRoleCreateTime());
				roleInfo += "\troleLevelMTime=" + jni->toString(utcRoleUpgradeTime);
				roleInfo += "\ttype=upgradeRole";

				WzolJni::getInstance()->callPlatform(WHAT_SUBMITROLEINFO, roleInfo);

				CCLog("submitroleinfo World::onRoleLevelChanged---------------%s", roleInfo.c_str());
				std::stringstream ss;
				ss<<g_zoneid<<"_"<<(role->getId());
				CCUserDefault::sharedUserDefault()->setStringForKey(ss.str().c_str(), jni->toString(utcRoleUpgradeTime));
				CCUserDefault::sharedUserDefault()->flush();

#endif
			}
			else
			{
				//更新附近好友、行会成员的等级、更新组队和邀请界面
				SocialMgr::getInstance()->updateRoleLevel(msg->dw_role_id,msg->nLevel);
				MasterPrenticeMgr::getInstance()->updateRoleLevel(msg->dw_role_id,msg->nLevel);
				GuildMgr::getInstance()->updateRoleLevel(msg->dw_role_id,msg->nLevel);
				TeamUiPanel* teamUi = (TeamUiPanel*)getUiNodeByTag<TeamUiPanel>(WCT_TeamUi);
				if (teamUi)
				{
					if (TeamMgr::getInstance()->is_teammate(msg->dw_role_id))
					{
						teamUi->refreshTeammate();
					}
					CCNode* node  = teamUi->getParent()->getChildByTag(message_id_crc("InviteListView"));
					if (node)
					{
						InviteListView* view = dynamic_cast<InviteListView*>(node);
						if (view)
						{
							view->refreshPage(true);
						}
					}
				}
			}
			PackageUi* layer = getUiNodeByTag<PackageUi>(WCT_PACKAGEUI);
			if (layer)
			{
				layer->updatePackage();
			}
		}
		//等级奖励
		//setLevelReward();
	}
	return 0;
}

unsigned int World::onSpecialMove( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_special_move"))
	{
		NET_SIS_special_move *msg = (NET_SIS_special_move*)cmd;

		Role *role = RoleManager::getInstance()->findRole(msg->dw_role_id);

		if(role != NULL)
		{
			switch(msg->eType)
			{
			case ESMT_Repel:	//击退
				{
					CCPoint dest = ccp(msg->vDestPos[0], msg->vDestPos[2]);
					MessageDispatcher::Instance()->DispatchMsg(-1.0f, NULL, role, M_REPEL, &dest);
				}
				break;
			case ESMT_Assault:		//冲锋
				{
					CCPoint dest = ccp(msg->vDestPos[0], msg->vDestPos[2]);
					MessageDispatcher::Instance()->DispatchMsg(-1.0f, NULL, role, M_ASSAULT, &dest);
				}
				break;
			}
		}
	}
	return 0;
}

unsigned int World::onHitTarget( s_net_cmd *cmd )
{
	//[bing] 策划不要被击动作
#if 0
	//if(cmd->id == message_id_crc("NET_SIS_hit_target"))
	{
		NET_SIS_hit_target *msg = (NET_SIS_hit_target*)cmd;
		if(msg->dw_role_id == RoleManager::getInstance()->getLocalPlayer()->getId())
		{
			if(msg->dw_role_id != msg->dwSrcRoleID)
			{
				MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, RoleManager::getInstance()->getLocalPlayer(), M_ATTRACKED, NULL);
			}
		}
		else
		{
			Role *role = RoleManager::getInstance()->findRole(msg->dw_role_id);
			if(role != NULL)
			{
				if(msg->dw_role_id != msg->dwSrcRoleID)
				{
					MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, role, M_ATTRACKED, NULL);
					//role->stateMachine()->ChangeState(RoleStateBeAttack::getInstance());
				}
			}
		}
	}
#endif
	return 0;
}

//gx add 获取玩家每天清零数据
unsigned int World::onGetLocalRoleDayClearData(s_net_cmd *cmd)
{
	NET_SIS_role_day_clear* msg = (NET_SIS_role_day_clear*)cmd;
	LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (NULL == pLocPlayer)
		return 0;
	SetDayClearFlag(true);
	int mobaiValue = pLocPlayer->getRoleDayClearInfo(ERDCT_Xili_LIMIT_SOMETHING);//雕像膜拜
	if ((0 == mobaiValue) && (1 == msg->byDayClear[ERDCT_Xili_LIMIT_SOMETHING]))
	{
		//说明雕像膜拜成功
		ToolTip::getInstance()->push(GET_STR(2184));
	}
	for (int i = 0;i < ROLE_DAY_CLEAR_NUM;i++)
	{
		pLocPlayer->setRoleDayClearInfo(i,msg->byDayClear[i]);
	}
	NewFuncGuider* guider = NewFuncGuider::get_singleton_ptr();
	//KaifuHuodongMgr::getInstance()->reset();
	if (!guider)
		return 0;
	//bool isShow = false;
	//stGuideModelData const* data = guider->getModelData(NewFuncGuider::eTreasureRoom);
	//if (data)
	//{
	//	if (data->nType == NewFuncGuider::eTargetNPC)
	//	{
	//		if (pLocPlayer->getLevel() >= data->nParam)
	//			isShow = true;
	//	}
	//	if (data->nType == NewFuncGuider::eTargetAct)
	//	{
	//		if (guider->questIsInNewFuncGuide(data->nIndex))
	//			isShow = true;
	//	}
	//}
	//MiniMapUi* miniUi = getMiniMapUi();
	//if (isShow)
	//{
	//	if (miniUi)
	//	{
	//		if (pLocPlayer->getRoleDayClearInfo(ERDCT_CBG_FreeGamble) < 1)//藏宝阁的叹号标识
	//		{
	//			miniUi->setBtnHighLight(WCT_TreasureLoftUi);
	//		}
	//		else
	//		{
	//			miniUi->revokeBtnHighLight(WCT_TreasureLoftUi);
	//		}
	//	}
	//}
	//else
	//{
	//	if (miniUi)
	//		miniUi->revokeBtnHighLight(WCT_TreasureLoftUi);
	//}
	GambleMgr::getInstance()->SetGambleTimes(ERGT_Free_Gamble,pLocPlayer->getRoleDayClearInfo(ERDCT_FreeGamble_Number));
	GambleMgr::getInstance()->SetGambleTimes(ERGT_YuanBao_Gamble,pLocPlayer->getRoleDayClearInfo(ERDCT_FinishedGamble_Number));

	// 膜拜界面打开，实时刷新数据
	if (IS_UI_OPEN(WCT_STATUEWORSHIP))
	{
		StatueWorshipUiLayer* layer = getUiNodeByTag<StatueWorshipUiLayer>(WCT_STATUEWORSHIP);
		if (layer)
		{
			layer->updateInfo();
		}
	}

	return 0;
}

//gx add 获取玩家每天清零数据
unsigned int World::onGetLocalRoleDayClearDataTwo(s_net_cmd *cmd)
{
	NET_SIS_role_day_clear_two* msg = (NET_SIS_role_day_clear_two*)cmd;
	LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (NULL == pLocPlayer)
		return 0;
	SetDayClearFlagTwo(true);

	/*
	int mobaiValue = pLocPlayer->getRoleDayClearInfo(ERDCT_Xili_LIMIT_SOMETHING);//雕像膜拜
	if ((0 == mobaiValue) && (1 == msg->byDayClear[ERDCT_Xili_LIMIT_SOMETHING]))
	{
	//说明雕像膜拜成功
	ToolTip::getInstance()->push(GET_STR(2184));
	}*/
	for (int i = 0;i < ROLE_DAY_CLEAR_TWO_NUM;i++)
	{
		pLocPlayer->setRoleDayClearInfoTwo(i,msg->byDayClear[i]);
		switch( i )
		{
		case ERDCT_JJC_PK_COUNT: //重置竞技场挑战次数 add by XSea 2014.09.02
			ArenaMainMgr::getInstance()->setWuyejjcTimes(msg->byDayClear[i]);
			break;
		case ERDCT_SIGN_FLAG:
			{
				MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
				if (!pUI)
					return 0;
				//CCControlButton* huodongBtn = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(13));
				//CCControlButton* signBtn = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(12)->getChildByTag(30));
				CCControlButton* signBtn = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(37));
				NewFuncGuider* guider = NewFuncGuider::get_singleton_ptr();
				if (!guider)
					return 0;
				bool isShow = false;
				stGuideModelData const* data = guider->getModelData(NewFuncGuider::eSign);
				if (data)
				{
					if (data->nType == NewFuncGuider::eTargetNPC)
					{
						if (pLocPlayer->getLevel() >= data->nParam)
							isShow = true;
					}
					if (data->nType == NewFuncGuider::eTargetAct)
					{
						if (guider->questIsInNewFuncGuide(data->nIndex))
							isShow = true;
					}
				}
				if (isShow)
				{
					if (msg->byDayClear[i] <= 0)
					{
						if (signBtn)
						{
							pUI->setBtnHighLight(WCT_NewSignUi);
						}
					}
					else
					{
						if (signBtn)
						{
							pUI->revokeBtnHighLight(WCT_NewSignUi);
						}
					}
				}
				else
				{
					pUI->revokeBtnHighLight(WCT_NewSignUi);
				}
			}
			break;
		}
	}

	// 膜拜界面打开，实时刷新数据
	if (IS_UI_OPEN(WCT_STATUEWORSHIP))
	{
		StatueWorshipUiLayer* layer = getUiNodeByTag<StatueWorshipUiLayer>(WCT_STATUEWORSHIP);
		if (layer)
		{
			layer->updateInfo();
		}
	}
	/*
	GambleMgr::getInstance()->SetGambleTimes(ERGT_Free_Gamble,pLocPlayer->getRoleDayClearInfo(ERDCT_FreeGamble_Number));
	GambleMgr::getInstance()->SetGambleTimes(ERGT_YuanBao_Gamble,pLocPlayer->getRoleDayClearInfo(ERDCT_FinishedGamble_Number));*/
	return 0;
}

void World::onManualAttrackBtnPressed(int skillId)
{
	//TODO:取消自动攻击(攻击)
	if (AutoActionMgr::getInstance()->Get_Auto_Action())//gx add
	{
		AutoActionMgr::getInstance()->Set_Auto_Action(false);
	}
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	if (lp)
	{
		if (lp->getRunSELastState())
		{
			lp->setAutoRunState(false);
		}

	}

	//ZHJL：在攻击状态时不处理
	//if (RoleManager::getInstance()->getLocalPlayer()->getAttackState())
	//	return;

	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if (!IS_VALID_PTR(ploc))
		return;
	if (ploc->isInRoleStateAny(RA_ShuangXiu) || ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))
	{
		if (ploc->isInRoleStateAny(RA_Exchange))
		{
			ExchangeBusinessMgr::getInstance()->CancleExchange();
		}
		return;
	}

	//RoleManager::getInstance()->autoSelectCanAttackRole();
	select_enemy_immediately evt;
	SEND_EVENT(&evt);

	eSkillQueryState state;
	int ret = SkillManager::getInstance()->querySkill_bySkillID(skillId,state);

	//!是否选中人物
	if (ret == -1)
		return;
	if(ploc->stateMachine()->CurrentState() == LocalPlayerStateAttack::getInstance())
	{
		SkillManager::getInstance()->NowIsAttack(true);
		SkillManager::getInstance()->planUseManual(skillId);
	}
	else
	{
		SkillManager::getInstance()->planUseManual(skillId);
		//RoleManager::getInstance()->getLocalPlayer()->setEnterAttackState();
		RoleManager::getInstance()->getLocalPlayer()->attackTo(RoleManager::getInstance()->get_select_role_id());
	}

	/*if (state == SQS_BUFFER)
	{
	SkillManager::getInstance()->planUseManual(-1);
	RoleManager::getInstance()->getLocalPlayer()->setExitAttackState();
	}*/

}

void World::openNPCDialog()
{
	//CCNode *node = _scene->getChildByTag(WZ_POPUI);
	//if(node == NULL)
	//{

	//}
	//else
	//{
	//	NPCTalkUi *ui = static_cast<NPCTalkUi*>(node);
	//	ui->
	//}
}

NPCTalkUi * World::getNPCDialog()
{
	CCNode *node = _scene->getChildByTag(WCT_NPCDIALOG);
	if(node != NULL)
	{
		return static_cast<NPCTalkUi*>(node);
	}

	return NULL;
}

BePKRemindEffect * World::getBePKRemindEffectUi()
{
	CCNode *uiEffect = _scene->getChildByTag(WCT_BePKRemindEffect);
	if(uiEffect != NULL)
	{
		return static_cast<BePKRemindEffect*>(uiEffect);
	}

	return NULL;
}

// void World::play_buff_effect(std::string pic_name)
// {
// 	BuffEffectShow* effect = static_cast<BuffEffectShow*>(_scene->getChildByTag(WCT_BUFF_EFFECT_SHOW));
// 	if(!IS_VALID_PTR(effect))
// 	{
// 		return;
// 	}
// 
// 	effect->run_effect(pic_name);
// }

unsigned int World::onRoleExpChanged( s_net_cmd *cmd )
{
	//if(cmd->id == message_id_crc("NET_SIS_change_role_exp"))
	{
		NET_SIS_change_role_exp *msg = (NET_SIS_change_role_exp*)cmd;
		LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
		CC_ASSERT(lp != NULL);
		lp->setCurLevelExp(msg->nExp);

		//更新ui
		_roleHeadUi->setExp(100.0f * lp->getCurLevelExp() / lp->getMaxLevelExp());

		//!提示一下
		s_receive_chat_info info;
		info.send_channel = ESCC_System;
		std::stringstream ss;
		
		if (msg->nSpecial - 1000 > 0) //师徒加成经验
		{
			ss<<STRING_TABLE["get_exp"]<<msg->nChange - (msg->nSpecial - 1000);
			ss<<"+"<< msg->nSpecial - 1000<<STRING_TABLE["shitu_exp_add"];
		}	
		else
		{
			ss<<STRING_TABLE["get_exp"]<<msg->nChange;
		}
		info.chat_text = ss.str();
		ChatMgr::getInstance()->ShowInfoByChatChannel(info);
		std::ostringstream ostr; //需要飘的绿字提示
		//根据nspcial判断是否是特殊渠道获得经验以及所需处理
		switch( msg->nSpecial )
		{
		case 1: //宝箱
			//std::ostringstream ostr;
			//ostr << GET_STR(2222) << msg->nChange;
			//GET_UI(PackageUi,WCT_PACKAGEUI)->onTog(msg->nChange);
			//ToolTip::getInstance()->push(ostr.str());
			onTog(msg->nChange);
			break;
		case 2: //彩蛋
			ostr << GET_STR(2231) << msg->nChange;
			ToolTip::getInstance()->push(ostr.str());
			break;
		case 3: //神秘宝箱
			//std::ostringstream ostr;
			//ostr << GET_STR(2222) << msg->nChange;
			onTog(msg->nChange);
			break;
		case 4: //通用显示加经验特效 //add by XSea 2014.12.22
			onTog(msg->nChange);
			break;
		case 5://在进入勇闯天牢副本后获得经验
			{
				_getTLEXP = true;
				_getTLEXPNums = msg->nChange;
			}
			break;

		default: //默认不显示加经验特效

			break;
		}
		//根据nspcial判断是否是特殊渠道获得经验，
		/*if( 0 == msg->nSpecial ) 
		{
		onTog(msg->nChange);
		}
		if (1 == msg->nSpecial)//宝箱
		{
		//std::ostringstream ostr;
		//ostr << GET_STR(2222) << msg->nChange;
		//GET_UI(PackageUi,WCT_PACKAGEUI)->onTog(msg->nChange);
		//ToolTip::getInstance()->push(ostr.str());
		onTog(msg->nChange);
		}
		else if (2 == msg->nSpecial)//彩蛋
		{
		std::ostringstream ostr;
		ostr << GET_STR(2231) << msg->nChange;
		ToolTip::getInstance()->push(ostr.str());
		}
		else if (3 == msg->nSpecial)//神秘宝箱
		{
		//std::ostringstream ostr;
		//ostr << GET_STR(2222) << msg->nChange;
		onTog(msg->nChange);
		}
		else
		{
		//do nothing
		}*/
	}
	return 0;
}

unsigned int World::onGotoNewMap( s_net_cmd *cmd )
{
	extern bool g_bIsWaitingMsgByMovie;
	g_bIsWaitingMsgByMovie = false;

	CCLog("goto new map!!!");
	//if(cmd->id == message_id_crc("NET_SIS_goto_new_map"))

	NET_SIS_goto_new_map *msg = (NET_SIS_goto_new_map*)cmd;
	UINT tempMapId = MapManager::getInstance()->getCurMapId();
	UINT16 tempLineId = MapManager::getInstance()->getCurLine();
	//不同线路或者不同地图移除地物
	if (tempMapId != msg->dwMapID || tempLineId != msg->lineId)
	{	
		//GroundItemManager::getInstance()->SetReceiveMsg(false);
		//GroundItemManager::getInstance()->destroy();
		//GroundItemManager::getInstance()->init();
		GroundItemManager::getInstance()->removeAllUsedItem();
		//跳线成功
		if (tempMapId == msg->dwMapID && tempLineId != NULL && tempLineId != msg->lineId)
		{
			ToolTip::getInstance()->push(GET_STR(9049));
		}
// 		else
// 		{
// 			GroundItemManager::getInstance()->SetReceiveMsg(false);
// 		}

	}
	//相同地图且在副本中，不移除副本离开倒计时
	if (tempMapId != msg->dwMapID && !InstanceMgr::getInstance()->isInstanceMap(msg->dwMapID))
	{
		InstanceMgr::getInstance()->setCanLeave(false);
	}
	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
	if (player == NULL)
		return 0;
	player->setAttribute(RA_POSX, msg->nPos[0]);
	player->setAttribute(RA_POSY, msg->nPos[2]);
	player->setAttribute(RA_DIRX, msg->nDir[0]);
	player->setAttribute(RA_DIRY, msg->nDir[2]);
	//player->setCurLine(msg->lineId);
	MapManager::getInstance()->setCurLine(msg->lineId);
	//player->stopLevelUpEffect();

	RoleHeadUi* roleHeadUi = World::getInstance()->getRoleHeadUi();
	if (roleHeadUi)
		roleHeadUi->setShowLine(msg->lineId);
	if (MapManager::getInstance()->getCurSceneType(msg->dwMapID) == 12)
	{
		// 		MessageBoxUi* ui = dynamic_cast<MessageBoxUi*>(_scene->getChildByTag(WCT_DIEUI));
		// 		if (ui != NULL)
		// 		{
		// 			ui->removeFromParentAndCleanup(true);
		// 		}
		MessageBoxUi::clearSelf();
	}
	else
	{
		if (!player->isDead())
		{
			MessageBoxUi::clearSelf();
		}
		else if(MapManager::getInstance()->getCurMapId() != msg->dwMapID)
		{
			CCScene* scene = World::getInstance()->getScene();
			if (scene)
			{
				MessageBoxUi* dieUi = dynamic_cast<MessageBoxUi*>(scene->getChildByTag(WCT_DIEUI));
				if (dieUi == NULL)
				{
					dieUi = MessageBoxUi::createWithTwoBtn("", GET_STR(9373).c_str(), STRING_TABLE["original_position"], STRING_TABLE["back_to_city"]);
					dieUi->setTag(WCT_DIEUI);
					_scene->addChild(dieUi, WZ_MESSAGEBOX);
					dieUi->updateYandiFuHuoBtnPosition(100);
					dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
					dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);
				}
			}
		}
	}
	if (msg->dwMapID == SBK_MAP_CRC_ID)
	{
		LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
		if (localPlayer && !localPlayer->isDead())
		{
			localPlayer->stateMachine()->ChangeState(LocalPlayerStateStand::getInstance());
		}
	}
	if(MapManager::getInstance()->getCurMapId() != msg->dwMapID)
	{
		GroundItemManager::getInstance()->notify_new_map_created(false);

		player->removeFromMap();

		RoleManager::getInstance()->setForceShowOther(MapManager::getInstance()->forceShowOther(msg->dwMapID));
		_gotoNewMap = true;
		_newMapId = msg->dwMapID;
		_gotoNewMapStep = 0;
		CrossSceneUI::getInstance()->open(0);
		if (MapManager::getInstance()->getCurSceneType(msg->dwMapID) == 12)//进入的是竞技场
		{
			CrossSceneUI::getInstance()->setIsJoinjjc(true);
		}

		CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this);
		_fubenNumBLabel->setVisible(false);//每次切换地图先隐藏
		if (msg->dwMapID == TAOYUAN_MIJING_MAP)//进入的是桃源秘境
		{
			_countDownTime = getcountDownTime(TAOYUAN_MIJING_MAP);
			CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this, 1.0f, false);
		}

		if (/*msg->dwMapID == FIRE_MASSACRE_MAP_1*/is_fire_massacre_map(msg->dwMapID))//进入的是屠魔圣地
		{
			_countDownTime = getcountDownTime(msg->dwMapID);
			CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this, 1.0f, false);
		}

		if (msg->dwMapID == GUARD_CUSTOMS_MAP)//进入的是守卫天关
		{
			CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this, 1.0f, false);
		}

		// 		if (msg->dwMapID == PREPARE_HALL_MAP)//进入的是副本准备大厅
		// 		{
		// 			CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this, 1.0f, false);
		// 		}
		if (tempMapId == GINGKO_VILLAGE_MAP)//离开神兽副本时隐藏小手
		{
			World::getInstance()->getMiniMapUi()->showHand(false);
		}

		//CrossSceneUI::getInstance()->setPec(10);

		clearRemoteList();

		RoleManager::getInstance()->clearAllRemote(false);

		MapManager::getInstance()->changeMap(_newMapId);
		//MapManager::getInstance()->closeMap();
		//MapManager::getInstance()->openMap();
	}
	if (AutoActionMgr::getInstance()->Get_Auto_Action())
	{
		AutoActionMgr::getInstance()->Set_Auto_Action(false);
	}
	//延迟重连 暂时注释掉
// 	if (MapManager::getInstance()->getCurMapId() == msg->dwMapID && _repetLoginState)
// 	{
// 		if (!AutoActionMgr::getInstance()->Get_Auto_Action())//gx add;
// 		{
// 			LocalPlayer *pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
// 			if (pLocPlayer->getAttackMonsterId() > 0)
// 				World::getInstance()->getMiniMapUi()->ClickAutoFightBtn();
// 		}
// 		// 		_gotoNewMap = true;
// 		// 		_newMapId = msg->dwMapID;
// 		// 		_gotoNewMapStep = 0;
// 		// 		DelayUi::getInstace()->close();
// 		// 		CrossSceneUI::getInstance()->open(0);
// 		// 		CrossSceneUI::getInstance()->setPec(10);
// 		// 		clearRemoteList();
// 		// 		RoleManager::getInstance()->clearAllRemote(false);
// 		// 		GroundItemManager::getInstance()->removeAllUsedItem();
// 		// 		MapManager::getInstance()->changeMap(_newMapId);
// 		// 		//请求初始化数据
// 		// 		repetInit();
// 
// 		_gotoNewMap = true;
// 		_newMapId = msg->dwMapID;
// 		_repetCanGotoMap = true;
// 		_repetCanClose = true;
// 		_gotoNewMapStep = 0;
// 		DelayUi::getInstace()->close();
// 		CrossSceneUI::getInstance()->open(0);
// 		CrossSceneUI::getInstance()->setPec(10);
// 		clearRemoteList();
// 		RoleManager::getInstance()->clearAllRemote(false);
// 		GroundItemManager::getInstance()->removeAllUsedItem();
// 		MapManager::getInstance()->changeMap(_newMapId);
// 	}
	////////////进入祖玛阁副本，显示石头
	addStoneAnim(true);

	if (roleHeadUi)
		roleHeadUi->updateZumaStoneState();
	if (ZUMA_FUBEN_BOSS_MAP == msg->dwMapID)
	{
		World::getInstance()->addDiceAnim(true);
	}
	else
	{
		World::getInstance()->addDiceAnim(false);
	}

	c_sql_command* txtTool = c_db_manager::getSingleton()->begin_operation("SELECT * FROM FubenData WHERE mapid = ?1");
	txtTool->set_integer64(1,msg->dwMapID);
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	unsigned int nMovieID = 0;
	while(table->retrieve_row())
	{
		int idx = table->get_index("movieID");
		nMovieID = table->get_integer32(idx);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(txtTool);

	if (nMovieID > 0)
	{
		bool isCompleted = CMovie::GetInstance().isComeletedInstance(msg->dwMapID);
		if (isCompleted == false)
		{
			//关闭对话界面
			NPCTalkUi* ui = World::getInstance()->getNPCDialog();
			if(ui)
			{
				ui->show(false);
			}
			CMovie::GetInstance().doNPCScript(nMovieID);
			CMovie::GetInstance().setCompletedFuBenId(msg->dwMapID);
		}
	}
	//player->runTransmitEffect();

	RoleHeadUi* roleui = World::getInstance()->getRoleHeadUi();
	if(NULL != roleui)
		roleui->setShoeEnabled(true);

	MapManager::getInstance()->SetISetEnabled(true);
	AudioPlayer::getSigletonPtr()->stopAllSoundEffect();

	unsigned int currentMapId = MapManager::getInstance()->getCurMapId();
	std::vector<unsigned int> vecAutoFightId = MapManager::getInstance()->getAutoFightMapId();
	std::vector<unsigned int>::iterator itAuto = vecAutoFightId.begin();
	for(;itAuto != vecAutoFightId.end();itAuto++)
	{
		if((*itAuto) == currentMapId)
		{
			AutoActionMgr::getInstance()->JustBeginAutoFight();
			break;
		}
	}

	stopUnderAttackEffect();
	if (tempMapId == msg->dwMapID)
	{
		//使用小飞鞋同地图传送后，也需要寻路，以免不自动打怪
		MapManager::getInstance()->sameMapRunPath();
	}

	//go_through_map_in_world();

	return 0;
}

int World::getcountDownTime(unsigned int mapId)
{
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM FubenData WHERE mapid = ?1");
	int time = 0;
	cmd->set_integer64(1 ,mapId);
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	while(table->retrieve_row())
	{
		unsigned int idx = table->get_index("time_limit");
		time = table->get_integer32(idx);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
	return time;
}

void World::countDownEffect_UI(int times)
{
	//int m_nHour = times / 3600;
	int m_nMin = times / 60;
	int m_nSecond = times % 60;
	while(m_nMin >= 60)
		m_nMin -= 60;
	CCString* tmStr = CCString::createWithFormat("%s%02d:%02d",STRING_TABLE["time_remaining"],m_nMin,m_nSecond);
	//int temp = m_nMin * 100 + m_nSecond;

	if (_fubenNumBLabel)
	{
		if (times > 0)
		{
			_fubenNumBLabel->setVisible(true);
			_fubenNumBLabel->setString(tmStr->getCString());
		}
		else
		{
			_fubenNumBLabel->setVisible(false);
		}
	}
}

void World::countDownEffect( float dt )
{
	--_countDownTime;
	if (0 > _countDownTime)
	{
		_countDownTime = 0;
		return;
	}
	countDownEffect_UI(_countDownTime);

	if (_countDownTime <= 0 )
	{
		unsigned int mapId = MapManager::getInstance()->getCurMapId();
		//焰火屠魔、守卫天关时间到了还可以在副本待一下，副本准备大厅会自动传送
		if (/*mapId != FIRE_MASSACRE_MAP_1 */!is_fire_massacre_map(mapId)&& mapId != GUARD_CUSTOMS_MAP && mapId != PREPARE_HALL_MAP)
		{
			WorldPacket C2G_Msg(NET_C2G_REQUEST_LEAVE_INSTANCE);//组装消息头 
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_NORMAL, false);//发送
		}
	}
}
//请求战报消息
unsigned int World::receiveZhanbaoRequest( s_net_cmd *cmd )
{
	NET_SIC_sbk_rank* msg = (NET_SIC_sbk_rank*)cmd;
	if (msg->dw_error != 0)
	{
		ToolTip::getInstance()->push(STRING_TABLE["noite_no_battle_report"],1);	
		return -1;
	}
	if (msg->n_rank_count <= 0)
	{
		ToolTip::getInstance()->push(STRING_TABLE["noite_no_guild_report"],1);	
		return -1;
	}	
	FightRecordUiMgr::GetInstance()->openFightRecordUi();
	FightRecordUiLayer *layer = GET_UI(FightRecordUi,WCT_FightRecord)->getLayer();
	if (!layer)
		return -1;
	std::vector<tagSBKKillRank> sbkVec;
	for (int i = 0;i < msg->n_rank_count;i++)
	{
		sbkVec.push_back(msg->s_sbk_rank[i]);
	}
	layer->updateFightRecordData(msg->n_rank_count,msg->n_count,sbkVec,msg->is_join_sbk);
	return  0;
}
void World::sendZhanBaoRequest() 
{
	NET_CIS_sbk_rank cmd; 
	TCP_CLIENT->send_net_cmd(&cmd, NP_IDLE, false);	
	return;
}
//接受战报消息
unsigned int World::receiveZhanbaoResult( s_net_cmd *cmd)
{
	NET_G2C_End_sbk* msg = (NET_G2C_End_sbk*)cmd;
	FightRecordUiMgr::GetInstance()->openFightRecordUi();
	FightRecordUiLayer *layer = GET_UI(FightRecordUi,WCT_FightRecord)->getLayer();
	if (!layer)
		return -1;
	layer->updateFighrRecordResult(msg->is_win,msg->dw_win_guild_id,msg->nguildKillNum,msg->nKillNum,msg->dw_EXP_num,msg->nZuanShi_Num,msg->dw_roleid); 
	return 0;
}

//设置连杀动画
void World::sbkGCZShowLianshaNode(int num)
{
	CCSize size = CCDirector::sharedDirector()->getWinSize();
	_lianshaNum = CCLabelBMFont::create();
	_lianshaNum->setFntFile("Art/Scene/fontNum8.fnt");
	//_lianshaNum->setScale(1.5f);
	_lianshaNum->setAnchorPoint(ccp(0.0f, 0.5f));
	CCString* valuestr = CCString::createWithFormat("%d", num);
	_lianshaNum->setString(valuestr->getCString());
	_lianshaNum->setPosition(ccp(-_lianshaNum->boundingBox().size.width + 30,0));
	_lianshaLayer =CCLayer::create();
	_lianshaLayer->addChild(_lianshaNum,1);	
	_lianshaText = CCSprite::create();
	_lianshaText->setOpacity(0);
	//_lianshaText->setScale(0.5);
	_lianshaLayer->addChild(_lianshaText);
	_lianshaText->setPosition(ccp(50,-20));
	_scene->addChild(_lianshaLayer, WZ_MINIMAPUI);
	_lianshaLayer->setVisible(true);
	_lianshaLayer->setPosition(size.width / 2 + 150,size.height/2 + 70);

	std::string uiDir = CFGReader::instance()->get_profile_string("Art", "ICON", "");
	std::string FullFileName = uiDir + "SingleUI/zhanbao_liansha.png";
	CCSpriteFrame* _lianshaTextFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(FullFileName.c_str());
	if(_lianshaTextFrame == NULL)
	{
		CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(FullFileName.c_str());
		_lianshaTextFrame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
		CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(_lianshaTextFrame, FullFileName.c_str());
	}
	_lianshaText->setDisplayFrame(_lianshaTextFrame);


	//CCFadeIn* in1 = CCFadeIn::create(0.1);
	//CCFadeIn* in2 = CCFadeIn::create(0.08);

	CCFadeOut* out1 = CCFadeOut::create(0.2);
	CCFadeOut* out2 = CCFadeOut::create(0.2);

	CCScaleTo* SmalltoBig1 = CCScaleTo::create(0.2f,2.5f);//s的放大和缩小的动画
	//CCScaleTo* SmalltoBig2 = CCScaleTo::create(0.2f,1.0f);//s的放大和缩小的动画

	CCScaleTo* BigtoSmall1= CCScaleTo::create(0.2f,1.0f);
	//CCScaleBy* BigtoSmall2= CCScaleBy::create(0.1f,0.5f);

	//CCMoveBy* smallRtoL1 = CCMoveBy::create(0.03f,ccp(5,0));//左右抖动的动画
	//CCMoveBy* smallRtoL2 = CCMoveBy::create(0.03f,ccp(5,0));//左右抖动的动画

	//CCMoveBy* smallLtoR1 = CCMoveBy::create(0.03f,ccp(-5,0));
	//CCMoveBy* smallLtoR2 = CCMoveBy::create(0.03f,ccp(-5,0));

	_lianshaNum->runAction(CCSequence::create(CCEaseIn::create(SmalltoBig1, 4.0f),CCEaseOut::create(BigtoSmall1, 3.0f),CCDelayTime::create(0.3f),out1,NULL));
	//_lianshaNum->runAction(CCSequence::create(CCDelayTime::create(2.0f), out1, NULL));
	_lianshaText->runAction(CCSequence::create(CCDelayTime::create(0.03f),CCFadeIn::create(0.01),CCDelayTime::create(0.6f), out2, NULL));
	//_lianshaText->runAction(CCSequence::create(CCEaseIn::create(SmalltoBig2, 4.0f),CCDelayTime::create(0.5f), out2, NULL));

	//_lianshaNum->runAction(CCSequence::create(CCDelayTime::create(2.0f),CCCallFunc::create(this,callfunc_selector(World::sbkLianshaStopAni)),NULL));//4
	//CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::sbkLianshaStopAni), this, 2.0f, false);
}

void World::sbkLianshaBeginAni(CCObject* sprite)
{
	dynamic_cast<CCLabelBMFont*>(sprite)->setVisible(true);
}

void World::sbkLianshaStopAni()
{
	_lianshaLayer->setVisible(false);
}

void World::jjcAmine()
{
	if (MapManager::getInstance()->getCurMapId() == JJC_MAP_CRC_ID)//进入的是竞技场
	{//发送服务器消息添加AI敌人
		WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_JOIN_AI);	//组装消息头
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_NORMAL, false); //发送
	}

	CCSpriteFrameCache* sprite_cache  = CCSpriteFrameCache::sharedSpriteFrameCache();

	//any sprite frame cached
	if (!sprite_cache->spriteFrameByName("numberarena_44"))
	{
		std::string uiDir = CFGReader::instance()->get_profile_string("Art", "UI", "");
		std::string numberarena = uiDir + std::string("ccbResources/numberarena.plist");
		sprite_cache->addSpriteFramesWithFile(numberarena.c_str());//vv 2014.9.27 改变图片读取路径
	}

	NewPlayerGuider::getInstance()->disableClick();
	CCScene *scene = World::getInstance()->getScene();
	CCScaleBy* SmalltoBig1 = CCScaleBy::create(1.0f,5.0f,5.0f);
	CCScaleBy* SmalltoBig2 = CCScaleBy::create(1.0f,5.0f,5.0f);
	CCScaleBy* SmalltoBig3 = CCScaleBy::create(1.0f,5.0f,5.0f);
	CCScaleBy* SmalltoBig4 = CCScaleBy::create(1.0f,5.0f,5.0f);
	CCFadeOut* out1 = CCFadeOut::create(0.1);
	CCFadeOut* out2 = CCFadeOut::create(0.1);
	CCFadeOut* out3 = CCFadeOut::create(0.1);
	CCFadeOut* out4 = CCFadeOut::create(0.1);
	CCFadeIn* in1 = CCFadeIn::create(0.1);
	CCFadeIn* in2 = CCFadeIn::create(0.1);
	CCFadeIn* in3 = CCFadeIn::create(0.1);
	CCFadeIn* in4 = CCFadeIn::create(0.1);
	//CCSprite* m_number = CCSprite::create();
	//m_number->setAnchorPoint(ccp(0.5,0.5));
	//m_number->setScale(0.3);
	//m_number->setDisplayFrame(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("55"));//add by vvv 2014.12.24 改变图片读取路径（plist读取）（解决图片模糊问题）
	//m_number->setVisible(false);
	//m_number->setPosition(ccp(scene->getContentSize().width / 2,scene->getContentSize().height / 2));
	DelayUi::getInstace()->open();
	DelayUi::getInstace()->setOpacity(0);
	DelayUi::getInstace()->setDisableClick(true);
	CCSprite* m_number = CCSprite::create();
	m_number->setAnchorPoint(ccp(0.5,0.5));
	m_number->setScale(0.3);
	m_number->setDisplayFrame(sprite_cache->spriteFrameByName("numberarena_44"));
	m_number->setVisible(false);
	m_number->setPosition(ccp(scene->getContentSize().width / 2,scene->getContentSize().height / 2));
	CCSprite* m_number2 = CCSprite::create();
	m_number2->setAnchorPoint(ccp(0.5,0.5));
	m_number2->setScale(0.3);
	m_number2->setDisplayFrame(sprite_cache->spriteFrameByName("numberarena_33"));
	m_number2->setVisible(false);
	m_number2->setPosition(ccp(scene->getContentSize().width / 2,scene->getContentSize().height / 2));
	CCSprite* m_number3 = CCSprite::create();
	m_number3->setAnchorPoint(ccp(0.5,0.5));
	m_number3->setScale(0.3);
	m_number3->setDisplayFrame(sprite_cache->spriteFrameByName("numberarena_22"));
	m_number3->setVisible(false);
	m_number3->setPosition(ccp(scene->getContentSize().width / 2,scene->getContentSize().height / 2));
	CCSprite* m_number4 = CCSprite::create();
	m_number4->setAnchorPoint(ccp(0.5,0.5));
	m_number4->setScale(0.3);
	m_number4->setDisplayFrame(sprite_cache->spriteFrameByName("numberarena_11"));
	m_number4->setVisible(false);
	m_number4->setPosition(ccp(scene->getContentSize().width / 2,scene->getContentSize().height / 2));
	scene->addChild(m_number,10);
	scene->addChild(m_number2,10);
	scene->addChild(m_number3,10);
	scene->addChild(m_number4,10);

	//m_number->runAction(CCSequence::create(CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number),in1,SmalltoBig1,out1,NULL));//1
	//m_number2->runAction(CCSequence::create(CCDelayTime::create(1.1),CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number2),in2,SmalltoBig2,out2,NULL));//2
	//m_number3->runAction(CCSequence::create(CCDelayTime::create(2.2),CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number3),in3,SmalltoBig3,out3,NULL));//3
	//m_number4->runAction(CCSequence::create(CCDelayTime::create(3.3),CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number4),in4,SmalltoBig4,out4,NULL));//4
	//m_number5->runAction(CCSequence::create(CCDelayTime::create(4.4),CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number5),in5,SmalltoBig5,out5,CCCallFunc::create(this,callfunc_selector(World::undisableClick)),NULL));//5

	m_number->runAction(CCSequence::create(CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number),in1,SmalltoBig1,out1,NULL));//1
	m_number2->runAction(CCSequence::create(CCDelayTime::create(1.3),CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number2),in2,SmalltoBig2,out2,NULL));//2
	m_number3->runAction(CCSequence::create(CCDelayTime::create(2.6),CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number3),in3,SmalltoBig3,out3,NULL));//3
	m_number4->runAction(CCSequence::create(CCDelayTime::create(3.9),CCCallFuncO::create(this,callfuncO_selector(World::onChangeNodeVisible),m_number4),in4,SmalltoBig4,out4,CCCallFunc::create(this,callfunc_selector(World::undisableClick)),NULL));//4
	//  UiResourceMgr::getInstance()->retainPlistFile(_plist);
}

void World::onChangeNodeVisible(CCObject* sprite)
{
	dynamic_cast<CCSprite*>(sprite)->setVisible(true);
}

void World::undisableClick()
{
	NewPlayerGuider::getInstance()->clear();
	DelayUi::getInstace()->close();
}

bool World::isHighLight(CCObject* object , int type ,int tag)
{
	if (getScene() == NULL)
	{
		return false;
	}
	switch(type)
	{
	case WT_CCNODE:
		{
			if (dynamic_cast<CCNode*>(object)->getChildByTag(tag))
			{
				return true;
			}
			return false;
		}
		break;
	case WT_CCLAYER:
		{
			if (dynamic_cast<CCLayer*>(object)->getChildByTag(tag))
			{
				return true;
			}
			return false;
		}
		break;
	case WT_CCSPRITE:
		{
			if (dynamic_cast<CCSprite*>(object)->getChildByTag(tag))
			{
				return true;
			}
			return false;
		}
		break;
	case WT_CCCONTROLBUTTON:
		{
			if (dynamic_cast<CCControlButton*>(object)->getChildByTag(tag))
			{
				return true;
			}
			return false;
		}
		break;
	default:
		{

		}
		break;
	}
	return false;
}

bool World::SetHighLight(CCNode* object , int type , int tag , std::string fileName , bool isShow ,int posX , int posY)
{
	if (getScene() == NULL)
	{
		return false;
	}
	if (isShow)
	{
		CCSprite* highLight = CCSprite::create();
		highLight->initWithFile(fileName.c_str());
		switch(type)
		{
		case WT_CCNODE:
			{
				object->addChild(highLight,20,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX,highLight->getContentSize().height + posY));
				return true;
			}
			break;
		case WT_CCLAYER:
			{
				dynamic_cast<CCLayer*>(object)->addChild(highLight,20,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				return true;
			}
			break;
		case WT_CCSPRITE:
			{
				dynamic_cast<CCSprite*>(object)->addChild(highLight,20,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				return true;
			}
			break;
		case WT_CCCONTROLBUTTON:
			{
				dynamic_cast<CCControlButton*>(object)->addChild(highLight,20,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				return true;
			}
			break;
		default:
			{
				//暂时不处理
			}
			break;
		}
	} 
	else
	{
		switch(type)
		{
		case WT_CCNODE:
			{
				object->removeChildByTag(tag);
				return true;
			}
			break;
		case WT_CCLAYER:
			{
				dynamic_cast<CCLayer*>(object)->removeChildByTag(tag);
				return true;
			}
			break;
		case WT_CCSPRITE:
			{
				dynamic_cast<CCSprite*>(object)->removeChildByTag(tag);
				return true;
			}
			break;
		case WT_CCCONTROLBUTTON:
			{
				dynamic_cast<CCControlButton*>(object)->removeChildByTag(tag);
				return true;
			}
			break;
		default:
			{
				//暂时不处理
			}
			break;
		}
	}
	return false;
}

bool World::SetHighLight(CCNode* object , int type , int tag , int count , bool isShow ,int posX , int posY)
{
	if (getScene() == NULL)
	{
		return false;
	}
	if (isShow)
	{
		// 由于SetHighLight()可能会被反复调用，故应先删除节点，再添加，否则会造成有同样Tag的
		// 节点无法全部移除，因而红点在某些情况下不会消失。
		if(object->getChildByTag(tag))
			object->removeChildByTag(tag);

		CCSprite* highLight = CCSprite::create();
		switch (count)
		{
		case 0:
			highLight->initWithSpriteFrameName("smallui_xiaohongdian");
			break;
		case 1:
			highLight->initWithSpriteFrameName("smallui_red1");
			break;
		case 2:
			highLight->initWithSpriteFrameName("smallui_red2");
			break;
		case 3:
			highLight->initWithSpriteFrameName("smallui_red3");
			break;
		case 4:
			highLight->initWithSpriteFrameName("smallui_red4");
			break;
		case 5:
			highLight->initWithSpriteFrameName("smallui_red5");
			break;
		case 6:
			highLight->initWithSpriteFrameName("smallui_red6");
			break;
		case 7:
			highLight->initWithSpriteFrameName("smallui_red7");
			break;
		case 8:
			highLight->initWithSpriteFrameName("smallui_red8");
			break;
		case 9:
			highLight->initWithSpriteFrameName("smallui_red9");
			break;
		default:
			{
				highLight->initWithSpriteFrameName("smallui_red1");
			}
			break;
		}
		if (count >= 10)
		{
			highLight->initWithSpriteFrameName("smallui_red");
		}
		switch(type)
		{
		case WT_CCNODE:
			{
				object->addChild(highLight,20,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX,highLight->getContentSize().height + posY));
				return true;
			}
			break;
		case WT_CCLAYER:
			{
				dynamic_cast<CCLayer*>(object)->addChild(highLight,20,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				return true;
			}
			break;
		case WT_CCSPRITE:
			{
				dynamic_cast<CCSprite*>(object)->addChild(highLight,20,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				return true;
			}
			break;
		case WT_CCCONTROLBUTTON:
			{
				dynamic_cast<CCControlButton*>(object)->addChild(highLight,20,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				return true;
			}
			break;
		default:
			{
				//暂时不处理
			}
			break;
		}
	} 
	else
	{
		switch(type)
		{
		case WT_CCNODE:
			{
				object->removeChildByTag(tag);
				return true;
			}
			break;
		case WT_CCLAYER:
			{
				dynamic_cast<CCLayer*>(object)->removeChildByTag(tag);
				return true;
			}
			break;
		case WT_CCSPRITE:
			{
				dynamic_cast<CCSprite*>(object)->removeChildByTag(tag);
				return true;
			}
			break;
		case WT_CCCONTROLBUTTON:
			{
				dynamic_cast<CCControlButton*>(object)->removeChildByTag(tag);
				return true;
			}
			break;
		default:
			{
				//暂时不处理
			}
			break;
		}
	}
	return false;
}

void World::runAcceptTaskEffect()
{
	AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_ACCEPTMISSION);//接受任务音效
	std::string sSEDir = CFGReader::instance()->get_profile_string("Art", "Effect", "");
	std::string sSEPlist = sSEDir + "E1_31.plist";

	GameActionNode* TaskAcNode = GameActionNode::create();
	TaskAcNode->setTag(WCT_FINISHTASKEFFECT);
	TaskAcNode->InitWithPList(sSEPlist.c_str(), "E1_31");
	TaskAcNode->setPosition(ccp(CCDirector::sharedDirector()->getWinSize().width / 2.0f+10, CCDirector::sharedDirector()->getWinSize().height / 2.0f));
	_scene->addChild(TaskAcNode, WZ_TASKEFFECT);

	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	TaskAcNode->playAnimOnce(0.08f, true);
}

void World::runFinishedTaskEffect()
{
	AudioPlayer::getSigletonPtr()->playerSoundSceneEffect(SCENE_MISSIONCOMPLETE);//完成任务音效
	std::string sSEDir = CFGReader::instance()->get_profile_string("Art", "Effect", "");
	std::string sSEPlist = sSEDir + "E1_36.plist";

	GameActionNode* TaskAcNode = GameActionNode::create();
	TaskAcNode->setTag(WCT_FINISHTASKEFFECT);
	TaskAcNode->InitWithPList(sSEPlist.c_str(), "E1_36");
	TaskAcNode->setPosition(ccp(CCDirector::sharedDirector()->getWinSize().width / 2.0f+10, CCDirector::sharedDirector()->getWinSize().height / 2.0f));
	_scene->addChild(TaskAcNode, WZ_TASKEFFECT);

	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	TaskAcNode->playAnimOnce(0.08f, true);
}

void World::stopUnderAttackEffect()
{
	if (_underAttackEffect != NULL)
	{
		_underAttackEffect->stopAllActions();
		_underAttackEffect->removeFromParent();
		_underAttackEffect = NULL;
	}
}

void World::runUnderAttackBeginEffect()
{
	if (_isPlayUnderAttackBegin)
	{
		return;
	}

	if (_isPlayUnderAttackEnd && _underAttackEffect)
	{
		_underAttackEffect->stopAllActions();
		_isPlayUnderAttackEnd = false;
	}

	_isPlayUnderAttackBegin = true;

	if (_underAttackEffect == NULL)
	{
		_underAttackEffect = CCSprite::create();
		_underAttackEffect->setPosition(ccp(45,CCDirector::sharedDirector()->getWinSize().height - 45));
		_scene->addChild(_underAttackEffect,WZ_UNDERATTACKFFECT);
	}

	AnimationCache::AnimateList anims;
	AnimationCache::createDefList(1, anims);
	AnimationCache::getInstance()->getSinEffect(0,"E1_216", anims);
	BSAnimate *animste = anims[0];

	CCFadeOut* fadeOut = CCFadeOut::create(5.0f);

	CCRepeat* repeatAni = CCRepeat::create(animste,5);
	CCCallFunc* callbackAni = CCCallFunc::create(this,callfunc_selector(World::underAttackBeginCallBack));
	CCSequence* action = CCSequence::create(repeatAni,callbackAni,NULL);
	_underAttackEffect->runAction(action);
	_underAttackEffect->runAction(fadeOut);
}

void World::runUnderAttackEndEffect()
{
	//如果30%受击特效存在则返回
	if (_isPlayUnderAttackEnd)
	{
		return;
	}
	//如果初始受击特效存在则停止特效播放
	if (_isPlayUnderAttackBegin && _underAttackEffect)
	{
		_underAttackEffect->stopAllActions();
		_isPlayUnderAttackBegin = false;
	}

	_isPlayUnderAttackEnd = true;

	if (_underAttackEffect == NULL)
	{
		_underAttackEffect = CCSprite::create();
		_underAttackEffect->setPosition(ccp(45,CCDirector::sharedDirector()->getWinSize().height - 45));
		_scene->addChild(_underAttackEffect,WZ_UNDERATTACKFFECT);
	}

	//重新设置_underAttackEffect的alpha值
	_underAttackEffect->setOpacity(255);

	AnimationCache::AnimateList anims;
	AnimationCache::createDefList(1, anims);
	AnimationCache::getInstance()->getSinEffect(0,"E1_217", anims);
	BSAnimate *animste = anims[0];

	CCRepeat* repeatAni = CCRepeat::create(animste,5);
	CCCallFunc* callbackAni = CCCallFunc::create(this,callfunc_selector(World::underAttackEndCallBack));
	CCSequence* action = CCSequence::create(repeatAni,callbackAni,NULL);
	_underAttackEffect->runAction(action);
}

void World::underAttackBeginCallBack()
{
	_isPlayUnderAttackBegin = false;
}

void World::underAttackEndCallBack()
{
	_isPlayUnderAttackEnd = false;
}

MiniMapUi * World::getMiniMapUi()
{
	return _miniMapUi;
}
unsigned int World::onGetRoleTitles( s_net_cmd* cmd )
{
	NET_SIS_get_role_titles* msg = (NET_SIS_get_role_titles*)cmd;
	LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (NULL == pLocPlayer)
		return 0;

	if (msg->dw_error_code == E_Title_Success && msg->dw_role_id == pLocPlayer->getId())
	{
		pLocPlayer->clearTitle();

		for (int i = 0, offset = 0 ; i < (int)msg->u16TitleNum ; ++i, offset += 1)
		{
			tagTitleData title;

			memcpy(&title, msg->byData + offset, sizeof(tagTitleData));

			//pLocPlayer->setCurTille(i,title.dwTitleID); //获取全部称号不应该设置在使用的称号上 //add by XSea 2015.01.05
			pLocPlayer->insterTitle(title);
		}
		//GET_UI(RoleTitleUi, WCT_RoleTitleUi)->updateData(pLocPlayer->getId());
	}
	return 0;
}

unsigned int World::onUseRoleTitle( s_net_cmd* cmd )
{
	NET_SIS_use_role_title* msg = (NET_SIS_use_role_title*)cmd;
	LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (NULL == pLocPlayer)
		return 0;

	if (msg->dw_role_id == pLocPlayer->getId())
	{
		for (int i = 0;i < MAX_REFRESH_TITLE_NUM;++i)
		{
			pLocPlayer->setCurTille(i, msg->u16TitleID[i]);
		}
	}
	GET_UI(NewRoleTitleUi, WCT_RoleTitleUi)->refreshTitleList();
	//GET_UI(RoleTitleUi, WCT_RoleTitleUi)->setRoleId(pLocPlayer->getId());
	return 0;
}

unsigned int World::onAddRoleTitle( s_net_cmd* cmd )
{
	NET_SIS_net_titles* msg = (NET_SIS_net_titles*)cmd;
	LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (NULL == pLocPlayer)
		return 0;

	if (msg->dw_role_id == pLocPlayer->getId())
	{
		if (!pLocPlayer->isExist(msg->dw_title_id))
		{
			tagTitleData data;
			data.dwTitleID = msg->dw_title_id;
			data.dwTime = msg->dw_time;
			pLocPlayer->insterTitle(data);
			pLocPlayer->autoSetCurTitle(msg->dw_title_id);
		}
	}

	return 0;
}

unsigned int World::ondeleteRoleTitle( s_net_cmd* cmd )
{
	NET_SIS_delete_title* msg = (NET_SIS_delete_title*)cmd;
	LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (NULL == pLocPlayer)
		return 0;

	if (msg->dw_role_id == pLocPlayer->getId())
	{
		pLocPlayer->removeTitle(msg->dw_title_id);
	}

	return 0;
}

unsigned int World::onOtherRoleTitleChange( s_net_cmd* cmd )
{
	NET_SIS_role_title_change_broad *msg = (NET_SIS_role_title_change_broad*)cmd;

	Role *role = RoleManager::getInstance()->findRole(msg->dw_role_id, false);
	LocalPlayer* locPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (role != NULL && locPlayer != NULL && role->getCreatureType() == CT_PLAYER &&role->getId() != locPlayer->getId())
	{
		Player* pPlayer = (Player*)role;
		pPlayer->setOtherCurTille(msg->nIndex, msg->dwTitleID);
	}

	return 0;
}

unsigned int World::onInitActiveInfo( s_net_cmd* cmd )
{
	NET_SIS_get_active_info* pMsg = (NET_SIS_get_active_info*)cmd;
	LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (NULL == pLocPlayer)
		return 0;

	tagActiveData data;
	data.m_n32_active_num = pMsg->n32_active_num;
	memcpy(data.m_n32_active_data, pMsg->n32_active_data, sizeof(data.m_n32_active_data));
	memcpy(data.m_n32_day_active_data,  pMsg->n32_day_active_data, sizeof(data.m_n32_day_active_data));
	memcpy(data.m_b_active_receive, pMsg->b_active_receive, sizeof(data.m_b_active_receive));
	pLocPlayer->setActiveData(data);
	pLocPlayer->set_fmb_active_open((pMsg->m_GvGState != EM_GVG_STATUS_NONE) && (pMsg->m_GvGState != EM_GVG_STATUS_WAITING));
	BloodFightMgr::getInstance()->set_bf_active_open(pMsg->xzddOpen == 1);
	return 0;
}

RoleHeadUi * World::getRoleHeadUi()
{
	return _roleHeadUi;
}

SelectRoleHeadUi * World::getSelectRoleHeadUi()
{
	return _selectRoleHeadUi;
}

void World::getCreatureNameByID( unsigned int typeID,std::string &name )
{
	//!查询数据库
	stCreateProto const* proto  =  RoleManager::getInstance()->getCreatureProto(typeID);
	if (proto )
	{
		name = proto->strName;
	}
	// 	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT CreatureName FROM CreatureInfo WHERE AnimaterId = ?1");
	// 	cmd->set_integer32(1 , typeID);
	// 	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	// 	while(table->retrieve_row())
	// 	{
	// 		name = table->get_text(0);
	// 	}
	// 	c_db_manager::getSingleton()->destroy_table(table);
	// 	c_db_manager::getSingleton()->end_operation(cmd);
}

void World::returnToSelectRole()
{
	CLOSE_ALL_UI();
	NET_SIC_return_role_select cmd;

	//[bing] debug 跨分流调试
	//NET_SIC_cgs_begin_change cmd;

	TCP_CLIENT->send_net_cmd(&cmd, NP_NORMAL, true);
}

unsigned int World::onReturnSelectRole( s_net_cmd *cmd )
{
	NET_SIS_return_role_select *msg = (NET_SIS_return_role_select*)cmd;
	if(msg->dw_error_code == E_Success)
	{
		NET_SIC_enum_role enumRole;
		wchar_t vStr[300] = {0};

		ServerZone::Zone zone;
		ServerZone::Server server;
		ServerListUi::getInstance()->getCurDataForGame(zone, server);

		Utf8ToUtf16(server.name.c_str(), vStr,300,0);
		enumRole.dw_world_name_crc = _crc32((const unsigned short*)vStr);
		TCP_CLIENT->send_net_cmd(&enumRole, NP_NORMAL, true);
		ReceiveRewardUiMgr::GetInstance()->clearItemBowl();
		RewardMgr::getInstance()->resetBCal();
		QuestMgr::getInstance()->clearCurQuestMessage();
		CMovie::GetInstance().clearCompletedFuBenVector();
		TradingMgr::getInstance()->Destroy();
		RoleManager::getInstance()->getLocalPlayer()->clear();
	}
	return 0;
}

unsigned int World::onSkillExpInfo( s_net_cmd *cmd )
{
	unsigned int skillPointUpper;//技能点上限	
	int dayCount;//快速领悟当日修炼次数
	WorldPacket Msg((const void*)cmd);

	Msg >> skillPointUpper;
	Msg >> dayCount;
	SkillManager::getInstance()->setDayCount(dayCount);
	SkillManager::getInstance()->setskillPointUpper(skillPointUpper);
	return 0;
}
unsigned int World::onCardDeadLineInfo(s_net_cmd *cmd)
{
	NET_SIS_card_deadline_message* cardMessage = (NET_SIS_card_deadline_message*)cmd;
	RoleManager::getInstance()->getLocalPlayer()->SetCardActiveTime(cardMessage->dw_card_active_time);
	RoleManager::getInstance()->getLocalPlayer()->SetCardDeadLine(cardMessage->dw_card_deadline);
	_roleHeadUi->updateVIPIcon(true);		
	return 0;
}
unsigned int World::onPlayerTimeMessage(s_net_cmd *cmd)
{
	NET_SIS_player_time_message* timeMessage = (NET_SIS_player_time_message*)cmd;
	LocalPlayer* lp = RoleManager::getInstance()->getLocalPlayer();
	if(lp != NULL)
	{
		lp->setLoginTime(timeMessage->dw_player_Login_time);
		lp->setJoinTime(timeMessage->dw_role_join_game);
	}
	return 0;
}
unsigned int World::onEnumRoleList( s_net_cmd *cmd )
{
	//[bing] 如果是跨分流没结束发过来的不需要客户端处理
	if( !TCP_CLIENT->bCgsIsFinish )
	{
		TCP_CLIENT->bCgsIsFinish = true;
		ClientUpdate::getInstance()->setJoinGame();

		//[bing] 解除锁屏
		NewPlayerGuider::getInstance()->clear();
		return 0;
	}

	NET_SIS_enum_role *enumRole = (NET_SIS_enum_role*)cmd;
	if(enumRole->n_num > 0)
	{
		if (!ClientUpdate::getInstance()->sceneTransationDidFinished())
		{
			return 0;
		}

		SelectRole::getInstance()->open();  //Legend
		//SelectRole::getInstance()->clearRole();
		CCDirector::sharedDirector()->replaceScene(SelectRole::getInstance()->getScene());
		//close();
		tagSimRole* pRole = (tagSimRole *)(enumRole->bySimpleInfo);
		for(int i = 0; i < enumRole->n_num; i ++)
		{
			RoleInfo roleInfo;
			roleInfo.roleNum = i;
			roleInfo.id = pRole[i].dw_role_id;
			roleInfo.level = pRole[i].byLevel;
			roleInfo.type = (eRoleTypeEnum)pRole[i].eClassType;
			roleInfo.roleCreateTime = pRole[i].dwDelGuardTime;
			if(pRole[i].eClassType == EV_Warrior)
			{
				if(pRole[i].Avatar.bySex == 0)
					roleInfo.type = RTE_WWARRIOR;
				else
					roleInfo.type = RTE_MWARRIOR;
			}
			else if(pRole[i].eClassType == EV_Mage)
			{
				if(pRole[i].Avatar.bySex == 0)
					roleInfo.type = RTE_WMASTER;
				else
					roleInfo.type = RTE_MMASTER;
			}
			else if(pRole[i].eClassType == EV_Taoist)
			{
				if(pRole[i].Avatar.bySex == 0)
					roleInfo.type = RTE_WTAOIST;
				else
					roleInfo.type = RTE_MTAOIST;
			}

			memcpy(roleInfo.name, pRole[i].szRoleName, sizeof(wchar_t) * X_SHORT_NAME);
			SelectRole::getInstance()->addRole(roleInfo);
		}
	}

	return 0;
}

unsigned int World::onXiaomiInfo(s_net_cmd* cmd)
{
	if(_roleHeadUi)
	{
		_roleHeadUi->setXiaomiShow(true);
	}

	NET_SIS_show_girl_data* msg = (NET_SIS_show_girl_data*)cmd;
	int needlv = msg->need_level;
	int needMoney = msg->money;
	int picIdx = msg->imageindex;
	std::string qqInfo = msg->sz_QQ;
	ChongZhiActivityMgr::getInstance()->setXiaomiInfo(needlv, needMoney, picIdx, qqInfo);

	return 0;
}

void World::addRemoteRoleState( NET_SIS_get_remote_role_state *state )
{
	char *data = new char[state->size];
	memcpy(data, state, state->size);

	auto iter = _remoteRoleStateList.find(state->RoleData.dwID);
	//如果有未处理的人物状态,替换掉
	if (iter != _remoteRoleStateList.end())
	{
		CC_SAFE_DELETE_ARRAY(iter->second);

		iter->second = data;

		CCLOG("replace role state!!!");
	}
	else
		_remoteRoleStateList.insert(std::make_pair(state->RoleData.dwID, data));
}

void World::addRemoteCreatureState( NET_SIS_get_remote_creature_state *state )
{
	char *data = new char[state->size];
	memcpy(data, state, state->size);
	auto iter = _remoteCreatureStateList.find(state->CreatureData.dwID);
	//如果有未处理的人物状态,替换掉
	if (iter != _remoteCreatureStateList.end())
	{
		CC_SAFE_DELETE_ARRAY(iter->second);

		iter->second = data;

		CCLOG("replace role state!!!");
	}
	else
		_remoteCreatureStateList.insert(std::make_pair(state->CreatureData.dwID, data));
}

void World::updateRemoteRoleState()
{
	//char* data = NULL;
	//for(int i = 0; i < 1; i ++)
	//{
	//CC_SAFE_DELETE_ARRAY(data);

	int nStep = 1;
	while(nStep--)
	{
		if(_remoteRoleStateList.empty())
			return;

		std::map<unsigned int, char*>::iterator it = _remoteRoleStateList.begin();
		char* data = it->second;

		GUARD_NEW_ARRAY_PTR(data);

		NET_SIS_get_remote_role_state *roleState = (NET_SIS_get_remote_role_state*)(data);
		_remoteRoleStateList.erase(it);

		//RoleManager::getInstance()->cancelRoleRequest(roleState->RoleData.dwID);
		Role *role = RoleManager::getInstance()->findRole(roleState->RoleData.dwID, false);
		if(role != NULL)
		{
			if(role->getCreatureType() != CT_Proxy)//非代理的
			{
				//CC_SAFE_DELETE_ARRAY(data);
				continue;;
			}
		}
		else
		{
			//CC_SAFE_DELETE_ARRAY(data);
			continue;
		}

		if(roleState->RoleData.dwID != RoleManager::getInstance()->getLocalPlayer()->getId())
		{
			CCProfileBegin("new Player");
			Player *player = new Player();

			player->setAsNewMapRole(role->isNewMapRole());

			player->initBloodUi();
			player->setId(roleState->RoleData.dwID);
			//if (RoleManager::getInstance()->isHideOtherRole() && IS_PLAYER(roleState->RoleData.dwID))
			//	player->destroyFsm();
			//else
			player->initFsm();
			player->setAttribute(RA_HP, roleState->RoleData.nAtt[ERRA_HP]);
			player->setAttribute(RA_MaxHP, roleState->RoleData.nAtt[ERRA_MaxHP]);
			player->setAttribute(RA_MP, roleState->RoleData.nAtt[ERRA_MP]);
			player->setAttribute(RA_MaxMP, roleState->RoleData.nAtt[ERRA_MaxMP]);
			player->setAttribute(RA_SPEED, ROLE_BASE_SPEED * (float)roleState->RoleData.nAtt[ERRA_Speed_XZ]);
			player->setAttribute(RA_ROLETYPE, roleState->RoleData.eClassType);
			player->setAttribute(RA_SEX, roleState->RoleData.Avatar.bySex);
			//unsigned int dead = roleState->RoleData.dwState & (0x1 << ES_Dead);
			if (role->isDead())
				player->setAttribute(RA_DEAD, 1);
			else
				player->setAttribute(RA_DEAD, roleState->RoleData.dwState & (0x1 << ES_Dead));
			//gx add 2013.5.31 为了显示远程玩家的状态
			player->setAttribute(RA_HITRATE, roleState->RoleData.nAtt[ERRA_HitRate]);
			player->setAttribute(RA_DODGE, roleState->RoleData.nAtt[ERRA_Dodge]);
			player->setAttribute(RA_CRIT_RATE, roleState->RoleData.nAtt[ERRA_Crit_Rate]);
			player->setAttribute(RA_UNCRIT_RATE, roleState->RoleData.nAtt[ERRA_UnCrit_Rate]);
			player->setAttribute(RA_ExAttackMin, roleState->RoleData.nAtt[ERRA_ExAttackMin]);
			player->setAttribute(RA_ExAttackMax, roleState->RoleData.nAtt[ERRA_ExAttackMax]);
			player->setAttribute(RA_InAttackMin, roleState->RoleData.nAtt[ERRA_InAttackMin]);
			player->setAttribute(RA_InAttackMax, roleState->RoleData.nAtt[ERRA_InAttackMax]);
			player->setAttribute(RA_ArmorEx, roleState->RoleData.nAtt[ERRA_ArmorEx]);
			player->setAttribute(RA_ArmorIn, roleState->RoleData.nAtt[ERRA_ArmorIn]);
			player->setAttribute(RA_ExMinDefense, roleState->RoleData.nAtt[ERRA_ExAttack]);
			player->setAttribute(RA_ExMaxDefense, roleState->RoleData.nAtt[ERRA_ExDefense]);
			player->setAttribute(RA_InMinDefense, roleState->RoleData.nAtt[ERRA_InAttack]);
			player->setAttribute(RA_InMaxDefense, roleState->RoleData.nAtt[ERRA_InDefense]);
			player->setAttribute(RA_Luck, roleState->RoleData.nAtt[ERRA_Luck]);
			player->setAttribute(RA_PKVALUE, roleState->RoleData.iPKValue);

			if((roleState->RoleData.n64RoleState & ERS_IsGrayName) != 0)
			{
				player->setAttribute(RA_IsGrayName,1);
			}
			else
			{
				player->setAttribute(RA_IsGrayName,0);
			}
			//玩家摆摊信息
			player->setAttribute(RA_Stall, roleState->RoleData.n64RoleState & ERS_Stall);
			//双修信息
			player->setAttribute(RA_ShuangXiu, roleState->RoleData.n64RoleState & ERS_ComPractice);
			//骑乘状态
			player->setAttribute(RA_RideState, roleState->RoleData.n64RoleState & ERS_Mount);
			player->setUseRideLv(roleState->RoleData.dwUseRideLv);
			player->setRideLv(roleState->RoleData.bySolidateLevel);
			//end
			//gx add 组队相关信息初始化
			player->setPlayerTeamID(roleState->RoleData.dwTeamID);
			player->setPlayerTeamLeader(roleState->RoleData.byLeader?true:false);
			//end
			player->setLevel(roleState->RoleData.nLevel);
			//行会信息
			player->setGuild(roleState->RoleData.dwGuildID);
			//VIP信息
			player->setVIPLevel(roleState->RoleData.nVIPLevel);//gx is fuck
			//红唇标记
			player->setRedZuiFlag(roleState->RoleData.dwRedZuiFlag);//gx add
			player->setRedLip(player->getRedZuiFlag()); //ssb add;
			player->setAttribute(RA_BATTLE_POINT, roleState->RoleData.dwEquipRating);
			//设置仇人
			player->setEnemy();
			// 当前称号
			for (int i = 0; i < 3; i++)
			{
				player->setCurTille(i, roleState->RoleData.u16CurActTitleID[i]);
			}
			//外观属性
			bool isShow = false;
			for(int i = 0; i < X_AVATAR_ELEMENT_NUM; i ++)
			{
				player->setDisplayAttr((ePlayerDisplayAttr)roleState->RoleData.AvatarEquip.AvatarEquip[i].byDisplayPos, roleState->RoleData.AvatarEquip.AvatarEquip[i].dw_data_id);
				if (roleState->RoleData.AvatarEquip.AvatarEquip[i].dw_data_id == 9431003 || roleState->RoleData.AvatarEquip.AvatarEquip[i].dw_data_id == 9430003)
				{
					isShow = true;
				}
			}
			//设置当前是否是时装
			//player->setFashion(roleState->RoleData.sDisplaySet.bFashionDisplay);
			player->sync_display_flag_from_display_set_data(roleState->RoleData.sDisplaySet);
			//CCProfileEnd("new Player");

			//if (/*!(RoleManager::getInstance()->isHideOtherRole()) || */!(IS_PLAYER(roleState->RoleData.dwID)))
			player->loadAnimate();
			player->restoreRideFlag();

			if (isShow)
			{
				player->updateSBKMasterEffect(isShow);
			}
			//此处更新其他玩家功法特效
			player->updateGongFaRealmEffect(roleState->RoleData.nAtt[ERRA_GongFa]);


			player->addToMap();
			//CCProfileEnd("new Player");

			if(role == NULL)
			{
				CC_ASSERT("incredible!!");
				player->setPosition(ccp(roleState->RoleData.fPos[0], roleState->RoleData.fPos[2]));
				player->setDirection(ccp(roleState->RoleData.fFaceTo[0], roleState->RoleData.fFaceTo[2]));
			}
			else
			{
				player->setPosition(ccp(roleState->RoleData.fPos[0], roleState->RoleData.fPos[2]));
				player->setDirection(ccp(roleState->RoleData.fFaceTo[0], roleState->RoleData.fFaceTo[2]));
				if(ccpDistance(ccp(roleState->RoleData.destfPos[0], roleState->RoleData.destfPos[2]), ccp(roleState->RoleData.fPos[0], roleState->RoleData.fPos[2])) > 1.0f)
				{//如果正在移动，则强制切换状态;
					player->setAttribute(RA_SPEED, role->getAttribute(RA_SPEED));
					player->update(0.f);
					CCPoint destPos = ccp(roleState->RoleData.destfPos[0], roleState->RoleData.destfPos[2]);
					MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, player, M_RUNTO, &destPos);
				}
				else
				{
					player->setPosition(ccp(roleState->RoleData.fPos[0], roleState->RoleData.fPos[2]));
					player->setDirection(ccp(roleState->RoleData.fFaceTo[0], roleState->RoleData.fFaceTo[2]));
				}
				RoleManager::getInstance()->releaseProxy(roleState->RoleData.dwID);
			}
			//CCProfileEnd("new Player");

			if(player != NULL)
			{
				RoleManager::getInstance()->AddRole(player);
				if(!player->getAttribute(RA_DEAD))
					Phyx::getInstance()->addPhyxObject(player->getId() , player->getPosition().x , player->getPosition().y);

				//CCProfileEnd("new Player");
				//buff
				for(int i = 0; i < roleState->RoleData.nBuffNum; i ++)
				{
					int bufId = roleState->RoleData.Buff[i].dwBuffTypeID;
					int warp_times = roleState->RoleData.Buff[i].nWarpTimes;
					if(player != NULL)
					{
						player->addPLBuffer(bufId, roleState->RoleData.dwID,warp_times);//存储buff信息
						if(bufId / 100 != 10304 
							&& !(bufId / 100 == SKILLMOFADUNTYPEID && player->getAttribute(RA_RideState) && (player->getRoleType() == RT_WMAGE || player->getRoleType() == RT_MMAGE)))//如果是魔防，则不在进入视野的时候显示
							//魔法盾骑马时不显示
							SkillAnimManager::getInstance()->useBuffer(bufId, roleState->RoleData.dwID, roleState->RoleData.dwID);
					}
				}
				//CCProfileEnd("new Player");
				//播放双修动画
				ShuangXiuMgr::getInstance()->runAnimation(player->getId(), roleState->RoleData.dwCompracticePartner);
			}

			//更新附近好友、行会成员的等级、更新组队和邀请界面
			SocialMgr::getInstance()->updateRoleLevel(roleState->RoleData.dwID,roleState->RoleData.nLevel);
			MasterPrenticeMgr::getInstance()->updateRoleLevel(roleState->RoleData.dwID,roleState->RoleData.nLevel);
			GuildMgr::getInstance()->updateRoleLevel(roleState->RoleData.dwID,roleState->RoleData.nLevel,roleState->RoleData.dwEquipRating);

			//CCProfileEnd("new Player");
			TeamUiPanel* teamUi = (TeamUiPanel*)getUiNodeByTag<TeamUiPanel>(WCT_TeamUi);
			if (teamUi)
			{
				if (TeamMgr::getInstance()->is_teammate(roleState->RoleData.dwID))
				{
					teamUi->refreshTeammate();
				}
				//这个太费效率
				// 				CCNode* node  = teamUi->getParent()->getChildByTag(message_id_crc("InviteListView"));
				// 				if (node)
				// 				{
				// 					InviteListView* view = dynamic_cast<InviteListView*>(node);
				// 					if (view)
				// 					{
				// 						view->refreshPage(true);
				// 					}
				// 				}
			}

			//获取远程玩家的名字
			std::string name;
			if(NameMgr2::getInstance()->queryName(roleState->RoleData.dwID , name))
			{
				player->setName(name.c_str());

				std::string spouseName;
				if(NameMgr2::getInstance()->queryName(roleState->RoleData.dw_spouseID,spouseName))
				{
					player->setSpouseName(spouseName.c_str(),player->getAttribute(RA_SEX));
				}
				RoleManager::getInstance()->showRoleHeadHpUiByCondition(player);
				RoleManager::getInstance()->showRoleNameTypeByCondition(player);
			}
			CCProfileEnd("new Player");
		}
		//}

		//CC_SAFE_DELETE_ARRAY(data);
	}
}

void World::updateRemoteCreatureState()
{
	char *data = NULL;
	for(int i = 0; i < 1; i ++)
	{
		//CC_SAFE_DELETE_ARRAY(data);

		if(_remoteCreatureStateList.empty())
			break;

		std::map<unsigned int, char*>::iterator it = _remoteCreatureStateList.begin();
		data =  it->second;

		GUARD_NEW_ARRAY_PTR(data);
		NET_SIS_get_remote_creature_state *roleState = (NET_SIS_get_remote_creature_state*)(data);
		_remoteCreatureStateList.erase(it);

		if(roleState->CreatureData.dwState & (0x1 << ES_Dead))
		{
			//CC_SAFE_DELETE_ARRAY(data);
			continue;//已经死亡的不再添加
		}

		//动态的怪物死亡是要删除的，不用在同步状态
		RoleManager* roleMgr =RoleManager::getInstance();
		if (roleState->CreatureData.eCreType == ECT_Monster
			&& roleMgr->isInFadeList(roleState->CreatureData.dwID))
		{
			//CC_SAFE_DELETE_ARRAY(data);
			continue;//已经死亡的不再添加
		}

		//if(roleState->CreatureData.eCreType == ECT_Monster)
		//	return 0;

		//RoleManager::getInstance()->cancelRoleRequest(roleState->CreatureData.dwID);
		Role *oldRole = RoleManager::getInstance()->findRole(roleState->CreatureData.dwID, false);
		if(oldRole != NULL)
		{
			if(oldRole->getCreatureType() != CT_Proxy){/*CC_SAFE_DELETE_ARRAY(data);*/continue;}
		}
		else
		{
			/*CC_SAFE_DELETE_ARRAY(data);*/
			continue;
		}

		//LocalPlayer* localPlayer = RoleManager::getInstance()->getLocalPlayer();
		CC_ASSERT(roleState->CreatureData.dwID != RoleManager::getInstance()->getLocalPlayer()->getId());
		Role *role = NULL;
		bool isNew = true;
		if(roleState->CreatureData.eCreType == ECT_Monster)
		{
			role = RoleManager::getInstance()->getMonstFromCache(roleState->CreatureData.dwID);
			if(role == NULL)
			{
				Monster *monster = new Monster();
				monster->setAsNewMapRole(oldRole->isNewMapRole());

				monster->setRealDelete(roleState->CreatureData.bDynamic==1);
				//monster->setRealDelete(true);
				role = monster;
				//!在此加入typeid
				role->setTypeID(roleState->CreatureData.dw_data_id);
				role->setBossHeighten( roleState->CreatureData.dw_data_id,false); 

			}
			else
			{
				isNew = false;
				role->setVisiable(true);
			}
			//添加状态
			for(int i = 0; i < roleState->CreatureData.nBuffNum; i ++)
			{
				const tagBuffMsgInfo &buffInfo = roleState->CreatureData.Buff[i];
				if (buffInfo.dwBuffTypeID / 100 == SKILLQUNDUSHU || buffInfo.dwBuffTypeID / 100 == SKILLCUIDUSHU)
				{
					role->setColorPoisoning(39,255,39); //中毒效果
					break;
				}
				//break;
			}
		}
		else if(roleState->CreatureData.eCreType == ECT_NPC)
		{
			role = new NPC();
			role->setAsNewMapRole(oldRole->isNewMapRole());
			//!在此加入typeid
			role->setTypeID(roleState->CreatureData.dw_data_id);
			role->setVisiable(true);
		}

		if(role != NULL)
		{
			role->setId(roleState->CreatureData.dwID);
			role->setTypeID(roleState->CreatureData.dw_data_id);
			//判断是否是自己的宠物,必须要在addToMap之前判断
			RoleManager* roleMgr = RoleManager::getInstance();
			if (roleMgr && roleMgr->isPet(role->getTypeID()))
			{
				LocalPlayer* player = roleMgr->getLocalPlayer();
				if (player)
				{
					if (player->isMyPet(role->getId()))
					{
						role->setRoleTag(ELN_LPPet);
					}
					else
					{
						role->setRoleTag(ELN_PlayerPet);
					}
				}
			}
			if(isNew)
			{
				if (RoleManager::getInstance()->isCanShowOtherPlayer(role))
					role->initFsm();
				else
					role->destroyFsm();
				role->addToMap();
			}
			role->initBloodUi();
			role->setAttribute(RA_HP, roleState->CreatureData.nAtt[ERRA_HP]);
			role->setAttribute(RA_MaxHP, roleState->CreatureData.nAtt[ERRA_MaxHP]);
			role->setAttribute(RA_MP, roleState->CreatureData.nAtt[ERRA_MP]);
			role->setAttribute(RA_MaxMP, roleState->CreatureData.nAtt[ERRA_MaxMP]);
			role->setAttribute(RA_SPEED, ROLE_BASE_SPEED * (float)roleState->CreatureData.nAtt[ERRA_Speed_XZ]);
			role->setAttribute(RA_DEAD, roleState->CreatureData.dwState & (0x1 << ES_Dead));
			role->setLevel(roleState->CreatureData.nLevel);
			role->set_owner_id(roleState->CreatureData.dwTargetID);

			if (RoleManager::getInstance()->isCanShowOtherPlayer(role) && isNew)
				role->loadAnimate(roleState->CreatureData.dw_data_id);

			if(role->getCreatureType() == CT_MONSTER)
			{
				//RoleManager::CreatureInfo creatureInfo = RoleManager::getInstance()->getCreatureInfo(role->getTypeID());
				stCreateProto const* proto = RoleManager::getInstance()->getCreatureProto(role->getTypeID());
				CC_ASSERT(proto);
				if (role->getAttribute(RA_HP) < role->getAttribute(RA_MaxHP) * proto->fRatio && role->getBossHeighten(role->getTypeID()) == false)
				{
					if (proto->nBossType == 1)
					{
						role->runHeightenEffect(proto->strEffectName,RZN_WEAPONFRONT,Role::NT_HeighterEffect);
						if (proto->fBodyRatio > 0)
						{
							Monster *pMonster = static_cast<Monster*>(role);
							if (pMonster != NULL)
								pMonster->setScale(proto->fBodyRatio);

							role->runCreatureSpreakPaoPao(proto->nMsgID,9.0f);
						}

						role->setBossHeighten(role->getTypeID(),true);
					}
				}
				else
				{
					static_cast<Monster*>(role)->setScale(roleState->CreatureData.nAtt[ERRA_Shape]);
					role->stopHeightenEffect(Role::NT_HeighterEffect);
					role->setBossHeighten(role->getTypeID(),false);
				}
				role->setCreatureNameColor(roleState->CreatureData.attackType);
			}
			if(oldRole == NULL)
			{
				//testOf << role->getId() << "	create role, can't find proxy.  pos = (" << roleState->CreatureData.fPos[0] << ", " <<roleState->CreatureData.fPos[2] << ")" << std::endl;
				role->setPosition(ccp(roleState->CreatureData.fPos[0], roleState->CreatureData.fPos[2]));
				role->setDirection(ccp(roleState->CreatureData.fFaceTo[0], roleState->CreatureData.fFaceTo[2]));
			}
			else
			{
				//testOf << role->getId() << "	create role, replace proxy.		";
				role->setPosition(oldRole->getPosition());
				role->setDirection(oldRole->getDirection());
				if(oldRole->getMovePositionState() && ccpDistance(oldRole->getPosition(), ccp(roleState->CreatureData.fPos[0], roleState->CreatureData.fPos[2])) > 1.0f)
				{//如果正在移动，则强制切换状态
					role->setAttribute(RA_SPEED, oldRole->getAttribute(RA_SPEED));
					role->update(0.f);
					CCPoint destPos = oldRole->getDestMovePoint();
					//testOf << "moving	destPos = (" << destPos.x << ", " << destPos.y << ")" << std::endl;
					//role->setMovePositionState(true);
					//role->setDestMovePoint(destPos);
					MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, role, M_RUNTO, &destPos);
				}
				else
				{
					//testOf << "stop	Pos = (" << roleState->CreatureData.fPos[0] << ", " << roleState->CreatureData.fPos[2] << ")" << std::endl;
					role->setPosition(ccp(roleState->CreatureData.fPos[0], roleState->CreatureData.fPos[2]));
					role->setDirection(ccp(roleState->CreatureData.fFaceTo[0], roleState->CreatureData.fFaceTo[2]));
				}
				RoleManager::getInstance()->releaseProxy(roleState->CreatureData.dwID);
			}
			//testOf.flush();
			InstanceMgr::getInstance()->changMonsterName(role);
			if (role->getCreatureType() == CT_NPC)
				RoleManager::getInstance()->AddNpc(role);
			else
			{
				RoleManager::getInstance()->showRoleHeadHpUiByCondition(role);
				RoleManager::getInstance()->AddRole(role);
			}


		}
	}

	//CC_SAFE_DELETE_ARRAY(data);
}

void World::clearRemoteList()
{
	for(std::map<unsigned int, char*>::iterator iter = _remoteRoleStateList.begin(); iter != _remoteRoleStateList.end(); ++iter)
	{
		char *data = iter->second;
		delete []data;
	}
	_remoteRoleStateList.clear();

	for(std::map<unsigned int, char*>::iterator iter = _remoteCreatureStateList.begin(); iter != _remoteCreatureStateList.end(); ++iter)
	{
		char *data = iter->second;
		delete []data;
	}
	_remoteCreatureStateList.clear();
}

//角色更名
void World::changeRoleName( std::string role_name )
{
	if (role_name.empty())
		return;

	unsigned int ret = FilterMgr::getInstance()->IsNameInNameFilterFile(role_name);
	if (ret != 0)
	{
		if (E_Filter_Name_InFilterFile == ret)
		{
			std::string name;
			c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT msg FROM RoleError WHERE id = ?1");
			cmd->set_integer32(1 , E_CreateRole_NameInvalid);
			c_sql_table* table = c_db_manager::getSingleton()->create_table();
			while(table->retrieve_row())
			{
				name = table->get_text(0);
			}
			c_db_manager::getSingleton()->destroy_table(table);
			c_db_manager::getSingleton()->end_operation(cmd);

			ToolTip::getInstance()->push(name);
		}
		return;
	}
	wchar_t name[512];
	memset(name, 0, sizeof(wchar_t) * 512);
	Utf8ToUtf16(role_name.c_str(), name, 512, 0);
	//根据name，进行长度，特殊字符检查
	const int nameLen = 6;
	ret = FilterMgr::getInstance()->IsNameLegal(name,nameLen);
	if (0 != ret)
	{
		int index(0);
		if (E_Filter_Name_Null == ret)
		{
			index = -353;
		}
		else if (E_Filter_Name_TooLong == ret)
		{
			index = -352;
		}
		else
		{
			index = 16;
		}
		std::string str;
		c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT msg FROM RoleError WHERE id = ?1");
		cmd->set_integer32(1 , index);
		c_sql_table* table = c_db_manager::getSingleton()->create_table();
		while(table->retrieve_row())
		{
			str = table->get_text(0);
		}
		c_db_manager::getSingleton()->destroy_table(table);
		c_db_manager::getSingleton()->end_operation(cmd);
		/*MessageBoxUi *ui = MessageBoxUi::createWithOneBtn(TEXT_UTF8_TISHI, str.c_str(), TEXT_UTF8_QUEDING);
		getScene()->addChild(ui, WZ_MESSAGEBOX);*/
		ToolTip::getInstance()->push(str);
		return;
	}

	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return;
	NET_SIC_change_role_name send;
	memcpy(send.sz_new_role_name, name, sizeof(wchar_t) * X_SHORT_NAME);
	send.dw_role_id = ploc->getId();
	TCP_CLIENT->send_net_cmd(&send , NP_IDLE , false);
}

unsigned int World::onChangeRoleName( s_net_cmd *cmd )
{
	NET_SIS_change_role_name* msg = (NET_SIS_change_role_name*)cmd;
	if (0 != msg->dw_error_code)
	{
		//基本不用提示任何
		if (E_ChangeRoleName_NameExist == msg->dw_error_code)
		{
			std::string str;
			c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT msg FROM RoleError WHERE id = ?1");
			cmd->set_integer32(1 , 15);
			c_sql_table* table = c_db_manager::getSingleton()->create_table();
			while(table->retrieve_row())
			{
				str = table->get_text(0);
			}
			c_db_manager::getSingleton()->destroy_table(table);
			c_db_manager::getSingleton()->end_operation(cmd);

			ToolTip::getInstance()->push(str);
		}
	}
	else
	{
		//改名成功，需要修改本地与role_id对应的昵称
		LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
		if (!localPlayer)
			return 0;
		if(msg->dw_role_id == localPlayer->getId())
		{
			InputSerialUi::getInstace()->close();//先关闭UI
			CLOSE_UI(WCT_ItemAutoUseDaojuTip);//关闭快速使用
			int nState = GET_UI(HookSetUi, WCT_HookSetUi)->getGameSetData().isShowRoleName; //是否显示本地玩家的姓名
			localPlayer->setName(msg->sz_new_role_name,nState);//不显示本地玩家名字
			_roleHeadUi->setRoleName(msg->sz_new_role_name);
			char temp[512];
			memset(temp, 0, sizeof(char) * 512);
			Utf16ToUtf8(msg->sz_new_role_name, temp, 512, 0);
			std::string newName;
			newName.assign(temp);
			NameMgr2::getInstance()->updateRoleName(msg->dw_role_id,newName);
		}
	}
	return 0;
}

unsigned int World::onGetLeaveExpInfo( s_net_cmd *cmd )
{
	NET_SIS_leave_exp_clueon* msg = (NET_SIS_leave_exp_clueon*)cmd;
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return 0;

	ploc->SetOfflineStartTime(msg->startTime);
	ploc->SetOfflineCoin(msg->nOfflineCoin);
	ploc->SetOffLineMaxExp(msg->nOfflineMaxExp);
	if(0 < msg->nLeaveTime)
		setBallImage();

	//ploc->SetOfflineLeaveTime(msg->dwLeaveTime);

	ploc->SetLeaveExp(msg->nOfflineExp);
	ploc->SetOfflineTime(msg->nLeaveTime);
	ploc->SetOfflineFlower(msg->nOfflineFlowerExp);
	ploc->SetOffLineDouble(msg->nOfflineDoubleExp);
	ploc->SetOffLineRedEnvelope(msg->nByRedEnvelope);
	ploc->SetAddOfflineSelf(msg->nAddOfflineSelf);
	ploc->SetOfflineSelf(msg->nOfflineSelf);

	if( _canOpenOffLine && msg->bOffLineIsOpenUI)
	{
		getMiniMapUi()->scheduleOnce(schedule_selector(World::openOfflineExp),2.f);
		_canOpenOffLine = true;
	} 

	if(_miniMapUi)
		_miniMapUi->setOffPercent(ploc);

	return 0;
}

void  World::openOfflineExp(float dt)
{
	GET_UI(FindBackUI,WCT_FindBackUi)->setCanOpenUi(true);
	OPEN_UI(WCT_OffLineExpUi);
	//  CLOSE_ALL_UI();
}
unsigned int World::onPickupLeaveExp( s_net_cmd *cmd )
{
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if (!ploc)
		return 0;

	NET_SIS_pickup_leave_exp* msg = (NET_SIS_pickup_leave_exp*)cmd;
	if (msg->dwError != 0)
	{
		if (E_Hang_Yuanbao_No_Enough == msg->dwError)//元宝不足
		{
			RechargeNewUiMgr::GetInstance()->openRechargeNewUi();
		}
	}
	else
	{
		ploc->SetLeaveExp(0);
		ploc->SetOfflineTime(0);
		ploc->SetOfflineFlower(0);
		ploc->SetOffLineDouble(0);
		ploc->SetOffLineRedEnvelope(0);
		ploc->SetAddOfflineSelf(0);
		ploc->SetOfflineSelf(0);
		ploc->SetOfflineDice1(msg->nDice1);
		ploc->SetOfflineDice2(msg->nDice2);
		ploc->SetOfflineMulriple(msg->fMulriple);
		ploc->SetOfflineStartTime(msg->dwStartTime);
		ploc->SetTempTotalExp(msg->nExp);
		OffLineExpUiLayer * ui = getUiNodeByTag<OffLineExpUiLayer>(WCT_OffLineExpUi);
		if(ui)
		{
			if(2 == msg->n16Type)
			{
				ui->PlayGambleAn1();
				ui->PlayGambleAn2();
			}
			else if(1 == msg->n16Type)
			{
				ui->scheduleOnce(schedule_selector(OffLineExpUiLayer::ShowFreeAwardUI),0.5f);
			}

			ui->updateData();
		}

		MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
		if(pUI)
			pUI->setOffPercent(ploc);			
	}
	return 0;
}

unsigned int World::onGetDailyReward( s_net_cmd *cmd )
{
	NET_SIS_get_daily_online_reward* msg = (NET_SIS_get_daily_online_reward*) cmd;
	OPEN_UI(WCT_LoginGiftUi);
	GET_UI(LoginGiftUi,WCT_LoginGiftUi)->setLoginGift(msg->dwRewardID);
	GET_UI(LoginGiftUi,WCT_LoginGiftUi)->setGiftNum(msg->nRewardNum);
	GET_UI(LoginGiftUi,WCT_LoginGiftUi)->updateData();
	return 0;
}


void World::showFlashSellShopEffBtn(bool isShow)
{
	if (isShow)
	{
		if ( NULL == _pFlashShopBtn)
		{
			CCSize size = CCDirector::sharedDirector()->getWinSize();
			_pFlashShopBtn = createControlButton("","smallui_first","smallui_first","smallui_first");	
			_pFlashShopBtn->setAnchorPoint(ccp(0.5f, 0.5f));
			_pFlashShopBtn->setZoomOnTouchDown(true);
			_pFlashShopBtn->setPosition(ccp(size.width - 170.0f,size.height * 0.7-160.0f));
			_pFlashShopBtn->setTouchPriority(2);
			_pFlashShopBtn->addTargetWithActionForControlEvents(PayClickCallBack::getInstance(), SEL_CCControlHandler(&PayClickCallBack::onFlashSellShopBtnPressed), CCControlEventTouchUpInside);
			_pFlashShopBtn->setTouchEnabled(true);
			_pFlashShopBtn->setVisible(false);
			_scene->addChild(_pFlashShopBtn, WZ_MINIMAPUI); 

			CCLabelBMFont* t_pTimeLab = CCLabelBMFont::create();
			t_pTimeLab->setFntFile("Art/Scene/fontNum_12_0.fnt");
			t_pTimeLab->setTag(101);
			_pFlashShopBtn->addChild(t_pTimeLab,1);
			t_pTimeLab->setPosition(ccp(48,-4));
			t_pTimeLab->setScale(0.9);
			CCString* tmStr = CCString::createWithFormat("%02d:%02d:%02d", 0, 0,0);
			t_pTimeLab->setString(tmStr->getCString());
		}
		E_FLASHSELL_TYPE ptype = FlashSellShopMgr::getInstance()->getCurrentShowType();
		if (E_FLASHSELL_NULL == ptype)
			return;

		string str;
		switch(ptype)
		{
		case E_FLASHSELL_WING:
			{	
				str = "E1_234";
				break;
			}
		}
		_pFlashShopBtn->removeChildByTag(102);
		CCSprite* t_fSPEffect = CCSprite::create();
		t_fSPEffect->setPosition(ccp(50.f,40.f));
		t_fSPEffect->setTag(102);
		_pFlashShopBtn->addChild(t_fSPEffect);

		AnimationCache::AnimateList anims;
		AnimationCache::createDefList(1, anims);
		AnimationCache::getInstance()->getSinEffect(0,str.c_str(), anims);					//diyici
		BSAnimate *animste = anims[0];
		t_fSPEffect->runAction(CCRepeatForever::create(animste));
		_pFlashShopBtn->setTouchEnabled(true);
		_pFlashShopBtn->setVisible(false);
	}
	else
	{
		if (_pFlashShopBtn)
		{
			_pFlashShopBtn->setVisible(false);
			_pFlashShopBtn->setTouchEnabled(false);
			_pFlashShopBtn->removeChildByTag(102);
			_pFlashShopBtn->removeChildByTag(101);
			_isShowFlashBtn = false;
		}

	}

}


void World::runAnimation()
{
	if (_payIcon == NULL)
		return;

	if (_payEffect != NULL)
		return;

	_payEffect = CCSprite::create();
	_payEffect->setPosition(ccp(50.f,40.f));
	_payIcon->addChild(_payEffect);

	AnimationCache::AnimateList anims;
	AnimationCache::createDefList(1, anims);
	AnimationCache::getInstance()->getSinEffect(0,"E1_94", anims);					//diyici
	BSAnimate *animste = anims[0];

	_payEffect->runAction(CCRepeatForever::create(animste));
}

void World::stopAnimation()
{
	if (_payIcon != NULL && _payEffect != NULL)
	{
		_payEffect->stopAllActions();
		_payEffect->removeFromParent();
		_payEffect = NULL;
	}
}

void World::onTog( INT64 exp, bool hasDelayTime /*= false*/ )
{
	//旧的显示效果
	std::string str;
	if (exp != 0)
	{
		std::ostringstream ostr1;
		ostr1<<GET_STR(2222)<< exp;
		str = ostr1.str();
	}

	CCSize size = CCDirector::sharedDirector()->getWinSize();


	CCLabelBMFont *label = CCLabelBMFont::create();
	label->setFntFile("Art/Scene/fontNum3.fnt");
	label->setPosition(ccp(size.width * 0.5, size.height * 0.6));
	label->setString(str.c_str());
	label->setColor(ccc3(255, 243, 48));
	label->setAnchorPoint(ccp(0.5f, 0.5f));
	label->setAlignment(kCCTextAlignmentCenter);
	_scene->addChild(label,200);

	//CCJumpTo *jumpTo = CCJumpTo::create(0.8f, ccp(255.f, 300.f), 110, 1);
	//CCScaleTo *scaleTo = CCScaleTo::create(0.1f, 1.5f, 1.5f);
	//CCFadeOut *fadeOut = CCFadeOut::create(0.9f);
	//CCSpawn *spawn = CCSpawn::createWithTwoActions(jumpTo, scaleTo);
	//CCSequence *s = CCSequence::createWithTwoActions(scaleTo, fadeOut);
	//CCSequence *action = CCSequence::createWithTwoActions(s, CCCallFuncN::create(HideAnimationCallback::getInstance(), SEL_CallFuncN(&HideAnimationCallback::animationCallback)));
	//label->runAction(action);

	// 新的显示效果
	//std::string str;
	//if (exp != 0)
	//{
	//	std::ostringstream ostr1;
	//	ostr1<< "\xE7\xBB\x8F\xE9\xAA\x8C\x20\x2B"<< exp;			// 经验 +exp
	//	str = ostr1.str();
	//}

	//eHpChangeType ChangeAttType = HCT_Other_Exp;
	//HpChangeAttData ChangeAttData = _hpChangeAttData[ChangeAttType];

	//CCSize size = CCDirector::sharedDirector()->getWinSize();
	////CCPoint pos = ccp( size.width * 0.5 , size.height * 0.6 );
	//CCPoint pos = RoleManager::getInstance()->getLocalPlayer()->getPosition();
	//CCLabelBMFont *label = CCLabelBMFont::create();
	//label->setFntFile("Art/Scene/font_exp.fnt");
	////label->setFntFile("Art/Scene/fontNum3.fnt");
	//label->setString(str.c_str());
	//label->setColor(ccc3(255, 243, 48));
	//label->setAnchorPoint(ccp(0.5f, 0.5f));
	//label->setAlignment(kCCTextAlignmentCenter);
	//label->setZOrder(MZ_ROLE_HP_EFFECT);
	//label->setPosition(ccpAdd(ccp( ChangeAttData.StartPosX, ChangeAttData.StartPosY ), pos));
	//label->setScale(ChangeAttData.InitZoom);
	//MapManager::getInstance()->getMap()->addChild(label,MZ_ROLE_HP_EFFECT);

	//CCJumpTo *jumpTo = CCJumpTo::create(0.8f, ccp(255.f, 300.f), 110, 1);
	CCScaleTo *scaleTo = CCScaleTo::create(0.1f, 1.5f, 1.5f);
	CCFadeOut *fadeOut = CCFadeOut::create(0.9f);
	//CCSpawn *spawn = CCSpawn::createWithTwoActions(jumpTo, scaleTo);
	CCSequence *s;
	if(hasDelayTime){
		CCDelayTime* delayTime = CCDelayTime::create(2.f);
		s = CCSequence::create(delayTime, scaleTo, fadeOut, NULL);
	}else{
		s = CCSequence::createWithTwoActions(scaleTo, fadeOut);
	}
	CCSequence *action = CCSequence::createWithTwoActions(s, CCCallFuncN::create(HideAnimationCallback::getInstance(), SEL_CallFuncN(&HideAnimationCallback::animationCallback)));
	label->runAction(action);
	//CCJumpTo * moveAction = CCJumpTo::create( ChangeAttData.ThenMoveTime, 
	//	ccpAdd(ccp(ChangeAttData.EndPosX , ChangeAttData.EndPosY ),pos) , ChangeAttData.JumpHeight,1);

	////CCMoveTo *moveAction = CCMoveTo::create(ChangeAttData.ThenMoveTime, ccpAdd(ccp(ChangeAttData.EndPosX, ChangeAttData.EndPosY), pos));
	//CCFadeOut *outAction = CCFadeOut::create( ChangeAttData.DisappearTime );
	//CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
	//CCSequence* action;
	//if (ChangeAttData.InitMidTime != 0 && ChangeAttData.MidEndTime != 0)
	//{
	//	CCScaleTo *scale1 = CCScaleTo::create( ChangeAttData.InitMidTime , ChangeAttData.MidZoom );
	//	CCScaleTo *scale2 = CCScaleTo::create( ChangeAttData.MidEndTime , ChangeAttData.EndZoom );
	//	CCSequence* seq = CCSequence::create(scale1,scale2,spawn,NULL);
	//	action = CCSequence::createWithTwoActions(seq, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	//}
	//else
	//{
	//	action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	//}
	//label->runAction(action);
	//label->setVisible(true);
	//label->setOpacity(255);

}

void World::onShowTalentPointChange( int nChange )
{
	std::stringstream ss;
	ss << STRING_TABLE["gain_skill_point"] << nChange ;		// 获得技能点
	std::string str = ss.str();

	eHpChangeType ChangeAttType = HCT_Talent_Point;
	HpChangeAttData ChangeAttData = _hpChangeAttData[ChangeAttType];

	//CCSize size = CCDirector::sharedDirector()->getWinSize();
	//CCPoint pos = ccp( size.width * 0.5 , size.height * 0.6 );
	CCPoint pos = RoleManager::getInstance()->getLocalPlayer()->getPosition();
	CCLabelBMFont *label = CCLabelBMFont::create();
	label->setFntFile("Art/Scene/fontNum_11_0.fnt");
	label->setString(str.c_str());
	label->setColor(ccc3(255, 243, 48));
	label->setAnchorPoint(ccp(0.5f, 0.5f));
	label->setAlignment(kCCTextAlignmentCenter);
	label->setZOrder(MZ_ROLE_HP_EFFECT);
	label->setPosition(ccpAdd(ccp( ChangeAttData.StartPosX, ChangeAttData.StartPosY ), pos));
	label->setScale(ChangeAttData.InitZoom);
	MapManager::getInstance()->getMap()->addChild(label,MZ_ROLE_HP_EFFECT);

	CCJumpTo * moveAction = CCJumpTo::create( ChangeAttData.ThenMoveTime, 
		ccpAdd(ccp(ChangeAttData.EndPosX , ChangeAttData.EndPosY ),pos) , ChangeAttData.JumpHeight,1);

	//CCMoveTo *moveAction = CCMoveTo::create(ChangeAttData.ThenMoveTime, ccpAdd(ccp(ChangeAttData.EndPosX, ChangeAttData.EndPosY), pos));
	CCFadeOut *outAction = CCFadeOut::create( ChangeAttData.DisappearTime );
	CCSpawn *spawn = CCSpawn::createWithTwoActions(moveAction, outAction);
	CCSequence* action;
	if (ChangeAttData.InitMidTime != 0 && ChangeAttData.MidEndTime != 0)
	{
		CCScaleTo *scale1 = CCScaleTo::create( ChangeAttData.InitMidTime , ChangeAttData.MidZoom );
		CCScaleTo *scale2 = CCScaleTo::create( ChangeAttData.MidEndTime , ChangeAttData.EndZoom );
		CCSequence* seq = CCSequence::create(scale1,scale2,spawn,NULL);
		action = CCSequence::createWithTwoActions(seq, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	}
	else
	{
		action = CCSequence::createWithTwoActions(spawn, CCCallFuncN::create(WorldFuncCallback::getInstance(), SEL_CallFuncN(&WorldFuncCallback::hpEffectCallback)));
	}
	label->runAction(action);
	label->setVisible(true);
	label->setOpacity(255);


}

// void World::runServerAnimation()
// {
// 	if (_serverEffect == NULL)
// 	{
// 		//AnimationCache::AnimateList anims;
// 		//AnimationCache::createDefList(1, anims);
// 		//AnimationCache::getInstance()->getSinEffect(0,"kaifuhuodong", anims);
// 		//BSAnimate *animste = anims[0];
// 		//serverEffect = CCSprite::create();	//[bing] serverEffect被cocos2dx释放了
// 		//_serverBtn = _miniMapUi->getServerActivityBtn();
// 		//serverEffect->setPosition(ccp(35.0f,15.0f));
// 		//serverEffect->setAnchorPoint(ccp(0.0f,1.0f));
// 		//_serverBtn->addChild(serverEffect,-1,WZ_MINIMAPUI);
// 		//serverEffect->runAction(CCRepeatForever::create(animste));
// 	}
// }

// void World::stopServerAnimation()
// {
// 	if (_serverEffect != NULL)
// 	{
// 		_serverEffect->stopAllActions();
// 		_serverEffect->removeFromParent();
// 		_serverEffect = NULL;
// 	}
// }

void World::setSignBtnAction()
{
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	pUI->setSignShowInfo(false);
	CCControlButton* pMiniMapLayer = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(13));
	CCControlButton* _signBtn=dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(37));
	CCPoint targetPos = pMiniMapLayer->getPosition();
	CCFiniteTimeAction *moveAc = CCMoveTo::create(0.5f, targetPos);
	CCFiniteTimeAction *scaleAc = CCScaleTo::create(0.5f, 0.0f);
	CCFiniteTimeAction *twoAcs = CCSpawn::create(moveAc,scaleAc,NULL);
	CCFiniteTimeAction *acCallBack = CCCallFunc::create(this, callfunc_selector(World::onSignBack));
	CCFiniteTimeAction *allAcs = CCSequence::create(twoAcs, acCallBack, NULL);
	pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(12)->getChildByTag(38)->setVisible(true);
	pUI->sortBtnPos1();
	_signBtn->runAction(allAcs);
}
void World::setZaixianBtnAction()
{
	/*MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	CCControlButton* zaixianBtn =dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(8));	
	CCControlButton * pMiniLayer = dynamic_cast<CCControlButton * >(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(13));
	CCPoint p = pMiniLayer->getPosition();
	CCMoveTo * moveTo = CCMoveTo::create(0.5f,p);
	CCScaleTo * scaleTo = CCScaleTo::create(0.5f,0.0f);
	CCSpawn * spawn = CCSpawn::create(moveTo,scaleTo,NULL);
	CCCallFunc * callFunc = CCCallFunc::create(this,callfunc_selector(World::onZaixianBack));
	CCSequence * sequnce = CCSequence::create(spawn,callFunc,NULL);*/

	//游戏内的在线图标同意改为不显示
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(12)->getChildByTag(7)->setVisible(false);
	CCControlButton* zaixianBtn =dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(8));
	if(zaixianBtn){
		zaixianBtn->setVisible(false);
	}
	//原活按钮内在线下方时间，不在显示 modify by lpf 2015-09-07
	//pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(12)->getChildByTag(11)->setVisible(true);
	//找到要执行的node

	//CCNode* timeShow =dynamic_cast<CCNode*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(11));

	//CCScaleTo * scaleTo1 = CCScaleTo::create(0.5f,0.0f);
	//CCMoveTo * moveTo1 = CCMoveTo::create(0.5f,p);
	//CCSpawn * spawn1 = CCSpawn::create(moveTo1,scaleTo1,NULL);
	//timeShow->runAction(spawn1);
	/*zaixianBtn->runAction(sequnce);*/
}
//陆晓龙 2015-6-26 
bool World::btnSetLeft(std::vector<int>& souseObj, int destObj, bool isMove)
{
	//获取父节点
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	if (!pUI)
		return false;
	CCNode*  fatherNode = dynamic_cast<CCNode*>(pUI->getChildByTag(0)->getChildByTag(1));
	if (!fatherNode)
		return false;
	CCNode* destNode  = fatherNode->getChildByTag(destObj);
	bool result = false;
	if (destNode)
	{
		if (!destNode->isVisible() || isMove)
		{
			for (size_t i = 0; i < souseObj.size(); i++)
			{
				CCNode* sourNode  = fatherNode->getChildByTag(souseObj[i]);
				if (sourNode && sourNode->isVisible())
				{
					result = true;
					CCPoint pos = pUI->GetMiniMapBtnPos(destObj).origin;
					CCFiniteTimeAction * moveTo=NULL; 
					if(souseObj[i]==11)
					{
						moveTo = CCMoveTo::create(0.3f,ccp(pos.x + 30, pos.y + 10.0f));
					}
					else
					{
						moveTo = CCMoveTo::create(0.3f,ccp(pos.x + 30, pos.y + 15.0f));
					}
					if(moveTo)
						sourNode->runAction(moveTo);
					/*sourNode->setPosition(pos.x, pos.y + 15.0f);*/
				}
			}
			return result;
		}
	}
	return false;
}
void World::movePayIconAction()
{
	if (!_payIcon)
		return;

	_in_move_action = true;

	CCPoint targetPos = _miniMapUi->getHuoBtnPosition();
	CCFiniteTimeAction *moveAc = CCMoveTo::create(0.5f, targetPos);
	CCFiniteTimeAction *scaleAc = CCScaleTo::create(0.5f, 0.1f);
	CCFiniteTimeAction *twoAcs = CCSpawn::create(moveAc,scaleAc,NULL);
	CCFiniteTimeAction *acCallBack = CCCallFunc::create(this, callfunc_selector(World::setPayState));
	CCFiniteTimeAction *allAcs = CCSequence::create(twoAcs, acCallBack, NULL);
	_payIcon->setVisible(false);
	_payIcon->setTouchEnabled(false);
	_payIcon->runAction(allAcs);
	stopAnimation();
	_payIcon->removeFromParentAndCleanup(true);
	_payIcon = NULL;
	openWingsBtnChange(false);


}

void World::setPayState()
{
	if (!_scene)
		return;
	if (!_payIcon)
		return;
	//World::getInstance()->setPayClick(true);
	_miniMapUi->setShouChongIconVisible(true);	
	_payIcon->setTouchEnabled(false);
	_payIcon->setVisible(false);
	stopAnimation();
	openWingsBtnChange(false);
	_in_move_action = false;
}

unsigned int World::onGetRoleScriptData( s_net_cmd *cmd )
{
	NET_SIS_set_role_script_data_array* msg = (NET_SIS_set_role_script_data_array*)cmd;
	//特殊处理下签到大奖
	//unsigned int dwBigSign = _RoleScriptData[4];
	memcpy(_RoleScriptData,msg->dwRoleScript,sizeof(_RoleScriptData));
	RewardMgr::getInstance()->setRewardScriptInitFlag(true);
	World::getInstance()->getMiniMapUi()->updateAnimation();//刷新一遍领奖特效，每次上线检查一遍
	/*
	if (dwBigSign != (unsigned int)INVALID)//说明已经初始化过
	{
	if (dwBigSign != _RoleScriptData[4])//大奖签到发生了变化，说明此次更新是由于大奖引起的
	{
	ToolTip::getInstance()->push(GET_STR(7003));
	}
	}
	*/
	//等级奖励提示处理
	//	setLevelReward();
	return 0;
}

unsigned int World::onGetRoleSomeData( s_net_cmd* cmd )
{
	NET_SIS_get_role_some_data* msg = (NET_SIS_get_role_some_data*)cmd;
	if (msg)
	{
		LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
		if (ploc)
		{
			ploc->SetRoleDayNum(msg->nDayNumsFromCreate);
			setSingCurDayVisible(msg->nDayNumsFromCreate);
			if (IS_UI_OPEN(WCT_NewSignUi)) {
				CLOSE_UI(WCT_NewSignUi);
			}
		}
	}
	return 0;
}

unsigned int World::onGetRechargeFeedbackOpen( s_net_cmd* cmd )
{
	NET_SIS_get_recharge_feedback_flag* msg = (NET_SIS_get_recharge_feedback_flag*)cmd;
	if (msg)
	{
		bool bOpen = false;
		msg->bOpen?(bOpen = true):(bOpen = false);
		SetRechargeFeedback_Flag(bOpen);
		if (getMiniMapUi())
		{
			getMiniMapUi()->updateDisplay();
		}
	}
	return 0;
}


//[bing] 掉线重新登录游戏
void World::ReLogin()
{
	LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
	if(!localPlayer)
		return;

	//[bing] 重连之前要重置一些状态
	//1.0 关闭所有打开的UI
	CLOSE_ALL_UI();
	//2.0 重置双休状态
	if(localPlayer->isInRoleStateAny(RA_ShuangXiu))
	{
		localPlayer->setAttribute(RA_ShuangXiu, 0);
		localPlayer->exitShuangxiuState();
		ShuangXiuMgr::getInstance()->stopAnimation(localPlayer->getId());
	}
	//3.0 关闭交易状态
	if(localPlayer->isInRoleStateAny(RA_Exchange))
	{
		localPlayer->setAttribute(RA_Exchange,0);
	}
	//4.0 关闭摆摊状态
	localPlayer->setAttribute(RA_BattleMode, 0);

	//5.0 解除新手引导
	if(NewPlayerGuider::getInstance()->isInGuide())
	{
		NewPlayerGuider::getInstance()->clear();
	}

	//6.0 用新手引导锁住屏幕
	NewPlayerGuider::getInstance()->disableClick();

	TCP_CLIENT->bCgsIsFinish = false;

	NET_C2L_proof *c2lcmd = new NET_C2L_proof;

	//[bing] 把这个账号数据取出来
	std::string loginip = "";
	int nPort = 0;
	unsigned int dwCrc32ServerName = 0;
	TCP_CLIENT->GetAccountInfo(c2lcmd->szUserName, c2lcmd->szPsd, c2lcmd->dwCurVersionID, loginip, nPort, dwCrc32ServerName);
	c2lcmd->dw_world_name_crc = dwCrc32ServerName;
	c2lcmd->dwType = 1;  //[bing] 恒定是1?

	TCP_CLIENT->SetGSID( 0 );
	ClientUpdate::getInstance()->setJoinGame(false);
	ClientUpdate::getInstance()->setCmd(c2lcmd);
	TCP_CLIENT->connect(loginip.c_str(), nPort, true);

	//[bing] todo: 这里可以给一个旋转特效显示
}

//[bing] 开始跨分流
unsigned int World::onCgsBegin(s_net_cmd* cmd)
{
	LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
	if(!localPlayer)
		return 0;

	//[bing] 设个flag表示现在正在跨分流 等跨分流全完成后解锁它
	TCP_CLIENT->bCgsIsFinish = false;

	NET_SIS_cgs_begin_change* pRecv = (NET_SIS_cgs_begin_change*)cmd;

	NET_C2L_proof *c2lcmd = new NET_C2L_proof;

	//[bing] 把这个账号数据取出来
	std::string loginip = "";
	int nPort = 0;
	unsigned int dwCrc32ServerName = 0;
	TCP_CLIENT->GetAccountInfo(c2lcmd->szUserName, c2lcmd->szPsd, c2lcmd->dwCurVersionID, loginip, nPort, dwCrc32ServerName);
	c2lcmd->dw_world_name_crc = pRecv->dw_servername;
	c2lcmd->dwType = 1;  //[bing] 恒定是1?

	//[bing] 记录一下该分流的ID号
	TCP_CLIENT->SetGSID( pRecv->dw_gs_id );

	ClientUpdate::getInstance()->setJoinGame(false);
	ClientUpdate::getInstance()->setCmd(c2lcmd);
	TCP_CLIENT->connect(loginip.c_str(), nPort, true);
	//[bing] 用连接login从头登陆一次 todo:如果不用login从头登陆会造成玩家session信息不全等其他问题

	return 0;
}

//[bing] 跨分流登陆
unsigned int World::onLoginProof(s_net_cmd* cmd)
{
	//登陆服务器 验证完成;
	if(cmd->id == message_id_crc("NET_L2C_proof_result"))
	{
		NET_L2C_proof_result *ret = (NET_L2C_proof_result*)cmd;
		if(ret->dw_error_code == E_Success)
		{
			NET_SIC_cgs_join_game *joinGame = new NET_SIC_cgs_join_game;
			joinGame->dw_account_id = ret->dw_account_id;
			//joinGame->dw_ThirdID = ret->dw_ThirdID;
			memcpy(joinGame->dw_ThirdID, ret->dw_ThirdID, sizeof(ret->dw_ThirdID));
			joinGame->n_ThirdType = ret->n_ThirdType;
			joinGame->dw_char_id = TCP_CLIENT->GetLPCharID();			//[bing] 写死了 先mark一下
			joinGame->dw_gs_id = 0;		//取出来发给GS 主要是需要DBServer从这个分流取data
			ClientUpdate::getInstance()->setCmd(joinGame);
			TCP_CLIENT->connect(ret->sz_ip , ret->dwPort);
			//[bing] 客户端连接GameServer
		}
		else if (ret->dw_error_code == E_ProofResult_Ip_Full)
		{
			ToolTip::getInstance()->push(STRING_TABLE["ver_error_5"]);
		}
		else
		{
			;  //todo: 出错了
		}
	}

	return 0;
}

unsigned int World::onRecvMapLimitInfo(s_net_cmd* cmd)
{
	s_enter_map_limit MapLimit;
	unsigned int dwLimitCount = 0;
	//int mapType = 0;

	WorldPacket Msg((const void*)cmd);

	Msg >> dwLimitCount;
	if (dwLimitCount > 0)
	{
		for(size_t i = 0; i < dwLimitCount; ++i)
		{
			Msg >> MapLimit;
			FubenMgr::GetInstance().AddOrUpdateLimitMap( &MapLimit );
		}
	}
	return 0;
}

unsigned int World::onRecvSaodangInfo(s_net_cmd* cmd)
{
	//FubenSaoDangUi* pUI = (FubenSaoDangUi*)OPEN_UI(WCT_FubenSaoDangUI);
	FubenSaoDangUi* pUI = (FubenSaoDangUi*)UiMgr::getInstance()->openUiNotCloseUi(WCT_FubenSaoDangUI);
	if(!pUI)
		return 0;

	unsigned char byNum = 0;
	unsigned int dwExp = 0;
	unsigned int dwGold = 0;
	unsigned int dwGam = 0;
	unsigned int dwItem1 = 0;
	unsigned int dwItem2 = 0;
	unsigned int dwItem3 = 0;
	unsigned int dwItem4 = 0;

	WorldPacket Msg((const void*)cmd);
	Msg >> byNum;
	Msg >> dwExp;
	Msg >> dwGold;
	Msg >> dwGam;
	Msg >> dwItem1;
	Msg >> dwItem2;
	Msg >> dwItem3;
	Msg >> dwItem4;

	pUI->getUiLayer()->SetData(byNum, dwExp, dwGold, dwGam, dwItem1, dwItem2, dwItem3, dwItem4);

	return 0;
}

unsigned int World::onRecvFubenFinalInfo(s_net_cmd* cmd)
{
	FubenRankUi* pUi = (FubenRankUi*)OPEN_UI(WCT_FubenRankUI);
	if(!pUi || pUi->showState())
		return 0;

	FubenRankUiLayer* UiLayer = getUiNodeByTag<FubenRankUiLayer>(WCT_FubenRankUI);
	if(!UiLayer)
		return 0;

	unsigned char byStar = 0;
	unsigned int dwExp = 0;
	unsigned int dwGold = 0;
	unsigned int dwItem1 = 0;
	unsigned int dwItem2 = 0;
	unsigned int dwItem3 = 0;
	//unsigned int dwMapID = 0;

	WorldPacket Msg((const void*)cmd);
	Msg >> byStar;
	Msg >> dwExp;
	Msg >> dwGold;
	Msg >> dwItem1;
	Msg >> dwItem2;
	Msg >> dwItem3;

	UiLayer->RecvRankData(byStar, dwExp, dwGold, dwItem1, dwItem2, dwItem3);

	return 0;
}

unsigned int World::onRecvFubenRet(s_net_cmd* cmd)
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if (player == NULL)
		return 0;
	int nRet = 0;
	DWORD roleId;
	WorldPacket Msg((const void*)cmd);
	Msg >> nRet;
	FubenMgr::GetInstance().setIsOneSaodang(false);
	FubenMgr::GetInstance().setIsTenSaodang(false);

	if (E_FB_R_0 == nRet)//加入等待列表
		ToolTip::getInstance()->push(GET_STR(9138));
	else if(E_FB_R_1 == nRet)//副本不存在
		ToolTip::getInstance()->push(GET_STR(9139));
	else if(E_FB_R_2 == nRet)//扫荡次数已到10次
		ToolTip::getInstance()->push(GET_STR(9140));
	else if(E_FB_R_3 == nRet)//体力值不足
		ToolTip::getInstance()->push(GET_STR(9141));
	else if(E_FB_R_4 == nRet)//已加入到多人副本等待列表内
		ToolTip::getInstance()->push(GET_STR(9142));
	else if(E_FB_R_5 == nRet)//不满足进入副本条件
		ToolTip::getInstance()->push(GET_STR(9143));
	else if(E_FB_R_6 == nRet)//不是队长,无法申请进入副本
		ToolTip::getInstance()->push(GET_STR(9144));
	else if(E_FB_R_7 == nRet)//有队友条件不符合进入条件
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9146));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9145);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}	
	}
	else if(E_FB_R_8 == nRet)//扫荡副本没有达到3星评价
		ToolTip::getInstance()->push(GET_STR(9147));
	else if(E_FB_R_9 == nRet)//进入等级不符合
		ToolTip::getInstance()->push(GET_STR(9148));
	else if(E_FB_R_10 == nRet)//进入次数已满
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9136));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9137);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_11 == nRet)//体力已达上限
		ToolTip::getInstance()->push(GET_STR(9149));
	else if(E_FB_R_12 == nRet)//购买次数已达上限
		ToolTip::getInstance()->push(GET_STR(9150));
	else if(E_FB_R_13 == nRet)//元宝不足
		RechargeNewUiMgr::GetInstance()->openRechargeNewUi();
	else if(E_FB_R_14 == nRet)//没有组队无法进入副本
		ToolTip::getInstance()->push(GET_STR(9152));
	else if(E_FB_R_15 == nRet)//有队员处于离线状态,无法进入副本
	{
		Msg >> roleId;
		std::ostringstream oss;
		const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
		if (data)
			oss<<data->strName;
		else
			oss<<"";
		std::string baseStr = GET_STR(9153);
		std::string str = replaceStr(baseStr,"**",oss.str());
		ToolTip::getInstance()->push(str);
	}
	else if(E_FB_R_16 == nRet)//队伍人数不足,无法进入副本
		ToolTip::getInstance()->push(GET_STR(9154));
	else if(E_FB_R_17 == nRet) //有队员等级不满足要求,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9156));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9155);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_18 == nRet)//有队员体力不满足要求,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9158));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9157);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_19 == nRet)//有队员挑战次数不满足要求,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9160));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9159);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_20 == nRet)//有队员处于扫荡中,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9162));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9161);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_21 == nRet)//有队员处于摆摊中,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9174));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9173);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_22 == nRet)//有队员处于交易中,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9164));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9163);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_23 == nRet)//有队员处于沙城中,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9166));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9165);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_24 == nRet)//有队员处于沙城堡,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9168));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9167);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_25 == nRet)//有队员处于副本中,无法进入副本
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9170));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9169);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if(E_FB_R_26 == nRet)//有队员没有准备，无法进入副本
		ToolTip::getInstance()->push(GET_STR(2391));
	else if(E_FB_R_27 == nRet)//有队员不在比奇城，无法进入副本
	{
		Msg >> roleId;
		const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
		if (data)
		{
			std::ostringstream oss;
			oss<<data->strName<<STRING_TABLE["instance_limit_by_biqi"];
			ToolTip::getInstance()->push(oss.str());
		}
		else
			ToolTip::getInstance()->push(STRING_TABLE["instance_limit_by_biqi_and_teammate"]);
	}
	else if(E_FB_R_28 == nRet)//正在申请进入副本，无法再次申请
		ToolTip::getInstance()->push(GET_STR(9171));
	else if(E_FB_R_29 == nRet)//不满足战、法、道进入条件
		ToolTip::getInstance()->push(GET_STR(9172));
	else if(E_FB_R_30 == nRet)//拒绝进入副本
	{
		std::ostringstream oss;
		oss<<STRING_TABLE["teammate_char"];
		char num = 0;
		Msg >> num;
		DWORD roleId[MAX_TEAM_NUM] = {0};
		for (int i =0;i < num;++i)
		{
			Msg >> roleId[i];
			if (roleId[i] == player->getId())
			{
				std::string name = "";
				NameMgr2::getInstance()->queryName(player->getId(),name);
				oss<<name<<STRING_TABLE["qua_char"];
			}
			else
			{
				const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId[i]);
				if (data)
					oss<<data->strName<<STRING_TABLE["qua_char"];
			}
		}
		oss<<STRING_TABLE["forbit_enter_instance"];
		ToolTip::getInstance()->push(oss.str());
	}
	else if (E_FB_R_31 == nRet)
	{
		//ToolTip::getInstance()->push(GET_STR(9076));
		CCScene* scene = World::getInstance()->getScene();
		if (scene)
		{
			MessageBoxUi *msgUi = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI, GET_STR(9553).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
			scene->addChild(msgUi, WZ_MESSAGEBOX);
			msgUi->signalOkBtnPressed.connect(InstanceMgr::getInstance(), &InstanceMgr::confirmPalaceFuben);
		}
	}
	else if (E_FB_R_32 == nRet)
	{
		std::string baseStr = GET_STR(9078);
		Msg >> roleId;
		std::ostringstream oss;
		const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
		if (data)
			oss<<data->strName;
		else
			oss<<"";
		std::string str = replaceStr(baseStr,"**",oss.str());
		ToolTip::getInstance()->push(str);
	}
	else if (E_FB_R_33 == nRet)
	{
		ToolTip::getInstance()->push(GET_STR(2103));
	}
	else if (E_FB_R_34 == nRet)
	{
		//ToolTip::getInstance()->push(GET_STR(2155));
		CCScene* scene = World::getInstance()->getScene();
		if (scene)
		{
			MessageBoxUi *msgUi = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI, GET_STR(9551).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
			scene->addChild(msgUi, WZ_MESSAGEBOX);
			msgUi->signalOkBtnPressed.connect(InstanceMgr::getInstance(), &InstanceMgr::confirmFireFuben);
		}
	}
	else if (E_FB_R_35 == nRet)
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(2211));
			//ToolTip::getInstance()->push(GET_STR(9090));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9091);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if (E_FB_R_36 == nRet)
	{
		ToolTip::getInstance()->push(GET_STR(9093));
	}
	else if (E_FB_R_37 == nRet)
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9176));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9175);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if (E_FB_R_38 == nRet)
	{
		ToolTip::getInstance()->push(GET_STR(9206));
	}
	else if (E_FB_R_39 == nRet)
	{
		Msg >> roleId;
		if (roleId == player->getId())
		{
			ToolTip::getInstance()->push(GET_STR(9208));
		}
		else
		{
			std::ostringstream oss;
			const tagTeammateData* data = TeamMgr::getInstance()->get_teammate_data(roleId);
			if (data)
				oss<<data->strName;
			else
				oss<<"";
			std::string baseStr = GET_STR(9207);
			std::string str = replaceStr(baseStr,"**",oss.str());
			ToolTip::getInstance()->push(str);
		}
	}
	else if (E_FB_R_40 == nRet)
	{
		ToolTip::getInstance()->push(GET_STR(2211));
	}
	else if (E_FB_R_41 == nRet)
	{
		CCScene* scene = World::getInstance()->getScene();
		if (scene)
		{
			MessageBoxUi *msgUi = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI, GET_STR(9552).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
			scene->addChild(msgUi, WZ_MESSAGEBOX);
			msgUi->signalOkBtnPressed.connect(InstanceMgr::getInstance(), &InstanceMgr::confirmCustomsFuben);
		}
	}
	else if(E_FB_R_42==nRet)
	{
		ToolTip::getInstance()->push(STRING_TABLE["FM_BattleTip10"]);
	}
	else if(E_FB_R_43==nRet)
	{
		ToolTip::getInstance()->push(STRING_TABLE["mabi_trans_tip"]);
	}
	else if(E_FB_R_44==nRet)
	{
		ToolTip::getInstance()->push(STRING_TABLE["mabi_trans_team_tip"]);
	}
	return 0;
}

unsigned int World::onRecvDuoRenFubenRet(s_net_cmd* net_cmd)
{
	int nRet = 0;
	unsigned int nMapId = 0;
	WorldPacket Msg((const void*)net_cmd);
	Msg >> nRet;
	Msg >> nMapId;

	int nid  = 0;
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM fubendata WHERE mapid = ?1");
	cmd->set_integer64(1 ,nMapId);		//[bing] 多人副本type == 2
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	while(table->retrieve_row())
	{
		int idx = table->get_index("id");
		nid = table->get_integer32(idx);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
	switch(nRet)
	{
	case 0:	//副本返回成功
		//MessageBoxUi *msgUi = MessageBoxUi::createWithTwoBtn("", "\xE7\xA1\xAE\xE5\xAE\x9A\xE8\xBF\x9B\xE5\x85\xA5\xE5\x89\xAF\xE6\x9C\xAC\x3F", "\xE7\xA1\xAE\xE5\xAE\x9A", "\xE5\x8F\x96\xE6\xB6\x88");
		//msgUi->signalOkBtnPressed.connect(this, &World::DuoRenFuBenConfrim);
		//World::getInstance()->getScene()->addChild(msgUi, WZ_MESSAGEBOX, WCT_MessageBox);
		if(nid != 0)
		{
			TeamMgr::getInstance()->setFubenID(nid);
			OPEN_UI(WCT_TeamStateUi);
		}
		break;
	}

	return 0;
}

void World::DuoRenFuBenConfrim()
{
	WorldPacket C2G_Msg(NET_C2G_ENTER_FUBEN);
	C2G_Msg << (unsigned char)6;			//类型 1 = 进入副本 2 = 扫荡 3 = 扫荡10次 4 = 进入多人副本
	C2G_Msg << 0;
	TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_NORMAL, false);		//发送
}

unsigned int World::onPlayTalk( s_net_cmd* cmd )
{
	int nPlayIdx = 0;
	WorldPacket Msg((const void*)cmd);
	Msg >> nPlayIdx;

	NpcChatLuaMgr::getInstance()->doNPCScript(nPlayIdx);
	if (World::getInstance()->getNPCDialog()) {
		World::getInstance()->getNPCDialog()->show(false);
	}
	OPEN_UI(WCT_NPCCHATUI);
	return 0;
}

unsigned int World::onG2C_CONFIRM_STALL_ITEM_RESULT(s_net_cmd* cmd)
{
	int nRes = 0;
	WorldPacket G2C_Msg((const void*)cmd);
	G2C_Msg >> nRes;

	switch(nRes)
	{
	case E_Stall_Mall_Trad_Bag_Not_Enough:
		ToolTip::getInstance()->push(STRING_TABLE["package_full_warning"]);
		break;
	}

	return 0;
}

unsigned int World::onG2C_REQUEST_STALL_START_RESULT(s_net_cmd* cmd)
{
	//摆摊结果 结果[0 = 成功,非0 = 错误代码]
	unsigned int dwRes = 0;

	WorldPacket G2C_Msg((void*)cmd);
	G2C_Msg >> dwRes;

	switch(dwRes)
	{
	case E_Stall_Mall_Trad_Bag_Not_Enough:
		ToolTip::getInstance()->push(STRING_TABLE["package_full_warning"]);
		break;
	case E_Stall_Mall_Trad_Item_Is_Not_Trad:
		ToolTip::getInstance()->push(STRING_TABLE["item_not_selected_for_exchange"]);
		break;
	case E_Stall_Area_NotAllowed:
		ToolTip::getInstance()->push(GET_STR(166));
		break;

	}

	return 0;
}

unsigned int World::onLOOK_OTHER_STALL_RESULT(s_net_cmd* cmd)
{
	CLOSE_UI(WCT_STALL_EXCHANGE_UI);
	OPEN_UI(WCT_NEW_STALLUI);
	NewStallUiLayer* pUI = getUiNodeByTag<NewStallUiLayer>(WCT_NEW_STALLUI);
	if(pUI)
	{
		pUI->OnBuy(cmd);
	}

	return 0;
}

unsigned int World::onG2C_REQUEST_STALL_DOWN_RESULT(s_net_cmd* cmd)
{
	return 0;
}

unsigned int World::onG2C_REQUEST_STALL_BUY_RESULT(s_net_cmd* cmd)
{
	//[bing] 当购买成功时应该是发给买家与卖家 收到相同的消息 服务器顺序为先发消息再删除 所以我在这里删除客户端资料一定是安全的
	//结果[0 = 成功 + 摆摊栏位IDX(INT),非0 = 错误代码]
	unsigned int nRes = 0;
	WorldPacket G2C_msg((void*)cmd);
	G2C_msg >> nRes;

	//成功了 需要通知客户端删除该物品
	if(nRes == 0)
	{
		int nDelIdx = 0;
		G2C_msg >> nDelIdx;
		GET_UI(NewStallUi, WCT_NEW_STALLUI)->DelStallItem(nDelIdx, true);
	}
	else
	{
		switch(nRes)
		{
		case E_Stall_Mall_Trad_Bag_Not_Enough:
			ToolTip::getInstance()->push(STRING_TABLE["package_full_warning"]);
			break;
		case E_Stall_Mall_Trad_Item_Buy_Is_Not:
			ToolTip::getInstance()->push(STRING_TABLE["selected_item_not_exsit"]);
			break;
		case E_Stall_Mall_Trad_YuanBao_Not_Enough:
			//ToolTip::getInstance()->push("\xE5\x85\x83\xE5\xAE\x9D\xE4\xB8\x8D\xE8\xB6\xB3\x2C\xE6\x97\xA0\xE6\xB3\x95\xE8\xB4\xAD\xE4\xB9\xB0");
			//add by vvv 2014.11.05
			//messageBox = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(7024).c_str(), TEXT_UTF8_RECHARGE, TEXT_UTF8_QUXIAO);//充值，取消
			//messageBox->signalOkBtnPressed.connect(this, &World::noticeRecharge);
			//World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
			RechargeNewUiMgr::GetInstance()->openRechargeNewUi();
			break;
		case E_Stall_Mall_Trad_Other_Bag_Not_Enough:
			ToolTip::getInstance()->push(STRING_TABLE["stall_full_warning"]);
			break;
		}
	}

	return 0;
}
void World::noticeRecharge()
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_4);
	OPEN_UI(WCT_ChongZhiActivityFarmeUI);
}


unsigned int World::onG2C_REQUEST_STALL_END_RESULT(s_net_cmd* cmd)
{
	//结果[0 = 成功,非0 = 错误代码]
	unsigned int nRes = 0;
	WorldPacket G2C_msg((void*)cmd);
	G2C_msg >> nRes;
	switch(nRes)
	{
	case E_Stall_Mall_Trad_Bag_Not_Enough:
		ToolTip::getInstance()->push(STRING_TABLE["package_full_warning"]);
		break;
	}
	return 0;
}
unsigned int World::onGetStallName( s_net_cmd *cmd )
{
	if(cmd->id == message_id_crc("NET_SIS_stall_get_title"))
	{
		NET_SIS_stall_get_title *msg = (NET_SIS_stall_get_title*)cmd;
		if(msg->dw_error_code == 0)
		{
			Player *role = dynamic_cast<Player*>(RoleManager::getInstance()->findRole(msg->dwStallRoleID));
			if(role != NULL)
			{
				//需转换
				tstring tmpStr;
				char vStr[128];
				memset(vStr, 0, sizeof(vStr));
				Utf16ToUtf8(msg->szTitle, vStr, 128, 11);
				tmpStr.assign(vStr);
				role->setStallName(tmpStr);
				role->setStallIcon();
			}
		}
	}
	return 0;
}
unsigned int World::onUpdateData(s_net_cmd *cmd )
{
	WorldPacket Msg((const void*)cmd);
	unsigned int isSuccess;
	unsigned int itemType;
	unsigned int itemTypeCount1;
	unsigned int itemTypeCount2;
	unsigned int dwItemId1;
	unsigned int dwItemId2;
	Msg >> isSuccess;
	Msg >> itemType;
	Msg >> itemTypeCount1;
	Msg >> itemTypeCount2;
	Msg >> dwItemId1;
	Msg >> dwItemId2;
	//合成物品时因为锁了背包，所以收到合成消息后需要解锁
	PackageManager::getInstance()->SetClickBagDisplayTips(true);
	PackageManager::getInstance()->unLockItem(EICT_Bag);
	if (isSuccess == 0)
	{		
		ReceiveRewardUiMgr::GetInstance()->setItemData(dwItemId1,itemTypeCount1);
		ReceiveRewardUiMgr::GetInstance()->setItemData(dwItemId2,itemTypeCount2);
		ReceiveRewardUiMgr::GetInstance()->openRewardUi();
		/*
		if (itemType == 1)
		{
		FragmentCompoundNewUiMgr::GetInstance()->strName ="compoundui1";
		FragmentCompoundNewUiMgr::GetInstance()->strUiName = "compoundUiLayer1";
		}
		else
		{
		FragmentCompoundNewUiMgr::GetInstance()->strName ="compoundui";
		FragmentCompoundNewUiMgr::GetInstance()->strUiName = "compoundUiLayer";
		}
		FragmentCompoundNewUiMgr::GetInstance()->itemType = itemType;
		FragmentCompoundNewUiMgr::GetInstance()->dwItemId1 = dwItemId1;
		FragmentCompoundNewUiMgr::GetInstance()->dwItemId2 = dwItemId2;
		FragmentCompoundNewUiMgr::GetInstance()->itemTypeCount1 = itemTypeCount1;
		FragmentCompoundNewUiMgr::GetInstance()->itemTypeCount2 = itemTypeCount2;
		FragmentCompoundNewUiMgr::GetInstance()->openFenUi();
		*/
	}
	else
	{
		switch(isSuccess)
		{
		case E_Role_ItemCompose_Item_Not_Exist://	540 合成原物品不存在
			ToolTip::getInstance()->push(STRING_TABLE["compose_error_540"]);
			break;
		case E_Role_ItemCompose_Data_Not_Exist: //  541合成物品表中无此数据
			ToolTip::getInstance()->push(STRING_TABLE["compose_error_541"]);
			break;
		case E_Role_ItemCompose_Kind_Error://	542 合成类型错误
			ToolTip::getInstance()->push(STRING_TABLE["compose_error_542"]);
			break;
		case E_Role_ItemCompose_Silver_Not_Enough: //543 合成所需金币不足
			{
				ToolTip::getInstance()->push(STRING_TABLE["compose_error_543"]);
			}
			break;
		case E_Role_ItemCompose_Item_Not_Enough:	 //544 合成所需物品不足
			ToolTip::getInstance()->push(STRING_TABLE["compose_error_544"]);
			break;
		case E_Role_ItemCompose_Bag_Not_Enough:	 //545 背包不足2个空间
			ToolTip::getInstance()->push(STRING_TABLE["compose_error_545"]);
			break;
		}
	}	
	return 0;
}
void World::SetVisibleControlUI( bool bSet )
{
	//迷你地图
	_miniMapUi->setVisible(bSet);
	//人物头像
	_roleHeadUi->setVisible(bSet);
	//任务目标
	_taskTraceUi->setVisible(bSet);

	Joystick *ui = getUiNodeByTag<Joystick>(WCT_JoyStick);
	if(ui != NULL)
		ui->setVisible(bSet);
	//ui->showUi(bSet);

	ChatUiLayer *pchatui = getUiNodeByTag<ChatUiLayer>(WCT_ChatUi);
	if(pchatui != NULL)
		pchatui->setVisible(bSet);

	ShortCutUiLayer *pShorCutUi = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(pShorCutUi != NULL)
		pShorCutUi->setVisible(bSet);

	//if(_payIcon)
	//{
	//_payIcon->setVisible(bSet);
	//}

	//借助新手引导锁屏功能锁住界面
	if(!bSet)
		NewPlayerGuider::getInstance()->disableClick();
	else
		NewPlayerGuider::getInstance()->clear();

	//其他所有玩家
	RoleManager::getInstance()->showAllPlayer(bSet);
	//自己一直显示
	RoleManager::getInstance()->getLocalPlayer()->VisibleSelf(true);

}

void World::SetRoleHeadTouch(){
	//系统UI
	//SystemUi *systemUi = dynamic_cast<SystemUi*>(OPEN_UI(WCT_SystemUi));
	//_roleHeadUi->signalHeadPressed.disconnect(systemUi,&SystemUi::slotChangeShowState);
	//_roleHeadUi->signalHeadPressed.connect(systemUi,&SystemUi::slotChangeShowState);
}

void World::MovieAddCreatureState( tagRemoteCreatureData *pData )
{
	Monster *role = new Monster();
	if(role != NULL)
	{
		role->setTypeID(pData->dw_data_id);
		role->initFsm();
		role->addToMap();
		role->initBloodUi();
		role->setId(pData->dwID);
		role->setTypeID(pData->dw_data_id);
		role->setAttribute(RA_HP, pData->nAtt[ERRA_HP]);
		role->setAttribute(RA_MaxHP, pData->nAtt[ERRA_MaxHP]);
		role->setAttribute(RA_MP, pData->nAtt[ERRA_MP]);
		role->setAttribute(RA_MaxMP, pData->nAtt[ERRA_MaxMP]);
		role->setAttribute(RA_SPEED, ROLE_BASE_SPEED * (float)pData->nAtt[ERRA_Speed_XZ]);
		role->setAttribute(RA_DEAD, pData->dwState & (0x1 << ES_Dead));
		role->setLevel(pData->nLevel);
		role->set_owner_id(pData->dwTargetID);
		role->loadAnimate(pData->dw_data_id);
		role->set_owner_id(-1);		//[bing] 设置从属关系 如果不设置会造成名字加一个"的"
		role->setRealDelete(true);

		if(role->getCreatureType() == CT_MONSTER)
		{
			static_cast<Monster*>(role)->setScale(pData->nAtt[ERRA_Shape]);
		}
		role->setPosition(ccp(pData->fPos[0], pData->fPos[2]));
		role->setDirection(ccp(pData->fFaceTo[0], pData->fFaceTo[2]));
		RoleManager::getInstance()->AddRole(role);

		//[bing] 为了让状态机初始化 先让monster跑一帧
		role->update(0.0f);
	}
}

unsigned int World::onMysteryBoxReward( s_net_cmd* cmd )
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if( !player )
		return 0;
	unsigned int byResultNum = 0;				
	unsigned int  PlayerId = 0;
	unsigned char byKindNum = 0;			
	unsigned char byDataNum = 0;
	WorldPacket Msg((const void*)cmd);
	bool IsNeedUpdate = false;
	Msg >> byResultNum;	
	Msg >> PlayerId;
	Msg >> byKindNum;
	Msg >> byDataNum;		
	if (0 == byResultNum)
	{

		unsigned int dwItemID = 0;				
		unsigned char IsNotice = 0;           
		unsigned int  nQuality = 0;
		int n16Count = 0;

		for (int i=1; i <= (int)byDataNum; ++i)
		{
			Msg >> dwItemID;
			Msg >> n16Count;
			Msg >> IsNotice;
			Msg >> nQuality;
			if(IsNotice > 0)
			{
				std::vector<MysteryBoxUiData> vecBoxList = PackageManager::getInstance()->getMysteryList();
				MysteryBoxUiData strData;
				strData.PlayerId = PlayerId;
				strData.ItemId = dwItemID;
				strData.nQuality = nQuality;
				if(vecBoxList.size() == 10)
				{
					PackageManager::getInstance()->RemoveFirstOfMysteryList();
					PackageManager::getInstance()->PushBackMysteryList(strData);
				}
				else
				{
					PackageManager::getInstance()->PushBackMysteryList(strData);
				}
				IsNeedUpdate = true;
			}
			//_BoxItemVec.push_back(dwItemID);
		}
	}
	MysteryBoxUi* ui = GET_UI(MysteryBoxUi, WCT_MysteryBoxUi);
	if(ui != NULL)
	{
		if(IsNeedUpdate)
		{
			ui->UpdateNoticeList();
		}
	}
	if(PlayerId == player->getId())
	{
		ui->getTresureData(cmd);
	}
	return 0;
}

unsigned int World::onGetMysteryBoxResult( s_net_cmd* cmd )
{
	//GET_UI(MysteryBoxUi, WCT_MysteryBoxUi)->getTresureResult(cmd);
	return 0;
}
void World::setShowToolTip(int level)
{
	switch( level )
	{
	case 1:
		ToolTip::getInstance()->push(GET_STR(7178));
		break;
	case 11:
		ToolTip::getInstance()->push(GET_STR(7179));
		break;
	case 21:
		ToolTip::getInstance()->push(GET_STR(7180));
		break;
	case 31:
		ToolTip::getInstance()->push(GET_STR(7181));
		break;
	case 41:
		ToolTip::getInstance()->push(GET_STR(7182));
		break;
	case 51:
		ToolTip::getInstance()->push(GET_STR(7183));
		break;
	case 61:
		ToolTip::getInstance()->push(GET_STR(7184));
		break;
	case 71:
		ToolTip::getInstance()->push(GET_STR(7185));
		break;
	case 81:
		ToolTip::getInstance()->push(GET_STR(7186));
		break;
	case 91:
		ToolTip::getInstance()->push(GET_STR(7187));
		break;
	case 101:
		ToolTip::getInstance()->push(GET_STR(7188));
		break;
	case 111:
		ToolTip::getInstance()->push(GET_STR(7189));
		break;
	case 120:
		ToolTip::getInstance()->push(GET_STR(7189));
		break;
	}
}
unsigned int World::onMountResult( s_net_cmd *cmd )
{
	//GET_UI(MountUi, WCT_MountUi)->onMountResult(cmd);
	//Kind(INT)[0=成功 + 要骑的坐骑等级(INT) + 角色ID(DWORD),非0=错误代码]
	int isSussess;
	//std::string ridaName;
	WorldPacket Msg((const void*)cmd);
	unsigned int dwRoleID = 0;
	int nUseRideLv = 0;
	Msg >> isSussess;

	if(isSussess == 0)
	{
		Msg >> nUseRideLv;
		Msg >> dwRoleID; //roleid为广播给其他客户端用

		unsigned int map_id;
		float x,z,y;
		Msg >> map_id;

		Msg >> x >> z >> y;
		/*LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
		if( lp != NULL )
		lp->enterRideState(nUseRideLv);*/
		Player *player = dynamic_cast<Player*>(RoleManager::getInstance()->findRole(dwRoleID));
		if(player != NULL)
		{
			player->enterRideState(nUseRideLv);
			player->updateTitleUi();

			CC_ASSERT(map_id == MapManager::getInstance()->getCurMapId());
			player->setPosition(ccp(x,y));
		}
		GET_UI(MountUi, WCT_MountUi)->updateData();
		if (dwRoleID==RoleManager::getInstance()->getLocalPlayer()->getId())
		{
			setShowToolTip(nUseRideLv);
		}
		SkillData *skillData = SkillManager::getInstance()->getSkillData(SKILLMOFADUNTYPEID,true);
		Role *targetRole = RoleManager::getInstance()->findRole(dwRoleID);
		if(targetRole && targetRole->getCreatureType() != CT_Proxy && (targetRole->getRoleType() == RT_WMAGE || targetRole->getRoleType() == RT_MMAGE) && skillData != NULL)
		{//如果是法师，自动释放魔法盾
			SkillAnimManager::getInstance()->stopBuffer(dwRoleID,skillData->proto->id);	
		}		
	}
	else
	{
		// 		switch(isSussess)
		// 		{
		// 		case 24:
		// 			ToolTip::getInstance()->push(GET_STR(7223));
		// 			break;
		// 		}
	}
	return 0;
}

unsigned int World::onVipLvChangeInfo( s_net_cmd *cmd )
{
	VIPMgr::getInstance()->SetVIPData(cmd);
	return 0;
}

//离开副本
unsigned int World::onRecvLeaveInstance( s_net_cmd* cmd )
{
	unsigned int dwResult = 0;

	WorldPacket Msg((const void*)cmd);

	Msg >> dwResult;
	switch( dwResult )
	{
	case E_Success: //成功
		break;
	case 1: //传送失败
		ToolTip::getInstance()->push(STRING_TABLE["teleport_failed"]);
		break;
	}

	return 0;
}

//功法拾取结果
unsigned int World::onGetKungfuPickUpResult( s_net_cmd* cmd )
{
	GongfaTip::getInstace()->onGetKungfuPickUpResult(cmd);
	return 0;
}

//服务器给客户端发送提示信息
unsigned int World::onG2C_SendTipMsg( s_net_cmd* cmd )
{
	//服务器向客户端发送提示信息
	//msgid(INT)
	WorldPacket Msg((const void*)cmd);
	int nMsgID = 0; //msgid
	Msg >> nMsgID;
	if (nMsgID==7130)//
	{
		CCString *str=CCString::createWithFormat("%d",100);
		ToolTip::getInstance()->pushMessage(str->getCString(),STRING_TABLE["gain_char"],2,2);
	}
	else
	{
		if (needSlowStr(nMsgID))
		{
			ToolTip::getInstance()->push(GET_STR( nMsgID ),3);
		}
		else
		{
			ToolTip::getInstance()->push(GET_STR( nMsgID ));
		}

	}
	return 0;
}

unsigned int World::onRoleTeleport( s_net_cmd *cmd )
{
	//[bing] todo: 暂时没有朝向
	//服务器向客户端发送角色传送消息 roleid(dword) + x(float) + z(float)
	unsigned int dwRoleID = 0;
	float fx = 0.0f;
	float fz = 0.0f;

	WorldPacket Msg((const void*)cmd);
	Msg >> dwRoleID;
	Msg >> fx;
	Msg >> fz;

	LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();
	if(pLocPlayer && pLocPlayer->getId() == dwRoleID)
	{
		pLocPlayer->setPosition(ccp(fx, fz));
		//pRole->setDirection(ccp(fx, fz));
		CCPoint cp = ccp(fx, fz);
		MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, pLocPlayer, M_LpStand, &cp);

		//pLocPlayer->runPathTo(cp, pLocPlayer->getTargetMapId());

		return 0;
	}

	Role* pRole = RoleManager::getInstance()->findRole(dwRoleID, false, false);
	if(pRole)
	{
		pRole->setPosition(ccp(fx, fz));
		//pRole->setDirection(ccp(fx, fz));
		CCPoint cp = ccp(fx, fz);
		MessageDispatcher::Instance()->DispatchMsg(-1.0, NULL, pRole, M_STAND, &cp);
	}

	return 0;
}

cocos2d::CCRect World::getpayIconPos()
{
	// 	Role *role = RoleManager::getInstance()->getLocalPlayer();
	// 	int level = 11;
	// 	if(role->getLevel() >= level && _payIcon)
	// 	{
	// 		if (KaifuHuodongMgr::getInstance()->getIosShowRecharge())
	// 		{
	// 			_payIcon->setVisible(true);
	// 			runAnimation();
	// 		}
	// 	}
	if(_payIcon && _payIcon->isVisible())
	{
		CCPoint cp = _payIcon->convertToWorldSpace(ccp(0.0f, 0.0f));
		CCSize cs = _payIcon->getContentSize();
		return CCRect(cp.x + 15, cp.y, cs.width-30, cs.height-40);
	}

	return CCRect(0.0f, 0.0f, 0.0f, 0.0f);
}

unsigned int World::onRechargeGiftLevelGet( s_net_cmd* cmd )
{
	WorldPacket Msg((const void*)cmd);
	unsigned char nRechargeGiftLv = 0;
	Msg >> nRechargeGiftLv;
	ChongZhiActivityMgr::getInstance()->setRechargeGiftsLevel(nRechargeGiftLv);
	return 0;
}

//竞技场挑战胜利奖励信息
unsigned int World::onjjcWinRewardInfo( s_net_cmd *cmd )
{
	int nAddSilver = 0; //金钱
	int nAddExp = 0; //经验
	int nAddDiamond = 0; //钻石
	int nHighestRank = 0; //最高排名

	//发送给客户端竞技场挑战胜利奖励信息
	//金币(INT) + 经验(INT) + 钻石(INT) + 最高排名(INT)
	WorldPacket Msg((const void*)cmd);
	Msg >> nAddSilver; //金钱
	Msg >> nAddExp; //经验
	Msg >> nAddDiamond; //钻石
	Msg >> nHighestRank; //最高排名

	ArenaMainMgr::getInstance()->setAddSilver( nAddSilver );
	ArenaMainMgr::getInstance()->setAddExp( nAddExp );
	ArenaMainMgr::getInstance()->setAddDiamond( nAddDiamond );
	ArenaMainMgr::getInstance()->setHighestRank( nHighestRank );

	return 0;
}

//获得当前充值总数
unsigned int World::onTotalRechargeChange( s_net_cmd* cmd )
{
	//通知客户端充值总数改变
	//充值总数(DWORD)
	WorldPacket Msg((const void*)cmd);
	unsigned int dwTotalRecharge = 0;
	Msg >> dwTotalRecharge;
	PackageManager::getInstance()->setTotalChargeYuanBao( dwTotalRecharge );
	PackageManager::getInstance()->set_is_open_recast(e_recharge);
	if(dwTotalRecharge > 0)
	{
		World::getInstance()->movePayIconAction();
	}
	/*签到后再充值不再补充发邮件奖励 by zhang 2015.09.21
	if (ReceiveRewardUiMgr::GetInstance()->getRechargeTimes() == 1)
	{
	int level = RoleManager::getInstance()->getLocalPlayer()->getVIPLevel();
	ReceiveRewardUiMgr::GetInstance()->sendToServerRequestEmailReward(level);
	}*/

	return 0;
}
void World::onMonsterDied(CCObject *node, void *data)
{
	Role * role = (Role*)data;

	if (role)
	{
		MonsterDeadAnimation::getInstance()->runAnimation(role->getPosition());
		role->setVisiable(false);
		//role->setSelected(false);
		RoleManager::getInstance()->freeRole(role->getId());
	}
}

void World::onDelayHPMsg(CCObject *node, void *data)
{
	NET_SIS_role_hp_change * msg = (NET_SIS_role_hp_change*)data;

	Role *destRole = RoleManager::getInstance()->findRole(msg->dw_role_id);//受击目标
	Role *srcRole = RoleManager::getInstance()->findRole(msg->dwSrcRoleID);//发起者
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();

	if(destRole != NULL)
	{
		if(!msg->bMiss)
		{
			if(msg->dw_role_id == lp->getId())
			{
				if(msg->bCrit)
					hpChangeEffect(msg->nHPChange, HCT_CRIT, destRole->getPosition(), destRole->getZOrder(), true);
				else
					hpChangeEffect(msg->nHPChange, msg->nHPChange < 0 ? HCT_REDUCE : HCT_Add, destRole->getPosition(), destRole->getZOrder(), true);
			}
			else if(msg->dwSrcRoleID == lp->getId() || 
				(srcRole != NULL && srcRole->getOwnerId() == lp->getId()))
			{
				CCLOG("__________________________hp:%d",msg->nHPChange);
				if(msg->bCrit)
					hpChangeEffect(msg->nHPChange, HCT_OtherCrit, destRole->getPosition(), destRole->getZOrder());
				else
					hpChangeEffect(msg->nHPChange, HCT_OtherNormal, destRole->getPosition(), destRole->getZOrder());
			}
		}
		else
		{//闪避
			if(msg->dw_role_id == lp->getId())
			{
				missEffect(destRole->getPosition(),srcRole->getPosition(), destRole->getZOrder(),true);
			}
			else if(msg->dwSrcRoleID == lp->getId() || 
				(srcRole != NULL && srcRole->getOwnerId() == lp->getId()))
			{
				missEffect(destRole->getPosition(),srcRole->getPosition(), destRole->getZOrder(),false);
			}
		}

		if(msg->dwSrcRoleID == lp->getId() && destRole->getId() != lp->getId())
		{//自己攻击其他角色，显示其他角色的血条
			destRole->showRoleHeadHpUi(true);
		}

		if(msg->dw_role_id == lp->getId() && msg->dwSrcRoleID != lp->getId())
		{//受到其他玩家攻击，显示其他玩家和自己的血条
			CC_ASSERT(destRole->getId() == lp->getId());
			lp->showRoleHeadHpUi(true);
			if(srcRole != NULL)
				srcRole->showRoleHeadHpUi(true);
		}
	}
}

int World::getLingJiangLevelByRoleScriptData6(unsigned int rewordIndex)
{
	switch(rewordIndex)
	{
	case 0:
		return 10;
		break;
	case 1:
		return 20;
		break;
	case 2:
		return 30;
		break;
	case 3:
		return 40;
		break;
	case 4:
		return 45;
		break;
	case 5:
		return 50;
		break;
	case 6:
		return 55;
		break;
	case 7:
		return 60;
		break;
	case 8:
		return 65;
		break;
	default:
		return 101;
		break;
	}

}

bool World::SetMenuEffect( CCObject* object , int type ,int tag , std::string fileName , bool isShow , int posX /*= 21 */, int posY /*= 39*/ )
{
	if (isShow)
	{
		AnimationCache::AnimateList anims;
		AnimationCache::createDefList(1, anims);
		AnimationCache::getInstance()->getSinEffect(0, fileName, anims);
		BSAnimate *animate = anims[0];
		CCSprite *highLight = CCSprite::create();

		switch(type)
		{
		case WT_CCNODE:
			{
				dynamic_cast<CCNode*>(object)->addChild(highLight,WZ_MenuHintEffect,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX,highLight->getContentSize().height + posY));
				highLight->runAction(CCRepeatForever::create(animate));
				return true;
			}
			break;
		case WT_CCLAYER:
			{
				dynamic_cast<CCLayer*>(object)->addChild(highLight,WZ_MenuHintEffect,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				highLight->runAction(CCRepeatForever::create(animate));
				return true;
			}
			break;
		case WT_CCSPRITE:
			{
				dynamic_cast<CCSprite*>(object)->addChild(highLight,WZ_MenuHintEffect,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				highLight->runAction(CCRepeatForever::create(animate));
				return true;
			}
			break;
		case WT_CCCONTROLBUTTON:
			{
				dynamic_cast<CCControlButton*>(object)->addChild(highLight,WZ_MenuHintEffect,tag);
				highLight->setPosition(ccp(highLight->getContentSize().width + posX ,highLight->getContentSize().height + posY));
				highLight->runAction(CCRepeatForever::create(animate));
				return true;
			}
			break;
		default:
			{
				//暂时不处理
			}
			break;
		}
	} 
	else
	{
		switch(type)
		{
		case WT_CCNODE:
			{
				CCSprite *sprite = dynamic_cast<CCSprite*>(dynamic_cast<CCNode*>(object)->getChildByTag(tag));
				if(sprite != NULL)
				{
					sprite->stopAllActions();
					sprite->removeFromParentAndCleanup(true);
				}
				return true;
			}
			break;
		case WT_CCLAYER:
			{
				CCSprite *sprite = dynamic_cast<CCSprite*>(dynamic_cast<CCLayer*>(object)->getChildByTag(tag));
				if(sprite != NULL)
				{
					sprite->stopAllActions();
					sprite->removeFromParentAndCleanup(true);
				}
				return true;
			}
			break;
		case WT_CCSPRITE:
			{
				CCSprite *sprite = dynamic_cast<CCSprite*>(dynamic_cast<CCSprite*>(object)->getChildByTag(tag));
				if(sprite != NULL)
				{
					sprite->stopAllActions();
					sprite->removeFromParentAndCleanup(true);
				}
				return true;
			}
			break;
		case WT_CCCONTROLBUTTON:
			{
				CCSprite *sprite = dynamic_cast<CCSprite*>(dynamic_cast<CCControlButton*>(object)->getChildByTag(tag));
				if(sprite != NULL)
				{
					sprite->stopAllActions();
					sprite->removeFromParentAndCleanup(true);
				}
				return true;
			}
			break;
		default:
			{
				//暂时不处理
			}
			break;
		}
	}
	return false;
}

bool World::isMenuEffect( CCObject* object , int type ,int tag )
{
	switch(type)
	{
	case WT_CCNODE:
		{
			if (dynamic_cast<CCNode*>(object)->getChildByTag(tag))
			{
				return true;
			}
			return false;
		}
		break;
	case WT_CCLAYER:
		{
			if (dynamic_cast<CCLayer*>(object)->getChildByTag(tag))
			{
				return true;
			}
			return false;
		}
		break;
	case WT_CCSPRITE:
		{
			if (dynamic_cast<CCSprite*>(object)->getChildByTag(tag))
			{
				return true;
			}
			return false;
		}
		break;
	case WT_CCCONTROLBUTTON:
		{
			if (dynamic_cast<CCControlButton*>(object)->getChildByTag(tag))
			{
				return true;
			}
			return false;
		}
		break;
	default:
		{

		}
		break;
	}
	return false;
}

void World::doTransmitEvent( float ft )
{
	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
	if (!player)
	{
		return;
	}
	CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::doTransmitEvent), this);
}

int World::GetIsShowMysteryEffect()
{
	tagDWORDTime nowTime = ServerTime::getInstance()->cal_current_server_dword_time();
	tagDWORDTime dwLastSilverTime(RoleManager::getInstance()->getLocalPlayer()->getSilverBoxTime());
	tagDWORDTime dwLastGoldTime(RoleManager::getInstance()->getLocalPlayer()->getGoldBoxTime());
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	unsigned int freeSilverBoxTime = CalcTimeDiff(nowTime, dwLastSilverTime);
	unsigned int freeGoldBoxTime = CalcTimeDiff(nowTime, dwLastGoldTime);
	//int num = player->getRoleDayClearInfoTwo(ERDCT_SILVER_TREASURE_OPEN_COUNT);
	int count = 0;
	if (player)
	{
		if (player->getRoleDayClearInfoTwo(ERDCT_SILVER_TREASURE_OPEN_COUNT) == 5)
		{
			++ count;
		}
		else if (player->getRoleDayClearInfoTwo(ERDCT_SILVER_TREASURE_OPEN_COUNT) > 0 && freeSilverBoxTime >= 600)
		{
			++ count;
		}
		if (freeGoldBoxTime >= 86400 || dwLastGoldTime == 0)
		{
			++ count;
		}
	}
	return count;
}
unsigned int World::onDarongluDegree( s_net_cmd *cmd )
{
	WorldPacket Msg((const void*)cmd);
	int dw_result;
	int dw_degrees;
	int dw_expr;
	//unsigned int equipExp;
	Msg >> dw_result;	
	if (dw_result == 0)
	{
		Msg >> dw_degrees;	
		Msg >> dw_expr;
		if (dw_expr != -1)
		{
			DaRongLuUiMgr::GetInstance()->newExp = dw_expr;
		}
		if (dw_degrees < 0 || dw_degrees > 1000)
		{
			dw_degrees = 0;
		}
		DaRongLuUiMgr::GetInstance()->degree = dw_degrees / 10.0;
	}
	return 0;
}


void World::initHpChangeAttData()
{
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM AttackNum");
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	int count = 0;
	while(table->retrieve_row())
	{
		unsigned int idx = table->get_index("StartPosX");
		_hpChangeAttData[count].StartPosX = table->get_integer32(idx);
		idx = table->get_index("StartPosY");
		_hpChangeAttData[count].StartPosY = table->get_integer32(idx);
		idx = table->get_index("EndPosX");
		_hpChangeAttData[count].EndPosX = table->get_integer32(idx);
		idx = table->get_index("EndPosY");
		_hpChangeAttData[count].EndPosY = table->get_integer32(idx);
		idx = table->get_index("JumpHeight");
		_hpChangeAttData[count].JumpHeight = table->get_integer32(idx);
		idx = table->get_index("InitZoom");
		_hpChangeAttData[count].InitZoom = table->get_double(idx);
		idx = table->get_index("MidZoom");
		_hpChangeAttData[count].MidZoom = table->get_double(idx);
		idx = table->get_index("EndZoom");
		_hpChangeAttData[count].EndZoom = table->get_double(idx);
		idx = table->get_index("InitMidTime");
		_hpChangeAttData[count].InitMidTime = table->get_double(idx);
		idx = table->get_index("MidEndTime");
		_hpChangeAttData[count].MidEndTime = table->get_double(idx);
		idx = table->get_index("ThenMoveTime");
		_hpChangeAttData[count].ThenMoveTime = table->get_double(idx);
		idx = table->get_index("DisappearTime");
		_hpChangeAttData[count].DisappearTime = table->get_double(idx);
		//if (count == HCT_Miss)
		//{
		//	break;
		//}
		++ count;
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
}
void World::setVIPLevel(int level)
{
	if (_roleHeadUi)
	{
		_roleHeadUi->updateVIPIcon();
	}
}

void World::setSingCurDayVisible( int curday )
{
	bool bEanbleSign = NewFuncGuider::get_singleton().enableSign();
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	_signbtn = dynamic_cast<CCControlButton*>(pUI->getSignBtn());
	_insignbtn = dynamic_cast<CCControlButton*>(pUI->getInsideSignBtn());

	if (!bEanbleSign)
	{
		_signbtn->setVisible(false);
		_insignbtn->setVisible(false);

		pUI->arrange();

		return;
	}
	curday = curday % MAX_SIGN_DAY_NUM;
	if (curday >= MAX_SIGN_DAY_NUM)
		curday = MAX_SIGN_DAY_NUM-1;
	if(curday < 0)
		curday = 0;
	if (RewardMgr::getInstance()->isSignedCurDay(curday))
	{//已签到
		pUI->setSignShowInfo(false);
		_signbtn->setVisible(false);
		_insignbtn->setVisible(true);
	}
	else
	{
		pUI->setSignShowInfo(true);
		_signbtn->setVisible(true);
		_insignbtn->setVisible(false);

		//在签到刷新为00点(2分钟以内)时，进行提示
		tagDWORDTime nowTime = ServerTime::getInstance()->cal_current_server_dword_time();
		if(nowTime.hour < 1 && nowTime.min <= 1)
		{
			ToolTip::getInstance()->push(GET_STR(2337));
		}
	}

	pUI->arrange();

	//btnSetLeft();
}

void World::onSignBack()
{
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	CCControlButton* _signBtn =dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(37));
	_signBtn->setScale(1.f, 1.f);
	_signBtn->setVisible(false);

	_signbtn->setVisible(false);

	pUI->arrange();
}
//陆晓龙 2015-6-25 在线动作执行完成后实行的回调
void World::onZaixianBack()
{
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	CCControlButton* zaixianBtn =dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(8));
	zaixianBtn->setScale(1.f, 1.f);
	//CCNode* timeShow =dynamic_cast<CCNode*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(11));
	zaixianBtn->setVisible(false);
	//timeShow->setVisible(false);
	pUI->arrange();
}

void World::setSignBtnUpdate()
{
	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	_signbtn = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(37));
	_insignbtn = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(12)->getChildByTag(38));
	_signbtn->setVisible(true);
	_insignbtn->setVisible(false);

	pUI->arrange();
}

unsigned int World::onGetLocalRoleDayData( s_net_cmd *cmd )
{
	NET_SIS_role_day_clear_two_data* msg = (NET_SIS_role_day_clear_two_data*)cmd;
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if (player == NULL)
		return 0;
	if (msg->bydata < 0)
		return 0;
	player->setRoleDayClearInfoTwo(msg->byType,msg->bydata);

	if (ERDCT_JJC_PK_COUNT == msg->byType)
	{
		ArenaMainMgr::getInstance()->setWuyejjcTimes(msg->bydata);
	}
	// 	else if (ERDCT_ZUMA_FUBEN_COUNT == msg->byType)
	// 	{
	// 		if (msg->bydata < 0)
	// 			return 0;
	// 		LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	// 		if (player)
	// 		{
	// 			player->setRoleDayClearInfoTwo(ERDCT_ZUMA_FUBEN_COUNT,msg->bydata);
	// 		}
	// 	}
	return 0;
}

unsigned int World::onGetLocalRoleDayByself( s_net_cmd *cmd )
{
	NET_SIS_role_day_all_byself* msg = (NET_SIS_role_day_all_byself*)cmd;
	if (msg->BySelfExp >= 0)
	{
		LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
		if (player)
		{
			player->SetAddOfflineSelf(msg->BySelfExp);
			OffLineExpUiLayer * ui = getUiNodeByTag<OffLineExpUiLayer>(WCT_OffLineExpUi);
			if(ui)
				ui->updateData();

			MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
			if(pUI)
			{		
				pUI->setOffPercent(player);
				//World::getInstance()->setBallImage();
			}
		}
	}

	return 0;
}

unsigned int World::onGetLocalRoleDayFlower( s_net_cmd *cmd )
{
	NET_SIS_role_day_all_Flower* msg = (NET_SIS_role_day_all_Flower*)cmd;
	if (msg->FlowerExp >= 0)
	{
		LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
		if (player)
		{
			player->setRoleDayClearInfoTwo(ERDCT_Flowers_MaxCount,msg->byFlowerCount);
			/*OffLineExpUiLayer* pUI = getUiNodeByTag<OffLineExpUiLayer>(WCT_OffLineExpUi);
			if (pUI)
			{
			pUI->ploc->SetOfflineFlower(msg->nOfflineFlowerExp);();
			}*/

			player->SetOfflineFlower(msg->FlowerExp);
			OffLineExpUiLayer * ui = getUiNodeByTag<OffLineExpUiLayer>(WCT_OffLineExpUi);
			if(ui)
				ui->updateData();

			MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
			if(pUI)
			{
				pUI->setOffPercent(player);
				if(msg->FlowerExp > 0)
					World::getInstance()->setBallImage();
			}
		}

	}
	return 0;
}

unsigned int World::onGetLocalRoleDayStartTime( s_net_cmd *cmd )
{
	//NET_SIS_role_day_all_startTime* msg = (NET_SIS_role_day_all_startTime*)cmd;
	//LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	/*if (player)
	player->SetOfflineStartTime(msg->time);*/

	return 0;
}


unsigned int World::onGetLocalRoleDayDoublepair( s_net_cmd *cmd )
{
	NET_SIS_role_day_all_Doublepair* msg = (NET_SIS_role_day_all_Doublepair*)cmd;
	if (msg->DoubleExp >= 0)
	{
		LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
		if (player)
		{
			player->setRoleDayClearInfoTwo(ERDCT_Double_Repair_MaxCount,msg->byDoublepairCount);
			/*OffLineExpUiLayer* pUI = getUiNodeByTag<OffLineExpUiLayer>(WCT_OffLineExpUi);
			if (pUI)
			{
			pUI->setTreasureOddNum();
			}*/
			player->SetOffLineDouble(msg->DoubleExp);
			OffLineExpUiLayer * ui = getUiNodeByTag<OffLineExpUiLayer>(WCT_OffLineExpUi);
			if(ui)
				ui->updateData();

			MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
			if(pUI)
			{
				pUI->setOffPercent(player);	  
				if(msg->DoubleExp > 0)
					World::getInstance()->setBallImage();
			}
		}

	}
	return 0;
}

unsigned int World::onGetLocalRoleDayRedEnvelope( s_net_cmd *cmd )
{
	NET_SIS_role_day_all_RedEnvelope* msg = (NET_SIS_role_day_all_RedEnvelope*)cmd;
	if (msg->RedEnvelopeExp >= 0)
	{
		LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
		if (player)
		{
			player->setRoleDayClearInfoTwo(ERDCT_m_RedEnvelope_MaxCount,msg->byRedEnvelopeCount);
			/*OffLineExpUiLayer* pUI = getUiNodeByTag<OffLineExpUiLayer>(WCT_OffLineExpUi);
			if (pUI)
			{
			pUI->SetOffLineRedEnvelope();
			}*/

			player->SetOffLineRedEnvelope(msg->RedEnvelopeExp);
			OffLineExpUiLayer * ui = getUiNodeByTag<OffLineExpUiLayer>(WCT_OffLineExpUi);
			if(ui)
				ui->updateData();

			MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
			if(pUI)
			{
				pUI->setOffPercent(player);
				if(msg->RedEnvelopeExp > 0)
					World::getInstance()->setBallImage();
			}
		}

	}
	return 0;
}

void World::btnSetLeft()
{
	//std::vector<int> btnVec;
	//btnVec.push_back(11);
	//btnVec.push_back(8);
	//bool isMove = btnSetLeft(btnVec, 37);
	//btnVec.clear();
	//btnVec.push_back(24);
	//btnVec.push_back(38);
	//btnVec.push_back(39);
	//bool isMove2 = btnSetLeft(btnVec, 8, isMove);

	//MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	//if (!pUI)
	//	return;
	//CCNode*  fatherNode = dynamic_cast<CCNode*>(pUI->getChildByTag(0)->getChildByTag(1));
	//if (!fatherNode)
	//	return;
	//CCNode* Node1  = fatherNode->getChildByTag(37);
	//CCNode* Node2  = fatherNode->getChildByTag(8);
	//if (Node1 && Node2)
	//{
	//	if (!Node1->isVisible() && !Node2->isVisible())
	//	{
	//		btnSetLeft(btnVec, 37);	
	//	}
	//}

	//陆晓龙 2015-6-29 MiniMapUI的 活动传送，在线等btn
	CCArray childrenBtns;

	MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	if (!pUI)
		return;
	CCNode*  fatherNode = dynamic_cast<CCNode*>(pUI->getChildByTag(0)->getChildByTag(1));
	if (!fatherNode)
		return;
	CCNode* Node  = fatherNode->getChildByTag(37);
	if (Node)
		childrenBtns.addObject(Node);
	Node  = fatherNode->getChildByTag(11);
	if (Node)
		childrenBtns.addObject(Node);
	Node  = fatherNode->getChildByTag(23);
	if (Node)
		childrenBtns.addObject(Node);
	Node  = fatherNode->getChildByTag(24);
	if (Node)
		childrenBtns.addObject(Node);
	//可见btn
	map<int,CCNode* > visibleBtns;
	//不可见btn;
	map<int,CCNode* > unVisibleBtns;
	//CCArray * children = fatherNode->getChildren();
	for (unsigned int i=0;i<childrenBtns.count();i++)
	{
		CCNode* childrenNode= dynamic_cast<CCNode*> (childrenBtns.objectAtIndex(i));
		//离线
		if (childrenNode == NULL)
			continue;
		if(childrenNode->getTag()==23){
			if (childrenNode->isVisible())
			{
				visibleBtns[1]=childrenNode;
			}
			else
			{
				unVisibleBtns[1]=childrenNode;
			}
		}
		//签到
		if (childrenNode->getTag()==37)
		{
			if (childrenNode->isVisible())
			{
				visibleBtns[2]=childrenNode;
			}
			else
			{
				unVisibleBtns[2]=childrenNode;
			}
		}
		//在线
		if (childrenNode->getTag()==11)
		{
			if (childrenNode->isVisible())
			{
				visibleBtns[3]=childrenNode;
			}
			else
			{
				unVisibleBtns[3]=childrenNode;
			}
		}

		//活动传送
		if (childrenNode->getTag()==24)
		{
			if (childrenNode->isVisible())
			{
				visibleBtns[4]=childrenNode;
			}
			else
			{
				unVisibleBtns[4]=childrenNode;
			}
		}

	}

	//将可见的node按顺序排列
	int width = 60;
	////获取离线的位置
	//MiniMapUi* pUI = World::getInstance()->getMiniMapUi();
	//if (!pUI)
	//	return ;
	//CCNode*  fatherNode = dynamic_cast<CCNode*>(pUI->getChildByTag(0)->getChildByTag(1));

	CCNode * lixianNode = fatherNode->getChildByTag(23);
	int px = 0;
	if (lixianNode)
		px = lixianNode->getPositionX();
	int index = 0;
	for (map<int,CCNode* >::iterator iter = visibleBtns.begin();iter!=visibleBtns.end();iter++)
	{
		if(iter->second->getTag()==11)
		{
			CCNode * node = fatherNode->getChildByTag(8);
			if (node)
			{
				CCMoveTo * moveTo = CCMoveTo::create(0.3f,ccp(px-width*index,node->getPositionY()));
				node->runAction(moveTo);
			}
		}
		if(iter->second->getTag()==24)
		{
			CCNode * node = fatherNode->getChildByTag(38);
			if (node)
			{
				//CCMoveTo * moveTo = CCMoveTo::create(0.3f,ccp(px-width*index,node->getPositionY()));
				//node->setPositionX(px-width*index);
				CCNode * node1 = fatherNode->getChildByTag(39);
				if (node1)
				{
					CCMoveTo * moveTo1 = CCMoveTo::create(0.3f,ccp(px-width*index,node1->getPositionY()));
					node1->runAction(moveTo1);
				}
			}
		}
		CCMoveTo * moveTo = CCMoveTo::create(0.3f,ccp(px-width*index,iter->second->getPositionY()));
		iter->second->runAction(moveTo);
		++index;
	}
}

unsigned int World::onServerSkillStone( s_net_cmd *cmd )
{
	NET_SIS_Skill_Stone* msg = (NET_SIS_Skill_Stone*)cmd;
	if (msg)
	{
		if (EV_Warrior == msg->error)
		{
			ToolTip::getInstance()->push(STRING_TABLE["warrior_dmg_valid"]);
		}
		else if (EV_Mage == msg->error)
		{
			ToolTip::getInstance()->push(STRING_TABLE["mage_dmg_valid"]);
		}
		else if (EV_Taoist == msg->error)
		{
			ToolTip::getInstance()->push(STRING_TABLE["daoist_dmg_valid"]);
		}
	}
	return 0;
}

unsigned int World::onGotoQuestPos( s_net_cmd *cmd )
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if (NULL == player)
		return 0;

	NET_SIS_Goto_Quest_Pos *msg = (NET_SIS_Goto_Quest_Pos*)cmd;
	if (NULL == msg)
		return 0;

	if(msg->errinfo == E_Success)
	{
		player->ClearPath();
		//getMiniMapUi()->scheduleOnce(schedule_selector(World::RunStandAni),0.8f);
		player->setAutoRunState(false);
		player->setShowAutoRun(false);

		MapManager::getInstance()->check_map_trigger(); // [whp] fix bug 2305: 使用小飞鞋后检测触发器（传送）
	}
	else
	{
		if(msg->errinfo == E_Item_NotFound)	 //没有小飞鞋物品
			ToolTip::getInstance()->push(GET_STR(7280));
		else if(msg->errinfo == 	E_MOEVE_FAIL)
			ToolTip::getInstance()->push(GET_STR(9069));

		MapManager::getInstance()->SetISetEnabled(true);
	}

	return 0;
}

void World::RunStandAni(float dt)
{
	//	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	//	if (NULL == player)
	//		return ;
	//
	//	player->setAutoRunState(false);
	//	CC_ASSERT(NULL != player->GetRunNode());
	//	if(player->GetRunNode()->GetActionState())
	//		player->GetRunNode()->StopAction(false, true);
	//
	//		player->runStandAni();
	//		CC_ASSERT(NULL != player->stateMachine());
	//		player->stateMachine()->SetCurrentState(LocalPlayerStateStand::getInstance());
	//
}

unsigned int World::onServerSummonBoss( s_net_cmd *cmd )
{
	NET_SIS_Summon_Boss* msg = (NET_SIS_Summon_Boss*)cmd;
	if (!msg)
		return 0;
	string t_str = "";
	if (msg->dw_error == E_Success)
	{
		//关闭对话界面
		NPCTalkUi* ui = World::getInstance()->getNPCDialog();
		if(ui)
		{
			ui->show(false);
		}
		ToolTip::getInstance()->push(STRING_TABLE["boss_appear_right_now"]);
		m_pBossType = msg->bossType;
		if (m_pBossType >= 0 && m_pBossType <6)
		{
			//祖玛阁2层才播放骰子特效
			unsigned int mapId = MapManager::getInstance()->getCurMapId();
			if (mapId == ZUMA_FUBEN_BOSS_MAP)
			{
				playGambleAn();
			}
		}
	}
	else if (msg->dw_error == E_Instance_Zuma_Already_Summon_Boss)
	{
		ToolTip::getInstance()->push(GET_STR(9094));
	}
	else if (msg->dw_error == E_Instance_Zuma_Beging_Summon_Boss)
	{
		ToolTip::getInstance()->push(GET_STR(9095));
	}
	else if (msg->dw_error == E_Instance_Zuma_Boss_Exist)
	{
		ToolTip::getInstance()->push(GET_STR(9096));
	}
	else if (msg->dw_error == E_Instance_Zuma_Boss_No_Enough_Yuanbao)
	{
		ToolTip::getInstance()->push(GET_STR(9097));
	}
	else if (msg->dw_error == E_Instance_Zuma_other_Summon_Boss)
	{
		ToolTip::getInstance()->push(GET_STR(9098));
		m_pBossType = msg->bossType;
		if (m_pBossType >0 && m_pBossType <=6)
		{
			//祖玛阁2层才播放骰子特效
			unsigned int mapId = MapManager::getInstance()->getCurMapId();
			if (mapId == ZUMA_FUBEN_BOSS_MAP)
			{
				playGambleAn();
			}
		}
	}
	else if (msg->dw_error == E_Instance_Zuma_Boss_No_Enough_Silver)
	{
		ToolTip::getInstance()->push(GET_STR(9099));
	}
	else if (msg->dw_error == E_Instance_Fane_Book_Not_Find)
	{
		//ToolTip::getInstance()->push(GET_STR(9085));
		CCScene* scene = World::getInstance()->getScene();
		if (scene)
		{
			//关闭对话界面
			NPCTalkUi* ui = World::getInstance()->getNPCDialog();
			if(ui)
			{
				ui->show(false);
			}
			MessageBoxUi *msgUi = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI, GET_STR(9554).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
			scene->addChild(msgUi, WZ_MESSAGEBOX);
			msgUi->signalOkBtnPressed.connect(InstanceMgr::getInstance(), &InstanceMgr::confirmSummonFaneBoss);
		}
	}
	else if (msg->dw_error == E_Instance_Zuma_Boss_No_Level)
	{
		ToolTip::getInstance()->push(GET_STR(9217));
	}
	else if (msg->dw_error == E_Instance_Fane_Monster_Instruct_Num)
	{
		ToolTip::getInstance()->push(GET_STR(9439));
	}
	else if (msg->dw_error == E_Instance_Fane_Not_YuanBao)
	{
		ToolTip::getInstance()->push(GET_STR(2211));
	}
	else if (msg->dw_error == E_Instance_Help_Summon_Boss_Not_Dead)
	{
		ToolTip::getInstance()->push(STRING_TABLE["Instance_Help_Summon_Boss_Not_Dead"]);
	}
	else if (msg->dw_error == E_Instance_Help_Summon_Boss_Level_Limit)
	{
		InstanceCallData t_data;
		bool t_isSuccess = InstanceMgr::getInstance()->getInstanceCallDataBySelectNpcID(t_data);
		if (t_isSuccess)
		{
			safe_sprintf(t_str,STRING_TABLE["Instance_Help_Summon_Boss_Level_Limit"],t_data.m_nMinLV,t_data.m_nMaxLV);
			ToolTip::getInstance()->push(t_str);
		}
		
	}
	else if (msg->dw_error == E_Instance_Help_Summon_Boss_Num_Limit)
	{
		ToolTip::getInstance()->push(STRING_TABLE["Instance_Help_Summon_Boss_Num_Limit"]);
	}

	return 0;
}

void World::playGambleAn()
{
	BSAnimate *bsanims = _diceAnim[0];
	m_pDiceSp = CCSprite::create();
	m_pDiceSp->setAnchorPoint(ccp(0.5,0.5));
	CCSize vSize = CCDirector::sharedDirector()->getVisibleSize();
	m_pDiceSp->setPosition(ccp(vSize.width/2,vSize.height/2));
	CCScene *scene = UiMgr::getInstance()->getCurScene();
	CC_ASSERT(scene != NULL);
	scene->addChild(m_pDiceSp, WZ_JOY);
	m_pDiceSp->stopAllActions();
	m_pDiceSp->runAction(CCSequence::createWithTwoActions(bsanims, CCCallFunc::create(this, SEL_CallFunc(&World::animationCallback))));
	//CCSequence* squ = CCSequence::createWithTwoActions(bsanims, CCCallFunc::create(this,SEL_CallFunc(&InstanceMgr::animationCallback)));
}

void World::animationCallback()
{
	int num = m_pBossType + 1;
	if(1 > num || 6 < num)
		return ;
	//AnimationCache::getInstance()->releaseSinEffect("E1_164");
	std::string dir = CFGReader::instance()->get_profile_string("Art", "ICON", "") + "SingleUI/";
	std::string	str = dir +"shaizi_";
	//char szBuf[2] = {0};
	std::ostringstream ostr;
	ostr << num;
	str += std::string(ostr.str().c_str()) + ".png";
	CCSprite *sprite = CCSprite::create(str.c_str());
	sprite->setAnchorPoint(ccp(0.5,0.5));
	CCSize size = m_pDiceSp->getContentSize();
	sprite->setPosition(ccp(size.width/2,size.height/2));
	m_pDiceSp->addChild(sprite);
	m_pDiceSp->stopAllActions();
	m_pDiceSp->runAction(CCSequence::createWithTwoActions(CCDelayTime::create(1.0f), CCCallFunc::create(this, SEL_CallFunc(&World::animationCallback2))));
}

void World::animationCallback2()
{
	m_pDiceSp->stopAllActions();
	m_pDiceSp->removeFromParentAndCleanup(true);
}
#include "ItemAutoUseDaojuTip.h"
void World::justTest( CCObject* pSender )
{
#ifdef _WIN32

	//OPEN_UI(WCT_Guild_NaturalGift_Ui);

	//CCTextureCache::sharedTextureCache()->dumpCachedTextureInfo();
	//LocalPlayer* lp = RoleManager::getInstance()->getLocalPlayer();
	//lp->runLevelUpEffect();
#ifdef CC_PROFILE_ENABLE
	profile_util::cc_profiler::getSingleton().logResults();
#endif

#endif
	//GuildMgr::getInstance()->onUpdateTargetItemInfo();
	//  	QuestComplete evt;
	//  	evt.nQuestID = 1046;
	//  	SEND_EVENT(&evt);
}

void World::addStoneAnim( bool isAdd )
{
	if (isAdd == true)
	{
		if (_stoneAnim.empty())
		{
			AnimationCache::createDefList(1, _stoneAnim,false);
			AnimationCache::getInstance()->getSinEffect(0, "E1_169", _stoneAnim);
		}
	}
	else
	{
		AnimationCache::getInstance()->releaseDefList(_stoneAnim);
		AnimationCache::getInstance()->releaseSinEffect("E1_169",true);
	}
}

void World::addDiceAnim( bool isAdd )
{
	if (isAdd == true)
	{
		if (_diceAnim.empty())
		{
			AnimationCache::createDefList(1, _diceAnim,false);
			AnimationCache::getInstance()->getSinEffect(0, "E1_164", _diceAnim);
		}
	}
	else
	{
		AnimationCache::getInstance()->releaseDefList(_diceAnim);
		AnimationCache::getInstance()->releaseSinEffect("E1_164",true);
	}
}

//离线经验飞球特效
void World::CreateBall(float dt)
{
	Role *role = RoleManager::getInstance()->getLocalPlayer();  
	CC_ASSERT(role != NULL);

	if(NULL == MapManager::getInstance()->getMap())	
		return;

	CCCamera *c = MapManager::getInstance()->getMap()->getCamera();
	float camx;
	float camy;
	float z;
	c->getEyeXYZ(&camx,&camy,&z);

	CCSprite * cc_particle = CCSprite::create();
	if(cc_particle)
	{	

		std::string dir = CFGReader::instance()->get_profile_string("Art", "ICON", "") + "SingleUI/";
		std::string	str = dir + "ball.png";
		CCSpriteFrame* Frame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(str.c_str());
		if(Frame == NULL)
		{
			CCTexture2D *texture = CCTextureCache::sharedTextureCache()->addImage(str.c_str());
			Frame = CCSpriteFrame::createWithTexture(texture, CCRect(0.0, 0.0, texture->getPixelsWide(), texture->getPixelsHigh()));
			CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFrame(Frame, str.c_str());
		}

		if (Frame)
			cc_particle->setDisplayFrame(Frame);

		cc_particle->setPosition(ccp(role->getRoleNode()->getPositionX() - camx,role->getRoleNode()->getPositionY() - camy));
		cc_particle->setScale(0.2f);
		//飞球的终点位置
		CCPoint ParticleEndPos = ccp(_miniMapUi->getActivityBtnPos().x,_miniMapUi->getActivityBtnPos().y);
		ccBezierConfig bezier;
		bezier1x = rand() & 100 + 100;
		bezier1y = rand() & 150 + 100;
		bezier2x = rand() & 100 + 100;
		bezier2y = rand() & 50 + 100;
		bezier.controlPoint_1 = ccp( bezier1x,bezier1y);
		bezier.controlPoint_2 = ccp(bezier2x,bezier2y);
		bezier.endPosition = ccp(ParticleEndPos.x - cc_particle->getPositionX() ,ParticleEndPos.y - cc_particle->getPositionY());
		CCActionInterval *acctionmove = CCBezierBy::create(0.8f,bezier);
		CCActionInterval *seq = (CCActionInterval*)CCSequence::create(acctionmove,CCCallFuncND::create(this,callfuncND_selector(World::bezierOverCallFun),this),NULL);
		/*	CCFadeOut *fadeOut = CCFadeOut::create(1.5f);
		CCArray *arr = CCArray::create();
		arr->addObject(acctionmove);
		arr->addObject(seq);
		arr->addObject(fadeOut);
		cc_particle->runAction(CCSpawn::create(acctionmove, seq, fadeOut, NULL));*/
		CCSpeed * speed = CCSpeed::create(seq,1.5f);
		cc_particle->runAction(speed);
		_scene->addChild(cc_particle, WZ_MINIMAPUI);

		_BallCount++;
		cc_particle->setTag(_BallCount);
		if(10 == _BallCount)
		{
			CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::CreateBall), this);
			_BallCount = 0;
		}
	}
}

void World::setBallImage()
{
	if(0 == _BallCount)
	{
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::CreateBall), this, 0.1f, false);
	}
}

float World::getParticleAngle(CCPoint startPos,CCPoint endPos)
{
	if(0 == (endPos.y - startPos.y))
		return 0.0f;

	float angle = atan2((float)(endPos.x - startPos.x) ,(float)(endPos.y - startPos.y));
	if(isnan(angle))
		return 0.0f;

	return angle;
}

void World::bezierOverCallFun(CCNode *node, void *data)
{
	if(NULL != node)
	{
		node->removeFromParent();
		if(10 == node->getTag())
			FreeBall();

	}

	MiniMapUi* ui = World::getInstance()->getMiniMapUi();
	if(NULL == ui)
		return ;

	MiniMapUiLoaderLayer* pMiniMapLayer = (MiniMapUiLoaderLayer*)ui->getChildByTag(0);
	if(1 == node->getTag() && NULL != pMiniMapLayer)
		pMiniMapLayer->setBallEffct();
}

void World::FreeBall()
{
	MiniMapUi* ui = World::getInstance()->getMiniMapUi();
	if(NULL == ui)
		return ;

	MiniMapUiLoaderLayer* pMiniMapLayer = (MiniMapUiLoaderLayer*)ui->getChildByTag(0);
	if(NULL != pMiniMapLayer && NULL !=	pMiniMapLayer->_tmpAcNode9)
	{
		if(pMiniMapLayer->_tmpAcNode9->isVisible())
			pMiniMapLayer->_tmpAcNode9->setVisible(false);
	}	
}

void World::fubenCountDown( s_net_cmd *cmd )
{
	NET_SIS_goto_new_map *msg = (NET_SIS_goto_new_map *)cmd;
	CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this);
	//if (_fubenNumBLabel)
	//	_fubenNumBLabel->setVisible(false);//每次切换地图先隐藏
	if (msg->dwMapID == TAOYUAN_MIJING_MAP)//进入的是桃源秘境
	{
		_countDownTime = getcountDownTime(TAOYUAN_MIJING_MAP);
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this, 1.0f, false);
	}

	if (/*msg->dwMapID == FIRE_MASSACRE_MAP_1*/is_fire_massacre_map(msg->dwMapID))//进入的是屠魔圣地
	{
		_countDownTime = getcountDownTime(msg->dwMapID);
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this, 1.0f, false);
	}

	if (msg->dwMapID == GUARD_CUSTOMS_MAP)//进入的是守卫天关
	{
		//_countDownTime = getcountDownTime(GUARD_CUSTOMS_MAP);
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this, 1.0f, false);
	}

	if (msg->dwMapID == GUARD_CUSTOMS_MAP)//进入的是准备大厅
	{
		//_countDownTime = getcountDownTime(GUARD_CUSTOMS_MAP);
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::countDownEffect), this, 1.0f, false);
	}

	AudioPlayer::getSigletonPtr()->stopAllSoundEffect();
}

unsigned int World::onLogoutToRelation( s_net_cmd *cmd )
{
	NET_SIS_logout_to_relation* msg = (NET_SIS_logout_to_relation*)cmd;
	if (msg)
	{
		//更新附近好友、行会成员的等级、更新组队和邀请界面
		SocialMgr::getInstance()->updateRoleLevel(msg->dw_role_id,false,msg->level,msg->nRating);
		MasterPrenticeMgr::getInstance()->updateRoleLevel(msg->dw_role_id,false,msg->level,msg->nRating);
		GuildMgr::getInstance()->updateRoleLevel(msg->dw_role_id,false,msg->level,msg->nRating);
		TeamUiPanel* teamUi = (TeamUiPanel*)getUiNodeByTag<TeamUiPanel>(WCT_TeamUi);
		if (teamUi)
		{
			if (TeamMgr::getInstance()->is_teammate(msg->dw_role_id))
			{
				teamUi->refreshTeammate();
			}
			CCNode* node  = teamUi->getParent()->getChildByTag(message_id_crc("InviteListView"));
			if (node)
			{
				InviteListView* view = dynamic_cast<InviteListView*>(node);
				if (view)
				{
					view->refreshPage(true);
				}
			}
		}
	}

	//RoleHeadUi* roleui = World::getInstance()->getRoleHeadUi();
	//if(NULL != roleui)
	//	roleui->setShoeEnabled(true);

	return 0;
}

unsigned int World::onLoginToRelation( s_net_cmd *cmd )
{
	NET_SIS_login_to_relation* msg = (NET_SIS_login_to_relation*)cmd;
	if (msg)
	{
		//更新附近好友、行会成员的等级、更新组队和邀请界面
		SocialMgr::getInstance()->updateRoleOnline(msg->dw_role_id,true);
		MasterPrenticeMgr::getInstance()->updateRoleOnline(msg->dw_role_id,true);
		GuildMgr::getInstance()->updateRoleOnline(msg->dw_role_id,true);
		TeamUiPanel* teamUi = (TeamUiPanel*)getUiNodeByTag<TeamUiPanel>(WCT_TeamUi);
		if (teamUi)
		{
			if (TeamMgr::getInstance()->is_teammate(msg->dw_role_id))
			{
				teamUi->refreshTeammate();
			}
			CCNode* node  = teamUi->getParent()->getChildByTag(message_id_crc("InviteListView"));
			if (node)
			{
				InviteListView* view = dynamic_cast<InviteListView*>(node);
				if (view)
				{
					view->refreshPage(true);
				}
			}
		}
	}
	return 0;
}

unsigned int World::onServerHeartbeat( s_net_cmd *cmd )
{
	NET_SIS_heartbeat *msg = (NET_SIS_heartbeat*)cmd;
	if (msg)
	{
		_recvHeartDelay = CalcTimeDiff(ServerTime::getInstance()->cal_current_server_dword_time(), msg->sendTime);
		recvOldHeartTime = ServerTime::getInstance()->cal_current_server_dword_time();
	}
	return 0;
}

void World::updateHeartbeat( float dt )
{
	if (_heartTimer.get_milliseconds() >= 1000)
	{
		_heartTimer.reset();

		if (!CCDirector::sharedDirector()->isPaused())
		{
			const int _sendHeartInterval = 10 * 1000;
			if (_heartSendTimer.get_milliseconds() >= _sendHeartInterval)
			{
				sendHeartbeat();
				_heartSendTimer.reset();
			}

			int durTime = CalcTimeDiff(ServerTime::getInstance()->cal_current_server_dword_time(), recvOldHeartTime);
			if (durTime - _recvHeartDelay >= 30)
			{
				if (NumericalIniMgr::getInstance()->get_Heart_hook_open())
				{
					TCP_CLIENT->close();
				}
				recvOldHeartTime = ServerTime::getInstance()->cal_current_server_dword_time();
			}
		}
		else
		{
			_heartSendTimer.reset();
			recvOldHeartTime = ServerTime::getInstance()->cal_current_server_dword_time();
		}
	}
}

void World::sendHeartbeat()
{
	NET_SIC_heartbeat send;
	send.sendTime = ServerTime::getInstance()->cal_current_server_dword_time();
	TCP_CLIENT->send_net_cmd(&send,NP_CRITICAL,false);
}

void World::doscheduleEvent( float ft )
{
	BePKRemindEffect* uiEffect = World::getInstance()->getBePKRemindEffectUi();
	if (uiEffect)
	{
		uiEffect->setVisible(false);
	}

	CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::doscheduleEvent),this);
}

void World::repetStopAllAct()
{
	//停止方向盘
	Joystick *ui = getUiNodeByTag<Joystick>(WCT_JoyStick);
	if (ui)
	{
		ui->stopAct();
	}

	//如果在自动战斗，则停止战斗;
	if (AutoActionMgr::getInstance()->Get_Auto_Action())
	{
		if (_miniMapUi)
		{
			_miniMapUi->ClickAutoFightBtn();
		}
	}
	LocalPlayer* localPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (localPlayer)
	{
		localPlayer->setExitAttackState();
		if (localPlayer->getAutoRunState())
		{
			if(localPlayer->GetRunNode()->GetActionState())
				localPlayer->GetRunNode()->StopAction(false, true);
			localPlayer->setAutoRunState(false);
		}
		CCPoint endPos = localPlayer->getPosition();
		localPlayer->runPathTo(endPos);
	}
	RoleManager::getInstance()->set_select_role_id(INVALID);
	RoleManager::getInstance()->SetTargetRole(NULL);
}

//暂时注释掉重连的逻辑，因为里面有逻辑错误
// void World::repetLogin( bool isInCross )
// {
// 	_repetLoginState = true;
// 	_repetCanGotoMap = false;
// 	_repetCanClose = false;
// 	//清除累积的消息
// 	//TCP_CLIENT->repetLoginClear();
// 	//请求初始化
// 	NET_SIC_repet_login cmd;
// 	TCP_CLIENT->send_net_cmd(&cmd,NP_CRITICAL,false);
// 
// 	_intervalTime = 0.0f;
// 	_delayTime = 0.0f;
// 	_finalTime = 0.0f;
// 	_sendHeartbeat = true;
// 	_startSend = true;
// 
// 	if (isInCross)
// 	{
// 		CrossSceneUI::getInstance()->setPec(10);
// 	}
// 
// 	//	DelayUi::getInstace()->close();
// 	// 	_gotoNewMap = true;
// 	// 	_gotoNewMapStep = 1;
// 	// 	if (isInCross)
// 	// 	{
// 	// 		CrossSceneUI::getInstance()->setPec(10);
// 	// 	}
// 	// 	else
// 	// 	{
// 	// 		CrossSceneUI::getInstance()->open(0);
// 	// 		CrossSceneUI::getInstance()->setPec(10);
// 	// 	}
// }

void World::repetInit()
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if (player == NULL)
	{
		return;
	}
	//清除
	_taskTraceUi->clear();
	_taskTraceUi->removeAllMember();
	MailRewardMgr::getInstance()->delayDestroy();
	SkillManager::getInstance()->delayDestroy();
	ConcernMgr::getInstance()->delayDestroy();
	CelebrateMgr::getInstance()->delayDestroy();
	HearSayMgr::getInstance()->delayDestroy();
	SystemMsg::getInstance()->delayDestroy();
	PackageManager::getInstance()->delayDestroy();
	QuestMgr::getInstance()->delayDestroy();
	SocialMgr::getInstance()->delayDestroy();
	GuildMgr::getInstance()->delayDestroy();
	MasterPrenticeMgr::getInstance()->delayDestroy();
	TeamMgr::getInstance()->delayDestroy();

	//请求初始化
	NET_SIC_get_role_init_state getRoleInit;
	getRoleInit.eType = ERIT_Att;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_CRITICAL, false);

	getRoleInit.eType = ERIT_RepetEnterGame;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_CRITICAL, false);

	//获取人物所有物品
	getRoleInit.eType = ERIT_Item;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_NORMAL, false);

	//获取完成的任务
	getRoleInit.eType = ERIT_CompleteQuest;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_NORMAL, false);

	//获取未完成的任务
	getRoleInit.eType = ERIT_IncompleteQuest;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_NORMAL, false);

	//获取人物技能
	getRoleInit.eType = ERIT_Skill;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_NORMAL, false);

	//获取金钱等
	getRoleInit.eType = ERIT_Money;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_NORMAL, false);

	//同步好友信息
	getRoleInit.eType = ERIT_FrindAndEnemy;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_INSIGNIFICANT, false);

	//同步师徒信息
	getRoleInit.eType = ERIT_MasterPrentice;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_INSIGNIFICANT, false);

	//同步玩家每日清零数据 gx add 
	getRoleInit.eType = ERIT_Other;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_INSIGNIFICANT, false);

	//同步行会信息
	getRoleInit.eType = ERIT_Guild;
	TCP_CLIENT->send_net_cmd(&getRoleInit, NP_IDLE, false);	

	player->sendInitTitle();
	SocialMgr::getInstance()->InitRoleSocialData();

	//同步boss信息
	WorldPacket C2G_Msg(NET_C2G_REQUEST_BOSS_LIST);
	TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_NORMAL, false);

	//获取沙巴克行会信息
	GuildMgr::getInstance()->sendSBKDataRequest();
	//获取所有公会信息
	GuildMgr::getInstance()->sendAllGuildRequest(false);

	NET_SIC_get_daily_online_reward getOLReward;
	TCP_CLIENT->send_net_cmd(&getOLReward, NP_IDLE, false);

	// gx add 2014.3.15摇钱树相关
	_bOpenRechargeFeedback = false;//默认不开启
	NET_SIC_get_recharge_feedback_flag getFeedback;
	TCP_CLIENT->send_net_cmd(&getFeedback, NP_INSIGNIFICANT, false);

	//同步信息
	NET_SIC_load_complete loadComplete;
	TCP_CLIENT->send_net_cmd(&loadComplete, NP_NORMAL, false);

	RewardMgr::getInstance()->sendRewardItems();
}

unsigned int World::onDailyacttransmit( s_net_cmd *cmd )
{
	NET_SIS_daily_act_transmit* msg = (NET_SIS_daily_act_transmit*)cmd;
	if (msg)
	{
		LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
		if(NULL != player)
		{
			player->stateMachine()->ChangeState(LocalPlayerStateStand::getInstance());
			player->setIsPath(false);
		}

		switch (msg->dwError)
		{
		case E_Instance_role_dead:
			ToolTip::getInstance()->push(GET_STR(9208));
			break;
		case E_Instance_role_shuangxiu:
			ToolTip::getInstance()->push(GET_STR(9176));
			break;
		case E_Instance_role_stall:
			ToolTip::getInstance()->push(GET_STR(9174));
			break;
		case E_Instance_role_exchange:
			ToolTip::getInstance()->push(GET_STR(9164));
			break;
		case E_Instance_not_activity_time:
			ToolTip::getInstance()->push(GET_STR(9093));
			break;
		case E_Instance_role_tie:
			ToolTip::getInstance()->push(STRING_TABLE["fuben_role_is_tie"]);
			break;
		}
	}
	return 0;
}

unsigned int World::onSetPath(s_net_cmd *cmd )
{
	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
	if(NULL != player)
	{
		player->stateMachine()->ChangeState(LocalPlayerStateStand::getInstance());
		player->setIsPath(false);
	}

	return 0;
}

unsigned int World::onMonthCardState( s_net_cmd *cmd )
{
	NET_SIS_role_month_card_state * msg = (NET_SIS_role_month_card_state*)cmd;
	if(1 == msg->state)
		ToolTip::getInstance()->push(GET_STR(9562));
	else if( 2 == msg->state)
	{
		std::stringstream oss;
		oss << msg->day;
		ToolTip::getInstance()->push(replaceStr(GET_STR(9561),"*",oss.str()));
	}

	return 0;
}

unsigned int World::onMonthCardBeginTime( s_net_cmd *cmd )
{
	NET_SIS_MonthCardBegin * msg = (NET_SIS_MonthCardBegin*)cmd;
	tagDWORDTime t_time = msg->dw_month_card_time;

	//bool isShowBuff = false;
	RoleManager::getInstance()->getLocalPlayer()->SetMonthCardStartTime(t_time);
	// 	tagDWORDTime curtime = ServerTime::getInstance()->cal_current_server_dword_time();
	// 	int second = CalcTimeDiff(curtime,t_time);
	// 	if (second > 0)
	// 	{
	// 		isShowBuff = true;
	// 	}
	// 	//设置图标显示
	return 0;
}


unsigned int World::onRoleInitStateAtt( s_net_cmd *cmd )
{
	NET_SIS_get_role_init_state_att *roleState = (NET_SIS_get_role_init_state_att*)cmd;

	//char* netData = new char[roleState->size];
	//memset(netData, 0, sizeof(roleState->size));
	//memcpy((void*)netData,(void*)roleState,sizeof(char)*roleState->size);

	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
	player->initBloodUi();
	player->setAttribute(RA_ROLETYPE, (RoleType)roleState->eClassType);
	player->setAttribute(RA_SEX, (int)roleState->Avatar.bySex);
	player->setAttribute(RA_BATTLEMODE, (int)roleState->ePKState);
	player->setAttribute(RA_HP, roleState->nAtt[ERA_HP]);
	player->setAttribute(RA_MP, roleState->nAtt[ERA_MP]);
	player->setAttribute(RA_MaxHP, roleState->nAtt[ERA_MaxHP]);
	player->setAttribute(RA_MaxMP, roleState->nAtt[ERA_MaxMP]);
	player->setAttribute(RA_WalkSpeed, ROLE_BASE_SPEED * roleState->nAtt[ERA_Speed_XZ]);
	player->setAttribute(RA_RideSpeed, ROLE_BASE_SPEED * roleState->nAtt[ERA_Speed_Mount]);
	player->setAttribute(RA_DEAD, roleState->dwState & (0x1 << ES_Dead));
	player->setAttribute(RA_HITRATE, roleState->nAtt[ERA_HitRate]);
	player->setAttribute(RA_DODGE, roleState->nAtt[ERA_Dodge]);
	player->setAttribute(RA_CRIT_RATE, roleState->nAtt[ERA_Crit_Rate]);
	player->setAttribute(RA_UNCRIT_RATE, roleState->nAtt[ERA_UnCrit_Rate]);
	player->setAttribute(RA_ExAttackMin, roleState->nAtt[ERA_ExAttackMin]);
	player->setAttribute(RA_ExAttackMax, roleState->nAtt[ERA_ExAttackMax]);
	player->setAttribute(RA_InAttackMin, roleState->nAtt[ERA_InAttackMin]);
	player->setAttribute(RA_InAttackMax, roleState->nAtt[ERA_InAttackMax]);
	player->setAttribute(RA_ArmorEx, roleState->nAtt[ERA_ArmorEx]);
	player->setAttribute(RA_ArmorIn, roleState->nAtt[ERA_ArmorIn]);
	player->setAttribute(RA_ExMinDefense, roleState->nAtt[ERA_ExMinDefense]);
	player->setAttribute(RA_ExMaxDefense, roleState->nAtt[ERA_ExMaxDefense]);
	player->setAttribute(RA_InMinDefense, roleState->nAtt[ERA_InMinDefense]);
	player->setAttribute(RA_InMaxDefense, roleState->nAtt[ERA_InMaxDefense]);
	player->setAttribute(RA_Luck, roleState->nAtt[ERA_Luck]);
	player->setAttribute(RA_PKVALUE, roleState->iPKValue);
	player->setAttribute(RA_Knowledge, roleState->nAtt[ERA_Knowledge]);//声望
	player->setAttribute(RA_Jinengdian, roleState->nAtt[ERA_TalentPoint]);
	player->setAttribute(RA_BATTLE_POINT , roleState->nEquipRating);//战斗力
	player->setAttribute(RA_MEILI_POINT,(int)roleState->nMeiLi);//魅力值
	player->setAttribute(RA_RONGYU_POINT,roleState->n32CurExploits);//荣誉点
	player->setAttribute(RA_RideState, roleState->n64RoleState & ERS_Mount);
	player->setAttribute(RA_BattleMode, roleState->n64RoleState & ERS_Combat);

	WorldLevelMgr::getInstance()->refersh_world_lv(roleState->nWorldLevel);
	//功法境界
	GambleMgr::getInstance()->updateBless(roleState->nGongFaBenison);
	GambleMgr::getInstance()->updateGongFaRealm(roleState->nAtt[ERA_GongFa]);
	if((roleState->n64RoleState & ERS_IsGrayName) != 0)
	{
		player->setAttribute(RA_IsGrayName,1);
	}
	else
	{
		player->setAttribute(RA_IsGrayName,0);
	}
	player->setAttribute(RA_TiLiZhi, roleState->nAtt[ERA_TiLi]);	//[bing] 体力值

	player->setAttribute(RA_Derate_Wood, roleState->nAtt[ERA_Derate_Wood]);   // 风伤害减免 modify 2016.3.28 噬魔：攻击附带消耗敌人魔法值
	player->setAttribute(RA_Derate_Fire, roleState->nAtt[ERA_Derate_Fire]);   // 火伤害减免 modify 2016.3.28 破盾：攻击穿透敌人的魔法盾，造成额外百分比伤害（不超过没有魔法盾的伤害）
	player->setAttribute(RA_Derate_Water, roleState->nAtt[ERA_Derate_Water]);  // 雷伤害减免 modify 2016.3.28 腐蚀：攻击附带减低敌人物防和魔防百分比
	player->setAttribute(RA_Derate_Injury, roleState->nAtt[ERA_Derate_Injury]);// 内损伤害减免 modify 2016.3.28 真伤：攻击附加真实伤害
	player->setAttribute(RA_Derate_InAttack, roleState->nAtt[ERA_Derate_InAttack]);  // 远程伤害减免 modify 2016.3.28 抵抗：进入抵抗状态后，减免百分比伤害

	player->setGuild(roleState->dwGuildID);
	player->setLevel(roleState->nLevel);
	player->setCurLevelExp(roleState->nCurLevelExp);
	SocialMgr::getInstance()->SetSpouseID(roleState->dwSpouseID);
	PackageManager::getInstance()->setTotalChargeYuanBao(roleState->n_total_recharge);//初始化总充值元宝数
	player->updateCurMaxExp();
	bool isShowRoleName = RoleManager::getInstance()->getIsShowSelfRoleName();
	player->setVIPLevel(roleState->nVIPLevel, isShowRoleName);//gx is fuck
	player->setVIPExp(roleState->dwVIPExp);		//【Ji：】 add
	player->setLocVIPLevel(roleState->nVIPLevel);		//【Ji：】 add
	player->setSilverBoxTime(roleState->dwSilverBoxTime);		//【Ji：】 add
	player->setGoldBoxTime(roleState->dwGoldBoxTime);			//【Ji：】 add
	player->setFusion_Exp(roleState->m_Fusion_Exp);
	player->setInstanceData(roleState->nInstanceData);//gx add
	player->setRedZuiFlag(roleState->dwRedZuiFlag);//gx add
	player->setRedLip(player->getRedZuiFlag()); //ssb add
	//player->setEnemyId(roleState->enemyId);
	player->loadLocalPlayerTitleData();//gx add
	for (int i = 0; i < 3; i++)
	{
		player->setCurTille(i, roleState->dwActTitleID[i]);
	}
	player->setSignLevel(roleState->n_sign_level);
	//外观属性
	for(int i = 0; i < X_AVATAR_ELEMENT_NUM; i ++)
	{
		player->setDisplayAttr((ePlayerDisplayAttr)roleState->AvatarEquip.AvatarEquip[i].byDisplayPos, roleState->AvatarEquip.AvatarEquip[i].dw_data_id);
	}
	player->sync_display_flag_from_display_set_data(roleState->DisplaySet);
	//player->setFashion(roleState->DisplaySet.bFashionDisplay);
	player->repetSetCurrentState();
	player->initSelectRideLv();
	if (player->isDead())
	{
		MessageBoxUi* dieUi = dynamic_cast<MessageBoxUi*>(_scene->getChildByTag(WZ_MESSAGEBOX));
		if (dieUi == NULL)
		{
			dieUi = MessageBoxUi::createWithTwoBtn("", GET_STR(9373).c_str(), STRING_TABLE["original_position"], STRING_TABLE["back_to_city"]);
			_scene->addChild(dieUi, WZ_MESSAGEBOX);
			dieUi->signalOkBtnPressed.connect(this, &World::slotReviveOk);
			dieUi->signalCancelBtnPressed.connect(this, &World::slotReviveCancel);
		}
	}
	return 0;
}

void World::resetData()
{
	_messageBox = NULL;
	_roleHeadUi = NULL;

	// 	if (_selectRoleHeadUi)
	// 	{
	// 		_selectRoleHeadUi->removeFromParent();
	// 	}
	_selectRoleHeadUi = NULL;

	_miniMapUi = NULL;
	_taskTraceUi = NULL;
	_payIcon = NULL;
	_payEffect = NULL;
	//_serverEffect = NULL;
	_signbtn = NULL;
	_insignbtn = NULL;
	m_pDiceSp = NULL;
	_fubenNumBLabel = NULL;
	_luandouTimeLabel = NULL;
	_topSprite = NULL;
	_bottomSprite = NULL;
	//_fightRecord = NULL;
	_lianshaNum = NULL;
	_lianshaText = NULL;
	_lianshaLayer = NULL;
	_underAttackEffect = NULL;
	m_payIconEnable = true;
}

void World::checkIsRemoveRedFlag( eRedFlagType eRedFlag )
{
	switch(eRedFlag)
	{
	case RF_RoleHead:
		{
			if (!SkillManager::getInstance()->isShowRedPoint() && !ForgingMgr::getInstance()->isForgingShowRedPoint())
			{
				getRoleHeadUi()->revokeBtnHighLight();
			}
		}
		break;
	case RF_SystemForging:
		{
			if (!ForgingMgr::getInstance()->isForgingShowRedPoint())
			{
				GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_Forge);
			}
		}
		break;
	case RF_SystemSkill:
		{
			if (!SkillManager::getInstance()->isShowRedPoint())
			{
				GET_UI(SystemUi, WCT_SystemUi)->revokeBtnHighLight(SystemUi::BT_Skill);
			}
		}
		break;
	default:
		break;
	}
}

void World::onChangeSelect( int selectId )
{
	unsigned int curMapId = MapManager::getInstance()->getCurMapId();
	if(_selectRoleHeadUi != NULL && curMapId != FIRE_DESERT_CITY_MAP)
	{
		int selectId = RoleManager::getInstance()->get_select_role_id();
		if(selectId == INVALID_ID)
		{
			if(_selectRoleHeadUi->isVisible())
			{
				_selectRoleHeadUi->setVisible(false);
				_selectRoleHeadUi->setBtnVisible(false);
			}
		}
		else
		{
			Role *role = RoleManager::getInstance()->findRole(selectId);
			if(role != NULL)
			{
				_selectRoleHeadUi->setRole();
				_selectRoleHeadUi->setVisible(true);

				if(_selectRoleHeadUi->isVisible() && (2910191 == role->getTypeID() || 2910159 == role->getTypeID()))
					_selectRoleHeadUi->setVisible(false);

				if(role->getCreatureType() == CT_PLAYER)
				{
					_selectRoleHeadUi->updateHead(role);
				}
				else if(role->getCreatureType() !=CT_PLAYER)
				{
					_selectRoleHeadUi->setBtnVisible(false);
					if (role->getCreatureType() == CT_NPC)
					{
						_selectRoleHeadUi->setVisible(false);
					}
					if (role->getCreatureType() == CT_MONSTER)
					{	
						_selectRoleHeadUi->setMonster();
						_selectRoleHeadUi->updateMonsterHead(role);
					}
				}
				//if(role->getCreatureType() == CT_PLAYER)
				//	_selectRoleHeadUi->setBtnVisible(true);
				//else
				//	_selectRoleHeadUi->setBtnVisible(false);

				_selectRoleHeadUi->onHpChanged(role->getAttribute(RA_HP), role->getAttribute(RA_MaxHP));
				_selectRoleHeadUi->onMpChanged(role->getAttribute(RA_MP), role->getAttribute(RA_MaxMP));
				//在进入血战到底地图后 玩家名字显示为神秘人
				if (BF_BATTLE_MAP == curMapId && !BloodFightMgr::getInstance()->getIsFriendTypeByRoleID(role->getId()))
					_selectRoleHeadUi->setRoleName(STRING_TABLE["BF_Player_Hide_Name"]);
				else
					_selectRoleHeadUi->setRoleName(role->getName());
				_selectRoleHeadUi->setLevel(role->getLevel());
			}
		}
	}
}

void World::removeRemoteRole( unsigned int id )
{
	std::map<unsigned int, char*>::iterator it = _remoteRoleStateList.find(id);
	if (it != _remoteRoleStateList.end())
	{
		char* data = it->second;
		CC_SAFE_DELETE_ARRAY(data);
		_remoteRoleStateList.erase(it);
	}
}

//是否进入后台
void World::willEnterForeground( bool isEnter )
{
	if (_isOpen)
	{
		NET_SIC_EnterForeground send;
		send.isEnter = isEnter;
		TCP_CLIENT->send_net_cmd(&send,NP_CRITICAL,false);
	}
	recvOldHeartTime = ServerTime::getInstance()->cal_current_server_dword_time();
	_heartSendTimer.reset();
}

bool World::needShowFight()
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if (player == NULL)
		return false;
	DWORD lastDeadTime = player->getShowFightTime();
	DWORD nowTime = ServerTime::getInstance()->cal_current_server_dword_time();
	if (lastDeadTime == 0)
	{
		player->setShowFightTime(nowTime);
		return true;
	}
	else
	{

		DWORD intervalTime = CalcTimeDiff(nowTime,lastDeadTime);
		if (intervalTime >= 24 * 60 * 60)
		{
			player->setShowFightTime(nowTime);
			return true;
		}
		else
		{
			if (WhichWeekday(nowTime) != WhichWeekday(lastDeadTime))
			{
				player->setShowFightTime(nowTime);
				return true;
			}
		}
	}
	return false;
}

void World::setAutoUseDrug()
{
	HookSetUi* hookUi = GET_UI(HookSetUi, WCT_HookSetUi);
	if (hookUi == NULL)
		return;

	const HookSetData &hookData = hookUi->getHookSetData();

	//如果没有设置勾选药品则设置
	if(hookData.dangerId == (unsigned int)INVALID)
	{
		//太阳水
		f_item* item1 = PackageManager::getInstance()->getItem(EICT_Bag,g_InstantDrug_Array[0]);
		if (item1)
		{
			hookUi->setHookDangerId(item1->get_item_type_id());
			hookUi->saveDataByType( GSST_DangerID );
		}
	}

	//如果没有设置勾选药品则设置
	if(hookData.hpId == (unsigned int)INVALID)
	{
		//小红药
		f_item* item2 = PackageManager::getInstance()->getItem(EICT_Bag,g_NormalHPDrug_Array[0]);
		if (item2)
		{
			hookUi->setHookHpId(item2->get_item_type_id());
			hookUi->saveDataByType( GSST_HpID );
		}
	}

	//如果没有设置勾选药品则设置
	if(hookData.mpId == (unsigned int)INVALID)
	{
		//小蓝药
		f_item* item3 = PackageManager::getInstance()->getItem(EICT_Bag,g_NormalMPDrug_Array[0]);
		if (item3)
		{
			hookUi->setHookMpId(item3->get_item_type_id());
			hookUi->saveDataByType( GSST_MpID );
		}
	}
}

void World::removeRemoteCreature( unsigned int id )
{
	std::map<unsigned int, char*>::iterator it = _remoteCreatureStateList.find(id);
	if (it != _remoteCreatureStateList.end())
	{
		char* data = it->second;
		CC_SAFE_DELETE_ARRAY(data);
		_remoteCreatureStateList.erase(it);
	}
}

bool World::needSlowStr(int index)
{
	if ( index >= 2431 && index <= 2435 )
	{
		return true;
	}
	return false;
}

/*
/*屏蔽
void World::setFuncGuideAct(std::string iconName)//引导功能收起动画
{
CCScene* scene = World::getInstance()->getScene();
if(scene == NULL)
return;
MiniMapUi* pUI = World::getInstance()->getMiniMapUi();

CCSpriteFrame* iconFrame = PackageManager::getInstance()->getIconFrameByName(iconName.c_str());
if(iconFrame == NULL)
return;

CCSize winSize = CCDirector::sharedDirector()->getWinSize();
CCSprite* fcIcon = CCSprite::createWithSpriteFrame(iconFrame);
fcIcon->setPosition(CCSize(winSize.width * 0.5, winSize.height * 0.5));
scene->addChild(fcIcon, WZ_MESSAGEBOX, WCT_FuncGuideIcon);
//宝典按钮
CCControlButton* baodianBtn = dynamic_cast<CCControlButton*>(pUI->getChildByTag(0)->getChildByTag(1)->getChildByTag(45));
CCPoint targetPos = baodianBtn->getPosition();
CCPoint posInWorld = scene->convertToWorldSpace(targetPos);

CCFiniteTimeAction* delayAc = CCDelayTime::create(0.8f);
CCFiniteTimeAction* moveAc = CCMoveTo::create(0.7f, posInWorld);
CCFiniteTimeAction* scaleAc = CCScaleTo::create(0.7f, 0.3f);
CCFiniteTimeAction* twoAcs = CCSpawn::create(moveAc,scaleAc,NULL);
CCFiniteTimeAction* acCallBack = CCCallFunc::create(this, callfunc_selector(World::onFuncGuideBack));
CCFiniteTimeAction* allAcs = CCSequence::create(delayAc, twoAcs, acCallBack, NULL);
fcIcon->runAction(allAcs);
}

void World::onFuncGuideBack()//引导收起回调
{
if(World::getInstance()->getScene()->getChildByTag(WCT_FuncGuideIcon))
{
CCSprite* iconSP = dynamic_cast<CCSprite*>(World::getInstance()->getScene()->getChildByTag(WCT_FuncGuideIcon));
iconSP->setVisible(false);
iconSP->removeFromParentAndCleanup(true);
}
}
*/

void World::rechargeGiftShowFlag()
{
	//充值好礼
	int nRechargeGiftLv = ChongZhiActivityMgr::getInstance()->getRechargeGiftsLevel();
	if (nRechargeGiftLv >=CFG(int,"recharge_gift_list_num",11))
	{
		ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
		getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
		return;
	}
	int m_nTotalChargeYB = PackageManager::getInstance()->getTotalChargeYuanBao();
	int needYB = get_recharge_yuanbao((nRechargeGiftLv + 1) * 6);
// 	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM RechargeReward WHERE ID = ?1");
// 	cmd->set_integer32(1 , (nRechargeGiftLv + 1) * 6);
// 	c_sql_table* table = c_db_manager::getSingleton()->create_table();
// 	while(table->retrieve_row())
// 	{
// 		unsigned int idx = table->get_index("YuanBao");
// 		needYB = table->get_integer32(idx);
// 	}
// 	c_db_manager::getSingleton()->destroy_table(table);
// 	c_db_manager::getSingleton()->end_operation(cmd);

	if (needYB <= 0)
	{
		ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
		getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
	}
	else
	{
		if (m_nTotalChargeYB < needYB)
		{
			ChongZhiActivityMgr::getInstance()->deleteChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
			getMiniMapUi()->revokeBtnHighLight(WCT_ChongZhiActivityFarmeUI);
		}
		else
		{
			ChongZhiActivityMgr::getInstance()->setChongzhiActivitySignList(WCT_RECHARGEGIFTUI);
			getMiniMapUi()->setBtnHighLight(WCT_ChongZhiActivityFarmeUI);
		}
	}
}

void World::removeNotFindRole( DWORD roleID )
{
	Role* role = RoleManager::getInstance()->findRole(roleID);
	if (!role)
	{
		return;
	}

	if (role->getCreatureType()!= CT_Proxy)
	{
		stCreateProto const* proto =  RoleManager::getInstance()->getCreatureProto(role->getTypeID());
		if (proto&&proto->nFuncType == RoleManager::EFNPCT_LiHua)
		{
			AudioPlayer::getSigletonPtr()->stopSoundSceneEffect(AudioPlayer::getSigletonPtr()->getNoStopAudio());
			AudioPlayer::getSigletonPtr()->setNoStopAudio(0);
		}
	}
	if (CT_PLAYER == role->getCreatureType())
	{
		PlayerStallUiLayer* layer = (PlayerStallUiLayer*)getUiNodeByTag<PlayerStallUiLayer>(WCT_StallUi);
		if (layer)
		{
			layer->CloseStall(roleID);
		}
	}
	//npc的话，不删除
	if (role->getCreatureType() == CT_NPC)
	{
		return;
	}

	RoleManager::getInstance()->freeRole(roleID);
}

void World::resetHeartData()
{
	recvOldHeartTime = ServerTime::getInstance()->cal_current_server_dword_time();
	_heartSendTimer.reset();
}

int World::getRandMsgNums()
{
	if(_randMsgNums == 0)
		initRandMsgNums();

	return _randMsgNums;
}

void World::initRandMsgNums()
{
	_randMsgNums = 0;
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM SenceTips");
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	table->get_column_count();
	while(table->retrieve_row())
	{
		++_randMsgNums;
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
}

void World::updateFlashBtnTimeLabel(int m_nHour,int m_nMin,int m_nSec)
{
	if (NULL == _pFlashShopBtn)
		return;
	CCNode* pNode = _pFlashShopBtn->getChildByTag(101);
	if (pNode == NULL)
		return;

	CCLabelBMFont* pLab = dynamic_cast<CCLabelBMFont*>(pNode);
	if (pLab)
	{
		CCString* tmStr = CCString::createWithFormat("%02d:%02d:%02d", m_nHour, m_nMin,m_nSec);
		pLab->setString(tmStr->getCString());
	}
}





// void World::changeBtn( float ft )
// {
// 	INT32 Excesstime=LevelEquipMgr::getInstance()->getExcesstime();
// 	int myYuanbao = PackageManager::getInstance()->getTotalChargeYuanBao();
// 	int rolelevel=RoleManager::getInstance()->getLocalPlayer()->getLevel();
// 	if (_payIcon!=NULL && _levelEquipBtn!=NULL && (Excesstime>0) && (myYuanbao>=0) && (!CMovie::GetInstance().IsInPlaying()))
// 	{
// 		_isOpenChange=true;
// 		if (_payIcon->isVisible())
// 		{
// 			_levelEquipBtn->setVisible(true);
// 			_levelEquipBtn->setTouchEnabled(true);
// 			_payIcon->setVisible(false);
// 			_payIcon->setTouchEnabled(false);
// 			runLevelEquipAim();
// 			stopAnimation();
// 		}
// 		else
// 		{
// 			_levelEquipBtn->setVisible(false);
// 			_levelEquipBtn->setTouchEnabled(false);
// 			_payIcon->setVisible(true);
// 			_payIcon->setTouchEnabled(true);
// 			runAnimation();
// 			stopLevleAim();
// 		}
// 	}
// 	else
// 	{
// 		_isOpenChange=false;
// 	}
// }

void World::runLevelEquipAim()
{
	//if (_levelEquipBtn == NULL)
	//	return;

	//if (_LevelEquipEffect != NULL)
	//	return;

	//_LevelEquipEffect = CCSprite::create();
	//_LevelEquipEffect->setPosition(ccp(45.f,25.f));
	//_levelEquipBtn->addChild(_LevelEquipEffect);
	//_LevelEquipTimeLab->setZOrder(_LevelEquipEffect->getZOrder()+1);
	//AnimationCache::AnimateList anims;
	//AnimationCache::createDefList(1, anims);
	//AnimationCache::getInstance()->getSinEffect(0,"E1_212", anims);					//diyici
	//BSAnimate *animste = anims[0];

	//_LevelEquipEffect->runAction(CCRepeatForever::create(animste));
}

void World::stopLevleAim()
{
	/*if (_levelEquipBtn != NULL && _LevelEquipEffect != NULL)
	{
	_LevelEquipEffect->stopAllActions();
	_LevelEquipEffect->removeFromParent();
	_LevelEquipEffect = NULL;
	}*/
}

void World::UpdateLevelTime(int m_nHour,int m_nMin,int m_nSec)
{
	if(_LevelEquipTimeLab)
	{
		CCString* tmStr = CCString::createWithFormat("%02d:%02d:%02d", m_nHour, m_nMin,m_nSec);
		_LevelEquipTimeLab->setString(tmStr->getCString());
	}
}

unsigned int World::onGetLocalRoleAllDayClearData( s_net_cmd *cmd )
{
	NET_SIS_all_day_clear_data_sync* msg = (NET_SIS_all_day_clear_data_sync*)cmd;
	if (msg == NULL)
		return 0;

	//刷新龙卫节点
	InstanceMgr::getInstance()->onDragonInfoSync(msg);
	//刷新祝福值
	GambleMgr::getInstance()->updateBless(msg->nGongFaBenison);
	GambleMgr::getInstance()->setYuanBaoCostNum(msg->nGongFaSummonNum);
	return 0;
}

unsigned int World::onReceiveWarTeamState(s_net_cmd *cmd )
{
	NET_S2C_gvg_login_Group * msg = (NET_S2C_gvg_login_Group*)cmd;
	CC_ASSERT(msg);

	set_is_show_fmb_btn(msg->groupId != 1);
	World::getInstance()->getMiniMapUi()->refresh_fmb_btn_state();

	return 0;
}

unsigned int World::onShowFMBBet(s_net_cmd *cmd )
{
	World::getInstance()->getMiniMapUi()->refresh_bet_btn_state(true);
	return 0;
}

void World::changeGuildName( std::string guild_name )
{
	if (guild_name.empty())
		return;
	LocalPlayer* localplayer=RoleManager::getInstance()->getLocalPlayer();
	if(localplayer->getGuildID()==-1)
	{
		ToolTip::getInstance()->push(GET_STR(9109));
		return;
	}
	if(EGMP_BangZhu!=localplayer->getGuildPos())
	{
		ToolTip::getInstance()->push(STRING_TABLE["Guild_ProfessionNot"]);
		return;
	}
	//!如果发现，则发送创建消息	
	wchar_t temp[512];
	memset(temp , 0 , 512*sizeof(wchar_t));
	Utf8ToUtf16(guild_name.c_str() , temp , 512 , guild_name.length());
	unsigned int sz = _utf_length(temp);
	//对玩家输入的行会名称的检查
	if (0 == sz)
	{
		ToolTip::getInstance()->push(GET_STR(2047));
		return;
	}
	if (sz > GUILD_NAME_MAX)
	{
		//输入内容太长
		ToolTip::getInstance()->push(STRING_TABLE["input_content_too_long"]);
		return;
	}
	//再进行敏感词过滤
	if (FilterMgr::getInstance()->IsNameInNameFilterFile(guild_name) != 0)
	{
		//含有敏感词
		ToolTip::getInstance()->push(GET_STR(189));
		return;
	}
	//最后是特殊字符过滤
	if (FilterMgr::getInstance()->IsNameLegal(guild_name,100) != 0)//长度就不用再这里检查
	{
		ToolTip::getInstance()->push(GET_STR(189));
		return;
	}
	sz++;
	int size = (sz - 1) * sizeof(wchar_t) + sizeof(NET_SIC_guild_change_name);
	unsigned char* pMsg = new unsigned char[size];
	NET_SIC_guild_change_name* cmd = (NET_SIC_guild_change_name*)pMsg;
	cmd->id = message_id_crc("NET_SIC_guild_change_name");
	cmd->dw_guild_id=localplayer->getGuildID();
	memcpy(cmd->szGuildName, temp,sz*sizeof(wchar_t));
	cmd->size = size;
	TCP_CLIENT->send_net_cmd(cmd , NP_IDLE , false);
	delete [] cmd;
}

unsigned int World::changeGuildState( s_net_cmd *cmd )
{
	NET_SIS_guild_change_name* msg = (NET_SIS_guild_change_name*)cmd;
	if (0 != msg->dw_error)
	{
		if (ECGN_Not_leader == msg->dw_error)
		{
			ToolTip::getInstance()->push(STRING_TABLE["Guild_ProfessionNot"]);//不是会长
		}
		else if (ECGN_Name_Not_Right == msg->dw_error)
		{
			ToolTip::getInstance()->push(STRING_TABLE["Guild_NameError"]);
		}
		else if (ECGN_Not_Has_Item == msg->dw_error)
		{
			ToolTip::getInstance()->push(STRING_TABLE["Goods_NotEnough"]);
		}
		else if (ECGN_Name_Same == msg->dw_error)
		{
			ToolTip::getInstance()->push(STRING_TABLE["Guild_Name_Same"]);
		}
	}
	else
	{
		LocalPlayer* t_player = RoleManager::getInstance()->getLocalPlayer();
		bool t_isPlayer = t_player->getGuildID() == msg->dw_old_guild_id;
		if (t_player && t_isPlayer)
		{
			InputSerialUi::getInstace()->close();//先关闭UI
			CLOSE_UI(WCT_ItemAutoUseDaojuTip);//关闭快速使用
		}
		char temp[512];
		memset(temp, 0, sizeof(char) * 512);
		Utf16ToUtf8(msg->sz_new_name, temp, 512, 0);
		GuildMgr::getInstance()->guildChangeName(msg->dw_old_guild_id, msg->dw_new_guild_id, temp);
		RoleManager::getInstance()->changeGuildNameByOldGuidID(msg->dw_old_guild_id,msg->dw_new_guild_id,temp);
// 		改名成功，需要修改本地与role_id对应的昵称
// 				Role* role=RoleManager::getInstance()->findRole(msg->role_id);
// 				/**/
// 				if (!role)
// 					return 0;
// 				InputSerialUi::getInstace()->close();//先关闭UI
// 				CLOSE_UI(WCT_ItemAutoUseDaojuTip);//关闭快速使用
// 				//localPlayer->setName(msg->sz_new_role_name,false);//不显示本地玩家名字
// 				//_roleHeadUi->setRoleName(msg->sz_new_role_name);
// 				char temp[512];
// 				memset(temp, 0, sizeof(char) * 512);
// 				Utf16ToUtf8(msg->sz_new_Guild_name, temp, 512, 0);
// 				std::string newName;
// 				newName.assign(temp);
// 				role->setGuild(msg->guild_id);
// 				role->setGuildName(newName);
// 				NameMgr2::getInstance()->updateGuildName(msg->guild_id,newName);
// 				LocalPlayer *localPlayer = RoleManager::getInstance()->getLocalPlayer();
// 				if (localPlayer->getGuildID()==msg->guild_id)
// 				{
// 					GuildMgr::getInstance()->setGuildDesc(msg->guild_id,newName);
// 				}


	}
	return 0;
}

void World::setPayIconEnable( bool _enable )
{
	//if(_payIcon)
	{
		//_payIcon->setVisible(_enable);
		//_payIcon->setTouchEnabled(_enable);
		m_payIconEnable=_enable;
		show_loop_button(e_null);
	}
}

void World::init_pay_icon()
{
	CCSize size = CCDirector::sharedDirector()->getWinSize();
	_payIcon = createControlButton("","smallui_first","smallui_first","smallui_first");	
	_payIcon->setAnchorPoint(ccp(0.5f, 0.5f));
	_payIcon->setZoomOnTouchDown(true);
	_payIcon->setPosition(ccp(size.width - 170.0f,size.height * 0.7-160.0f));
	_payIcon->setTouchPriority(2);
	_payIcon->addTargetWithActionForControlEvents(PayClickCallBack::getInstance(), SEL_CCControlHandler(&PayClickCallBack::onPayIconBtnPressed), CCControlEventTouchUpInside);
	_payIcon->setTouchEnabled(true);
	_payIcon->setVisible(false);
	//_payIcon->setVisible(false);
	_scene->addChild(_payIcon, WZ_MINIMAPUI); 

	runAnimation();
}

void World::destroy_pay_icon()
{
	stopAnimation();
	if (_payIcon)
	{
		_payIcon->removeFromParentAndCleanup(true);
		_payIcon = NULL;
	}
}

void World::update_pay_icon()
{
	if (_payIcon == NULL)
	{
		return;
	}

	bool b_show = pay_icon_should_show();
	//_payIcon->setVisible(b_show);

	if (b_show)
	{
		_miniMapUi->setShouChongIconVisible(!b_show);
	}
	// 	if (_payIcon)
	// 	{
	// 		if (IS_UI_OPEN(WCT_STOREUI))
	// 		{
	// 			_payIcon->setTouchEnabled(false);
	// 		}
	// 		else
	// 		{
	// 			_payIcon->setTouchEnabled(true);
	// 		}
	// 	}

	// 	if(_isShowFlashBtn && !FlashSellShopMgr::getInstance()->isShowEffBtn())
	// 	{
	// 		showFlashSellShopEffBtn(false);
	// 	}
	// 
	// 	//爱的第一次图标;
	// 	if (_payIcon != NULL&&m_payIconEnable)
	// 	{
	// 		int myYuanbao = PackageManager::getInstance()->getTotalChargeYuanBao();
	// 		if (myYuanbao < 0)
	// 		{
	// 			_payIcon->setVisible(true);
	// 			_miniMapUi->setShouChongIconVisible(false);
	// 		}
	// 		else if(CMovie::GetInstance().IsInPlaying())
	// 		{
	// 			_payIcon->setVisible(false);
	// 		}
	// 		else
	// 		{//ZHJL:调整判断顺序
	// 			int level = 11;
	// 			if(role->getLevel() >= level)
	// 			{
	// 				//策划调整，不在显示首冲按钮icon
	// 				if (KaifuHuodongMgr::getInstance()->getIosShowRecharge())
	// 				{
	// 					_payIcon->setVisible(true);
	// 					runAnimation();
	// 				}
	// 				//_payIcon->setVisible(!_isPayClick);
	// 				if(IS_UI_OPEN(WCT_NPCCHATUI))
	// 				{
	// 					_payIcon->setVisible(false);
	// 				}
	// 				else
	// 				{
	// 					//_payIcon->setVisible(true);
	// 				}
	// 			}
	// 			else
	// 				_payIcon->setVisible(false);
	// 		}
	// 
	// 		//最后根据图标的可见状态来判断是否在小地图UI中显示 改成一直显示
	// 	}
	// 	else 
	// 	{
	// 		if (!_isShowFlashBtn && FlashSellShopMgr::getInstance()->isShowEffBtn())
	// 		{
	// 			showFlashSellShopEffBtn(m_payIconEnable);
	// 			_isShowFlashBtn = m_payIconEnable;
	// 		}
	// 		else if(_isShowFlashBtn && !FlashSellShopMgr::getInstance()->isShowEffBtn())
	// 		{
	// 			showFlashSellShopEffBtn(false);
	// 		}
	// 	}
}

bool World::pay_icon_should_show() const
{
	bool platform_control_show = KaifuHuodongMgr::getInstance()->getIosShowRecharge();
	bool recharged = PackageManager::getInstance()->getTotalChargeYuanBao() >0;
	bool enough_lv = pay_icon_show_by_level();
	bool ui_forbid = IS_UI_OPEN(WCT_NPCCHATUI);
	bool is_in_movie_script  = CMovie::GetInstance().IsInPlaying();

	return m_payIconEnable&&platform_control_show && !recharged && enough_lv && !ui_forbid &&!is_in_movie_script;
}

bool World::pay_icon_show_by_level() const
{
	LocalPlayer* lp  = RoleManager::getInstance()->getLocalPlayer();
	if (lp )
	{
		return lp->getLevel() >= 11;
	}

	return false;
}

bool World::wing_icon_should_show() const
{
	bool t_bisShow = FlashSellShopMgr::getInstance()->isShowEffBtn();
	bool isServerShow = KaifuHuodongMgr::getInstance()->getIosShowRecharge();
	bool t_bCanShow = m_payIconEnable && t_bisShow && !CMovie::GetInstance().IsInPlaying() && isServerShow;
	return t_bCanShow;
}

bool World::update_wing()
{
	bool t_bisShow = FlashSellShopMgr::getInstance()->isShowEffBtn();
	bool isServerShow = KaifuHuodongMgr::getInstance()->getIosShowRecharge();
	bool t_bCanShow = m_payIconEnable && t_bisShow && !CMovie::GetInstance().IsInPlaying() && isServerShow;

	bool t_bIsShowSC = pay_icon_should_show();
	//当翅膀应该显示，首冲应该显示，当前未开启循环 开启Schedule 开始切换显示
	if (t_bIsShowSC && t_bCanShow )
	{
		if (!_isOpenChange)
		{
			showFlashSellShopEffBtn(true);
			openWingsBtnChange(true);
		}
		return true;
	}
	//当前翅膀是显示状态，管理不应该显示，当前还在切换状态 删除翅膀btn 停掉schedule
	else if(_isOpenChange)
	{
		if (!t_bCanShow && !t_bIsShowSC)
		{
			showFlashSellShopEffBtn(false);
			openWingsBtnChange(false);
			return false;
		}

		if (!t_bCanShow)
		{
			showFlashSellShopEffBtn(true);
			openWingsBtnChange(false);
			return false;

		}

		if (!t_bIsShowSC)
		{
			openWingsBtnChange(false);
			showFlashSellShopEffBtn(true);
			return false;
		}
		return true;
	}
	//当前没有显示翅膀，不用显示首冲，应该显示翅膀
	else if(!_isShowFlashBtn && !t_bIsShowSC && t_bCanShow)
	{
		showFlashSellShopEffBtn(true);
		return false;
	}
	//当前显示翅膀 显示条件为false  就删掉翅膀
	else if (_isShowFlashBtn && !t_bCanShow)
	{
		showFlashSellShopEffBtn(false);
		return false;
	}

	return false;
}

void World::openWingsBtnChange(bool pIsOpen)
{
	if (pIsOpen && !_isOpenChange)
	{
		_isOpenChange = true;
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::loopShowFlashSellAndFistBtn),this,7.0f,false);
	}
	else if (!pIsOpen && _isOpenChange)
	{
		_isOpenChange = false;
		CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::loopShowFlashSellAndFistBtn),this);
	}

}

void World::onFlashSellEffDone()
{
	showFlashSellShopEffBtn(false);
	openWingsBtnChange(false);
}

void World::loopShowFlashSellAndFistBtn(float ft)
{
// 	bool isShowSell = FlashSellShopMgr::getInstance()->isShowEffBtn();
// 	//bool t_bIsShowSC = pay_icon_should_show();
// 
// 	if (!_isShowFlashBtn)
// 	{
// 		showFlashSellShopEffBtn(true);
// 		if (_payIcon)
// 			_payIcon->setVisible(false);
// 	}
// 	else
// 	{
// 		showFlashSellShopEffBtn(false);
// 		if (_payIcon)
// 			_payIcon->setVisible(true);
// 	}
}

void World::create_recast_button()
{
	CCSize size = CCDirector::sharedDirector()->getWinSize();
	m_recast_button = createControlButton("","smallui_first","smallui_first","smallui_first");
	m_recast_button->removeAllChildrenWithCleanup(true);
	m_recast_button->setAnchorPoint(ccp(0.5f, 0.5f));
	m_recast_button->setZoomOnTouchDown(true);
	m_recast_button->setPosition(ccp(size.width - 170.0f,size.height * 0.7-160.0f));
	m_recast_button->setTouchPriority(2);
	m_recast_button->addTargetWithActionForControlEvents(World::getInstance(), SEL_CCControlHandler(&World::on_show_recast_node), CCControlEventTouchUpInside);
	m_recast_button->setTouchEnabled(true);
	m_recast_button->setVisible(true);
	_scene->addChild(m_recast_button, WZ_MINIMAPUI); 

	//CCLabelBMFont* t_pTimeLab = CCLabelBMFont::create();
	//t_pTimeLab->setFntFile("Art/Scene/fontNum_12_0.fnt");
	//t_pTimeLab->setTag(101);
	//m_recast_button->addChild(t_pTimeLab,1);
	//t_pTimeLab->setPosition(ccp(48,-4));
	//t_pTimeLab->setScale(0.9);
	//CCString* tmStr = CCString::createWithFormat("%02d:%02d:%02d", 0, 0,0);
	//t_pTimeLab->setString(tmStr->getCString());


	CCSprite* t_fSPEffect = CCSprite::create();
	t_fSPEffect->setPosition(ccp(50.f,20.0f));
	t_fSPEffect->setTag(102);
	m_recast_button->addChild(t_fSPEffect);

	AnimationCache::AnimateList anims;
	AnimationCache::createDefList(1, anims);
	AnimationCache::getInstance()->getSinEffect(0,"E1_246", anims);
	BSAnimate *animste = anims[0];
	t_fSPEffect->runAction(CCRepeatForever::create(animste));
	m_recast_button->setTouchEnabled(true);
	m_recast_button->setVisible(false);
}

void World::on_show_recast_node( CCObject * pSender, CCControlEvent pCCControlEvent )
{
	ForgingDecomUI *forgingDecomUI = (ForgingDecomUI*)OPEN_UI(WCT_ForgingDecomUI);
	if (forgingDecomUI)
	{
		ForgingDecomUILayer *uiLayer = dynamic_cast<ForgingDecomUILayer*>(forgingDecomUI->getUiLayer());
		//uiLayer->showFrame(ForgingDecomUILayer::T_Recast); // [1/13/2017 Catch_y]
		uiLayer->showFrame(ForgingDecomUILayer::T_forging);
	}
}

void World::register_update(bool is_register)
{
	if(is_register)
	{
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::update_button), this, 7.0f, false);
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&World::refresh_recast_time), this, 0.5f, false);
	}
	else
	{
		CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::update_button), this);
		CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&World::refresh_recast_time), this);
	}
}

void World::update_button(float dt)
{
	bool is_show_recast = PackageManager::getInstance()->is_open_limit_recast() && m_payIconEnable;
	bool is_show_wing = wing_icon_should_show();
	bool is_show_pay = pay_icon_should_show();

	bool is_show[3] = {is_show_pay, is_show_wing, is_show_recast};

	int index = (int)m_cur_show_button_type;
	for(int i = 1; i <= 3; ++i)
	{
		index = index + 1;
		if(index >= 3 || index <= 0)
		{
			index = 0;
		}

		if(is_show[index])
		{
			show_loop_button(eShowButtonType(index));
			return;
		}
	}

	show_loop_button(e_null);
}

void World::refresh_recast_time(float dt)
{
	if(!m_recast_button->isVisible())
		return;

	DWORD end_time = PackageManager::getInstance()->get_limit_recast_end_time();
	if(end_time == INVALID || end_time == 0)
	{
		return;
	}

	unsigned int time_now = ServerTime::getInstance()->cal_current_server_dword_time();
	unsigned int time = CalcTimeDiff(end_time, time_now);
	if(time <= 0)
	{
		time = 0;
		PackageManager::getInstance()->set_open_limit_recast(false);
	}
	
	int hour = time / 60 / 60;
	int min = (time % 3600) / 60;
	int sec = (time % 3600 % 60);

	string str;
	safe_sprintf(str, "%02d:%02d:%02d", hour, min, sec);

	CCLabelBMFont* label = dynamic_cast<CCLabelBMFont*>(m_recast_button->getChildByTag(101));
	if(IS_VALID_PTR(label))
	{
		label->setString(str.c_str());
	}
}

void World::show_loop_button(eShowButtonType show_type)
{
	m_cur_show_button_type = show_type;

	if(IS_VALID_PTR(_payIcon))
	{
		_payIcon->setVisible(show_type == e_pay);
	}

	if(IS_VALID_PTR(_pFlashShopBtn))
	{
		_pFlashShopBtn->setVisible(show_type == e_wing);
	}

	if(IS_VALID_PTR(m_recast_button))
	{
		m_recast_button->setVisible(show_type == e_recast);
	}
}

void World::close_ui_when_cross_map_in_world()
{
	CLOSE_ALL_UI();

	CLOSE_UI(WCT_FubenSaoDangUI);

	//CrossSceneUI::getInstance()->setMessage();

	if (ItemTip::getInstace()->isOpen())
		ItemTip::getInstace()->close();

	if (MonthCardItemTip::getInstance()->isOpen())
		MonthCardItemTip::getInstance()->close();

	EquipTipUiLayer* pNode = (EquipTipUiLayer*)getScene()->getChildByTag(WCT_EQUIP_TIPS_UI_TAG);
	if(pNode)
		pNode->close();

	GongfaTip::getInstace()->close();
}

void World::do_sth_before_close_map()
{
	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
	CC_ASSERT(player);
	player->do_sth_before_close_map_in_world();

	//关闭一些相关的界面
	close_ui_when_cross_map_in_world();


	ShuangXiuMgr::getInstance()->clear();

	SkillAnimManager::getInstance()->clearAll();
	//移除boss技能效果效果
	BossSkillManager::getInstance()->destroyAll();

	MapManager::getInstance()->closeMap();

	InputMessageBox::getInstace()->close();
}

void World::do_sth_reenter_new_map()
{
	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
	CC_ASSERT(player);
	player->do_sth_when_reenter_map_in_world();

	MapManager* map_mgr = MapManager::getInstance();
	map_mgr->enter_cur_map_remind();
	_miniMapUi->changeAreaName(map_mgr->get_cur_map_name().c_str());

	RoleManager::getInstance()->addNewMapRole();

	if (_battlefieldIsEnd)
	{
		OPEN_UI(WCT_BattlefieldUi);
		//GET_UI(BattlefieldUi,WCT_BattlefieldUi)->updateData();
		_battlefieldIsEnd = false;
	}

	FubenMgr& fuben_mgr = FubenMgr::GetInstance();
	fuben_mgr.on_reenter_map();

	//勇闯天牢 需要在跳完地图后显示经验获得
	if(_getTLEXP)
	{
		_getTLEXP = false;
		onTog(_getTLEXPNums);
	}
	GroundItemManager* groud_item_mgr = GroundItemManager::getInstance();
	groud_item_mgr ->add_ground_item_to_map_if_ness();

	CrossSceneUI::getInstance()->closeWithDelay(0.1f);

	ChatMgr::getInstance()->updateBossMassage();
}

void World::slow_update()
{
	checkRedFlag();
}

void World::update_auto_combat_in_idle_state()
{
	//玩家长时间不动，进去自动战斗
	int bAutoFightNoTouch = GET_UI(HookSetUi, WCT_HookSetUi)->getGameSetData().IsAutoFigheNoTouch;
	if(bAutoFightNoTouch == 1)
	{
		LocalPlayer* pLocPlayer = RoleManager::getInstance()->getLocalPlayer();//本地玩家
		if (!IS_VALID_PTR(pLocPlayer))
			return;
		if(pLocPlayer->stateMachine()->CurrentState() == LocalPlayerStateStand::getInstance())
		{
			if(ReSetIsAutoFight)
			{
				IsAutoFight = ServerTime::getInstance()->cal_current_server_dword_time();
				ReSetIsAutoFight = false;
			}
		}
		else
		{
			ReSetIsAutoFight = true;
		}
		if(ReSetIsAutoFight == false)
		{
			tagDWORDTime nowTime = ServerTime::getInstance()->cal_current_server_dword_time();
			unsigned int dwDiff = CalcTimeDiff(nowTime, IsAutoFight);
			if (dwDiff >= AUTOFIGHTTIME)
			{
				ReSetIsAutoFight = true;
				const RoleManager::RoleMap &roleMap = RoleManager::getInstance()->getRoleMap();
				CCPoint ptPlayer = pLocPlayer->getPosition();
				bool StartAutoFight = false;
				for(RoleManager::RoleMap::const_iterator iter = roleMap.begin(); iter != roleMap.end(); ++ iter)
				{
					Role *role = iter->second;
					if (CT_MONSTER == role->getCreatureType())
					{
						if(! RoleManager::getInstance()->canAttack(role, false))
							continue;
						float disx = role->getPosition().x - ptPlayer.x;
						float disy = role->getPosition().y - ptPlayer.y;
						if((disx*disx + disy*disy)< (500*500))
						{
							StartAutoFight = true;
							break;
						}
					}
				}
				if(StartAutoFight)
				{

					AutoActionMgr::getInstance()->JustBeginAutoFight();

				}
			}
		}
	}
	else
	{
		ReSetIsAutoFight = true;
	}
}

void World::init_recharge_data()
{
// 	SQL_START(RechargeReward);
// 	int yuanbao = 0,id = 0;
// 	SQL_EXTRA_INT(id ,ID);
// 	SQL_EXTRA_INT(yuanbao ,YuanBao);
// 	m_recharge_data_map.insert(std::make_pair(id,yuanbao));
// 	SQL_END;

	f_data_set data_set;
	std::list<std::string> fields;
	bool ret =data_set.load("Config/db/RechargeReward.xml","ID",&fields);
	CC_ASSERT(ret);
	std::for_each(	fields.begin(),
					fields.end(),
					[&](std::string const& one)
	{
		st_recharge_reward_data data;
		unsigned int id = data_set.get_int("ID",one.c_str());
		
		data.yuanbao= data_set.get_int("YuanBao",one.c_str(),0);
		data.class_type= data_set.get_int("Class",one.c_str(),1);
		data.sex= data_set.get_int("Sex",one.c_str(),0);

		std::string tmp;
		for (int i = 0; i < 5  ; ++i)
		{
			st_item_group item;
			safe_sprintf(tmp,"Item%d",i+1);
			item.item_id  = data_set.get_int(tmp.c_str(),one.c_str(),0);
			safe_sprintf(tmp,"Num%d",i+1);
			item.item_num  = data_set.get_int(tmp.c_str(),one.c_str(),0);

			data.rewards.push_back(item);
		}

		m_recharge_data_map.insert(std::make_pair(id,data));
	});
}

int World::get_recharge_yuanbao( int type_id )
{
	auto finder = m_recharge_data_map.find(type_id);
	if(finder != m_recharge_data_map.end()) return finder->second.yuanbao;

	return 0;
}

bool World::isGuildHuoDongRed()
{
	LocalPlayer* localPlayer = RoleManager::getInstance()->getLocalPlayer();
	GuildMgr* guildMgr = GuildMgr::getInstance();
	QuestMgr* questMgr = QuestMgr::getInstance();
	if (localPlayer && guildMgr)
	{
		guild_huodong_red trans;
		int level = localPlayer->getLevel();
		int curGetNum = localPlayer->getGetNumber();
		int maxGetNum = guildMgr->getMaxGetNum();
		int maxIssueNum = guildMgr->getGuildTaskMax();
		eQuestState state = questMgr->getGuildQuestState();
		if (level>=PUBLISHOPENLEVEL && 
			curGetNum<maxGetNum && 
			maxIssueNum>0 && 
			(state == QS_CAN_GET || state == QS_INVALID))
		{
			trans.isRed = true;
		}
		else
		{
			trans.isRed = false;
		}
		SEND_EVENT(&trans);
		return trans.isRed;
	}
	return false;
}

void World::get_recharge_rewards( int yuanbao,int class_type,int sex,std::vector<st_item_group>& out )
{
	out.clear();
	typedef std::map<int ,st_recharge_reward_data > this_map;
	auto finder = boost::range::find_if(m_recharge_data_map,
		[yuanbao,class_type,sex](this_map::value_type const& kv)->bool
		{
			st_recharge_reward_data const& data  = kv.second;
			return data.class_type == class_type &&
					data.sex == sex&&
					data.yuanbao == yuanbao;
		});

  if (finder != m_recharge_data_map.end())
  {
	  out = finder->second.rewards;
  }
}
