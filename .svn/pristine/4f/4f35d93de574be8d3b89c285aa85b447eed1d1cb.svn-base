#ifndef  LINESELECTUI_H
#define  LINESELECTUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
#include "NormalLayer.h"

using namespace cocos2d;
using namespace cocos2d::extension;


class UiInterface;
class LineItemUi 
	: public CCSprite
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(LineItemUi, create);

	static LineItemUi* createFormCCBI(const char* szFile ,CCObject* pOwner=NULL,UiInterface* holder=NULL);

	LineItemUi();
	~LineItemUi();	

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName){return NULL;}
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
private:
	virtual void onEnter();
	virtual void onExit();
	void onLineBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
public:
	inline short getLineId(){return m_pLineId;}
	void setData(int index,int num,int maxRoleNum,int goodState,int busyState);
	
private:
	CCControlButton*	m_pLineBtn;
	CCSprite*		m_pStateSp;
	CCLabelTTF*		m_pLineLabel;
	LabelFT*		m_label_replaced;
	std::string		lineStr;//线路字符串

	UINT16		m_pLineId;
	UINT16		m_pRoleNum;
};

class LineItemUiLoader :public cocos2d::extension::CCSpriteLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(LineItemUiLoader,loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(LineItemUi);
};

typedef std::map<UINT16,LineItemUi*> LineItemMap;

class LineSelectUiLayer;
class LineSelectUi : public UiInterface
{

public:
	LineSelectUi(){}
	~LineSelectUi(){}
	virtual CCNode *openUi();
	LineSelectUiLayer *getUiLayer();
};

class GridAlignNode;
class LineSelectUiLayer
	: public NormalLayer
{
public:
	LineSelectUiLayer();
	~LineSelectUiLayer();
	static LineSelectUiLayer* createFromCCBI(const char* szFile,CCObject* pOwner=NULL,UiInterface* holder=NULL);
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(LineSelectUiLayer, create);
	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName){return NULL;}
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
private:
	virtual void onEnter();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	void onCloseBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onLineBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
public:
	void updateUi();
private:
	CCNode*		m_pContainer;
	CCSprite*	m_pStateSp;

	CCLabelTTF*	m_pLineLabel;
	LabelFT*	m_line_label_replaced;

	LineItemMap m_pLineItemMap;
	CCNode*     m_pContainerLayer;

	CCScrollView* m_pScrollView;
	GridAlignNode* m_pGridAlignNode;
	std::string lineStr;//线路字符串

	UINT16	m_pGoodLine;
	UINT16	m_pRoleNum;

	UINT16	m_pSelectId;
};

#endif