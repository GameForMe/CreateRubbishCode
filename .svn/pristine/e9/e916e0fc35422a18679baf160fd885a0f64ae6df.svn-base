#include "BSAnimate.h"


BSAnimate::BSAnimate()
	: _pAnimation(NULL)
	, _nextFrame(0)
	, _excutedLoop(0)
	, _lastTime(0.f)
{

}

BSAnimate::~BSAnimate()
{
	//CC_SAFE_RELEASE(_pAnimation);
}

BSAnimate* BSAnimate::create( BSAnimation *pAnimation )
{
	BSAnimate *animate = BSAnimate::create();
	animate->initWithAnimation(pAnimation);
	return animate;
}

bool BSAnimate::init()
{
	//CCActionInterval::initWithDuration(1.5f);
	return true;
}

bool BSAnimate::initWithAnimation( BSAnimation *pAnimation )
{
	CCAssert( pAnimation!=NULL, "Animate: argument Animation must be non-NULL");


	if(pAnimation == NULL)
		return false;

	float singleDuration = pAnimation->getDuration();

	if ( CCActionInterval::initWithDuration(singleDuration) ) 
	{
		_nextFrame = 0;
		_pAnimation = pAnimation;
		//_pAnimation->retain();
		_excutedLoop = 0;

		//if(m_pTarget != NULL)
		//	m_pTarget->getActionManager()->resumeTarget(m_pTarget);

		return true;
	}
	return false;
}

void BSAnimate::setAnimation( BSAnimation *pAnimation )
{
	CCAssert( pAnimation!=NULL, "Animate: argument Animation must be non-NULL");

	//CC_SAFE_RELEASE(_pAnimation);

	float singleDuration = pAnimation->getDuration();

	CCActionInterval::setDuration(singleDuration);
	_pAnimation = pAnimation;
	//_pAnimation->retain();
}

void BSAnimate::startWithTarget( CCNode *pTarget )
{
	CC_ASSERT(pTarget != NULL);
	CCActionInterval::startWithTarget(pTarget);

	_nextFrame = 0;
	_excutedLoop = 0;
}

void BSAnimate::stop( void )
{
	//if(m_pTarget != NULL && _pAnimation != NULL)
	//{
	//	CCSpriteFrame *origFrame = _pAnimation->getOrigSpriteFrame();
	//	if(origFrame != NULL)
	//		((CCSprite*)(m_pTarget))->setDisplayFrame(origFrame);
	//}

	CCActionInterval::stop();
}

void BSAnimate::update( float t )
{
	if(_lastTime > t)
	{
		//重新开始
		_nextFrame = 0;
		//CCLog("nextFrame = 0");
	}

	_lastTime = t;

	if(_pAnimation != NULL && m_pTarget != NULL && m_pTarget->isVisible())
	{
		int numFrames = _pAnimation->getFramesNun();
		if(numFrames != 0)
		{
			//CC_ASSERT(_nextFrame < numFrames);
			for( int i=_nextFrame; i < numFrames; i++ ) {
				float splitTime = _pAnimation->getSplitTime(i);

				if( splitTime <= t ) {
					BSAnimation::AnimationFrame& frame = _pAnimation->getAnimationFrame(i);
					((CCSprite*)m_pTarget)->setDisplayFrame(frame.frame);

					//CCLog("frame = %d", i);
					//CCLog("time = %f", t);

					_nextFrame = i+1;

					if(frame.zorder != -1 && m_pTarget->getZOrder() != frame.zorder)
					{
						m_pTarget->setZOrder(frame.zorder);
						//CC_ASSERT(m_pTarget->getParent() != NULL);
						//m_pTarget->getParent()->reorderChild(m_pTarget, frame.zorder);
					}

					//if(_nextFrame == numFrames)
					//{
					//	_nextFrame = 0;
					//	_excutedLoop ++;
					//	CCLog("nextFrame = 0");
					//}
				}
				else
				{
					break;
				}
			}
		}
	}
}
