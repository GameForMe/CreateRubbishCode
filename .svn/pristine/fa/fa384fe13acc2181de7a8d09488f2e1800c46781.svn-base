#ifndef EQUIPLEVELUPUI_H
#define EQUIPLEVELUPUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "BaseDefine.h"
#include "ItemNode.h"
#include "ItemDefine.h"
#include "UiInterface.h"
#include "EquipTipUi.h"
#include "MallMgr.h"
using namespace cocos2d;
using namespace cocos2d::extension;

#define ATTRYMOVE 20


class EquipLevelUpUiLayer;
class f_equipment;
class f_item;
class FrameSprite;

class EquipLevelUpUi : public UiInterface
{
public:
	virtual CCNode *openUi();
	EquipLevelUpUiLayer *getUiLayer();
	void onServerResult(bool isOk);
	void updateUplevelEquipAttr();
	void getLevelupStuff(int stuffResult);
    void noticeRecharge();//跳转充值界面

};

class EquipLevelUpUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class EquipLevelUpUi;

	enum eEquipUpUiTag
	{
		EUUT_Frame = 0,
		EUUT_ItemBegin = 0,
		EUUT_EquipAItem = 0,
		EUUT_Stuff1 = 1,
		EUUT_Stuff2 = 2,
		EUUT_Stuff3 = 3,
		EUUT_EquipBItem = 4,
		EUUT_NextEquipItem = 5,
		EUUT_NextEquipItemNodeLeft,//左侧下一个装备的itemnode
		EUUT_NextEquipItemNodeRight,//右侧下一个装备的itemnode
		EUUT_ItemEnd = 6,
		EUUT_Stuff1Num = 6,
		EUUT_Stuff2Num = 7,
		EUUT_Stuff3Num = 8,
		EUUT_ConsolidLevel = 8,
		EUUT_Quality = 9,
		EUUT_DescFrame = 10,
		EUUT_ItemNodeBegin = 20,
		EUUT_AttrProfession = 100,
		EUUT_AttrPos,
		EUUT_AdditionalSymbol,
		EUUT_ItemBGSP,								//升级材料所在的操作层		103
		EUUT_BottemCutline = 110,
		EUUT_ITEMNAME_1 = 1000,
		EUUT_ITEMNAME_2 = 1001,
		EUUT_ITEMNAME_3 = 1002,
		EUUT_ITEMNAME_4 = 1003,
		EUUT_ITEMNAME_5 = 1004,
		EUUT_OriginEquipIcon,						//原始装备图标tag
		EUUT_GetAttrAfterLvUp //“升级后获得”几个字的tag
	};

	struct EquipData
	{
		unsigned int equipId;
		unsigned int equipLevelUpId;
		unsigned int stuffId[3];
		int stuffNum[3];

		EquipData()
		{
			clear();
		}

		bool isValid()
		{
			if(equipId == (unsigned int)-1 || equipLevelUpId == (unsigned int)-1)
				return false;

			return true;
		}

		void clear()
		{
			memset(this, 0xff, sizeof(EquipData));
		}
	};

public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(EquipLevelUpUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	

	virtual void onEnter();
	virtual void onExit();

	bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
 	virtual EItemConType getConType() { return EICT_CLIENT; }
	void setUplevelEquipAttr();
	void setUpLevelEquipAppAtt();//附加属性
	void onBuyStuffSeverResult(int stuffResult);
	void onBuyOkPressed(bool isOk, int num);
																															
																												//【ji】
	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);         //关闭按钮事件
	void onLevelUpBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);		 //升级按钮事件
	void onLevelupDescPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);		 //界面左上角问号事件
	//void onCloseBtnPressed2(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);		 //升级说明面板关闭事件
	//void onOkBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);			 //升级说明面板确定事件
	

	CCRect GetEquipLevelUpBtnPos();
	CCRect GetCloseBtnPos();
	void onLevelupCalback(float dt);						//升级成功后的界面相关变动

	//void setFrameSpriteClick(bool flag);
	void GetAttrByUpLevel();//升级后获取的属性
	CCRect getEquipAttrRect();
protected:
//	ItemNode *getItemNode(eEquipUpUiTag tag);
	void updateEquipData();
	void setEquipQuality(EItemQuality quality);
	void updateStuffNumLabel();
//	void clearEquip();
//	void clearStuff();
	void clearEquipData();
	void confirmLevelUp();//gx add
	EquipTipUiAttrItem *createAttrItem(const char *attrName, int v1, int v2 = -1, const char *split = "-");
	void addBaseAttr(const char *attrName, int v1, int v2 = -1, const char *split = "-");
	void addAppAtt(const char *attrName, int v1, int v2 = -1, const char *split = "-");
	void initBaseAttrNameStr();
	void initAppAttNameStr();
	void toBuyStuff();
	std::string getEquipLevelUpItemName(unsigned int itemId);
	GameActionNode* getCenterLevelupEffect();	//创建升级中心特效
	GameActionNode* getAroundLevelupEffect();	//创建升级周围材料特效
	GameActionNode* getBattleSuperEffect();					//战斗力特效，后期可以移为一个公共的装备有关的公共方法
	void setFightText( int v ,bool showAdd=false);//战斗力数值
	void playLvUpSE(bool isPotential);		//播放升级特效
	std::string getEquipDesc(unsigned int itemId);
	void updateHideEquipLevelUpControl();

	
private:
	bool m_bTouchFunc;						//控制点击到材料触发的效果
	bool m_bIsPotential;					//是否有再次升级的潜力
	CCSprite *bgsprite;//旋转
	CCNode* _itemBgSp;			//升级材料所在层
	CCLabelTTF* equipLvUpCoin;
	CCSprite *_frame;        
	//FrameSprite *_descframe;      //升级说明界面
	unsigned int _equipId;
	INT64 _n64EquipId; //要升级的装备流水号
	EquipData _equipData;
	typedef std::list<EquipTipUiAttrItem*> AttrItemList;
	AttrItemList _uplevelEquipbaseAttr;
	void clearBaseAtt();
	//typedef std::list<EquipTipUiAttrItem> AppAttItemList;
	AttrItemList _uplevelEquipappAttr;
	void clearAppAtt();
	std::map<ERoleAttribute, std::string> _uplevelEquipBaseAttrNameStr;
	std::map<ERoleAttribute, std::string> _indentifyAttrStr;
	CCArray* _stuffArray;
	Tag_MallItemInfo _stuffInfo;
	int _stuffIndex;
	//5个物品的名称
	CCLabelTTF* itemName_1;
	CCLabelTTF* itemName_2;
	CCLabelTTF* itemName_3;
	CCLabelTTF* itemName_4;
	CCLabelTTF* itemName_5;

	CCSprite*  FightFont;//战斗力三个字
	//f_equipment* _newEquip;					//升级成功后的新装备
	GameActionNode* _lvupCenterAcNode;				//中心升级特效
	GameActionNode* _lvupAroundAcNode1;				//周围升级特效1
	GameActionNode* _lvupAroundAcNode2;				//周围升级特效2
	GameActionNode* _lvupAroundAcNode3;				//周围升级特效3
	GameActionNode* _lvupAroundAcNode4;				//周围升级特效4
	std::vector<EquipTipUiStoneItem*> _equipLevelUpStoneList;

	void clearStoneItem()
	{
		std::for_each(_equipLevelUpStoneList.begin()
			,_equipLevelUpStoneList.end()
			,[](EquipTipUiStoneItem* p)
			{
				CC_SAFE_DELETE(p);
			});
		_equipLevelUpStoneList.clear();
	}
	std::set<std::string> _plist;			//保存特效plist资源名称

	CCLabelBMFont* _fightNumBLabel;				//战斗力艺术字label

	float x;//暂时用于取控件的坐标
	float y;
};


#endif //EQUIPLEVELUPUI_H