#include "LevelRewardUi.h"
#include "UiLoader.h"
#include "World.h"
#include "ToolTip.h"
#include "RoleManager.h"
#include "LocalPlayer.h"
#include "StringMgr.h"
#include "CommonMsgDefine.h"
#include "WorldPacket.h"
#include "TCPClient.h"
#include "BaseDefine.h"
#include "MiniMapUi.h"
#include "SQLCommand.h"
#include "DBMgr.h"
#include "SQLTable.h"
#include "ItemNode.h"
#include "AudioPlayer.h"
#include "AudioProto.h"
#include "ItemTip.h"
#include "PackageManager.h"
#include "ReceiveRewardUi.h"

//////////////////////////////////////////////////////////////////////////

LevelRewardUi::LevelRewardUi()
{

}

LevelRewardUi::~LevelRewardUi()
{

}

CCNode* LevelRewardUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["LevelRewardUiLayer"] = UiLayerLoader<LevelRewardUiLayer>::loader();
	CCNode* pNode = readUiFromCCBI("levelreward", nodeLoaders, _loadSpriteSheet);

	return pNode;
}

//////////////////////////////////////////////////////////////////////////

cocos2d::SEL_MenuHandler LevelRewardUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler LevelRewardUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", LevelRewardUiLayer::onCloseBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onLeftBtnPressed", LevelRewardUiLayer::onLeftBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onRightBtnPressed", LevelRewardUiLayer::onRightBtnPressed);
	/*CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed1", LevelRewardUiLayer::onReceiveBtnPressed1);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed2", LevelRewardUiLayer::onReceiveBtnPressed2);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed3", LevelRewardUiLayer::onReceiveBtnPressed3);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed4", LevelRewardUiLayer::onReceiveBtnPressed4);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed5", LevelRewardUiLayer::onReceiveBtnPressed5);*/
	return NULL;
}

void LevelRewardUiLayer::onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_5);//vv
	CLOSE_UI(WCT_LevelRewardUi);
	//World::getInstance()->setLevelReward();
}

void LevelRewardUiLayer::onReceiveBtnPressed0(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{//40级
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_20);//vv
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	if (lp->getLevel() >= 40)
	{//奖励索引(BYTE)从1开始
		WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
		C2G_Msg << 1;
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
	}
	else
	{
		ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
	}
}

void LevelRewardUiLayer::onReceiveBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{//45级
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_20);//vv
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	if (lp->getLevel() >= 45)
	{
		WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
		C2G_Msg << 2;
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
	}
	else
	{
		ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
	}
}

void LevelRewardUiLayer::onReceiveBtnPressed2(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{//50级
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_20);//vv
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	if (lp->getLevel() >= 50)
	{
		WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
		C2G_Msg << 3;
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
	}
	else
	{
		ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
	}
}

void LevelRewardUiLayer::onReceiveBtnPressed3(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{//55级
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_20);//vv
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	if (lp->getLevel() >= 55)
	{
		WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
		C2G_Msg << 4;
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
	}
	else
	{
		ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
	}
}

void LevelRewardUiLayer::onReceiveBtnPressed4(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{//60级
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_20);//vv
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	if (lp->getLevel() >= 60)
	{
		WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
		C2G_Msg << 5;
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
	}
	else
	{
		ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
	}
}

void LevelRewardUiLayer::onReceiveBtnPressed5(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{//65级
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_20);//vv
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	if (lp->getLevel() >= 65)
	{
		WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
		C2G_Msg << 6;
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
	}
	else
	{
		ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
	}
}

void LevelRewardUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	_frame = dynamic_cast<CCSprite*>(getChildByTag(0));
	_scrollView = createScrollViewWithContentHorizontal(_frame->getChildByTag(0));
	CCNode *node=_frame->getChildByTag(0);
	_container = CCNode::create();
	//_container->retain();
	_frame->addChild(_scrollView);
	_container->setContentSize(node->getContentSize());
	_container->setAnchorPoint(ccp(0,0));
	_container->setPosition(ccp(0.0f,0.0f));
	_scrollView->setTouchEnabled(true);
	 CCSize size = _container->getContentSize();
	 size.width = 1150;
	_scrollView->setContainer(_container);
	_scrollView->setBounceable(false);
	_scrollView->setContentSize(size);
	_scrollView->setDirection(kCCScrollViewDirectionHorizontal);
	_scrollView->setPositionX(60);
	rightBtn=dynamic_cast<CCControlButton*>(_frame->getChildByTag(1));
	rightBtn->setVisible(false);
	leftBtn=(CCControlButton*)_frame->getChildByTag(2);
	//initFontId();
	//_frame = dynamic_cast<CCSprite*>(getChildByTag(0));
	//level40Font = (CCLabelTTF*)_frame->getChildByTag(0)->getChildByTag(0);
	//level45Font = (CCLabelTTF*)_frame->getChildByTag(1)->getChildByTag(0);
	//level50Font = (CCLabelTTF*)_frame->getChildByTag(2)->getChildByTag(0);
	//level55Font = (CCLabelTTF*)_frame->getChildByTag(3)->getChildByTag(0);
	//level60Font = (CCLabelTTF*)_frame->getChildByTag(4)->getChildByTag(0);
	//level65Font = (CCLabelTTF*)_frame->getChildByTag(5)->getChildByTag(0);
	//level40Btn = dynamic_cast<CCControlButton*>(_frame->getChildByTag(0)->getChildByTag(1));
	//level45Btn = dynamic_cast<CCControlButton*>(_frame->getChildByTag(1)->getChildByTag(1));
	//level50Btn = dynamic_cast<CCControlButton*>(_frame->getChildByTag(2)->getChildByTag(1));
	//level55Btn = dynamic_cast<CCControlButton*>(_frame->getChildByTag(3)->getChildByTag(1));
	//level60Btn = dynamic_cast<CCControlButton*>(_frame->getChildByTag(4)->getChildByTag(1));
	//level65Btn = dynamic_cast<CCControlButton*>(_frame->getChildByTag(5)->getChildByTag(1));

	//_rewardItemAry = CCArray::create();
	//_rewardItemAry->retain();

	//for (int i = 0; i < REWARDLEVELNUM; ++i)
	//{
	//	CCNode* rewardNode = _frame->getChildByTag(LRT_Reward1 + i);
	//	ItemNode* rewardItemNode = ItemNode::create();
	//	rewardItemNode->setPosition(rewardNode->getChildByTag(LRT_RewardItem)->getPosition());
	//	rewardNode->addChild(rewardItemNode);
	//	rewardItemNode->setTag(LRT_ItemNodeTag);
	//	_rewardItemAry->addObject(rewardNode);
	//}

	////设置数据
	setData();
	unsigned int openCount = World::getInstance()->GetRoleScriptDataByIndex(6);
	setButtonState(openCount);
	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 1, true);
	//setAllChildernButtonPriority(this, 1);
}

void LevelRewardUiLayer::setButtonState(int index)//设置按钮状态
{
	int _index=1;
	for(LevelReawardItemList::iterator iter = _items.begin(); iter != _items.end(); ++ iter)
	{
		if(_index<=index)
		{
			LevelReawardItem *item = *iter;
			item->setBtnTouched(false);
			_index=_index+1;
		}
		else
		{
			LevelReawardItem *item = *iter;
			item->setBtnTouched(true);
			_index=_index+1;
		}
	}

	/*for (int i = 0;i < index;++i)
	{
		switch(i)
		{
		case 0:
				level40Btn->setEnabled(false);
			break;
		case 1:
				level45Btn->setEnabled(false);
			break;
		case 2:
				level50Btn->setEnabled(false);
			break;
		case 3:
				level55Btn->setEnabled(false);
			break;
		case 4:
				level60Btn->setEnabled(false);
			break;
		case 5:
				level65Btn->setEnabled(false);
			break;
		}
	}*/
}


void LevelRewardUiLayer::setData()
{
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	int nSex = lp->getAttribute(RA_SEX);					//获得玩家性别
	int nPro = lp->getAttribute(RA_ROLETYPE);				//获得玩家职业
	int nSeachIdx = 0;
	for (int i = 0; i < REWARDLEVELNUM; ++ i)
		{
				nSeachIdx = (i+1) * 100 + nSex*10 + nPro;
				this->getLevelReward(nSeachIdx);
		}
	int index=1;
	for(std::vector<LevelReawardItemData>::const_iterator iter = _allData.begin(); iter != _allData.end(); ++ iter)
	{
		const LevelReawardItemData &data = *iter;
		LevelReawardItem *item=LevelReawardItem::InitLevelRewardItem(); 
		item->setData(index,data);
		_scrollView->addChild(item);
		_items.push_back(item);
		index=index+1;
		//_verticalList->addItem(item);
	}
	
	updateList();
	//CCPoint P=_scrollView->minContainerOffset();
	_scrollView->setContentOffset(ccp(0,0));
	//if(nSex == 0)
	//{//女
	//	switch(nPro)
	//	{
	//	case 1://战士
	//		{
	//			setFontData(3);
	//			for (int i = 0; i < REWARDLEVELNUM; ++ i)
	//			{
	//				CCNode* tmpNode = dynamic_cast<CCNode*>(_rewardItemAry->objectAtIndex(i));
	//				ItemNode* itemNode = dynamic_cast<ItemNode*>(tmpNode->getChildByTag(LRT_ItemNodeTag));
	//				nSeachIdx = (i+1) * 100 + nSex*10 + nPro;
	//				itemNode->setDataId(this->getRewardItemID(nSeachIdx));
	//				itemNode->setVisible(false);
	//				itemNode->hideItemOpBtn();
	//			}
	//		}
	//		break;
	//	case 2://法师
	//		{
	//			setFontData(4);
	//			for (int i = 0; i < REWARDLEVELNUM; ++ i)
	//			{
	//				ItemNode* itemNode = dynamic_cast<ItemNode*>(dynamic_cast<CCNode*>(_rewardItemAry->objectAtIndex(i))->getChildByTag(LRT_ItemNodeTag));
	//				nSeachIdx = (i+1) * 100 + nSex*10 + nPro;
	//				itemNode->setDataId(this->getRewardItemID(nSeachIdx));
	//				itemNode->setVisible(false);
	//				itemNode->hideItemOpBtn();
	//			}
	//		}
	//		break;
	//	case 3://道士
	//		{
	//			setFontData(5);
	//			for (int i = 0; i < REWARDLEVELNUM; ++ i)
	//			{
	//				ItemNode* itemNode = dynamic_cast<ItemNode*>(dynamic_cast<CCNode*>(_rewardItemAry->objectAtIndex(i))->getChildByTag(LRT_ItemNodeTag));
	//				nSeachIdx = (i+1) * 100 + nSex*10 + nPro;
	//				itemNode->setDataId(this->getRewardItemID(nSeachIdx));
	//				itemNode->setVisible(false);
	//				itemNode->hideItemOpBtn();
	//			}
	//		}
	//		break;
	//	}
	//}
	//else
	//{//男
	//	switch(nPro)
	//	{
	//	case 1://战士
	//		{
	//			setFontData(0);
	//			for (int i = 0; i < REWARDLEVELNUM; ++ i)
	//			{
	//				ItemNode* itemNode = dynamic_cast<ItemNode*>(dynamic_cast<CCNode*>(_rewardItemAry->objectAtIndex(i))->getChildByTag(LRT_ItemNodeTag));
	//				nSeachIdx = (i+1) * 100 + nSex*10 + nPro;
	//				itemNode->setDataId(this->getRewardItemID(nSeachIdx));
	//				itemNode->setVisible(false);
	//				itemNode->hideItemOpBtn();
	//			}
	//		}
	//		break;
	//	case 2://法师
	//		{
	//			setFontData(1);
	//			for (int i = 0; i < REWARDLEVELNUM; ++ i)
	//			{
	//				ItemNode* itemNode = dynamic_cast<ItemNode*>(dynamic_cast<CCNode*>(_rewardItemAry->objectAtIndex(i))->getChildByTag(LRT_ItemNodeTag));
	//				nSeachIdx = (i+1) * 100 + nSex*10 + nPro;
	//				itemNode->setDataId(this->getRewardItemID(nSeachIdx));
	//				itemNode->setVisible(false);
	//				itemNode->hideItemOpBtn();
	//			}
	//		}
	//		break;
	//	case 3://道士
	//		{
	//			setFontData(2);
	//			for (int i = 0; i < REWARDLEVELNUM; ++ i)
	//			{
	//				ItemNode* itemNode = dynamic_cast<ItemNode*>(dynamic_cast<CCNode*>(_rewardItemAry->objectAtIndex(i))->getChildByTag(LRT_ItemNodeTag));
	//				nSeachIdx = (i+1) * 100 + nSex*10 + nPro;
	//				itemNode->setDataId(this->getRewardItemID(nSeachIdx));
	//				itemNode->setVisible(false);
	//				itemNode->hideItemOpBtn();
	//			}
	//		}
	//		break;
	//	}
	//}
}

void LevelRewardUiLayer::setFontData(int index)//设置名字
{
	level40Font->setString(GET_STR(_fontId[0][index]).c_str());
	level45Font->setString(GET_STR(_fontId[1][index]).c_str());
	level50Font->setString(GET_STR(_fontId[2][index]).c_str());
	level55Font->setString(GET_STR(_fontId[3][index]).c_str());
	level60Font->setString(GET_STR(_fontId[4][index]).c_str());
	level65Font->setString(GET_STR(_fontId[5][index]).c_str());
}

void LevelRewardUiLayer::onExit()
{
	removeAllItem();
	TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_GET_ROLE_LEVEL_REWARD,this,&LevelRewardUiLayer::onLevelRewardResult);
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCLayer::onExit();
	/*CC_SAFE_RELEASE(_rewardItemAry);*/
}
//
bool LevelRewardUiLayer::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	return true;
}

void LevelRewardUiLayer::initFontId()
{
	for (int i = 0; i < 6;++i)
	{
		for (int j = 0;j < 6;++j)
		{
			switch(i)
			{
			case 0:
				{
					_fontId[i][j] = 7064;
				}
				break;
			case 1:
				{
					_fontId[i][j] = 7065 + j;
				}
				break;
			case 2:
				{
					_fontId[i][j] = 7071 + j;
				}
				break;
			case 3:
				{
					_fontId[i][j] = 7077 + j;
				}
				break;
			case 4:
				{
					_fontId[i][j] = 7083 + j;
				}
				break;
			case 5:
				{
					_fontId[i][j] = 7089 + j;
				}
				break;
			}
		}
	}
}

void LevelRewardUiLayer::onEnter()
{
	CCLayer::onEnter();
	TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_GET_ROLE_LEVEL_REWARD,this,&LevelRewardUiLayer::onLevelRewardResult);
}

unsigned int LevelRewardUiLayer::onLevelRewardResult(s_net_cmd* cmd)
{
	//结果(DWORD)[0=成功,1=背包空间不足]
	WorldPacket Msg((const void*)cmd);
	int success = -1;
	Msg >> success;
	unsigned int openCount = World::getInstance()->GetRoleScriptDataByIndex(6);	
	switch(success)
	{
	case 0://成功
		{			
			setButtonState(openCount);
			ToolTip::getInstance()->push(GET_STR(6011).c_str());
			//World::getInstance()->setLevelReward();
			ReceiveRewardUiMgr::GetInstance()->openRewardUi();
		}
		break;
	case E_Role_Level_Reward_Bag_Not_Enougth://背包空间不足
		{
			setButtonState(openCount);
			ToolTip::getInstance()->push(GET_STR(2027).c_str());
		}
		break;
	case E_Role_Level_Reward_Prev_Not_Get://之前有没领的
		{
			setButtonState(openCount);
			ToolTip::getInstance()->push(GET_STR(7095).c_str());
			ReceiveRewardUiMgr::GetInstance()->clearItemBowl();
		}
		break;
	default:
		/*{
			ToolTip::getInstance()->push(GET_STR(7096).c_str());
		}*/
		setButtonState(openCount);
		break;
	}
	return 0;
}

int LevelRewardUiLayer::getRewardItemID( int RewardIdx )
{
	int nRewardItemID = 0;
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM RoleLevelReward WHERE id = ?1");
	cmd->set_integer32(1 , RewardIdx);
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	while(table->retrieve_row())
	{
		unsigned int idx = table->get_index("item");
		nRewardItemID = table->get_integer32(idx);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);

	return nRewardItemID;
}

void LevelRewardUiLayer::ccTouchEnded( CCTouch *pTouch, CCEvent *pEvent )
{
	CCPoint uiPoint = _frame->convertTouchToNodeSpace(pTouch);
	CCNode *node = _frame->getChildByTag(0);
	const CCSize nodeSize = node->getContentSize();
	CCRect nodeRect(node->getPositionX(), node->getPositionY(), nodeSize.width, nodeSize.height);
	CCPoint ptStart = pTouch->getStartLocation();
	CCPoint ptEnd = pTouch->getLocation();
	int length = abs(ptEnd.x - ptStart.x);
	if (!nodeRect.containsPoint(uiPoint))
	{
		ItemTip::getInstace()->close();
	}
	if(length > 10)
	{
		ItemTip::getInstace()->close();
	}	
	setBtnShow();
}

LevelReawardItemData* LevelRewardUiLayer::getLevelReward( int RewardIdx )
{
	//int nRewardItemID = 0;
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM RoleLevelReward WHERE id = ?1");
	cmd->set_integer32(1 , RewardIdx);
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	LevelReawardItemData data;
	while(table->retrieve_row())
	{
		unsigned int idx = table->get_index("item");
		data.itemId = table->get_integer32(idx);
		idx=table->get_index("levelreward");
		data.bgName=table->get_text(idx);
		idx=table->get_index("name");
		data.name=table->get_text(idx);
		_allData.push_back(data);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
	return NULL;
}

void LevelRewardUiLayer::updateList()
{

	//得到总高度;
	//int itemCount = _items.size();
	//int lineCount = itemCount / 2 + itemCount % 2;
	//float height = SHOP_ITEM_HEIGHT * lineCount + SHOP_ITEM_SPACE * (lineCount - 1);//
	//if(height < getContentLayerHeight())
	//	height = getContentLayerHeight();

	//CCSize containerSize = _container->getContentSize();
	//container->setContentSize(CCSize(containerSize.width, height));
	//int index = 0;
	int positionX=0;
	int index=0;
	for(LevelReawardItemList::iterator iter = _items.begin(); iter != _items.end(); ++ iter)
	{
		LevelReawardItem *item = *iter;
		item->setPosition(ccp(positionX,95));
		index=index+1;
		positionX=index*127;
	}
	//container->setPositionY(- height + SHOP_ITEM_SPACE + SHOP_ITEM_HEIGHT * 3);
}

void LevelRewardUiLayer::onLeftBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	float dis = _scrollView->getContentOffset().getDistance(_scrollView->minContainerOffset());
	if (dis >= 0.0f && dis<=395)
	{
		_scrollView->setContentOffset(ccp(_scrollView->getContentOffset().x + 127, _scrollView->getContentOffset().y));
	}
	int num=dis/127;
	if (num>=3)
	{
		int offNum=520-dis;
		_scrollView->setContentOffset(ccp(_scrollView->getContentOffset().x + offNum, _scrollView->getContentOffset().y));
	}
	ItemTip::getInstace()->close();
	setBtnShow();
}

void LevelRewardUiLayer::onRightBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	float dis = _scrollView->getContentOffset().getDistance(_scrollView->maxContainerOffset());
	if (dis >= 0.0f && dis <=400.0f)
	{
		_scrollView->setContentOffset(ccp(_scrollView->getContentOffset().x - 127, _scrollView->getContentOffset().y));
	}
	int num=dis/127;
	if (num>=3)
	{
		int offNum=510-dis;
		_scrollView->setContentOffset(ccp(_scrollView->getContentOffset().x - offNum, _scrollView->getContentOffset().y));
	}
	ItemTip::getInstace()->close();
	setBtnShow();
}

void LevelRewardUiLayer::removeAllItem()
{
	for(LevelReawardItemList::iterator iter = _items.begin(); iter != _items.end(); ++ iter)
	{
		LevelReawardItem *item = *iter;
		CC_ASSERT(_scrollView != NULL &&item !=NULL);
		//_scrollView->removeChild(item);
		item->removeFromParent();
	}
	_items.clear();
}

void LevelRewardUiLayer::setBtnShow()
{
	int offx=_scrollView->getContentOffset().x ;
	if (offx>=0)
	{
		rightBtn->setVisible(false);
	}
	if(offx>=-ITEMHEIGHT*4)
	{
		leftBtn->setVisible(true);
	}
	if (offx<0)
	{
		rightBtn->setVisible(true);
	}
	if(offx<=-ITEMHEIGHT*4+5)
	{
		leftBtn->setVisible(false);
	}
}
LevelReawardItem::LevelReawardItem()
{
}

LevelReawardItem* LevelReawardItem::InitLevelRewardItem()
{
	std::set<std::string> _loadSpriteSheet;
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["LevelRewardItemUiLayer"] = UiSpriteLoader<LevelReawardItem>::loader();
	CCNode* pNode = readUiFromCCBI("levelrewarditem", nodeLoaders, _loadSpriteSheet);

	return dynamic_cast<LevelReawardItem*>(pNode);

}

void LevelReawardItem::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	m_MainFrame = (CCSprite*)pNode;
	pNode->getChildByTag(4)->setVisible(false);
	name = (CCLabelTTF*)getChildByTag(1);
	//CCNode *node=(CCNode*)getChildByTag(2);
	itemNode = ItemNode::create();
	CCSize size = m_MainFrame->getContentSize();
	itemNode->setPosition(ccp(size.width/2, size.height/2));
	itemNode->setContentSize(m_MainFrame->getContentSize());
	itemNode->setClickable(true);
	itemNode->setVisible(false);
	itemNode->hideItemOpBtn();	
	addChild(itemNode);
	btn=(CCControlButton*)getChildByTag(3);
	//rewardItemNode->setTag(LRT_ItemNodeTag);
	//itemNode = dynamic_cast<ItemNode*>(dynamic_cast<CCNode*>(getChildByTag(2)));
}

cocos2d::extension::SEL_CCControlHandler LevelReawardItem::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
		CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReceiveBtnPressed", LevelReawardItem::onReceiveBtnPressed);
		return NULL;
}

void LevelReawardItem::onReceiveBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_20);//vv
	//取得当前点击的按钮
	CCControlButton* btnReceive = (CCControlButton*)pSender;
	if (lp == NULL)
	{
		return;
	}
	int bagCount = PackageManager::getInstance()->getBlankCount();//获取玩家背包空格数
	if (bagCount < 1)
	{
		ToolTip::getInstance()->push(GET_STR(161));
		return;
	}
	switch(_id)
	{
	case 1://10级
		if (lp->getLevel() >= 10)
		{
			WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
			C2G_Msg << 1;
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
			btnReceive->setEnabled(false);
		}
		else
		{
			ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
			return;
		}
		break;
	case 2://20级
		if (lp->getLevel() >= 20)
		{
			WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
			C2G_Msg << 2;
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
			btnReceive->setEnabled(false);
		}
		else
		{
			ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
			return;
		}
		break;
	case 3://30级
		if (lp->getLevel() >= 30)
		{
			WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
			C2G_Msg << 3;
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
			btnReceive->setEnabled(false);
		}
		else
		{
			ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
			return;
		}
		break;
	case 4://40级
		if (lp->getLevel() >= 40)
		{//奖励索引(BYTE)从1开始
			WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
			C2G_Msg << 4;
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
			btnReceive->setEnabled(false);
		}
		else
		{
			ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
			return;
		}
		break;
	case 5:
			if (lp->getLevel() >= 45)
			{
				WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
				C2G_Msg << 5;
				TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
				btnReceive->setEnabled(false);
			}
			else
			{
				ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
				return;
			}
			break;
	case 6:
		//50级
		if (lp->getLevel() >= 50)
		{
			WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
			C2G_Msg << 6;
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
			btnReceive->setEnabled(false);
		}
		else
		{
			ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
			return;
		}
		break;
	case 7://55级
		if (lp->getLevel() >= 55)
		{
			WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
			C2G_Msg << 7;
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
			btnReceive->setEnabled(false);
		}
		else
		{
			ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
			return;
		}
		break;
	case 8://60级
		if (lp->getLevel() >= 60)
		{
			WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
			C2G_Msg << 8;
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
			btnReceive->setEnabled(false);
		}
		else
		{
			ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
			return;
		}
		break;
	case 9://65级
		AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_20);//vv
		if (lp->getLevel() >= 65)
		{
			WorldPacket C2G_Msg(NET_C2G_REQUEST_GET_ROLE_LEVEL_REWARD);//组装消息头 
			C2G_Msg << 9;
			TCP_CLIENT->send_net_cmd((const s_net_cmd*)C2G_Msg.contents(), NP_IDLE, false);//发送
			btnReceive->setEnabled(false);
		}
		else
		{
			ToolTip::getInstance()->push("\xE9\xA2\x86\xE5\x8F\x96\xE7\xAD\x89\xE7\xBA\xA7\xE4\xB8\x8D\xE8\xB6\xB3");
			return;
		}
		break;
	}
	LevelReawardItemData *RewardData = getRewardData(_id);
	if (RewardData != NULL)
	{
		ReceiveRewardUiMgr::GetInstance()->setItemData(RewardData->itemId,RewardData->count);
	}
	CC_SAFE_DELETE(RewardData);
}

LevelReawardItem::~LevelReawardItem()
{

}

void LevelReawardItem::setData( int index,const LevelReawardItemData &itemProto )
{
	CCSpriteFrame* frame=CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(itemProto.bgName.c_str());
	if (frame!=NULL)
	m_MainFrame->setDisplayFrame(frame);
	name->setString(itemProto.name.c_str());
	_itemProtoId=itemProto.itemId;
	itemNode->setDataId(_itemProtoId);
	itemNode->setTag(index);
	itemNode->setMainVisible(false);
	_id=index;
}

bool LevelReawardItem::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	itemNode->setDataId(_itemProtoId);
	return false;
//	if(isTouchOnNodeContent(m_MainFrame, pTouch))
//	{
//		itemNode->setDataId(_itemProtoId);
//		return true;
//	}
//	//itemNode->setVisible(false);
//	//itemNode->hideItemOpBtn();
//	return false;
}
void LevelReawardItem::ccTouchEnded( CCTouch *pTouch, CCEvent *pEvent )
{
	
}

void LevelReawardItem::onEnter()
{
	//CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 1, true);
	CCSprite::onEnter();
}

void LevelReawardItem::onExit()
{
	//CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	removeChild(itemNode, true); 
	CCSprite::onExit();
}

void LevelReawardItem::setBtnTouched( bool isTouched )
{
	if (btn!=NULL)
	{
		btn->setEnabled(isTouched);
	}
}

LevelReawardItemData * LevelReawardItem::getRewardData( int index )
{
	if (index >= 1 && index <= 9)
	{
		index = index - 1;
		LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
		if (lp == NULL)
		{
			return NULL;
		}
		int nSex = lp->getAttribute(RA_SEX);					//获得玩家性别
		int nPro = lp->getAttribute(RA_ROLETYPE);				//获得玩家职业
		int nSeachIdx = 0;
		nSeachIdx = (index+1) * 100 + nSex*10 + nPro;

		LevelReawardItemData *_RewardData = new LevelReawardItemData;
		c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM RoleLevelReward WHERE id = ?1");
		cmd->set_integer32(1 , nSeachIdx);
		c_sql_table* table = c_db_manager::getSingleton()->create_table();
		while(table->retrieve_row())
		{
			unsigned int idx = table->get_index("item");
			_RewardData->itemId = table->get_integer32(idx);
			idx = table->get_index("levelreward");
			_RewardData->bgName = table->get_text(idx);
			idx = table->get_index("name");
			_RewardData->name = table->get_text(idx);
			idx = table->get_index("num");
			_RewardData->count = table->get_integer32(idx);
		}
		c_db_manager::getSingleton()->destroy_table(table);
		c_db_manager::getSingleton()->end_operation(cmd);
		return _RewardData;
	}
	return NULL;
}


