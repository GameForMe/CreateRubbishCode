#include "CoverButton.h"
//#include "ViewCommon.h"
USING_NS_CC;
USING_NS_CC_EXT;

CoverButton::CoverButton(void)
:m_pMainBtn(NULL)
,m_pCover(NULL)
{
}

CoverButton::~CoverButton(void)
{
}

#define BTN_TAG 1000
#define COVER_TAG 2000

void CoverButton::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	m_pMainBtn = static_cast<CCControlButton*>(this->getChildByTag(BTN_TAG));
	CC_ASSERT(m_pMainBtn);
	m_pCover = (this->getChildByTag(COVER_TAG));
	CC_ASSERT(m_pCover);
}

void CoverButton::update( float )
{
	if (m_pMainBtn && m_pCover)
	{
		//m_pCover->setScale(m_pMainBtn->getScale());
		m_pCover->setScaleX(m_pMainBtn->getScaleX());
		m_pCover->setScaleY(m_pMainBtn->getScaleY());
	}
}

// void CoverButton::setGray(bool bGray)
// {
// 	CC_ASSERT(m_pMainBtn);
// 	m_pMainBtn->SetDrawAsGrayScale(bGray);
// 
// 	CC_ASSERT(m_pCover);
// 	cascade_set_gray(m_pCover, bGray);
// }

void CoverButton::setColor(ccColor3B const&col)
{
	CC_ASSERT(m_pMainBtn);
	m_pMainBtn->setColor(col);
}

void CoverButton::onEnter()
{
	scheduleUpdate();
	CCNode::onEnter();
}

void CoverButton::onExit()
{
	unscheduleUpdate();
	CCNode::onExit();
}

// bool CoverButton::isGray()
// {
// 	return m_pMainBtn->isDrawAsGrayScale();
// }

void CoverButton::enable(bool val) 
{
	//cascade_set_gray(this, !val);
	m_pMainBtn->setEnabled(val);
}

void CoverButton::enableBtn(bool val)
{
	m_pMainBtn->setEnabled(val);
}

bool CoverButton::isEnable() const 
{
	return m_pMainBtn->isEnabled();
}