/**
 *	@file		SelectTargetUi.h
 *	@author		guantiejun
 *	@date		2016/06/30
 *	@version	
 *	@brief		队伍选择目标
 */

#ifndef QUICK_TEAM_UI_H
#define QUICK_TEAM_UI_H

#include "UiInterface.h"
#include "NormalLayer.h"
#include "TeamMgr.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class QuickTeamUiLayer;
class TeamMatchApplyItem;
class ListControl;
struct STeamListInfo;
struct team_target_1_event;
struct team_target_2_event;

class QuickTeamUi : public UiInterface
{
public:
	QuickTeamUi();
	~QuickTeamUi();

	virtual CCNode *openUi();
	QuickTeamUiLayer *getUiLayer();
};

class QuickTeamUiLayer: public NormalLayer
{
public:
	typedef std::vector<e_team_target_type> vector_target_type;
	typedef std::map<unsigned short, string> map_own_quset;
	typedef std::map<int, string> map_limit_active;
	typedef std::map<unsigned int, string> map_boss;
	typedef std::map<unsigned int, string> map_mutil_instance;
	typedef std::map<unsigned int, string> map_auto_action;

public:
	QuickTeamUiLayer();
	~QuickTeamUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(QuickTeamUiLayer, create);

	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();

	void refresh_match_state();
	void set_msg_return(bool is_return);
	void init_select(e_quick_team_open_type type);

private:
	void onClose(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onRefresh(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onCreate(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onMatch(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onCancelMatch(CCObject * pSender, CCControlEvent pCCControlEvent);

	unsigned int onServerTeamList(s_net_cmd *cmd);

	void select_target_event_1(team_target_1_event* event);
	void select_target_event_2(team_target_2_event* event);

	void init_type_list();
	void init_quest_list();
	void init_limit_active_list();
	void init_boss_list();
	void init_muilt_instance_list();
	void init_auto_list();

	void refresh_list();
	void add_child_type(e_team_target_type type);
	void add_child_item(int index, string name);
	void send_get_team();
	void on_sure_create_team();
	int get_min_level();
	int get_max_level(int level_min);

	TeamMatchApplyItem* create_list_item(ListControl* list, int i);

private:
	vector_target_type m_target_type;
	map_own_quset m_own_quest_map;
	map_limit_active m_limit_active_map;
	map_boss m_world_boss_map;
	map_boss m_field_boss_map;
	map_mutil_instance m_mutil_instance_map;
	map_auto_action m_auto_action_map;

	std::vector<STeamListInfo> m_list_info;

	ListControl*		m_list;
	ListControl*		m_list_team;
	CCControlButton*	m_match;
	CCControlButton*	m_cancel_match;
	LabelFT*			m_target_cue;
	CCNode*				m_no_team_cue;

	e_team_target_type	m_select_type;
	int					m_select_index;

	DWORD				m_match_team_num;
	DWORD				m_last_refresh_time;

	bool				m_is_msg_return;
};

#endif