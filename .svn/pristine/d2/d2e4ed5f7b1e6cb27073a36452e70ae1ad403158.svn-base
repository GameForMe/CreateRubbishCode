#include "ArenaMainUi.h"
#include "UiLoader.h"
#include "World.h"
#include "ArenaMainMgr.h"
#include "TCPClient.h"
#include "WorldPacket.h"
#include "CommonMsgDefine.h"
#include "ToolTip.h"
#include "RoleManager.h"
#include "LocalPlayer.h"
#include "MessageBoxUi.h"
#include "TextEditBox.h"
#include "ClientCfg.h"
#include "StringMgr.h"
#include "AudioPlayer.h"
#include "AudioProto.h"
#include "NumericalIniMgr.h"
#include "DBMgr.h"
#include "UiResourceMgr.h"
#include "PlayerState.h"
#include "Helper.h"
//////////////////////////////////////////////////////////////////////////

ArenaMainUi::ArenaMainUi()
{

}

ArenaMainUi::~ArenaMainUi()
{

}

CCNode* ArenaMainUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["ArenaMainUiLayer"] = UiLayerLoader<ArenaMainUiLayer>::loader();
	CCNode* pNode = readUiFromCCBI("arena", nodeLoaders, _loadSpriteSheet);

	return pNode;
}

void ArenaMainUi::updateArenaData()
{
	ArenaMainUiLayer *ui = getUiNodeByTag<ArenaMainUiLayer>(WCT_ARENAMAINUI);
	if(ui != NULL)
	{
		ui->SetArenaMainUiData();
	}
}

void ArenaMainUi::updateChallengeTimes(int count)
{
	ArenaMainUiLayer *ui = getUiNodeByTag<ArenaMainUiLayer>(WCT_ARENAMAINUI);
	if(ui != NULL)
	{
		ui->setChallengeTimes(count);
	}
}

cocos2d::CCRect ArenaMainUi::GetChallagePos()
{
	ArenaMainUiLayer *ui = getUiNodeByTag<ArenaMainUiLayer>(WCT_ARENAMAINUI);
	if(ui != NULL)
	{
		return ui->GetChallagePos();
	}
	return CCRect(); 
}

//////////////////////////////////////////////////////////////////////////

cocos2d::SEL_MenuHandler ArenaMainUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler ArenaMainUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", ArenaMainUiLayer::onCloseBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onArenaRankBtnPressed", ArenaMainUiLayer::onArenaRankBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onChallengeOneBtnPressed", ArenaMainUiLayer::onChallengOneBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onChallengeTwoBtnPressed", ArenaMainUiLayer::onChallengTwoBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onChallengeThreeBtnPressed", ArenaMainUiLayer::onChallengThreeBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onAwakenBtnPressed", ArenaMainUiLayer::onAwakenBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onChangeBtnPressed", ArenaMainUiLayer::onChangeBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onBattleDateBtnPressed", ArenaMainUiLayer::onBallteDateBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onAddChallengeTimesBtnPressed", ArenaMainUiLayer::onAddchallengeTimesBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onSubCDTimeBtnPressed", ArenaMainUiLayer::onSubCDTimeBtnPressed);
	return NULL;
}

void ArenaMainUiLayer::onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_5);
	CLOSE_UI(WCT_ARENAMAINUI);
}

void ArenaMainUiLayer::onArenaRankBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	
	//空协议
	WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_RANK);	//组装消息头
	TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_IDLE, false); //发送
	CLOSE_UI(WCT_ARENAMAINUI);
	OPEN_UI(WCT_ARENARANKUI);
}

void ArenaMainUiLayer::onChallengOneBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_1);

	ArenaMainMgr::getInstance()->try_to_challenge(0);
// 	ArenaMainMgr::getInstance()->setCheckedChallengeIndex(0);
// 	//OP(INT)[0=验证,1=进入] + 对手角色ID(DWORD) + 排名(INT)
// 	WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_PK);	//组装消息头
// 	SIC_Msg << 0;
// 	unsigned int tmpRoleId = ArenaMainMgr::getInstance()->getChallengePlayerAttr(ArenaMainMgr::getInstance()->getCheckedChallengeIndex()).dwRoleID;
// 	SIC_Msg << tmpRoleId;
// 	int tmpRank = ArenaMainMgr::getInstance()->getChallengePlayerAttr(ArenaMainMgr::getInstance()->getCheckedChallengeIndex()).nRank;
// 	SIC_Msg << tmpRank;										//发送信息内容
// 	TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_IDLE, false); //发送
}

void ArenaMainUiLayer::onChallengTwoBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_1);
// 	LocalPlayer* pPlayer = RoleManager::getInstance()->getLocalPlayer();
// 	if (!pPlayer)
// 		return;
// 	/*if (pPlayer->isInRoleStateAny(RA_ShuangXiu))
// 	{
// 		ToolTip::getInstance()->push(GET_STR(2101));
// 		return ;
// 	}
// 	else if (pPlayer->isInRoleStateAny(RA_Exchange))
// 	{
// 		ToolTip::getInstance()->push(GET_STR(7218));
// 		return ;
// 	}
// 	else if (pPlayer->isInRoleStateAny(RA_Stall))
// 	{
// 		ToolTip::getInstance()->push(GET_STR(2102));
// 		return ;
// 	}*/
// 	else if (pPlayer->isDead())
// 	{
// 		ToolTip::getInstance()->push(GET_STR(2167));
// 		return ;
// 	}

	if (!check_dead())
	{
		return;
	}

	ArenaMainMgr::getInstance()->try_to_challenge(1);
// 	ArenaMainMgr::getInstance()->setCheckedChallengeIndex(1);
// 	//OP(INT)[0=验证,1=进入] + 对手角色ID(DWORD) + 排名(INT)
// 	WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_PK);	//组装消息头
// 	SIC_Msg << 0;
// 	unsigned int tmpRoleId = ArenaMainMgr::getInstance()->getChallengePlayerAttr(ArenaMainMgr::getInstance()->getCheckedChallengeIndex()).dwRoleID;
// 	SIC_Msg << tmpRoleId;
// 	int tmpRank = ArenaMainMgr::getInstance()->getChallengePlayerAttr(ArenaMainMgr::getInstance()->getCheckedChallengeIndex()).nRank;
// 	SIC_Msg << tmpRank;										//发送信息内容
// 	TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_IDLE, false); //发送
}

void ArenaMainUiLayer::onChallengThreeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_1);
// 	LocalPlayer* pPlayer = RoleManager::getInstance()->getLocalPlayer();
// 	if (!pPlayer)
// 		return;
// 	/*if (pPlayer->isInRoleStateAny(RA_ShuangXiu))
// 	{
// 		ToolTip::getInstance()->push(GET_STR(2101));
// 		return ;
// 	}
// 	else if (pPlayer->isInRoleStateAny(RA_Exchange))
// 	{
// 		ToolTip::getInstance()->push(GET_STR(7218));
// 		return ;
// 	}
// 	else if (pPlayer->isInRoleStateAny(RA_Stall))
// 	{
// 		ToolTip::getInstance()->push(GET_STR(2102));
// 		return ;
// 	}*/
// 	else if (pPlayer->isDead())
// 	{
// 		ToolTip::getInstance()->push(GET_STR(2167));
// 		return ;
// 	}
	if (!check_dead())
	{
		return;
	}

	ArenaMainMgr::getInstance()->try_to_challenge(2);
// 	ArenaMainMgr::getInstance()->setCheckedChallengeIndex(2);
// 	//OP(INT)[0=验证,1=进入] + 对手角色ID(DWORD) + 排名(INT)
// 	WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_PK);	//组装消息头
// 	SIC_Msg << 0;
// 	unsigned int tmpRoleId = ArenaMainMgr::getInstance()->getChallengePlayerAttr(ArenaMainMgr::getInstance()->getCheckedChallengeIndex()).dwRoleID;
// 	SIC_Msg << tmpRoleId;
// 	int tmpRank = ArenaMainMgr::getInstance()->getChallengePlayerAttr(ArenaMainMgr::getInstance()->getCheckedChallengeIndex()).nRank;
// 	SIC_Msg << tmpRank;										//发送信息内容
// 	TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_IDLE, false); //发送
}

void ArenaMainUiLayer::onAwakenBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{	
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_25);
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return;

	//觉醒需要消耗20元宝，可在下一场主动战斗中提升1%属性，是否确认？
	std::string str = CCString::createWithFormat("%s%d%s",
		"\xE8\xA7\x89\xE9\x86\x92\xE9\x9C\x80\xE8\xA6\x81\xE6\xB6\x88\xE8\x80\x97"
		,20
		,"\xE5\x85\x83\xE5\xAE\x9D\xEF\xBC\x8C\xE5\x8F\xAF\xE5\x9C\xA8\xE4\xB8\x8B\xE4\xB8\x80\xE5\x9C\xBA\xE4\xB8\xBB\xE5\x8A\xA8\xE6\x88\x98\xE6\x96\x97\xE4\xB8\xAD\xE6\x8F\x90\xE5\x8D\x87\x32\x25\xE9\xA2\x9D\xE5\xA4\x96\xE5\xB1\x9E\xE6\x80\xA7\xEF\xBC\x8C\xE6\x98\xAF\xE5\x90\xA6\xE7\xA1\xAE\xE8\xAE\xA4\xEF\xBC\x9F")->getCString();

	//给二次确认提示，下次不提示那种的
	std::stringstream ss;
	ss<<"set"<<"_"<<ploc->getId();
	int tip = ClientCfg::getInstance()->getInt(ss.str(), "JJCPowerUpTip", 0);
	if (tip != 0)
	{
		onMessageBoxBuyPKPowerUpOk();
	}
	else
	{
		MessageBoxUi *messageBox = MessageBoxUi::createWithTwoBtnWithCheck(str.c_str(),GET_STR(98).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO, false);
		messageBox->signalOkBtnPressed.connect(this, &ArenaMainUiLayer::onMessageBoxBuyPKPowerUpOk);
		messageBox->signalCheckStateChange.connect(this, &ArenaMainUiLayer::togJJCPowerUpTip);
		World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
	}
}

void ArenaMainUiLayer::onChangeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{	
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return;

	//换一批对手需要消耗XXX金币，是否确认？
	std::string str = CCString::createWithFormat("%s%d%s",
		"\xE6\x8D\xA2\xE4\xB8\x80\xE6\x89\xB9\xE5\xAF\xB9\xE6\x89\x8B\xE9\x9C\x80\xE8\xA6\x81\xE6\xB6\x88\xE8\x80\x97"
		,1000
		,"\xE9\x87\x91\xE5\xB8\x81\xEF\xBC\x8C\xE6\x98\xAF\xE5\x90\xA6\xE7\xA1\xAE\xE8\xAE\xA4\xEF\xBC\x9F")->getCString();

	//给二次确认提示，下次不提示那种的
	std::stringstream ss;
	ss<<"set"<<"_"<<ploc->getId();
	int tip = ClientCfg::getInstance()->getInt(ss.str(), "ChangeEnemyTip", 0);
	if (tip != 0)
	{
		onMessageBoxBuyChangeEnemyOk();
	}
	else
	{
		MessageBoxUi *messageBox = MessageBoxUi::createWithTwoBtnWithCheck(str.c_str(),GET_STR(98).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO, false);
		messageBox->signalOkBtnPressed.connect(this, &ArenaMainUiLayer::onMessageBoxBuyChangeEnemyOk);
		messageBox->signalCheckStateChange.connect(this, &ArenaMainUiLayer::togChangeEnemyTip);
		World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
	}
}

void ArenaMainUiLayer::onBallteDateBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_23);
	CLOSE_UI(WCT_ARENAMAINUI);
	OPEN_UI(WCT_ARENADATEUI);
}

void ArenaMainUiLayer::onAddchallengeTimesBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{	
// 	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_14);
// 	LocalPlayer* lPlayer = RoleManager::getInstance()->getLocalPlayer();
// 	if( !lPlayer )
// 		return;
// 	//本日第N次购买挑战次数，是否花费N元宝购买一次额外挑战次数
// 	std::string str = CCString::createWithFormat("%s%d%s%d%s%d%s","\xE6\x9C\xAC\xE6\x97\xA5\xE7\xAC\xAC",lPlayer->getRoleDayClearInfoTwo(ERDCT_JJC_ADD_PK_COUNT) + 1
// 		,"\xE6\xAC\xA1\xE8\xB4\xAD\xE4\xB9\xB0\xE6\x8C\x91\xE6\x88\x98\xE6\xAC\xA1\xE6\x95\xB0\xEF\xBC\x8C\xE6\x98\xAF\xE5\x90\xA6\xE8\x8A\xB1\xE8\xB4\xB9",
// 		10 * (lPlayer->getRoleDayClearInfoTwo(ERDCT_JJC_ADD_PK_COUNT) + 1),
// 		"\xE5\x85\x83\xE5\xAE\x9D\xE8\xB4\xAD\xE4\xB9\xB0" 
// 		,1,"\xE6\xAC\xA1\xE9\xA2\x9D\xE5\xA4\x96\xE6\x8C\x91\xE6\x88\x98\xE6\xAC\xA1\xE6\x95\xB0")->getCString();
// 	MessageBoxUi *msgUi = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,
// 		str.c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
// 	World::getInstance()->getScene()->addChild(msgUi, WZ_MESSAGEBOX);
// 	msgUi->signalOkBtnPressed.connect(this, &ArenaMainUiLayer::onMessageBoxBuyPKCountOk);

	ArenaMainMgr::getInstance()->try_to_add_challenge_cnt();
}

void ArenaMainUiLayer::onSubCDTimeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{	
	bool in_cd  = ArenaMainMgr::getInstance()->try_to_clear_challenge_cd();
	if( !in_cd )
	{
		//挑战未进入冷却时间，不需要重置
		ToolTip::getInstance()->push(STRING_TABLE["cool_down_do_not_need"]);
		return;
	}
	// 	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_14);
	// 	LocalPlayer* lPlayer = RoleManager::getInstance()->getLocalPlayer();
	// 	if( !lPlayer )
	// 		return;
	// 	if( ArenaMainMgr::getInstance()->GetResetCDNeedYuanBao() <= 0 )
	// 	{
	// 		//挑战未进入冷却时间，不需要重置
	// 		ToolTip::getInstance()->push("\xE6\x8C\x91\xE6\x88\x98\xE6\x9C\xAA\xE8\xBF\x9B\xE5\x85\xA5\xE5\x86\xB7\xE5\x8D\xB4\xE6\x97\xB6\xE9\x97\xB4\x2C\xE4\xB8\x8D\xE9\x9C\x80\xE8\xA6\x81\xE9\x87\x8D\xE7\xBD\xAE");
	// 		return;
	// 	}
	// 	//重置当前挑战冷却时间，需要消耗XXX元宝，是否继续？
	// 	std::string str = CCString::createWithFormat("%s%d%s",
	// 		"\xE9\x87\x8D\xE7\xBD\xAE\xE5\xBD\x93\xE5\x89\x8D\xE6\x8C\x91\xE6\x88\x98\xE5\x86\xB7\xE5\x8D\xB4\xE6\x97\xB6\xE9\x97\xB4\xEF\xBC\x8C\xE9\x9C\x80\xE8\xA6\x81\xE6\xB6\x88\xE8\x80\x97"
	// 		,ArenaMainMgr::getInstance()->GetResetCDNeedYuanBao()
	// 		,"\xE5\x85\x83\xE5\xAE\x9D\xEF\xBC\x8C\xE6\x98\xAF\xE5\x90\xA6\xE7\xBB\xA7\xE7\xBB\xAD\xEF\xBC\x9F")->getCString();
	// 	MessageBoxUi *msgUi = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,
	// 		str.c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
	// 	World::getInstance()->getScene()->addChild(msgUi, WZ_MESSAGEBOX);
	// 	msgUi->signalOkBtnPressed.connect(this, &ArenaMainUiLayer::onMessageBoxBuyPKTimeOk);
}

bool ArenaMainUiLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
{
	if (!isVisible() || !hasVisibleParents() || !isRunning())
	{
		return false;
	}
	if (isTouchOnNodeContent(_frame,pTouch))
	{
		return true;
	}
	else
	{
		CLOSE_UI(WCT_ARENAMAINUI);
		return false;
	}
}

void ArenaMainUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{	
	_frame = dynamic_cast<CCSprite*>(getChildByTag(0));
// 	titleRank = (CCLabelTTF*)_frame->getChildByTag(TITLERANK);//顶头排名
// 	arenaCoin = (CCLabelTTF*)_frame->getChildByTag(ARENACOIN);//金币
// 	expPoint = (CCLabelTTF*)_frame->getChildByTag(EXPPOINT);//经验
// 	promptMsg = (CCLabelTTF*)_frame->getChildByTag(PROMPTMSG);//提示信息
// 	challengeTimes = (CCLabelTTF*)_frame->getChildByTag(CHALLENGETIMES);//挑战次数
// 	countDown = (CCLabelTTF*)_frame->getChildByTag(COUNTDOWN);//倒计时
	titleRank = Helper::getLabelFTByParentAndTag(_frame,TITLERANK);//顶头排名
	CC_ASSERT(titleRank);
	arenaCoin = Helper::getLabelFTByParentAndTag(_frame,ARENACOIN);//金币
	CC_ASSERT(arenaCoin);
	expPoint = Helper::getLabelFTByParentAndTag(_frame,EXPPOINT);//经验
	CC_ASSERT(expPoint);
	promptMsg = Helper::getLabelFTByParentAndTag(_frame,PROMPTMSG);//提示信息
	CC_ASSERT(promptMsg);
	challengeTimes = Helper::getLabelFTByParentAndTag(_frame,CHALLENGETIMES);//挑战次数
	CC_ASSERT(challengeTimes);
	countDown = Helper::getLabelFTByParentAndTag(_frame,COUNTDOWN);//倒计时
	CC_ASSERT(countDown);
	treasureBox = dynamic_cast<CCSprite*>(_frame->getChildByTag(TREASUREBOX));//宝箱
	if (titleRank)
		titleRank->setString(" ");
	if (arenaCoin)
		arenaCoin->setString(" ");
	if (expPoint)
		expPoint->setString(" ");
	if (promptMsg)
		promptMsg->setString(" ");
	if (challengeTimes)
		challengeTimes->setString(" ");
	if (countDown)
		countDown->setString(" ");
	//当前玩家的数据控件
	//localPlayerName = (CCLabelTTF*)_frame->getChildByTag(LOCALPLAYERNAME);//本地玩家名字
	localPlayerName = Helper::getLabelFTByParentAndTag(_frame,LOCALPLAYERNAME);//本地玩家名字
	CC_ASSERT(localPlayerName);
	if (localPlayerName)
	{
		localPlayerName->setZOrder(2);
		localPlayerName->setString(" ");//本地玩家名字
	}
	localPlayerBody = dynamic_cast<CCSprite*>(_frame->getChildByTag(LOCALPLAYERBODY));//半身像
// 	localPlayerPower = (CCLabelTTF*)_frame->getChildByTag(LOCALPLAYERPOWER);//战斗力
// 	localPlayerRank = (CCLabelTTF*)_frame->getChildByTag(LOCALPLAYERRANK);//排名
// 	localPlayerWinStreak = (CCLabelTTF*)_frame->getChildByTag(LOCALPLAYERWINSTREAK);//连胜
	localPlayerPower = Helper::getLabelFTByParentAndTag(_frame,LOCALPLAYERPOWER);//战斗力
	CC_ASSERT(localPlayerPower);
	localPlayerRank = Helper::getLabelFTByParentAndTag(_frame,LOCALPLAYERRANK);//排名
	CC_ASSERT(localPlayerRank);
	localPlayerWinStreak = Helper::getLabelFTByParentAndTag(_frame,LOCALPLAYERWINSTREAK);//连胜
	CC_ASSERT(localPlayerWinStreak);
	
	_hotProgress = new ProgressBar;
	_hotProgress->initBarWithSprite((CCSprite*)_frame->getChildByTag(HOTPROGRESS)->getChildByTag(0));
	_hotProgress->addToParent(_frame->getChildByTag(HOTPROGRESS));
	_hotProgress->setRotate(-90.0f);
	_hotProgress->setProgress(0,5);
	if (localPlayerPower)
		localPlayerPower->setString("");
	if (localPlayerRank)
		localPlayerRank->setString(" ");//排名
	if (localPlayerWinStreak)
		localPlayerWinStreak->setString(" ");//连胜
	
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	eRoleType _roleType = ploc->getRoleType();
	std::string banshenxiangPicPath = "";
	std::string tiaozhantouxiangPicPath="";
	switch(_roleType)//选择角色类型
	{
	case RT_MWARRIOR:
		banshenxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/warriornan.png")->getCString();
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkzhanshiman.png")->getCString();//vv
		break;
	case RT_WWARRIOR:
		banshenxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/warriornv.png")->getCString();
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkzhanshiwoman.png")->getCString();//vv
		break;
	case RT_MMAGE:
		banshenxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/magenan.png")->getCString();
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkdaoshiman.png")->getCString();
		break;
	case RT_WMAGE:
		banshenxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/magenv.png")->getCString();
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pk_fashiwoman.png")->getCString();
		break;
	case RT_MTAOIST:
		banshenxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/taoistnan.png")->getCString();
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkdaoshiman.png")->getCString();
		break;
	case RT_WTAOIST:
		banshenxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/taoistnv.png")->getCString();
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkdaoshiwoman.png")->getCString();
		break;
	default:
		CC_ASSERT(0);
	}

	localPlayerBody->initWithFile(banshenxiangPicPath.c_str());
	//localPlayerBody->setScale(0.6f);
	localPlayerBody->setPositionX(109.0f);//vv
	localPlayerBody->setPositionY(217.0f);//vv
	//localPlayerBody->setFlipX(true);
	if (ArenaMainMgr::getInstance()->getLocalPlayerAttr().fightRecord[0].nRank > 0)
	{
		if (promptMsg)
			promptMsg->setString(setMsgMainFormat(ArenaMainMgr::getInstance()->getLocalPlayerAttr().fightRecord[0]).c_str());
	}
	//挑战对象1
// 	challengerOneRank = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERONERANK);//挑战者1排名
// 	challengerOnePower = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERONEPOWER);//战斗力
	challengerOneRank = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERONERANK);//挑战者1排名
	CC_ASSERT(challengerOneRank);
	challengerOnePower = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERONEPOWER);//战斗力
	CC_ASSERT(challengerOnePower);
	challengerOneHead = dynamic_cast<CCSprite*>(_frame->getChildByTag(CHALLENGERONEHEAD));//头像
	challengerOneClassType=dynamic_cast<CCSprite*>(_frame->getChildByTag(CHALLENGERONECLASSTYPE));
	//challengerOneHead->initWithFile(tiaozhantouxiangPicPath.c_str());
	//challengerOneHead->setPosition(ccp(400,100));
// 	challengerOneLv = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERONELV);//等级
// 	challengerOneName = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERONENAME);//名字
	challengerOneLv = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERONELV);//等级
	CC_ASSERT(challengerOneLv);
	challengerOneName = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERONENAME);//名字
	CC_ASSERT(challengerOneName);
	expPointNum = 0;//经验
	arenaCoinNum = 0;//金币
	if (challengerOneRank)
		challengerOneRank->setString(" ");
	if (challengerOneName)
		challengerOneName->setString(" ");
	if (challengerOneLv)
		challengerOneLv->setString(" ");
	if (challengerOnePower)
		challengerOnePower->setString(" ");
	//挑战对象2
// 	challengerTwoRank = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERTWORANK);//挑战者2排名
// 	challengerTwoPower = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERTWOPOWER);//战斗力
	challengerTwoRank = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERTWORANK);//挑战者2排名
	CC_ASSERT(challengerTwoRank);
	challengerTwoPower = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERTWOPOWER);//战斗力
	CC_ASSERT(challengerTwoPower);

	challengerTwoHead = dynamic_cast<CCSprite*>(_frame->getChildByTag(CHALLENGERTWOHEAD));//头像
	challengerTwoClassType=dynamic_cast<CCSprite*>(_frame->getChildByTag(CHALLENGERTWOCLASSTYPE));//职业
	//challengerOneHead->initWithFile(tiaozhantouxiangPicPath.c_str());
	//challengerOneHead->setPosition(ccp(500,100));
// 	challengerTwoLv = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERTWOLV);//等级
// 	challengerTwoName = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERTWONAME);//名字
	challengerTwoLv = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERTWOLV);//等级
	CC_ASSERT(challengerTwoLv);
	challengerTwoName = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERTWONAME);//名字
	CC_ASSERT(challengerTwoName);
	if (challengerTwoRank)
		challengerTwoRank->setString(" ");
	if (challengerTwoName)
		challengerTwoName->setString(" ");
	if (challengerTwoLv)
		challengerTwoLv->setString(" ");
	if (challengerTwoPower)
		challengerTwoPower->setString(" ");
	//挑战对象3
// 	challengerThreeRank = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERTTHREERANK);//挑战者3排名
// 	challengerThreePower = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERTTHREEPOWER);//战斗力
	challengerThreeRank = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERTTHREERANK);//挑战者3排名
	CC_ASSERT(challengerThreeRank);
	challengerThreePower = Helper::getLabelFTByParentAndTag(_frame,CHALLENGERTTHREEPOWER);//战斗力
	CC_ASSERT(challengerThreePower);
	challengerThreeHead = dynamic_cast<CCSprite*>(_frame->getChildByTag(CHALLENGERTTHREEHEAD));//头像
	challengerThreeClassType=dynamic_cast<CCSprite*>(_frame->getChildByTag(CHALLENGERTTHREECLASSTYPE));//职业
//	challengerOneHead->initWithFile(tiaozhantouxiangPicPath.c_str());
	//challengerOneHead->setVisible(true);
	//challengerOneHead->setPosition(ccp(600,100));
// 	challengerThreeLv = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERTTHREELV);//等级
// 	challengerThreeName = (CCLabelTTF*)_frame->getChildByTag(CHALLENGERTTHREENAME);//名字
	challengerThreeLv = Helper::getLabelFTByParentAndTag(_frame, CHALLENGERTTHREELV);//等级
	CC_ASSERT(challengerThreeLv);
	challengerThreeName = Helper::getLabelFTByParentAndTag(_frame, CHALLENGERTTHREENAME);//名字
	CC_ASSERT(challengerThreeName);
	if (challengerThreeRank)
		challengerThreeRank->setString(" ");
	if (challengerThreeName)
		challengerThreeName->setString(" ");
	if (challengerThreePower)
		challengerThreePower->setString(" ");
	if (challengerThreeLv)
		challengerThreeLv->setString(" ");
	ArenaMainMgr::getInstance()->setIsJJCResult(false);

	SetArenaMainUiData();

	//CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&ArenaMainUiLayer::setCurTime), this, 1.0f, false);
	scheduleUpdate();
}

void ArenaMainUiLayer::changeLocalPlayerData()
{
	int tempRank = ArenaMainMgr::getInstance()->getLocalPlayerAttr().nRank;
	LocalPlayer* lp = RoleManager::getInstance()->getLocalPlayer();
	if( !lp )
		return;
	if (titleRank)
		titleRank->setString(CCString::createWithFormat("%d",tempRank)->getCString());//顶头排名
	if (tempRank <= 30)
	{
		updateRewardItem(tempRank);
		if (arenaCoin)
			arenaCoin->setString(CCString::createWithFormat("%d",arenaCoinNum)->getCString());//金币
		if (expPoint)
			expPoint->setString(CCString::createWithFormat("%d",expPointNum)->getCString());//经验
		treasureBox->setVisible(true);
	}
	else if (tempRank >= 1000)
	{
		tempRank = 1000;
		if (arenaCoin)
			arenaCoin->setString(CCString::createWithFormat("%d",NumericalIniMgr::getInstance()->GetJJCRankRewardMoney(tempRank,lp->getLevel()))->getCString());//金币
		if (expPoint)
			expPoint->setString(CCString::createWithFormat("%lld",NumericalIniMgr::getInstance()->GetJJCRankRewardExp(tempRank,lp->getLevel()))->getCString());//经验
		treasureBox->setVisible(false);
	}
	else
	{
		if (arenaCoin)
			arenaCoin->setString(CCString::createWithFormat("%d",NumericalIniMgr::getInstance()->GetJJCRankRewardMoney(tempRank,lp->getLevel()))->getCString());//金币
		if (expPoint)
			expPoint->setString(CCString::createWithFormat("%lld",NumericalIniMgr::getInstance()->GetJJCRankRewardExp(tempRank,lp->getLevel()))->getCString());//经验
		treasureBox->setVisible(false);
	}
	if (challengeTimes)
		challengeTimes->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getLocaljjcAccessoryInfo().challengeTimes)->getCString());//挑战次数
	std::string tmpName = Helper::convert_wstr_to_string<128>(ArenaMainMgr::getInstance()->getLocalPlayerAttr().szRoleName);
	if (localPlayerName)
		localPlayerName->setString(tmpName.c_str());//本地玩家名字
	//获取角色战斗力
	std::ostringstream ostr;
	if( lp )
	{
		ostr << lp->getAttribute(RA_BATTLE_POINT);
		if (localPlayerPower)
			localPlayerPower->setString(ostr.str().c_str());//战斗力
	}
	else if (localPlayerPower)
		localPlayerPower->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getLocalPlayerAttr().n32Rating)->getCString());//战斗力
	if (localPlayerRank)
		localPlayerRank->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getLocalPlayerAttr().nRank)->getCString());//排名
	if (localPlayerWinStreak)
		localPlayerWinStreak->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getLocalPlayerAttr().nWinnerCount)->getCString());//连胜
	_hotProgress->setProgress(ArenaMainMgr::getInstance()->getLocalPlayerAttr().nPowerCount,5);
	if (ArenaMainMgr::getInstance()->getLocalPlayerAttr().fightRecord[0].nRank > 0)
	{
		if (promptMsg)
			promptMsg->setString(setMsgMainFormat(ArenaMainMgr::getInstance()->getLocalPlayerAttr().fightRecord[0]).c_str());
	}
	//promptMsg = (CCLabelTTF*)_frame->getChildByTag(PROMPTMSG);//提示信息
	/*treasureBox = dynamic_cast<CCSprite*>(_frame->getChildByTag(TREASUREBOX));//宝箱
	//当前玩家的数据控件
	localPlayerBody = dynamic_cast<CCSprite*>(_frame->getChildByTag(LOCALPLAYERBODY));//半身像*/
}

std::string ArenaMainUiLayer::setMsgMainFormat(tagJJCRecord attr)
{//先看挑战方，看胜负，看觉醒
	std::string tempMsg = "";
	if (attr.bIsAttack)//true = 挑战, false = 被挑战
	{
		if (attr.bWinLose)
		{
			if (attr.byPowerCount == 0)
			{
				tempMsg = CCString::createWithFormat("%s%s%s%d%s","\xE6\x82\xA8\xE5\x90\x91",Helper::convert_wstr_to_string<128>(attr.szRoleName).c_str(),
					"\xE5\x8F\x91\xE8\xB5\xB7\xE6\x8C\x91\xE6\x88\x98\x2C\xE8\x8E\xB7\xE8\x83\x9C\x2C\xE6\x8E\x92\xE5\x90\x8D\xE5\x8D\x87\xE4\xB8\xBA\xE7\xAC\xAC"
					,attr.nRank,"\xE5\x90\x8D")->getCString();
			}else{
				tempMsg = CCString::createWithFormat("%s%d%s%s%s%d%s","\xE6\x82\xA8\xE4\xBD\xBF\xE7\x94\xA8\xE4\xBA\x86\xE8\xA7\x89\xE9\x86\x92",ArenaMainMgr::getInstance()->getLocalPlayerAttr().nPowerCount,
					"\xE6\xAC\xA1\x2C\xE5\x90\x91",Helper::convert_wstr_to_string<128>(attr.szRoleName).c_str()
					,"\xE5\x8F\x91\xE8\xB5\xB7\xE6\x8C\x91\xE6\x88\x98\x2C\xE8\x8E\xB7\xE8\x83\x9C\x2C\xE6\x8E\x92\xE5\x90\x8D\xE5\x8D\x87\xE4\xB8\xBA\xE7\xAC\xAC"
					,attr.nRank,"\xE5\x90\x8D")->getCString();
			}
		}else{
			if (attr.byPowerCount == 0)
			{
				tempMsg = CCString::createWithFormat("%s%s%s","\xE6\x82\xA8\xE5\x90\x91",Helper::convert_wstr_to_string<128>(attr.szRoleName).c_str()
					,"\xE5\x8F\x91\xE8\xB5\xB7\xE6\x8C\x91\xE6\x88\x98\x2C\xE6\x88\x98\xE8\xB4\xA5\x2C\xE6\x8E\x92\xE5\x90\x8D\xE4\xB8\x8D\xE5\x8F\x98")->getCString();
			}else{
				tempMsg = CCString::createWithFormat("%s%d%s%s%s","\xE6\x82\xA8\xE4\xBD\xBF\xE7\x94\xA8\xE4\xBA\x86\xE8\xA7\x89\xE9\x86\x92",ArenaMainMgr::getInstance()->getLocalPlayerAttr().nPowerCount,
					"\xE6\xAC\xA1\x2C\xE5\x90\x91",Helper::convert_wstr_to_string<128>(attr.szRoleName).c_str()
					,"\xE5\x8F\x91\xE8\xB5\xB7\xE6\x8C\x91\xE6\x88\x98\x2C\xE6\x88\x98\xE8\xB4\xA5\x2C\xE6\x8E\x92\xE5\x90\x8D\xE4\xB8\x8D\xE5\x8F\x98")->getCString();
			}
		}
	} 
	else
	{
		if (attr.bWinLose)
		{
			if (attr.byPowerCount == 0)
			{
				tempMsg = CCString::createWithFormat("%s%s",Helper::convert_wstr_to_string<128>(attr.szRoleName).c_str()
					,"\xE5\x90\x91\xE6\x82\xA8\xE5\x8F\x91\xE8\xB5\xB7\xE6\x8C\x91\xE6\x88\x98\x2C\xE6\x82\xA8\xE5\x8F\x96\xE5\xBE\x97\xE8\x83\x9C\xE5\x88\xA9\x2C\xE6\x8E\x92\xE5\x90\x8D\xE4\xB8\x8D\xE5\x8F\x98")->getCString();
			}else{
				tempMsg = CCString::createWithFormat("%s%s%d%s",Helper::convert_wstr_to_string<128>(attr.szRoleName).c_str(),"\xE8\xA7\x89\xE9\x86\x92\xE4\xBA\x86",attr.byPowerCount
					,"\xE6\xAC\xA1\xE5\x90\x91\xE6\x82\xA8\xE5\x8F\x91\xE8\xB5\xB7\xE6\x8C\x91\xE6\x88\x98\x2C\xE6\x82\xA8\xE5\x8F\x96\xE5\xBE\x97\xE8\x83\x9C\xE5\x88\xA9\x2C\xE6\x8E\x92\xE5\x90\x8D\xE4\xB8\x8D\xE5\x8F\x98")->getCString();
			}
		}else{
			if (attr.byPowerCount == 0)
			{
				tempMsg = CCString::createWithFormat("%s%s%d%s",Helper::convert_wstr_to_string<128>(attr.szRoleName).c_str()
					,"\xE5\x90\x91\xE6\x82\xA8\xE5\x8F\x91\xE8\xB5\xB7\xE6\x8C\x91\xE6\x88\x98\x2C\xE6\x82\xA8\xE8\xA2\xAB\xE5\x87\xBB\xE8\xB4\xA5\xE4\xBA\x86\x2C\xE6\x8E\x92\xE5\x90\x8D\xE9\x99\x8D\xE4\xB8\xBA"
					,attr.nRank,"\xE5\x90\x8D")->getCString();
			}else{
				tempMsg = CCString::createWithFormat("%s%s%d%s%d%s",Helper::convert_wstr_to_string<128>(attr.szRoleName).c_str(),"\xE8\xA7\x89\xE9\x86\x92\xE4\xBA\x86",attr.byPowerCount
					,"\xE6\xAC\xA1\xE5\x90\x91\xE6\x82\xA8\xE5\x8F\x91\xE8\xB5\xB7\xE6\x8C\x91\xE6\x88\x98\x2C\xE6\x82\xA8\xE8\xA2\xAB\xE5\x87\xBB\xE8\xB4\xA5\xE4\xBA\x86\x2C\xE6\x8E\x92\xE5\x90\x8D\xE9\x99\x8D\xE4\xB8\xBA"
					,attr.nRank,"\xE5\x90\x8D")->getCString();
			}
		}
	}
	return tempMsg;
}

void ArenaMainUiLayer::changeChallengerData()
{//更新三个挑战者的信息
	//vv 
	//LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	//eRoleType _roleType = ploc->getRoleType();

	//挑战对象1
	if (challengerOneRank)
		challengerOneRank->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(0).nRank)->getCString());//挑战者1排名
	if (challengerOnePower)
		challengerOnePower->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(0).n32Rating)->getCString());//战斗力
	if (challengerOneHead)
		challengerOneHead->initWithFile(getRoleHeadName(ArenaMainMgr::getInstance()->getChallengePlayerAttr(0).eClassType,ArenaMainMgr::getInstance()->getChallengePlayerAttr(0).bySex).c_str());
	if (challengerOneLv)
		challengerOneLv->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(0).nLevel)->getCString());;//等级
	std::string tmpName = Helper::convert_wstr_to_string<128>(ArenaMainMgr::getInstance()->getChallengePlayerAttr(0).szRoleName);
	if (challengerOneName)
		challengerOneName->setString(tmpName.c_str());//名字
	setClassType(ArenaMainMgr::getInstance()->getChallengePlayerAttr(0).eClassType,CHALLENGERONECLASSTYPE);
	//挑战对象2
	if (challengerTwoRank)
		challengerTwoRank->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(1).nRank)->getCString());//挑战者1排名
	if (challengerTwoPower)
		challengerTwoPower->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(1).n32Rating)->getCString());//战斗力
	//challengerOneHead = dynamic_cast<CCSprite*>(_frame->getChildByTag(CHALLENGERONEHEAD));//头像
	challengerTwoHead->initWithFile(getRoleHeadName(ArenaMainMgr::getInstance()->getChallengePlayerAttr(1).eClassType,ArenaMainMgr::getInstance()->getChallengePlayerAttr(1).bySex).c_str());
	if (challengerTwoLv)
		challengerTwoLv->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(1).nLevel)->getCString());;//等级
	tmpName = Helper::convert_wstr_to_string<128>(ArenaMainMgr::getInstance()->getChallengePlayerAttr(1).szRoleName);
	if (challengerTwoName)
		challengerTwoName->setString(tmpName.c_str());//名字
	setClassType(ArenaMainMgr::getInstance()->getChallengePlayerAttr(1).eClassType,CHALLENGERTWOCLASSTYPE);
	//挑战对象3
	if (challengerThreeRank)
		challengerThreeRank->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(2).nRank)->getCString());//挑战者1排名
	if (challengerThreePower)
		challengerThreePower->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(2).n32Rating)->getCString());//战斗力
	//challengerOneHead = dynamic_cast<CCSprite*>(_frame->getChildByTag(CHALLENGERONEHEAD));//头像
	challengerThreeHead->initWithFile(getRoleHeadName(ArenaMainMgr::getInstance()->getChallengePlayerAttr(2).eClassType,ArenaMainMgr::getInstance()->getChallengePlayerAttr(2).bySex).c_str());
	if (challengerThreeLv)
		challengerThreeLv->setString(CCString::createWithFormat("%d",ArenaMainMgr::getInstance()->getChallengePlayerAttr(2).nLevel)->getCString());;//等级
	tmpName = Helper::convert_wstr_to_string<128>(ArenaMainMgr::getInstance()->getChallengePlayerAttr(2).szRoleName);
	if (challengerThreeName)
		challengerThreeName->setString(tmpName.c_str());//名字
	setClassType(ArenaMainMgr::getInstance()->getChallengePlayerAttr(2).eClassType,CHALLENGERTTHREECLASSTYPE);
}

std::string ArenaMainUiLayer::getRoleHeadName(EClassType _eClassType,BYTE bySex)
{
	eRoleType tempRloeType;
	switch(_eClassType)
	{
	case EV_Warrior:
		if (bySex == 1)
		{
			tempRloeType = RT_MWARRIOR;
		}
		else
		{
			tempRloeType = RT_WWARRIOR;
		}
		break;
	case EV_Mage:
		if (bySex == 1)
		{
			tempRloeType = RT_MMAGE;
		}
		else
		{
			tempRloeType = RT_WMAGE;
		}
		break;
	case EV_Taoist:
		if (bySex == 1)
		{
			tempRloeType = RT_MTAOIST;
		}
		else
		{
			tempRloeType = RT_WTAOIST;
		}
		break;
	default:
		tempRloeType = RT_MWARRIOR;
		break;
	}

	std::string tiaozhantouxiangPicPath="";
	switch(tempRloeType)//选择角色类型
	{
	case RT_MWARRIOR://战士 男
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkzhanshiman.png")->getCString();//pkzhanshiman
		break;
	case RT_WWARRIOR:
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkzhanshiwoman.png")->getCString();//pkzhanshiwoman
		break;
	case RT_MMAGE://法男
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkfashiman.png")->getCString();
		break;
	case RT_WMAGE:
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pk_fashiwoman.png")->getCString();
		break;
	case RT_MTAOIST:
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkdaoshiman.png")->getCString();
		break;
	case RT_WTAOIST:
		tiaozhantouxiangPicPath = CCString::createWithFormat("%s","Art/Portrait/pkdaoshiwoman.png")->getCString();
		break;
	default:
		CC_ASSERT(0);
	}
	return tiaozhantouxiangPicPath;
}

// std::string ArenaMainUiLayer::Helper::convert_wstr_to_string<128>(wchar_t const* roleName)
// {
// 	char vStr[128];
// 	memset(vStr, 0, sizeof(char) * 128);
// 	Utf16ToUtf8(roleName, vStr, 128, 0);
// 	return vStr;
// }

void ArenaMainUiLayer::setCurTime(float dt)
{
	if(isShowLeftTime())
	{
		setScriptDaojishi(0,0);
		//CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&ArenaMainUiLayer::setCurTime), this);
	}
	else
	{
		int arenaCDTime = ArenaMainMgr::getInstance()->getcountDownTime();
		int minutes = arenaCDTime / 60.0;
		int secondes = (int)(arenaCDTime) % 60;
		setScriptDaojishi(minutes,secondes);
	}
}

void ArenaMainUiLayer::update(float dt)
{
	//是否打开jjcpk界面
	if (ArenaMainMgr::getInstance()->getIsJJCResult())
	{
		CLOSE_UI(WCT_ARENAMAINUI);
		OPEN_UI(WCT_ARENAPKUI);
		

		MapManager::getInstance()->resetCrossMapping();
		RoleManager::getInstance()->getLocalPlayer()->stateMachine()->ChangeState(LocalPlayerStateStand::getInstance());
		if (RoleManager::getInstance()->getLocalPlayer()->getAutoRunState())
		{
			RoleManager::getInstance()->getLocalPlayer()->setAutoRunState(false);
		}				

		ArenaMainMgr::getInstance()->setIsJJCResult(false);
	}
}

void ArenaMainUiLayer::setScriptDaojishi(int min, int sec)
{
	CC_ASSERT(countDown != NULL);
	char scripttime[20];
	sprintf(scripttime,"%02d:%02d", min , sec );
	if (countDown)
	{
		countDown->setString(scripttime);
		countDown->setColor(ccc3(0xfe, 0xf8, 0xd8));
	}
}

void ArenaMainUiLayer::onEnter()
{
	setTouchPriority(1);
	setTouchEnabled(true);
	CCLayer::onEnter();
	//服务器通知客户端请求竞技场觉醒结果
	TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_JJC_POWER_UP_RESULT,this,&ArenaMainUiLayer::updatejjcPowerUpResult);
	TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_JJC_ADD_PK_COUNT_RESULT,this,&ArenaMainUiLayer::onAddchallengeTimes);
	TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_JJC_RESET_PK_CD_RESULT,this,&ArenaMainUiLayer::onSubjjcCDTime);
	TCP_CLIENT->register_net_cmd(NET_G2C_REQUEST_JJC_CHANGE_ENEMY_RESULT,this,&ArenaMainUiLayer::onjjcChangeEnemy);

	schedule(schedule_selector(ArenaMainUiLayer::setCurTime),1.0f);
}

void ArenaMainUiLayer::onExit()
{
	TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_JJC_POWER_UP_RESULT,this,&ArenaMainUiLayer::updatejjcPowerUpResult);
	TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_JJC_ADD_PK_COUNT_RESULT,this,&ArenaMainUiLayer::onAddchallengeTimes);
	TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_JJC_RESET_PK_CD_RESULT,this,&ArenaMainUiLayer::onSubjjcCDTime);
	TCP_CLIENT->unregister_net_cmd(NET_G2C_REQUEST_JJC_CHANGE_ENEMY_RESULT,this,&ArenaMainUiLayer::onjjcChangeEnemy);
	CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&ArenaMainUiLayer::setCurTime), this);
	CCLayer::onExit();
	UiResourceMgr::getInstance()->releasePlistFile(_plist);//add by vvv 2014.12.13

	unschedule(schedule_selector(ArenaMainUiLayer::setCurTime));

}

unsigned int ArenaMainUiLayer::updatejjcPowerUpResult( s_net_cmd* cmd )
{//结果(DWORD)[0 = 成功+ 当前觉醒次数(INT),非= 错误代码]
	WorldPacket Msg((const void*)cmd);
	unsigned int isSuccess;
	Msg >> isSuccess;
	if (isSuccess == 0)
	{
		int powerUpTimes;
		Msg >> powerUpTimes;
		ArenaMainMgr::getInstance()->setPowerUpCount(powerUpTimes);
		_hotProgress->setProgress(powerUpTimes,5);
	}else{
		//错误类型的展示处理
		switch(isSuccess)
		{
		case E_Role_JJC_Power_Up_Max:
			ToolTip::getInstance()->push("\xE8\xA7\x89\xE9\x86\x92\xE6\xAC\xA1\xE6\x95\xB0\xE5\xB7\xB2\xE8\xBE\xBE\xE4\xB8\x8A\xE9\x99\x90"); // 觉醒次数已达上限
			break;
		case E_Role_JJC_Power_Up_Not_YuanBao:
			//ToolTip::getInstance()->push("\xE5\x85\x83\xE5\xAE\x9D\xE4\xB8\x8D\xE8\xB6\xB3\x2C\xE6\x97\xA0\xE6\xB3\x95\xE8\xA7\x89\xE9\x86\x92"); // 元宝不足,无法觉醒
            //add by vvv 2014.11.05  元宝不足 提示框
			//std::string str1 = "\xE5\x85\x83\xE5\xAE\x9D\xE4\xB8\x8D\xE8\xB6\xB3\x2C\xE6\x97\xA0\xE6\xB3\x95\xE8\xA7\x89\xE9\x86\x92";
			//MessageBoxUi *messageBox = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(7024).c_str(), TEXT_UTF8_RECHARGE, TEXT_UTF8_QUXIAO);//充值，取消
			//messageBox->signalOkBtnPressed.connect(this, &ArenaMainUiLayer::noticeRecharge);
			//World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
			RechargeNewUiMgr::GetInstance()->openRechargeNewUi();
			break;
		}
	}
	return 0;
}

void ArenaMainUiLayer::SetArenaMainUiData()
{
	//个人信息的更新
	changeLocalPlayerData();
	//三个挑战者的信息
	changeChallengerData();
}

unsigned int ArenaMainUiLayer::onAddchallengeTimes( s_net_cmd* cmd )
{//结果(DWORD)[0 = 成功+ 当前可挑战次数(INT) + 本日已附加次数(INT),非= 错误代码]
	WorldPacket Msg((const void*)cmd);
	unsigned int isSuccess;
	Msg >> isSuccess;
	if (isSuccess == 0)
	{
		int curChallengeTimes;
		int todayAddTimes;
		Msg >> curChallengeTimes;
		Msg >> todayAddTimes;
		LocalPlayer* lp = RoleManager::getInstance()->getLocalPlayer();
		lp->setRoleDayClearInfoTwo(ERDCT_JJC_PK_COUNT,curChallengeTimes);
		lp->setRoleDayClearInfoTwo(ERDCT_JJC_ADD_PK_COUNT,todayAddTimes);
		ArenaMainMgr::getInstance()->updateArenaTimes(curChallengeTimes);
		if (challengeTimes)
			challengeTimes->setString(CCString::createWithFormat("%d",curChallengeTimes)->getCString());
	}else{
		//错误类型的展示处理
		switch(isSuccess)
		{
		case E_Role_JJC_Add_PK_Count_Max:// 本日增加挑战次数已达上限
			ToolTip::getInstance()->push("\xE6\x9C\xAC\xE6\x97\xA5\xE5\xA2\x9E\xE5\x8A\xA0\xE6\x8C\x91\xE6\x88\x98\xE6\xAC\xA1\xE6\x95\xB0\xE5\xB7\xB2\xE8\xBE\xBE\xE4\xB8\x8A\xE9\x99\x90");
			break;
		case E_Role_JJC_Add_PK_Count_Not_YuanBao:// 元宝不足，无法增加挑战次数
			//std::string ss = "\xE5\x85\x83\xE5\xAE\x9D\xE4\xB8\x8D\xE8\xB6\xB3\x2C\xE6\x97\xA0\xE6\xB3\x95\xE5\xA2\x9E\xE5\x8A\xA0\xE6\x8C\x91\xE6\x88\x98\xE6\xAC\xA1\xE6\x95\xB0";
			//MessageBoxUi *messageBox = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(7024).c_str(), TEXT_UTF8_RECHARGE, TEXT_UTF8_QUXIAO);//充值，取消
			//messageBox->signalOkBtnPressed.connect(this, &ArenaMainUiLayer::noticeRecharge);
			//World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
			RechargeNewUiMgr::GetInstance()->openRechargeNewUi();
			break;
		}
	}
	return 0;
}
void ArenaMainUiLayer::noticeRecharge()
{
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_4);
	OPEN_UI(WCT_ChongZhiActivityFarmeUI);
}

unsigned int ArenaMainUiLayer::onSubjjcCDTime( s_net_cmd* cmd )
{//结果(DWORD)[0 = 成功, 非0 = 错误代码]
	WorldPacket Msg((const void*)cmd);
	unsigned int isSuccess;
	Msg >> isSuccess;
	if (isSuccess == 0)
	{
		ArenaMainMgr::getInstance()->reSet_countDownTime();
	}else{
		//错误类型的展示处理
		switch(isSuccess)
		{
		case E_Role_JJC_Reset_PK_CD_Not_YuanBao: // 元宝不足，无法重置挑战冷却时间
			//ToolTip::getInstance()->push("\xE5\x85\x83\xE5\xAE\x9D\xE4\xB8\x8D\xE8\xB6\xB3\x2C\xE6\x97\xA0\xE6\xB3\x95\xE9\x87\x8D\xE7\xBD\xAE\xE6\x8C\x91\xE6\x88\x98\xE5\x86\xB7\xE5\x8D\xB4\xE6\x97\xB6\xE9\x97\xB4");
			//add by vvv 2014.11.05  元宝不足 提示框
	         str2 ="\xE5\x85\x83\xE5\xAE\x9D\xE4\xB8\x8D\xE8\xB6\xB3\x2C\xE6\x97\xA0\xE6\xB3\x95\xE9\x87\x8D\xE7\xBD\xAE\xE6\x8C\x91\xE6\x88\x98\xE5\x86\xB7\xE5\x8D\xB4\xE6\x97\xB6\xE9\x97\xB4";
			//messageBox = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(7024).c_str(), TEXT_UTF8_RECHARGE, TEXT_UTF8_QUXIAO);//充值，取消
			//messageBox->signalOkBtnPressed.connect(this, &ArenaMainUiLayer::noticeRecharge);
			//World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
			 RechargeNewUiMgr::GetInstance()->openRechargeNewUi();
			break;
		case E_Role_JJC_Reset_PK_CD_Error:
			ToolTip::getInstance()->push("\xE6\x8C\x91\xE6\x88\x98\xE6\x9C\xAA\xE8\xBF\x9B\xE5\x85\xA5\xE5\x86\xB7\xE5\x8D\xB4\xE6\x97\xB6\xE9\x97\xB4\x2C\xE4\xB8\x8D\xE9\x9C\x80\xE8\xA6\x81\xE9\x87\x8D\xE7\xBD\xAE"); // 挑战未进入冷却时间，不需要重置
			break;
		}
	}
	return 0;
}

unsigned int ArenaMainUiLayer::onjjcChangeEnemy( s_net_cmd* cmd )
{//结果(DWORD)[0 = 成功, 非0 = 错误代码]
	WorldPacket Msg((const void*)cmd);
	unsigned int isSuccess;
	Msg >> isSuccess;
	if (isSuccess == 0)
	{
		//SetArenaMainUiData();
	}else{
		switch(isSuccess)
		{
		case E_Role_JJC_Change_Enemy_Not_Silver:
			ToolTip::getInstance()->push("\xE9\x87\x91\xE5\xB8\x81\xE4\xBD\x99\xE9\xA2\x9D\xE4\xB8\x8D\xE8\xB6\xB3");//金币余额不足
			break;
		default:
			break;
		}
	}
	return 0;
}

void ArenaMainUiLayer::setChallengeTimes( int count )
{
	ArenaMainMgr::getInstance()->updateArenaTimes(count);
	if (challengeTimes)
		challengeTimes->setString(CCString::createWithFormat("%d",count)->getCString());
}

//购买挑战次数确定按钮
void ArenaMainUiLayer::onMessageBoxBuyPKCountOk()
{
	//竞技场请求增加挑战次数
	WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_ADD_PK_COUNT);	//组装消息头
	TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_IDLE, false); //发送
}

//购买挑战时间确定按钮
void ArenaMainUiLayer::onMessageBoxBuyPKTimeOk()
{
	//竞技场请求重置挑战CD时间
	WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_RESET_PK_CD);	//组装消息头
	TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_IDLE, false); //发送
}

//购买觉醒Buff确定按钮
void ArenaMainUiLayer::onMessageBoxBuyPKPowerUpOk()
{
	//竞技场请求觉醒
	WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_POWER_UP);	//组装消息头
	TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_IDLE, false); //发送
}

//觉醒，带有不再提示Check按钮的的MessageBox的call back function
void ArenaMainUiLayer::togJJCPowerUpTip( bool state )
{
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return ;
	unsigned int roleID = ploc->getId();
	std::stringstream ss;
	ss<<"set"<<"_"<<roleID;
	ClientCfg::getInstance()->setInt(ss.str(), "JJCPowerUpTip", state ? 1 : 0);
}

//换一批对手确定按钮
void ArenaMainUiLayer::onMessageBoxBuyChangeEnemyOk()
{
	//竞技场请求换一批对手
	WorldPacket SIC_Msg(NET_C2G_REQUEST_JJC_CHANGE_ENEMY);	//组装消息头
	TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_IDLE, false); //发送
}

//换一批，带有不再提示Check按钮的的MessageBox的call back function
void ArenaMainUiLayer::togChangeEnemyTip( bool state )
{
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return ;
	unsigned int roleID = ploc->getId();
	std::stringstream ss;
	ss<<"set"<<"_"<<roleID;
	ClientCfg::getInstance()->setInt(ss.str(), "ChangeEnemyTip", state ? 1 : 0);
}

void ArenaMainUiLayer::updateRewardItem(int rank)
{
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM MAILDATA WHERE id = ?1");
	cmd->set_integer32(1 , rank);
	c_sql_table* table = c_db_manager::getSingleton()->create_table();

	while(table->retrieve_row())
	{
		unsigned int idx = table->get_index("silver");
		arenaCoinNum = table->get_integer32(idx);
		idx = table->get_index("exp");
		expPointNum = table->get_integer32(idx);
	}

	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
}

void ArenaMainUiLayer::setClassType( EClassType _eClassType,int tag )
{
	std::string name;
	switch(_eClassType)
	{
	case EV_Warrior:
		name="jingjiui_zhan";
		break;
	case EV_Mage:
		name="jingjiui_fa";
		break;
	case EV_Taoist:
		name="jingjiui_dao";
		break;
	default:
		name="jingjiui_zhan";
		break;
	}
	CCSprite* challengerClassType=dynamic_cast<CCSprite*>(_frame->getChildByTag(tag));//职业
	CCSpriteFrame *pFrame = CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(name.c_str());
	CC_ASSERT(pFrame!=NULL);
	challengerClassType->setDisplayFrame(pFrame);
}

cocos2d::CCRect ArenaMainUiLayer::GetChallagePos()
{
	CCNode* pBtn = _frame->getChildByTag(CHALLENGTHREEBUTTON);
	if (pBtn)
	{
		CCPoint cp = _frame->convertToWorldSpace(pBtn->getPosition());
		CCSize cs = pBtn->getContentSize();
		return CCRect(cp.x - 50, cp.y - 10, cs.width, cs.height );
	}
	return CCRect();
}

bool ArenaMainUiLayer::check_dead() const
{
	LocalPlayer* pPlayer = RoleManager::getInstance()->getLocalPlayer();
	if (!pPlayer)
		return false;
	/*if (pPlayer->isInRoleStateAny(RA_ShuangXiu))
	{
	ToolTip::getInstance()->push(GET_STR(2101));
	return ;
	}
	else if (pPlayer->isInRoleStateAny(RA_Exchange))
	{
	ToolTip::getInstance()->push(GET_STR(7218));
	return ;
	}
	else if (pPlayer->isInRoleStateAny(RA_Stall))
	{
	ToolTip::getInstance()->push(GET_STR(2102));
	return ;
	}*/
	else if (pPlayer->isDead())
	{
		ToolTip::getInstance()->push(GET_STR(2167));
		return false;
	}

	return true;
}
