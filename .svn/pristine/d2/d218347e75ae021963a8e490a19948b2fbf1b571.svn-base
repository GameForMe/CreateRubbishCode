#ifndef EQUIPUPSTARUI_H
#define EQUIPUPSTARUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiTools.h"
#include "UiInterface.h"
#include "item.h"
#include "ItemMarixLayer.h"
#include "EquipTipUi.h"
#include "GameActionNode.h"
using namespace cocos2d;
using namespace cocos2d::extension;
class TouchSprite;
class FrameSprite;

class EquipUpStarUiLayer;

enum eEquipUpStarUiTag
{
	EQUIP_1 = 1,//辅助装备1
	EQUIP_2 = 2,//辅助装备2
	EQUIP_3 = 3,//辅助装备3
	EQUIPMASTER = 4,//升级装备
	EQUIPUPSTARITEM = 5,//升星道具
	EQUIPITEMINDEX = 6,//升星道具数量
	COIN = 7,//需要金币
	EQUIPUPSTARNAME = 8,//装备名字
	//左边一套装备
	FIGHTPOWER_1 = 10,//战斗力
	STAR_1_1 = 11,//星星
	STAR_2_1 = 12,
	STAR_3_1 = 13,
	ATTRDATA_1_1 = 14,//基础属性
	ATTRDATA_2_1 = 15,
	ATTRDATA_3_1 = 16,
	ATTRDATA_4_1 = 17,
	ATTRDATA_5_1 = 18,
	ATTRDATA_6_1 = 19,
	//右边一套装备
	FIGHTPOWER_2 = 20,//战斗力
	STAR_1_2 = 21,//星星
	STAR_2_2 = 22,
	STAR_3_2 = 23,
	ATTRDATA_1_2 = 24,//基础属性
	ATTRDATA_2_2 = 25,
	ATTRDATA_3_2 = 26,
	ATTRDATA_4_2 = 27,
	ATTRDATA_5_2 = 28,
	ATTRDATA_6_2 = 29,
	ITEMFRAME = 30,
	FightNumValue = 35,						//战斗力								32
	UPSTARSUCCESSRATE = 50, //升星的成功率
	ABOVEEQUIPNAME = 51,//上面的装备名称
	EQUIPNum=90,//需要装备的数量
	BIGStart=98,
};

class EquipUpStarUi : public UiInterface
{
public:
	EquipUpStarUi();
	~EquipUpStarUi();

	void showUi(bool show){isShow = show;};
	bool showState() { return isShow;};
	void updateEquipData();
	void updateNextData();
	CCNode* openUi();
private:
	bool isShow;
};

class EquipUpStarUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eEquipUpStarTag
	{
		EUST_FightNumSE1=31,			//左侧战斗力特效node			31
		EUST_FightNumSP1,				//左侧战斗力文字精灵			32
		EUST_FightNumSE2,				//右侧战斗力特效node			33
		EUST_FightNumSP2,				//右侧战斗力文字精灵			34
	};

public:

	EquipUpStarUiLayer(){ nstartLv = 0;}
	~EquipUpStarUiLayer() {}
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(EquipUpStarUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	//界面初始化加载时执行
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	void onDropEndItem( CCNode* pNode, short nIdx );
	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onUpStarBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onUpStarDescPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onKnowBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);			 //说明面板确定事件
	void onAutoInPutBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);	///设置前三个装备到升星备选装备框上	
	void onItemMarixClick(short nIdx);
	//界面退出后执行
	virtual void onExit();
	virtual void onEnter();
	void SetEquipUpStarData();
	void initUpStarAttrNameStr();
	std::string getEquipName(unsigned int equipId);
	std::string getEquipAttToString(ERoleAttribute eRoleAtt,std::string eValue);
	void SetEquipUpStarData(int nodeId,int starLv);
	unsigned int updataEquipUpStarData(s_net_cmd* cmd);
	void clearNextEquipData();
	std::string getNextEquipAttToString(ERoleAttribute eRoleAtt,int eValue);
	void addBaseAttr(const char *attrName, int v1, int v2 = -1/* = -1*/, const char *split = "-"/* = "-"*/);
	EquipTipUiAttrItem* createAttrItem(const char *attrName, int v1, int v2 = -1/*= -1*/, const char *split = "-"/* = "-"*/);
	void addBaseAttr_2(const char *attrName, int v1, int v2 = -1/* = -1*/, const char *split = "-"/* = "-"*/);
	EquipTipUiAttrItem* createAttrItem_2(const char *attrName, int v1, int v2 = -1/*= -1*/, const char *split = "-"/* = "-"*/);
	void onUpstarCalback(float dt);									//升星后的动作(主要为配合特效)
	void setButtonClickable(bool canClick);							//设置界面按钮可点击状态
	void onUpstarCalbackImpl(float dt);
	void playUpstarSE();
	void UpdateEquipNum();
	void playUseUpEffect(int star);
	void playEffectUpdateUi(float dt);
	void playDelayStarEffect(float dt);
	void updateHideAllShengXinControl();
private:
	void updateData();
	void updateUI();
	void updateOne(f_item* item, short idx);
	GameActionNode* getFightNumSuperEffect();					//创建战斗力特效				【Ji：】
	GameActionNode* getUpStarSuperEffect();						//创建升星特效
	GameActionNode* getUseUpEquipEffect();						//创建装备消耗特效
							//播放升星特效
	//void setThreeEquip();//设置前三个装备到升星备选装备框上

private:
	std::list<EquipTipUiAttrItem*> _baseAttr;
	std::map<ERoleAttribute, std::string> BaseAttrNameStr;
	//战斗力特效			【Ji：】
	std::set<std::string> _plist;									//保存特效plist名称
	GameActionNode* _fightNumAcNode;									//战斗力火焰特效
	GameActionNode* _upstarAcNode;										//升星特效
	CCLabelBMFont* _fightNumBLabel;				//战斗力艺术字label 

	f_item* tempUpStarItem[3];
	CCSprite  *bgsprite;//vv 动态效果底图
	FrameSprite *_descframe;     //升级说明界面
	CCSprite* _frame;
	CCLayer* _itemFrame;
//	CCSprite* equipMaster;//升级装备			不用精灵展示，换成了itemnode【J】
	ItemNode* _needUpENode;						//需要升级的装备node
	ItemNode* equip_1;//辅助装备1
	ItemNode* equip_2;//辅助装备2
	ItemNode* equip_3;//辅助装备3
	ItemNode* equipList[3];
	CCSprite* equipItem;//升星道具
	CCLabelTTF* equipItemIndex;//升星道具数量
	CCLabelTTF* coin;//需要金币
	CCLabelTTF* equipName;//装备名字
	//左边一套装备
	CCLabelTTF* fightPower_1;//战斗力
	CCSprite* star_1_1;//星星
	CCSprite* star_2_1;
	CCSprite* star_3_1;
	CCLabelTTF* attrData_1_1;//基础属性
	CCLabelTTF* attrData_2_1;
	CCLabelTTF* attrData_3_1;
	CCLabelTTF* attrData_4_1;
	CCLabelTTF* attrData_5_1;
	CCLabelTTF* attrData_6_1;
	//右边一套装备
	CCLabelTTF* fightPower_2;//战斗力
	CCSprite* star_1_2;//星星
	CCSprite* star_2_2;
	CCSprite* star_3_2;
	CCLabelTTF* attrData_1_2;//基础属性
	CCLabelTTF* attrData_2_2;
	CCLabelTTF* attrData_3_2;
	CCLabelTTF* attrData_4_2;
	CCLabelTTF* attrData_5_2;
	CCLabelTTF* attrData_6_2;
	ItemMarixLayer* itemLayer;
	std::map<ERoleAttribute, std::string> _upStarBaseAttrNameStr;
	CCString* tempBaseAttr[6];
	int tempBaseAttrIndex;
	CCString* tempNextBaseAttr[6];
	CCLabelTTF* upStarSuccessRate;//升星的成功率
	CCLabelTTF* aboveEquipName;//上面的装备名称
	CCLabelTTF* equipNum;//需要装备的数量

	bool isFinishEffect;
	GameActionNode* _useUpEquipAcNode1;//消耗装备特效
	GameActionNode* _useUpEquipAcNode2;//
	GameActionNode* _useUpEquipAcNode3;
	CCSprite *bigstar;
	CCPoint bigstarPosition;
	int nstartLv;
};

#endif //FUBENRANKUI_H