#include "AssaultSkillEffect.h"
#include "Role.h"
#include "RoleManager.h"
#include "tools.h"
#include "SkillAnimManager.h"
#include "AnimationCache.h"
#include "cocos2d.h"
using namespace cocos2d;

AssaultSkillEffect::AssaultSkillEffect()
{

}

AssaultSkillEffect::~AssaultSkillEffect()
{

}

bool AssaultSkillEffect::accept( unsigned int skillId )
{
	if(skillId / 100 == 10107)
		return true;

	return false;
}

bool AssaultSkillEffect::run( unsigned int targetRoleId )
{
	if(targetRoleId == INVALID_ID)
		return false;

	CC_ASSERT(_sprite != NULL);

	CC_ASSERT(_bHasEffect);

	Role *role = RoleManager::getInstance()->findRole(targetRoleId);
	if(role != NULL)
	{
		_targetRoleId = targetRoleId;
		eOctDir dir = (eOctDir)role->getRoleDir();
		eOctDir newDir = dir;
		std::vector<CCSprite *> sprites2;
		sprites2.push_back(_sprite);
		flipSprites(sprites2,false);

		setPosition(role->getPosition());
		CCFiniteTimeAction *call = CCCallFuncND::create(OctSkillEffectCallback::getInstance(), SEL_CallFuncND(&OctSkillEffectCallback::onEffectFinished), this);
		CCSequence *sequence = CCSequence::create(_animate[newDir], _animate[newDir],call,NULL);
		_sprite->runAction(sequence);
		_sprite->setVisible(true);
	}
	return true;
}

bool AssaultSkillEffect::initSkill( unsigned int skillId, const st_skill_proto &skillInfo )
{
	bool ret = OctSkillEffect::initSkill(skillId, skillInfo);
	if (!ret)
	{
		return false;
	}
	_updatePos = true;
	return true;
}

