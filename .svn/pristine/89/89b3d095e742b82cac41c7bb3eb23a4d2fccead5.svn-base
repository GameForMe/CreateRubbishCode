#ifndef RADIOMUTEX_H_INCLUDE
#define	RADIOMUTEX_H_INCLUDE
/********************************************************************
	created:	2015/08/12
	created:	12:8:2015   11:08
	filename: 	C:\chuanqi\trunk\Client\code\source\RadioMutex.h
	file path:	C:\chuanqi\trunk\Client\code\source
	file base:	RadioMutex
	file ext:	h
	author:		gh
	
	purpose:	支持radiobtn组实现互斥
*********************************************************************/
#include <boost/function.hpp>
#include "cocos2d.h"
#include "cocos-ext.h"

USING_NS_CC;
USING_NS_CC_EXT;

class RadioButton;

typedef std::vector<RadioButton*> RadioButtonList;

//layer class
class RadioMutex
	: public cocos2d::CCNode
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	typedef boost::function<void(int tag)> radio_selected_f;
	typedef std::vector<RadioButton*>  RadioButtonArray;
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(RadioMutex, create);
	
	RadioMutex();

	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual void onEnter();

	void set_radio_selected_fn(radio_selected_f fn) { m_selected_fn = fn; }
	void select(size_t idx, bool enable_callback = true);
	void set_select_default_on_enter(bool val) { m_select_default_on_enter = val; }
	const RadioButtonList& get_buttons() const { return mvecRodioBtns; };

	void arrange(RadioButtonArray const& btns);
private:
	void onListen(CCObject* pSender, CCControlEvent pCCControlEvent);
	void selDefault();

private:
	RadioButtonArray			mvecRodioBtns;
	radio_selected_f			m_selected_fn;
	bool								m_select_default_on_enter;
	bool								m_enable_callback;
};

//layer loader
class RadioMutexLoader : public cocos2d::extension::CCNodeLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(RadioMutexLoader, loader);

protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(RadioMutex);
};
#endif
