#include "MartialUpgradUi.h"
#include "TouchSprite.h"
#include "UiLoader.h"
#include "UiTools.h"
#include "UiManager.h"

CCNode * MartialUpgradUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["MartialUpgradUiLayer"] = UiLayerLoader<MartialUpgradUiLayer>::loader();
	nodeLoaders["TouchSprite"] = TouchSpriteLoader::loader();
	CCNode *uiNode = readUiFromCCBI("martialupgradui", nodeLoaders, _loadSpriteSheet);
	return uiNode;

}

MartialUpgradUiLayer * MartialUpgradUi::getUiLayer()
{
	return getUiNodeByTag<MartialUpgradUiLayer>(WCT_MartialUpgradUi);
}

void MartialUpgradUi::updateData()
{
	MartialUpgradUiLayer *uilayer = getUiNodeByTag<MartialUpgradUiLayer>(WCT_MartialUpgradUi);
	if (uilayer != NULL)
	{
		uilayer->updateData();
	}
}

/////////////////////////////////////////////////////

cocos2d::SEL_MenuHandler MartialUpgradUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}


cocos2d::extension::SEL_CCControlHandler MartialUpgradUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", MartialUpgradUiLayer::onCloseBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onMartialInstructBtnPressed", MartialUpgradUiLayer::onMartialInstructBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onMartialfusionBtnPressed", MartialUpgradUiLayer::onMartialfusionBtnPressed);
	return NULL;
}

void MartialUpgradUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	_frame = dynamic_cast<CCSprite*>(getChildByTag(MUT_Frame));
	CC_ASSERT(_frame != NULL);
	// 
// 	_nodeFrame = dynamic_cast<CCSprite*>(_frame->getChildByTag(MET_NodeFrame));
// 	CC_ASSERT(_nodeFrame != NULL);

	//功法获取页签、装备页签点击事件;
	TouchSprite *martialobtainTab = dynamic_cast<TouchSprite*>(_frame->getChildByTag(MUT_ObtainTab));
	CC_ASSERT(martialobtainTab != NULL);
	martialobtainTab->signalTouched.connect(this, &MartialUpgradUiLayer::onMartialObtainTabClicked);

	TouchSprite *martialequipTab = dynamic_cast<TouchSprite*>(_frame->getChildByTag(MUT_EquipTab));
	CC_ASSERT(martialequipTab != NULL);
	martialequipTab->signalTouched.connect(this, &MartialUpgradUiLayer::onMartialEquipTabClicked);

	_container = _frame->getChildByTag(MUT_Container);
	CC_ASSERT(_container != NULL);

	
}

void MartialUpgradUiLayer::updateData()
{
	
}

void MartialUpgradUiLayer::onEnter()
{
	CCLayer::onEnter();
	DropDragDelegate::getInstance()->addDropLayer(this);
}

void MartialUpgradUiLayer::onExit()
{
	CCLayer::onExit();
	DropDragDelegate::getInstance()->removeDropLayer(this);
}

bool MartialUpgradUiLayer::onClicked( CCTouch &touch )
{
	CCPoint framePoint = _frame->convertTouchToNodeSpace(&touch);
	const CCSize &frameSize = _frame->getContentSize();
	CCRect frameRect(0.0f, 0.0f, frameSize.width, frameSize.height);
	if(frameRect.containsPoint(framePoint))
	{
		return true;
	}
	return false;
}

short MartialUpgradUiLayer::getItemBegin( CCTouch &touch, eGetResult &result )
{
	CCPoint framePoint = _frame->convertTouchToNodeSpace(&touch);
	const CCSize &frameSize = _frame->getContentSize();
	CCRect frameRect(0.0f, 0.0f, frameSize.width, frameSize.height);
	if(frameRect.containsPoint(framePoint))
	{
		result = GR_SUCCESS;
	}
	else
	{
		result = GR_ERROR;
	}

	return -1;
}

short MartialUpgradUiLayer::getItemEnd( CCTouch &touch, eGetResult &result, EItemConType src, short itemIndex )
{
// 	CCPoint framePoint = _frame->convertTouchToNodeSpace(&touch);
// 	const CCSize &frameSize = _frame->getContentSize();
// 	CCRect frameRect(0.0f, 0.0f, frameSize.width, frameSize.height);
// 	if(frameRect.containsPoint(framePoint))
// 	{
// 		if(src == EICT_Bag)
// 		{
// 			int index = getItemUnderPoint(framePoint);
// 			if(index != -1)
// 			{
// 				f_item *item = PackageManager::getInstance()->getItem(src, itemIndex);
// 				if(item != NULL)
// 				{
// 					const ItemTypeData &typeData = PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
// 					if(typeData.type == PIT_Equip)
// 					{
// 						// 						if(index == IUNT_NodeBegin)
// 						// 						{
// 						// 							//时装，翅膀不能强化
// 						// 							const EquipTypeData &equipTypeData = PackageManager::getInstance()->getEquipTypeData(item->get_item_type_id());
// 						// 							if (EEP_Fashion == equipTypeData.posIndex || EEP_Body1 == equipTypeData.posIndex || EEP_Ride == equipTypeData.posIndex)
// 						// 							{
// 						// 								ToolTip::getInstance()->push(GET_STR(2117));
// 						// 								result = GR_SUCCESS;
// 						// 								return -1;
// 						// 							}
// 						// 							setEquipData(dynamic_cast<f_equipment*>(item));
// 						// 						}
// 					}
// 					else if(typeData.type == PIT_XiangQianMat)
// 					{
// 						// 						if(index > MET_ItemBegin && index < MET_ItemEnd)
// 						// 						{
// 						// 							if(_equipId != -1)
// 						// 							{
// 						// 								putStone(item, index);
// 						// 							}
// 						// 						}
// 					}
// 				}
// 			}
// 		}
// 		result = GR_SUCCESS;
// 	}
// 	else
// 	{
// 		result = GR_ERROR;
// 	}

	return -1;
}

void MartialUpgradUiLayer::onCloseBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	CLOSE_UI(WCT_MartialUpgradUi);
}

void MartialUpgradUiLayer::onMartialInstructBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//功法说明;
}

void MartialUpgradUiLayer::onMartialfusionBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//一键融合;
}

ItemNode * MartialUpgradUiLayer::getItemNode( eMartialUpgradUiTag tag )
{
	return NULL;
}

void MartialUpgradUiLayer::onMartialEquipTabClicked( TouchSprite*, bool )
{
	CLOSE_UI(WCT_MartialUpgradUi);
	OPEN_UI(WCT_MartialEquipUi);
}

void MartialUpgradUiLayer::onMartialObtainTabClicked( TouchSprite*, bool )
{
	CLOSE_UI(WCT_MartialUpgradUi);
	OPEN_UI(WCT_MartialObtainUi);
}
