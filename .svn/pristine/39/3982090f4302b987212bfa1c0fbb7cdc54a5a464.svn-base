#ifndef ARENAMAIN_H
#define ARENAMAIN_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiTools.h"
#include "UiInterface.h"
#include "ProgressBar.h"
#include "TouchSprite.h"
#include "ArenaMainMgr.h"
#include "MessageBoxUi.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class ArenaMainUiLayer;

enum arenaUiTag
{
	TITLERANK = 1,//顶头排名
	ARENACOIN = 2,//金币
	EXPPOINT = 3,//经验
	TREASUREBOX = 4,//宝箱
	PROMPTMSG = 5,//提示信息
	CHALLENGETIMES = 6,//挑战次数
	COUNTDOWN = 7,//倒计时
	//当前玩家的数据控件
	LOCALPLAYERNAME = 11,//本地玩家名字
	LOCALPLAYERBODY = 12,//半身像
	LOCALPLAYERPOWER = 13,//战斗力
	LOCALPLAYERRANK = 14,//排名
	LOCALPLAYERWINSTREAK = 15,//连胜
	HOTPROGRESS = 16,
	//挑战对象1
	CHALLENGERONERANK = 21,//挑战者1排名
	CHALLENGERONEPOWER = 22,//战斗力
	CHALLENGERONEHEAD = 23,//头像
	CHALLENGERONELV = 24,//等级
	CHALLENGERONENAME = 25,//名字
	CHALLENGERONECLASSTYPE=27,//职业
	//挑战对象2
	CHALLENGERTWORANK = 31,//挑战者2排名
	CHALLENGERTWOPOWER = 32,//战斗力
	CHALLENGERTWOHEAD = 33,//头像
	CHALLENGERTWOLV = 34,//等级
	CHALLENGERTWONAME = 35,//名字
	CHALLENGERTWOCLASSTYPE=37,//职业
	//挑战对象3
	CHALLENGERTTHREERANK = 41,//挑战者3排名
	CHALLENGERTTHREEPOWER = 42,//战斗力
	CHALLENGERTTHREEHEAD = 43,//头像
	CHALLENGERTTHREELV = 44,//等级
	CHALLENGERTTHREENAME = 45,//名字
	CHALLENGERTTHREECLASSTYPE=47,//职业
	CHALLENGTHREEBUTTON		= 50,//挑战按钮
};

class ArenaMainUi : public UiInterface
{
public:
	ArenaMainUi();
	~ArenaMainUi();

	CCNode* openUi();
	void updateArenaData();
	void updateChallengeTimes(int count);
	CCRect GetChallagePos();
};

class ArenaMainUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:

	ArenaMainUiLayer(){};
	~ArenaMainUiLayer()
	{
		CC_SAFE_DELETE(_hotProgress);
	};
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(ArenaMainUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

	//界面初始化加载时执行
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	//按钮处理方法
	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onArenaRankBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChallengOneBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChallengTwoBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChallengThreeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAwakenBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChangeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBallteDateBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAddchallengeTimesBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onSubCDTimeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	//界面退出后执行
	virtual void onExit();
	virtual void onEnter();
	virtual void update(float dt);
	void setScriptDaojishi(int min, int sec);
	void changeChallengerData();
	//std::string getChangeRoleNameType(wchar_t const* roleName);
	unsigned int updatejjcPowerUpResult( s_net_cmd* cmd );
	unsigned int onAddchallengeTimes( s_net_cmd* cmd );
	unsigned int onSubjjcCDTime( s_net_cmd* cmd );
	unsigned int onjjcChangeEnemy( s_net_cmd* cmd );
	void SetArenaMainUiData();
	void changeLocalPlayerData();
	void setCurTime(float dt);
	void setChallengeTimes(int count);
	void noticeRecharge();								 //add by vvv 2014.11.05//跳转到充值界面
	void onMessageBoxBuyPKCountOk(); //购买挑战次数确定按钮
	void onMessageBoxBuyPKTimeOk(); //购买挑战时间确定按钮
	void onMessageBoxBuyPKPowerUpOk(); //购买觉醒Buff确定按钮
	void onMessageBoxBuyChangeEnemyOk(); //换一批对手确定按钮

	void togJJCPowerUpTip( bool state ); //觉醒，带有不再提示Check按钮的的MessageBox的call back function
	void togChangeEnemyTip( bool state ); //换一批，带有不再提示Check按钮的的MessageBox的call back function
	
	void updateRewardItem(int rank);
	std::string getRoleHeadName(EClassType _eClassType,BYTE bySex);
	std::string setMsgMainFormat(tagJJCRecord attr);
	void setClassType(EClassType _eClassType,int tag);
	CCRect GetChallagePos();

private:
	bool check_dead()const;
private:
	std::string str2;
	MessageBoxUi *messageBox;//add by vvv 2014.11.05 元宝不足，
	CCSprite* _frame;
	LabelFT* titleRank;//顶头排名
	LabelFT* arenaCoin;//金币
	LabelFT* expPoint;//经验
	LabelFT* promptMsg;//提示信息
	LabelFT* challengeTimes;//挑战次数
	LabelFT* countDown;//倒计时
	CCSprite* treasureBox;//宝箱
	//当前玩家的数据控件
	LabelFT* localPlayerName;//本地玩家名字
	CCSprite* localPlayerBody;//半身像
	LabelFT* localPlayerPower;//战斗力
	LabelFT* localPlayerRank;//排名
	LabelFT* localPlayerWinStreak;//连胜
	ProgressBar* _hotProgress;//热力条
	int expPointNum;//经验
	int arenaCoinNum;//金币
	//挑战对象1
	LabelFT* challengerOneRank;//挑战者1排名
	LabelFT* challengerOnePower;//战斗力
	CCSprite* challengerOneHead;//头像
	LabelFT* challengerOneLv;//等级
	LabelFT* challengerOneName;//名字
	CCSprite* challengerOneClassType;//职业
	//挑战对象2
	LabelFT* challengerTwoRank;//挑战者2排名
	LabelFT* challengerTwoPower;//战斗力
	CCSprite* challengerTwoHead;//头像
	LabelFT* challengerTwoLv;//等级
	LabelFT* challengerTwoName;//名字
	CCSprite* challengerTwoClassType;//职业
	//挑战对象3
	LabelFT* challengerThreeRank;//挑战者3排名
	LabelFT* challengerThreePower;//战斗力
	CCSprite* challengerThreeHead;//头像
	LabelFT* challengerThreeLv;//等级
	LabelFT* challengerThreeName;//名字
	CCSprite* challengerThreeClassType;//职业
	std::set<std::string> _plist;				//保存特效plist名称
};

#endif //FUBENRANKUI_H