#ifndef RANKLISTITEM_H
#define RANKLISTITEM_H

#include "ListItem.h"
#include "BaseDefine.h"
#include "cocos2d.h"
using namespace cocos2d;

class RankListData
{
public:
	virtual std::string getString(int i) const = 0;
	unsigned int roleId;
};

class RankLevelData : public RankListData
{
public:
	virtual std::string getString(int column) const;

public:
	std::string name;
	RoleType profession;
	int level;
	int levelRank;
	std::string title;
	unsigned int titleId;
};

class RankZhanliData : public RankListData
{
public:
	virtual std::string getString(int column) const;

public:
	std::string name;
	RoleType profession;
	int zhanli;
	int zhanliRank;
	std::string title;
	unsigned int titleId;
};


class RankMeiliData : public RankListData
{
public:
	virtual std::string getString(int column) const;

public:
	std::string name;
	RoleType profession;
	int meili;
	int meiliRank;
	std::string title;
	unsigned int titleId;
};

class RankGuildData : public RankListData
{
public:
	virtual std::string getString(int column) const;

public:
	int guildRank;
	std::string name;
	std::string leaderName;
	int memCount;
	int nlevel;
	int gid;
};

class RankMasterData: public RankListData
{
public:
	virtual std::string getString(int column) const;
public:
	std::string name;
	RoleType profession;
	int masterRank;
	int chushiCount;
	std::string title;
	unsigned int titleId;
};

class RankRichData: public RankListData
{
public:
	virtual std::string getString(int column) const;
public:
	std::string name;
	RoleType profession;
	int level;
	int richRank;
	std::string title;
	unsigned int titleId;
};


class RankListIItem : public ListItem
{
public:
	RankListIItem();
	virtual ~RankListIItem();
	virtual CCSize getContentSize();
	virtual float getItemHeight();
	void setData(const RankListData &data, int index);
	int getIndex() { return _index; }
	void setVisible(bool visible);
	unsigned int getRoleId(){return _roleId;}
	CCNode* getNode(){return _node;}
	void setRank(int rank,bool isGuild = false);
protected:
	LabelFT* getLabel(int column);
	void updateContent();

private:
	CCSize _contentSize;
	int _index;
	bool _visible;
	unsigned int _roleId;
};

class RankLabItem : public ListItem
{
public:
	RankLabItem();
	virtual ~RankLabItem();
	void setData(const std::string &spriteFrame, const std::string &highFrame, int index);
	int getIndex() const { return _index; }
	virtual CCSize getContentSize();
	void setSelect(bool select);
private:
	int _index;
	std::string _normalFrame;
	std::string _highFrame;
};

#endif //RANKLISTITEM_H