#include "AudioPlayer.h"
#include  "cocos2d.h"
#include "CfgReader.h"
#include "ClientUpdate.h"

using namespace cocos2d;
using namespace CocosDenshion;


AudioPlayer * AudioPlayer::getSigletonPtr()
{
	static AudioPlayer audioPlayer;
	return &audioPlayer;
}

AudioPlayer::AudioPlayer()
	: _lastMusic("")
	, _noStopAudio(0)
{
}

void AudioPlayer::playerMusic( const std::string& musicName, bool loop /*= true*/ )
{
	if (ClientUpdate::getInstance()->isGamePause())
		return;
	if(musicName.size() <= 2)
		return;
	if(_lastMusic == musicName)
		return;
	if(!_lastMusic.empty())
		stopMusic();

	_lastMusic = musicName;
	std::string musicDir = CFGReader::instance()->get_profile_string("Audio", "Background", "");
	//std::string filePath = musicDir + musicName + ".ogg";

#ifndef WIN32 
	std::string filePath = musicDir + musicName + ".mp3";
#else
	std::string filePath = musicDir + musicName + ".mp3";
#endif
	SimpleAudioEngine::sharedEngine()->playBackgroundMusic(filePath.c_str(), loop);
}

void AudioPlayer::stopMusic( bool releaseData /*= true*/ )
{
	_lastMusic = "";
	SimpleAudioEngine::sharedEngine()->stopBackgroundMusic(releaseData);
}

int AudioPlayer::playerEffect( const std::string & effectFileName, bool loop /*= false*/ )
{
	if (ClientUpdate::getInstance()->isGamePause())
		return -1;
	if (CCDirector::sharedDirector()->isPaused())
		return -1;
	if(effectFileName.size() <= 2)
		return -1;
	std::string musicDir = CFGReader::instance()->get_profile_string("Audio", "SoundEft", "");

#ifndef WIN32 
	std::string filePath = musicDir + effectFileName + ".mp3";
	std::string fullPath = CCFileUtils::sharedFileUtils()->fullPathForFilename(filePath.c_str());
	if(!CCFileUtils::sharedFileUtils()->isFileExist(fullPath))
	{
		filePath = musicDir + effectFileName + ".wav";
	}
#else
	std::string filePath = musicDir + effectFileName + ".mp3";
	std::string fullPath = CCFileUtils::sharedFileUtils()->fullPathForFilename(filePath.c_str());
	if(!CCFileUtils::sharedFileUtils()->isFileExist(fullPath))
	{
		filePath = musicDir + effectFileName + ".wav";
	}
#endif
	
	return SimpleAudioEngine::sharedEngine()->playEffect(filePath.c_str(),loop);
}

void AudioPlayer::stopEffect(unsigned int effectId /*= 0*/)
{
	if(effectId == 0)
		SimpleAudioEngine::sharedEngine()->stopAllEffects();
	else
		SimpleAudioEngine::sharedEngine()->stopEffect(effectId);
}

int AudioPlayer::playerSoundSceneEffect( const std::string & effectFileName, bool loop /*= false*/ )
{
	if (ClientUpdate::getInstance()->isGamePause())
		return -1;
	if (CCDirector::sharedDirector()->isPaused())
		return -1;
	if(effectFileName.size() <= 2)
		return -1;
	std::string musicDir = CFGReader::instance()->get_profile_string("Audio", "soundScene", "");

#ifndef WIN32 
	std::string filePath = musicDir + effectFileName + ".mp3";

#else
	std::string filePath = musicDir + effectFileName + ".mp3";
#endif
	int senceAudioId =SimpleAudioEngine::sharedEngine()->playEffect(filePath.c_str(), loop);
	_senceAudio.push_back(senceAudioId);
	return senceAudioId;
}

void AudioPlayer::stopAllSoundEffect()
{
   stopSoundSceneEffect();
   stopEffect();
   stopSoundUIEffect();
   stopSoundNpcEffect();
   stopSoundMonsterEffect();
}

void AudioPlayer::stopSoundSceneEffect(unsigned int effectId /*= 0*/)
{
	if(effectId == 0)
	{
		for(std::vector<int>::const_iterator iter = _senceAudio.begin(); iter != _senceAudio.end(); ++ iter)
		{
			if (_noStopAudio == *iter)
			{
				continue;
			}

			SimpleAudioEngine::sharedEngine()->stopEffect(*iter);
		}
		_senceAudio.clear();
	}
	else
		SimpleAudioEngine::sharedEngine()->stopEffect(effectId);
}


int AudioPlayer::playerMonsterSceneEffect( const std::string & effectFileName, bool loop /*= false*/ )
{
	if (ClientUpdate::getInstance()->isGamePause())
		return -1;
	if (CCDirector::sharedDirector()->isPaused())
		return -1;
	if(effectFileName.size() <= 2)
		return -1;
	std::string musicDir = CFGReader::instance()->get_profile_string("Audio", "SoundMonster", "");

#ifndef WIN32 
	std::string filePath = musicDir + effectFileName + ".mp3";

#else
	std::string filePath = musicDir + effectFileName + ".mp3";
#endif
	int AudioId =SimpleAudioEngine::sharedEngine()->playEffect(filePath.c_str(), loop);
	_monssterAudio.push_back(AudioId);
	return AudioId;
}

void AudioPlayer::stopSoundMonsterEffect(unsigned int effectId /*= 0*/)
{
	if(effectId == 0)
	{
		for(std::vector<int>::const_iterator iter = _monssterAudio.begin(); iter != _monssterAudio.end(); ++ iter)
		{
			if (_noStopAudio == *iter)
			{
				continue;
			}

			SimpleAudioEngine::sharedEngine()->stopEffect(*iter);
		}
		_monssterAudio.clear();
	}
	else
		SimpleAudioEngine::sharedEngine()->stopEffect(effectId);
}

int AudioPlayer::playerSoundUIEffect( const std::string & effectFileName, bool loop /*= false*/ )
{  
	if (ClientUpdate::getInstance()->isGamePause())
		return -1;
	if (CCDirector::sharedDirector()->isPaused())
		return -1;
	if(effectFileName.size() <= 2)
		return -1;
	std::string musicDir = CFGReader::instance()->get_profile_string("Audio", "SoundUI", "");

	#ifndef WIN32 
	std::string filePath = musicDir + effectFileName + ".mp3";
	#else
	std::string filePath = musicDir + effectFileName + ".mp3";
	#endif
	int uiAudioId=SimpleAudioEngine::sharedEngine()->playEffect(filePath.c_str(),loop);
	_uiAudio.push_back(uiAudioId);
	return uiAudioId;
}

void AudioPlayer::stopSoundUIEffect(unsigned int effectId /*= 0*/)
{
	if(effectId == 0)
	{
		for(std::vector<int>::const_iterator iter = _uiAudio.begin(); iter != _uiAudio.end(); ++ iter)
		{
			SimpleAudioEngine::sharedEngine()->stopEffect(*iter);
		}
		_uiAudio.clear();
	}
	else
		SimpleAudioEngine::sharedEngine()->stopEffect(effectId);
}

void AudioPlayer::setBackgroundVolume( float volume )
{
	SimpleAudioEngine::sharedEngine()->setBackgroundMusicVolume(volume);
}

void AudioPlayer::setEffectVolume( float volume )
{
	SimpleAudioEngine::sharedEngine()->setEffectsVolume(volume);
}

int AudioPlayer::playerSoundNpcEffect( const std::string & effectFileName, bool loop /*= false*/ )
{
	if (ClientUpdate::getInstance()->isGamePause())
		return -1;
	if (CCDirector::sharedDirector()->isPaused())
		return -1;
	if(effectFileName.size() <= 2)
		return -1;
	std::string musicDir = CFGReader::instance()->get_profile_string("Audio", "Soundnpc", "");

#ifndef WIN32 
	std::string filePath = musicDir + effectFileName + ".mp3";
#else
	std::string filePath = musicDir + effectFileName + ".mp3";
#endif
	int npcAudioId=SimpleAudioEngine::sharedEngine()->playEffect(filePath.c_str(),loop);
	_npcAudio.push_back(npcAudioId);
	return npcAudioId;
}

void AudioPlayer::stopSoundNpcEffect( unsigned int effectId /*= 0*/ )
{
	if(effectId == 0)
	{
		for(std::vector<int>::const_iterator iter = _npcAudio.begin(); iter != _npcAudio.end(); ++ iter)
		{
			SimpleAudioEngine::sharedEngine()->stopEffect(*iter);
		}
		_npcAudio.clear();
	}
	else
		SimpleAudioEngine::sharedEngine()->stopEffect(effectId);
}

void AudioPlayer::setNoStopAudio( unsigned int effectId )
{
	if (_noStopAudio == 0)
	{
		_noStopAudio = effectId;
	}
}

int AudioPlayer::playerLevelUpSoundEffect( const std::string & levelUpFileName,bool loop/*=false*/ )
{
	if (ClientUpdate::getInstance()->isGamePause())
		return -1;
	if (CCDirector::sharedDirector()->isPaused())
		return -1;
	if(levelUpFileName.size() <= 2)
		return -1;
	std::string musicDir = CFGReader::instance()->get_profile_string("Audio", "soundScene", "");

#ifndef WIN32 
	std::string filePath = musicDir + levelUpFileName + ".mp3";

#else
	std::string filePath = musicDir + levelUpFileName + ".mp3";
#endif
	int senceAudioId =SimpleAudioEngine::sharedEngine()->playEffect(filePath.c_str(), loop);
	return senceAudioId;
}
