#pragma once
#include "cocos-ext.h"
#include "item.h"

using namespace std;
using namespace cocos2d;
using namespace cocos2d::extension;

struct EquipTipData
{
	const char * str1;
	const char * str2;

	EquipTipData()
		:str1("")
		,str2("")
	{

	}
};

class TradingEquipData
{
public:
	TradingEquipData();
	~TradingEquipData();

	void parseEqupBaeAttr();
	void initEquipBaseAttrName();
	void clearEquipBaseAttr();
	void initEqupBaseAttr(f_item *item);
	EquipTipData *createEquipBaseAttrItem(const char *attrName, int v1, int v2= -1, const char *split = "-");
	void addEquipBaseAttr(const char *attrName, int v1, int v2 = -1, const char *split = "-");

	void parseEqiupIdentifyAttr();
	void clearEquipindentifyAttr();
	void initEquipIndentifyAttName();
	void initEqiupIdentifyAttr(f_item *item);
	void addEquipIndentifyAttr(const char *attrName, int v1, int v2 = -1, const char *split = "-");
	EquipTipData * createEquipIndentifyAttrItem( const char *attrName, int v1, int v2 = -1, const char *split = "-");

public:
	typedef std::list<EquipTipData*> AttrItemList;
public:
	AttrItemList m_EquipbaseAttr;
	std::map<ERoleAttribute, std::string> m_mBaseAttrNameStr;
	std::vector<ERoleAttribute> m_vBaseEquipAttrVector;						//基本属性类型
	std::map<ERoleAttribute, int> m_mBaseEquipAttrMap;						//存放身上装备基本属性
public:
	AttrItemList m_IdentifyEquipAttr;
	std::map<ERoleAttribute, std::string> m_IdentifyEquipAttrStr;
	std::map<ERoleAttribute, int> m_IdentifyEquipMap;						//存放身上装备附加属性
	std::vector<ERoleAttribute> m_IdentifyEquipVector;						//附加属性类型

};