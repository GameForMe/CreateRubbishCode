#include "UiManager.h"
#include "UiTools.h"
#include "UiResourceMgr.h"
#include "SystemUi.h"
#include "UiInterface.h"
#include "StrengthenUi.h"
#include "JoyStick.h"
#include "ClientUpdate.h"
#include "Login.h"
#include "CreateRole.h"
#include "SelectRole.h"
#include "World.h"
#include "SystemUi.h"
#include "ChatUi.h"
#include "ShortCutUi.h"
#include "PackageUi.h"
#include "StorageUi.h"
#include "DayActivityUi.h"
#include "InstanceUi.h"
#include "GuildListUi.h"
#include "GuildFrameUi.h"
#include "RoleEquipUi.h"
#include "RoleAttrUi.h"
#include "RoleInfoUi.h"
#include "NewRoleTitleUi.h"
#include "IndifityUi.h"
#include "InlayUi.h"
#include "StoreUi.h"
#include "HookSetUi.h"
#include "SkillUi.h"
#include "TianmingUi.h"
#include "HuoYueUi.h"
#include "RankUi.h"
#include "EquipLevelUpUi.h"
#include "TradeUi.h"
#include "ShopUi.h"
#include "StallUi.h"
#include "SonghuaUi.h"
#include "SignInUi.h"
#include "RewardUi.h"
#include "FriendUi.h"
#include "TaskTraceUi.h"
#include "WorldMapUi.h"
#include "NewPlayerGuide.h"
#include "SelectRoleHeadUi.h"
#include "RechargeUi.h"
#include "MountUi.h"
#include "NewGuildBibleUi.h"
#include "StoreRechargeUi.h"
#include "OneKeyCompleteUi.h"
#include "OffLineExpUi.h"
#include "ServerActivityUi.h"
#include "ShouChongUi.h"
#include "MartialObtainUi.h"
#include "MartialEquipUi.h"
#include "MartialUpgradUi.h"
#include "ConsumptionUi.h"
#include "CoreTreeUi.h"
#include "SynthesisServerUi.h"
#include "LoginGiftUi.h"
#include "BattlefieldUi.h"
#include "TreasureLoftUi.h"
#include "MysteryBoxUi.h"
#include "RoleRingUi.h"
#include "RingShopUi.h"
#include "EquipFusionUi.h"
#include "FubenUI.h"
#include "FubenInfoUI.h"
#include "FubenSaoDangUI.h"
#include "FubenRankUI.h"
#include "FubenDuoRenUI.h"
#include "EquipUpStarUI.h"
#include "WuXueUi.h"
#include "FragmentCompoundUi.h"
#include "NPCChatUi.h"
#include "cangjinggeui.h"
#include "ArenaMainUi.h"
#include "ArenaPKUi.h"
#include "ArenaRankUi.h"
#include "ArenaDateUi.h"
#include "NewStallUI.h"
#include "MailRewardUi.h"
#include "BossPKUi.h"
#include "BossPKUi_new.h"
#include "VIPUi.h"
#include "EquipLevelUpNoticeUi.h"
#include "ArenaAccountsUi.h"
#include "LevelRewardUI.h"
#include "ChongZhiActivityFarmeUI.h"
#include "ItemTip.h"
#include "OnLineReward.h"
#include "PlayerStallUi.h"
#include "FightPromoteUi.h"
#include "PvpDeathUi.h"
#include "ReceiveRewardUi.h"
#include "DaRongLu.h"
#include "EquipShowUi.h"
#include "Jiehun.h"
#include "TeamStateUi.h"
#include "BattleModeUiLayer.h"
#include "SelectFunctionUi.h"
#include "NpcduihuanUi.h"
#include "NewSignUi.h"
#include "FightRecordUiLayer.h"
#include "ForgingDecomUI.h"
#include "RewardQuestUi.h"
#include "TeamUi.h"
#include "PopLayer.h"
#include "LineSelectUi.h"
#include "HuoDongFuBenUi.h"
#include "MirValuableBookUi.h"
#include "TextEditBox.h"
#include "KaifuhuodongUi.h"
#include "QuickSaleUI.h"
#include "PenaltyUi.h"
#include "TradingUI.h"
#include "TradingEquipItemtipUI.h"
#include "TimeCardNodeUi.h"
#include "FuncGuideUi.h"
#include "InputMessageBox.h"
#include "MysteryShop.h"
#include "XiaomiUi.h"
#include "GuiJiUi.h"
#include "NPCTalkUi.h"
#include "GuildStoreTipUi.h"
#include "ToolTip.h"
#include "StringMgr.h"
#include "FindBackUi.h"
#include "BusinessUi.h"
#include "LevelEquipUi.h"
#include "CrossSceneFuBenUI.h"
#include "LongWeiBoxUi.h"
#include "LongWeiDesUi.h"
#include "FMBApplyUi.h"
#include "FMBTeamUi.h"
#include "FMBAddUi.h"
#include "FMBPlacardUi.h"
#include "FMBRankUi.h"
#include "FMBBattleUi.h"
#include "FMBBetUi.h"
#include "UseOilUi.h"
#include "WingFlyUpUi.h"
#include "WingEvolveUi.h"
#include "SelectTargetUi.h"
#include "QuickTeamUi.h"
#include "DeathUi.h"
#include "PKResultUi.h"
#include "CommonNoticeUi.h"
#include "FlashSellShopMgr.h"
#include "BFPointsRankUi.h"
#include "BFBattleResultUi.h"
#include "f_zhuzai_invite_layer.h"
#include "f_invite_mgr_layer.h"
#include "MessageBoxUi.h"
#include "AnswerUI.h"
#include "GuildMapCommonUI.h"
#include "GuildPublishUi.h"
#include "GuildMapStoreUI.h"
#include "GuildNaturalGiftUi.h"
#include "f_fasion_display_option_layer.h"
#include "SecondVerifyUI.h"
#include "SDCheckDefenderUI.h"
#include "SBKShenDianUI.h"
#include "SBKShouTongShowUI.h"
#include "SBKSDSuccessUI.h"
#include "SBKSDFailUI.h"
#include "GuildBossPackageUI.h"
#include "GuildBossCallUI.h"
#include "GuildBossTimeUI.h"
//#include "ChangeStrongthUI.h"  //被传奇宝典替代，不在使用  modify by lpf 2015-09-10

UiMgr::UiMgr():_inited(false)
{
	memset(_area, UA_Null, sizeof(eWroldChildTag) * 3);
}

UiMgr * UiMgr::getInstance()
{
	static UiMgr instance;
	return &instance;
}

void UiMgr::init()
{
	//添加新UI要加到这里
	addUi<SystemUi>(WCT_SystemUi, UiLink(UA_C));
	addUi<JoyStickUi>(WCT_JoyStick, UiLink(UA_C));
	addUi<ChatUi>(WCT_ChatUi, UiLink(UA_C));
	addUi<ShortCutUi>(WCT_ShorCutUi, UiLink(UA_C));
	addUi<Package>(WCT_PACKAGEUI, UiLink(UA_A));
	addUi<Storage>(WCT_StorageUi, UiLink(UA_B, WCT_PACKAGEUI, UA_A));
	addUi<DayActivityUi>(WCT_DayActivity);
	addUi<InstanceUi>(WCT_InstanceUi);
	addUi<GuildListUi>(WCT_GuildListUi);
	addUi<GuildFrameUi>(WCT_GuildFrameUi);
	addUi<RoleEquipUi>(WCT_ROLEEQUIPUI, UiLink(UA_A, WCT_PACKAGEUI, UA_B, false));
	addUi<RoleRingUi>(WCT_ROLERINGUI,UiLink(UA_A,WCT_PACKAGEUI,UA_B,false));
	addUi<RoleAttrUi>(WCT_ROLEATTRUI, UiLink(UA_A, WCT_PACKAGEUI, UA_B, false));
	addUi<RoleInfoUi>(WCT_RoleInfoUi, UiLink(UA_A, WCT_PACKAGEUI, UA_B, false));
	addUi<NewRoleTitleUi>(WCT_RoleTitleUi, UiLink(UA_A, WCT_PACKAGEUI, UA_B, false));
	addUi<StrengthenUi>(WCT_STRENGTHENUI, UiLink(UA_B));
	addUi<IndifityUi>(WCT_IndifityUi, UiLink(UA_B, WCT_PACKAGEUI, UA_A));
	addUi<InlayUi>(WCT_InlayUi , UiLink(UA_B) );//镶嵌页面UI
	addUi<StoreUi>(WCT_STOREUI);//商店UI
	addUi<HookSetUi>(WCT_HookSetUi, UiLink(UA_A));
	addUi<SkillUi>(WCT_SKILLUI, UiLink(UA_A));
	addUi<TianmingUi>(WCT_TIANMING);
	addUi<HuoYueUi>(WCT_HuoyueUi);
	addUi<RankUi>(WCT_RankUi);
	addUi<EquipLevelUpUi>(WCT_EquipLevelUpUi, UiLink(UA_B));
	addUi<TradeUi>(WCT_TradeUi, UiLink(UA_B, WCT_PACKAGEUI, UA_A));
	addUi<ShopUi>(WCT_SHOPUI, UiLink(UA_B, WCT_PACKAGEUI, UA_A));
	addUi<RingShopUi>(WCT_RINGSHOPUI, UiLink(UA_B,WCT_PACKAGEUI, UA_A));
	addUi<PlayerStall_Ui>(WCT_StallUi, UiLink(UA_B, WCT_PACKAGEUI, UA_A));
	addUi<SonghuaUi>(WCT_SonghuaUi);
	//addUi<SignInUi>(WCT_SignInUi);
	addUi<RewardUi>(WCT_RewardUi);
	addUi<FriendUi>(WCT_FRIENDUI, UiLink(UA_A));
	addUi<WorldMapUi>(WCT_WorldMapUi);
	addUi<RechargeUi>(WCT_RechargeUi, UiLink(UA_AB));
	addUi<MountUi>(WCT_MountUi, UiLink(UA_AB));
	addUi<NewGuildBibleUi>(WCT_NewGuildBibleUi,UiLink(UA_AB));
	//addUi<StoreRechargeUi>(WCT_StoreRechargeUi, UiLink(UA_AB)); //充值页面移至充值福利，故此处不再添加
	addUi<OneKeyCompleteUi>(WCT_OneKeyCompleUi,UiLink(UA_C));
	addUi<OffLineExpUi>(WCT_OffLineExpUi,UiLink(UA_AB));
	addUi<ServerActivityUi>(WCT_ServerActivityUi);
	addUi<ShouChongUi>(WCT_ShouChongUi,UiLink(UA_AB));
	addUi<MartialObtainUi>(WCT_MartialObtainUi,UiLink(UA_A, WCT_PACKAGEUI, UA_B,true));
	addUi<MartialEquipUi>(WCT_MartialEquipUi, UiLink(UA_A, WCT_PACKAGEUI, UA_B,true));
	addUi<MartialUpgradUi>(WCT_MartialUpgradUi, UiLink(UA_A, WCT_PACKAGEUI, UA_B,true));
	addUi<ConsumptionUi>(WCT_ConsumptionUi,UiLink(UA_AB));
	addUi<CoreTreeUi>(WCT_CoreTreeUi);
	//addUi<SynthesisServerUi>(WCT_SynthesisServerUi);
	addUi<LoginGiftUi>(WCT_LoginGiftUi,UiLink(UA_AB));
	addUi<BattlefieldUi>(WCT_BattlefieldUi);
	addUi<TreasureLoftUi>(WCT_TreasureLoftUi,UiLink(UA_AB));
	addUi<MysteryBoxUi>(WCT_MysteryBoxUi);
	addUi<MysteryShopUi>(WCT_MysteryShopUi);
	addUi<GuiJiUi>(WCT_GuiJiUi);
	addUi<FubenUi>(WCT_FubenUI);
	addUi<FubenInfoUi>(WCT_FubenInfoUI);
	addUi<FubenSaoDangUi>(WCT_FubenSaoDangUI);
	addUi<EquipFusionUi>(WCT_EquipFusionUi, UiLink(UA_B));
	addUi<FubenRankUi>(WCT_FubenRankUI);
	addUi<FubenDuoRenUi>(WCT_FubenDuoRenUI);
	addUi<EquipUpStarUi>(WCT_EQUIPUPSTARUI, UiLink(UA_B));
	addUi<WuXueUi>(WCT_WUXUEUI);
	addUi<FragmentCompoundNewUi>(WCT_FRAGMENTCOMPOUNDUI);
	addUi<NPCChatUi>(WCT_NPCCHATUI);
	addUi<NewSignUi>(WCT_NewSignUi);
	addUi<CangJingGeUi>(WCT_CangJingGeUi);
 	addUi<ArenaMainUi>(WCT_ARENAMAINUI);
 	addUi<ArenaPKUi>(WCT_ARENAPKUI);
 	addUi<ArenaRankUi>(WCT_ARENARANKUI);
 	addUi<ArenaDateUi>(WCT_ARENADATEUI);
	addUi<NewStallUi>(WCT_NEW_STALLUI, UiLink(UA_B));
	addUi<NewStallChangeUi>(WCT_STALL_EXCHANGE_UI, UiLink(UA_A));
	addUi<MailRewardUi>(WCT_MAILREWARDUI);
	addUi<BossPKUi>(WCT_BOSSPKUI);
	addUi<BossPKUi_new>(WCT_BOSSPKUI_NEW);
	addUi<VIPUi>(WCT_VIPUI);
	addUi<EquipLevelUpNoticeUi>(WCT_EQUIPLEVELUPNOTICEUI, UiLink(UA_TOP));
	addUi<ArenaAccountsUi>(WCT_ARENAACCOUNTSUI);
	//addUi<ChangeStrongthUI>(WCT_CHANGE_STRONGTH_UI); //被传奇宝典替代，不在使用  modify by lpf 2015-09-10
	addUi<LevelRewardUi>(WCT_LevelRewardUi);
	addUi<ChongZhiActivityFarmeUI>(WCT_ChongZhiActivityFarmeUI);
	addUi<OpenPackageUi>(WCT_EXPANDPACKAGE);
	addUi<QuickUi>(WCT_QuickUiLayer);
	addUi<OnLineUi>(WCT_ZAIXIANLINGJIANG);
	addUi<Stallbuyui>(WCT_Stallbuyui,UiLink(UA_C));
	addUi<StallUnSetUi>(WCT_StallUnSetUi,UiLink(UA_C));
	addUi<FightPromoteUi>(WCT_FightPromoteUi, UiLink(UA_C));
	addUi<PvpDeathUi>(WCT_PvpDeathUi, UiLink(UA_C));
	addUi<FubenRewardUi>(WCT_FubenRewardUi,UiLink(UA_C));
	addUi<ReceiveRewardUi>(WCT_ReceiveRewardUi,UiLink(UA_TOP));
	addUi<DaRongLuUi>(WCT_DaRongLu,UiLink(UA_C));	//大熔炉界面
	addUi<EquipShowUi>(WCT_EquipShowUi,UiLink(UA_C));	
	addUi<JieHunUi>(WCT_JieHun,UiLink(UA_C));	//结婚
	//addUi<FloatBarUi>(WCT_FLOATBARUI);
	//addUi<LimitGiftUi>(WCT_LimitGift);
	addUi<TeamStateUi>(WCT_TeamStateUi, UiLink(UA_C));		//组队状态
	addUi<BattleModeUi>(WCT_BattleMode, UiLink(UA_C));		//组队状态
	addUi<SelectFunctionUi>(WCT_SelectFunction,UiLink(UA_C));
	addUi<RechargeNewUi>(WCT_RECHARGENEWUI, UiLink(UA_C));  //新元宝不足提示充值界面
	addUi<WanMeiGiftUi>(WCT_WANMEIGIFTNEWUI, UiLink(UA_C)); // 30级完美礼包界面
	addUi<NPCduihuanUi>(WCT_NPCduihuaUi,UiLink(UA_B, WCT_PACKAGEUI, UA_A));//npc兑换界面
	addUi<FightRecordUi>(WCT_FightRecord, UiLink(UA_C)); // 30级完美礼包界面
	addUi<ForgingDecomUI>(WCT_ForgingDecomUI);//锻造和分解
	addUi<RewardQuestUi>(WCT_RewardQuestUi,UiLink(UA_AB));
	addUi<TeamUi>(WCT_TeamUi, UiLink(UA_AB)); // 组队ui
	addUi<LineSelectUi>(WCT_LineSelectUi, UiLink(UA_AB)); // 组队ui
	addUi<HuoDongFuBenUi>(WCT_HuoDongFuBenUi, UiLink(UA_AB)); //
	addUi<MirValuableBookUi>(WCT_MirValuableBookUi);  //传奇宝典ui
	addUi<KaifuhuodongUi>(WCT_KaifuActivity);	//开服活动
	addUi<QuickSaleUI>(WCT_QuickSale,UiLink(UA_TOP)); //快捷出售(点击全部出售之后弹出的UI）
	addUi<StallTipsUI>(WCT_StallTipsUi, UiLink(UA_C));//摆摊Tips单独抽出，解决画面优先级
	addUi<PenaltyUi>(WCT_PenaltyUi,UiLink(UA_AB));
	addUi<TradingUI>(WCT_TradingUI);//交易行
	addUi<TradingEquipItemTipUI>(WCT_TradingTipUI,UiLink(UA_Null));//交易行tip
	addUi<TimeCardNodeUi>(WCT_TimeCardNodeUi,UiLink(UA_TOP));//点卡说明ui
	//addUi<FuncGuideUi>(WCT_FuncGuideUi, UiLink(UA_AB));//功能引导Ui//屏蔽
	addUi<XiaomiUi>(WCT_XiaomiUi, UiLink(UA_AB));//小蜜界面
	addUi<StatueWorshipUi>(WCT_STATUEWORSHIP, UiLink(UA_AB));//膜拜界面
	addUi<GuildStoreTipUi>(WCT_GuildStoreTipUi,UiLink(UA_TOP));//行会预售界面
	addUi<FindBackUI>(WCT_FindBackUi, UiLink(UA_AB));
	addUi<LongWeiBoxUi>(WCT_LongWeiBoxUi,UiLink(UA_TOP));//龙卫宝藏
	addUi<XiaomiUi>(WCT_XiaomiUi, UiLink(UA_AB));//小蜜界面
	addUi<BusinessUi>(WCT_BusinessUi, UiLink(UA_AB));//运营中心
	addUi<LevelEquipUi>(WCT_LevelEquipUi,UiLink(UA_AB));//30级装备显示界面
	addUi<CrossSceneUIFuBen>(WCT_CROSSSCENEFUBEN,UiLink(UA_TOP));
	addUi<LongWeiDesUi>(WCT_LongWeiDesUi, UiLink(UA_AB));//龙卫介绍
	addUi<FMBApplyUi>(WCT_FMB_APPLY_UI);
	addUi<FMBTeamUi>(WCT_FMB_TEAM_UI);
	addUi<FMBAddUi>(WCT_FMB_ADD_UI);
	//addUi<FMBPlacardUi>(WCT_FMB_PLACARD_UI);
	addUi<FMBRankUi>(WCT_FMB_RANK_UI);
	addUi<FMBBattleUi>(WCT_FMB_BATTLE_UI);
	addUi<FMBBetUi>(WCT_FMB_BET_UI);
	addUi<UseOilUi>(WCT_USE_OIL_UI);
	addUi<WingFlyUpUi>(WCT_WING_FLY_UP_UI, UiLink(UA_B));
	addUi<WingEvolveUi>(WCT_WING_EVOLVE_UI, UiLink(UA_B));
	addUi<CommonNoticeUi>(COMMON_NOTICE_UI, UiLink(UA_TOP));
	addUi<SelectTargetUi>(SELECT_TARGET_UI, UiLink(UA_TOP));
	addUi<QuickTeamUi>(QUICK_TEAM_UI, UiLink(UA_AB));
	addUi<DeathUi>(WCT_DeathUi);
	addUi<PKResultUi>(WCT_PKResultUi);
	addUi<FlashWingShopUi>(WCT_FlashWingShopUi);
	addUi<BFPointsRankUi>(WCT_BF_PointsRank_UI);
	addUi<BFBattleResultUi>(WCT_BF_BattleResult_UI);
	//主宰者的一些界面
	addUi<f_zhuzai_invite_ui>(WCT_ZHUZAI_INVITE_LIST_UI);
	addUi<f_invite_mgr_ui>(WCT_INVITE_MGR_UI);
	addUi<AnswerUI>(WCT_ANSWER_UI);
	addUi<GuildMapCommonUI>(WCT_GuildCommon_UI);
	addUi<GuildMapStoreUI>(WCT_GuildMapStore_UI);
	addUi<GuildPublishUI>(WCT_GuildPublish_UI);
	addUi<GuildNaturalGiftUi>(WCT_Guild_NaturalGift_Ui);
	addUi<f_fasion_display_ui>(WCT_Fasion_display_option,UiLink(UA_TOP));
	//二级密码验证界面
	addUi<SecondVerifyUi>(WCT_SecondVerifyUi, UiLink(UA_A));

	addUi<SDCheckDefenderUI>(WCT_ShenDian_Tips_UI,UiLink(UA_TOP));
	addUi<SBKShenDianUI>(WCT_ShenDian_Enter_UI);
	addUi<SBKShouTongShowUI>(WCT_ShenDian_First_UI);
	addUi<SBKSDSuccessUI>(WCT_ShenDian_Success_UI);
	addUi<SBKSDFailUI>(WCT_ShenDian_Fail_UI);

	addUi<GuildBossPackageUI>(WCT_GuildBoss_Package_UI,UiLink(UA_B,WCT_GuildBoss_Call_UI,UA_A));
	addUi<GuildBossCallUI>(WCT_GuildBoss_Call_UI,UiLink(UA_A));
	addUi<GuildBossTimeUI>(WCT_GuildBoss_Time_UI,UiLink(UA_B,WCT_GuildBoss_Call_UI,UA_A));

	_inited = true;
}

void UiMgr::destroy()
{
	for(UiInstanceMap::iterator iter = _uiMap.begin(); iter != _uiMap.end(); ++ iter)
	{
		delete iter->second;
		iter->second = NULL;
	}

	_uiMap.clear();

	_delayRemoveVec.clear();

	_mapMessageBoxUi.clear();

	m_mapCloseLinkUi.clear();

	_inited = false;
}

UiInterface * UiMgr::openUi( eWroldChildTag uiTag ,bool isbIsFadeIn)
{
// 	MiniMapUi* miniMapUi = World::getInstance()->getMiniMapUi();
// 	if(miniMapUi)
// 	{
// 		MiniMapUiLoaderLayer* loaderLayer = miniMapUi->getMinimapUILoaderLayer();
// 		if(loaderLayer)
// 		{
// 			loaderLayer->closeBaoDianEffect(uiTag);
// 		}
// 	}

	if(uiTag != WCT_StallUi && uiTag != WCT_TradeUi)
	{
		LocalPlayer* pPlayer = RoleManager::getInstance()->getLocalPlayer();
		if (!pPlayer)
			return NULL;

		if (pPlayer->isInRoleStateAny(RA_ShuangXiu))
		{
			ToolTip::getInstance()->push(GET_STR(2101));
			closeAllOpendUi(false);
			return NULL;
		}
		else if (pPlayer->isInRoleStateAny(RA_Exchange))
		{
			ToolTip::getInstance()->push(GET_STR(7218));
			//closeAllOpendUi(false);
			return NULL;
		}
		else if (pPlayer->isInRoleStateAny(RA_Stall) && uiTag != WCT_StallUnSetUi)
		{
			ToolTip::getInstance()->push(GET_STR(2102));
			closeAllOpendUi(false);
			return NULL;
		}
	}

	//关闭相关区域的窗口
	//if(_area[UA_AB] != WCT_Null)
	//	closeUi(_area[UA_AB]);
	eUiArea uiArea = UA_Null;

	if(_area[UA_B] != WCT_Null)
	{
		UiLinkMap::iterator iter = _linkMap.find(_area[UA_B]);
		if(iter != _linkMap.end())
		{
			if(iter->second.linkUi == uiTag)
			{
				uiArea = iter->second.linkUiPos;
			}
			else
			{
				//closeUi(_area[UA_B]);
			}
		}
	}

	if(_area[UA_A] != WCT_Null)
	{
		UiLinkMap::iterator iter = _linkMap.find(_area[UA_A]);
		if(iter != _linkMap.end())
		{
			if(iter->second.linkUi == uiTag)
			{
				uiArea = iter->second.linkUiPos;
			}
			else
			{
				//closeUi(_area[UA_A]);
			}
		}
	}


	UiLinkMap::iterator iter = _linkMap.find(uiTag);
	if(iter != _linkMap.end())
	{
		const UiLink &uiLink = iter->second;

		if(uiArea == UA_Null)
		{
			uiArea = uiLink.defaultPos;
		}
		if (_area[UA_B] == WCT_PACKAGEUI && (uiTag == WCT_StorageUi || uiTag == WCT_SHOPUI || uiTag == WCT_StallUi))
		{
			closeUi(_area[UA_A]);
			moveUi(WCT_PACKAGEUI, UA_A);
		}
		if (_area[UA_A] == WCT_PACKAGEUI && (uiTag == WCT_ROLEEQUIPUI || uiTag == WCT_ROLEEQUIPUI || uiTag == WCT_ROLERINGUI || uiTag == WCT_ROLEEQUIPUI))
		{
			closeUi(_area[UA_B]);
			moveUi(WCT_PACKAGEUI, UA_B);
		}
		//如果已经打开，则不再次打开;
		UiInterface *uiDefault = NULL;
		if(isOpen(uiTag))
		{
			UiInstanceMap::iterator iter = _uiMap.find(uiTag);
			CC_ASSERT(iter != _uiMap.end());
			uiDefault =  iter->second;
		}
		else
		{
			uiDefault = open(uiTag, uiArea,isbIsFadeIn);
		}

		//打开背包，技能的同时打开快捷栏
		if(_area[UA_A] == WCT_PACKAGEUI || _area[UA_A] == WCT_SKILLUI)
		{
			if(uiLink.defaultPos != UA_B)
			{
				//[bing] 为什么打开包裹要关闭右界面是因为想要背包物品拖拽快捷栏 有B界面存在时会遮挡快捷栏
				if(_area[UA_B] != WCT_Null && _area[UA_B] != WCT_StallUi && _area[UA_B] != WCT_TradeUi) //背包和交易不关 //add by XSea 2014.11.21
				{
					//closeUi(_area[UA_B]);
				}
				if (_area[UA_B] == WCT_PACKAGEUI)
				{
					closeUi(_area[UA_B]);
				}
				GET_UI(ShortCutUi, WCT_ShorCutUi)->showUiUpSystemUi(true);
			}
		}
		if(uiDefault != NULL && uiLink.linkUi != WCT_Null && uiLink.openLink)
		{
			//如果需要开启的连接没有开启，则开启
			if(uiLink.openLink && !isOpen(uiLink.linkUi))
				open(uiLink.linkUi, uiLink.linkUiPos);
			if (_area[UA_B] == WCT_PACKAGEUI && uiTag == WCT_StorageUi && uiLink.openLink)
			{
				open(uiLink.linkUi, uiLink.linkUiPos);
			}
		}

		return uiDefault;
	}

	return NULL;
}
UiInterface * UiMgr::openUiEx( eWroldChildTag uiTag )
{
	//zhjl:这里先去加载线程去加载CCBI数据，和里面对应的图片数据，加载完毕，再在主线程调用回调来打开UI界面

	AnimationCache::getInstance()->loadUI(uiTag, "skillui");

	return NULL;
}
UiInterface * UiMgr::openUiCallback( eWroldChildTag uiTag, unsigned char* ccbiData, unsigned long size )
{
	//关闭相关区域的窗口
	//if(_area[UA_AB] != WCT_Null)
	//	closeUi(_area[UA_AB]);

	eUiArea uiArea = UA_Null;

	if(_area[UA_B] != WCT_Null)
	{
		UiLinkMap::iterator iter = _linkMap.find(_area[UA_B]);
		if(iter != _linkMap.end())
		{
			if(iter->second.linkUi == uiTag)
			{
				uiArea = iter->second.linkUiPos;
			}
			else
			{
				//closeUi(_area[UA_B]);
			}
		}
	}

	if(_area[UA_A] != WCT_Null)
	{
		UiLinkMap::iterator iter = _linkMap.find(_area[UA_A]);
		if(iter != _linkMap.end())
		{
			if(iter->second.linkUi == uiTag)
			{
				uiArea = iter->second.linkUiPos;
			}
			else
			{
				//closeUi(_area[UA_A]);
			}
		}
	}


	UiLinkMap::iterator iter = _linkMap.find(uiTag);
	if(iter != _linkMap.end())
	{
		const UiLink &uiLink = iter->second;

		if(uiArea == UA_Null)
		{
			uiArea = uiLink.defaultPos;
		}

		//如果已经打开，则不再次打开;
		UiInterface *uiDefault = NULL;
		if(isOpen(uiTag))
		{
			UiInstanceMap::iterator iter = _uiMap.find(uiTag);
			CC_ASSERT(iter != _uiMap.end());
			uiDefault =  iter->second;
		}
		else
		{
			uiDefault = openCallback(uiTag, uiArea, ccbiData, size);
		}

		//打开背包，技能的同时打开快捷栏
		if(_area[UA_A] == WCT_PACKAGEUI || _area[UA_A] == WCT_SKILLUI)
		{
			if(uiLink.defaultPos != UA_B)
			{
				//[bing] 为什么打开包裹要关闭右界面是因为想要背包物品拖拽快捷栏 有B界面存在时会遮挡快捷栏
				if(_area[UA_B] != WCT_Null && _area[UA_B] != WCT_StallUi && _area[UA_B] != WCT_TradeUi) //背包和交易不关 //add by XSea 2014.11.21
				{
					closeUi(_area[UA_B]);
				}
				GET_UI(ShortCutUi, WCT_ShorCutUi)->showUiUpSystemUi(true);
			}
		}

		if(uiDefault != NULL && uiLink.linkUi != WCT_Null && uiLink.openLink)
		{
			//如果需要开启的连接没有开启，则开启
			if(uiLink.openLink && !isOpen(uiLink.linkUi))
				openUiEx(uiLink.linkUi);
				//open(uiLink.linkUi, uiLink.linkUiPos);
		}

		return uiDefault;
	}

	return NULL;
}

bool UiMgr::isOpen( eWroldChildTag uiTag )
{
	return isUiOpen(uiTag);
}

void UiMgr::closeUi( eWroldChildTag uiTag , bool isbIsFadeOut)
{
	if(!isOpen(uiTag))
		return;

	if(uiTag == WCT_PACKAGEUI || uiTag == WCT_SKILLUI)
		GET_UI(ShortCutUi, WCT_ShorCutUi)->showUiUpSystemUi(false);

	UiInterface* currUi = NULL;
	UiInstanceMap::iterator iter = _uiMap.find(uiTag);
	if(iter != _uiMap.end())
	{
		currUi = iter->second;
		CCScene *scene = getCurScene();
		CC_ASSERT(scene != NULL);
		CCNode* pNode = dynamic_cast<CCNode*>(scene->getChildByTag(uiTag));
		if(pNode)
		{
			closeLinkMessageBoxUi(uiTag);//移除与之关联的MessageBox
			if (WCT_PACKAGEUI == uiTag)
			{
				if (IS_UI_OPEN(WCT_StorageUi))
					CLOSE_UI(WCT_StorageUi);
			}
			//几个特殊处理
			if(WCT_NPCCHATUI == uiTag)
			{
				UiInterface *ui = iter->second;
				UiResourceMgr::getInstance()->releasePlistFile(ui->_loadSpriteSheet);
				ui->_loadSpriteSheet.clear();
				CCScene *scene = getCurScene();
				CC_ASSERT(scene != NULL);
				scene->removeChildByTag(uiTag);
				removeOpendUi(uiTag);
				NewPlayerGuider::getInstance()->onUiClose(uiTag);
				ui->bIsFadeOut = false;
			}
			else if (currUi && currUi->isPopupPreUiOnClose()) // 如果要关闭当前UI时，返回上一层UI，会有视觉感冲突，在此立即删除
			{
				UiMgr::getInstance()->RemoveUi(uiTag);
			}
			else
			{
				//[bing] 正在渐隐不关闭
				UiInterface *ui = iter->second;
				if(ui->bIsFadeOut)
					return;

				if (isbIsFadeOut)
				{
					//[bing] 加个渐隐效果
					//FadeOutFrameUI(pNode, 0.3f);
					ui->bIsFadeOut = true;
					ui->DelayCloseUIObj.e = uiTag;
					CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&CloseUIObject::CloseUI), &ui->DelayCloseUIObj, 0.1f, false);
					_delayRemoveVec.push_back(uiTag);
				}
				else
				{
					UiMgr::getInstance()->RemoveUi(uiTag);
					
				}
			}
		}
		//关闭 打开新的
		closeOpenCloseLinkUi(uiTag);
		/*
		UiInterface *ui = iter->second;
		UiResourceMgr::getInstance()->releasePlistFile(ui->_loadSpriteSheet);
		ui->_loadSpriteSheet.clear();
		CCScene *scene = getCurScene();
		CC_ASSERT(scene != NULL);
		scene->removeChildByTag(uiTag);
		removeOpendUi(uiTag);
		NewPlayerGuider::getInstance()->onUiClose(uiTag);
		*/

		for(int i = UA_A; i < UA_C; i ++)
		{
			if(uiTag == _area[i])
			{
				_area[i] = WCT_Null;
				if(i == UA_A || i == UA_AB)
				{//ui出现在A区， 关闭任务跟踪
					World::getInstance()->getTaskTraceUi()->showUi(true);
					GET_UI(ChatUi, WCT_ChatUi)->showVoice(true);
				}
				if ( ( uiTag == WCT_STRENGTHENUI || uiTag == WCT_EquipFusionUi || uiTag == WCT_EquipLevelUpUi || uiTag == WCT_InlayUi) && isOpen(WCT_PACKAGEUI) && _area[UA_A] != WCT_PACKAGEUI && i == UA_B)
				{
					UiDelayRemoveVec::iterator iter = _delayRemoveVec.begin();
					for (;iter != _delayRemoveVec.end(); iter++)
					{
						if (*iter == WCT_PACKAGEUI)
							break;
					}
					if (iter == _delayRemoveVec.end())
					{
						_area[i] = WCT_PACKAGEUI;
					}
				}
			}
		}

		// 关闭时弹出其他UI，需要走一遍完整关闭流程后，才能开启其他UI，否则会有UI显示的逻辑冲突，也不能满足策划提出视觉立即感需求
		if (currUi && currUi->isPopupPreUiOnClose())
		{
			currUi->popupUIOnEnd();
		}
	}
}

CCScene * UiMgr::getCurScene()
{
	if(ClientUpdate::getInstance()->_currentScene == ST_UPDATESCENE)
	{
		return CCDirector::sharedDirector()->getRunningScene();
	}
	else if(ClientUpdate::getInstance()->_currentScene == ST_LOGINSCENE)
	{
		return Login::getInstance()->getScene();
	}
	else if(ClientUpdate::getInstance()->_currentScene == ST_CREATEROLESCENE)
	{
		return CreateRole::getInstance()->getScene();
	}
	else if(ClientUpdate::getInstance()->_currentScene == ST_SELECTROLESCENE)
	{
		return SelectRole::getInstance()->getScene();
	}
	else if(ClientUpdate::getInstance()->_currentScene == ST_WORLDSCENE)
	{
		return World::getInstance()->getScene();
	}
	else
	{
		CC_ASSERT(0);
		return NULL;
	}
}

void UiMgr::addOpendUi( eWroldChildTag tag )
{
	for(std::vector<eWroldChildTag>::iterator iter = _curOpendUi.begin(); iter != _curOpendUi.end(); ++iter)
	{
		if(tag == *iter)
			return;
	}

	_curOpendUi.push_back(tag);
}

void UiMgr::removeOpendUi( eWroldChildTag tag )
{
	for(std::vector<eWroldChildTag>::iterator iter = _curOpendUi.begin(); iter != _curOpendUi.end(); ++iter)
	{
		if(tag == *iter)
		{
			_curOpendUi.erase(iter);
			return;
		}
	}
}

void UiMgr::closeAllOpendUi(bool value)
{
	TextEditBox::getInstace()->close();
	NumKeypad::getInstance()->close();
	InputMessageBox::getInstace()->close();
	std::vector<eWroldChildTag> opendUi = _curOpendUi;

	for(std::vector<eWroldChildTag>::iterator iter = opendUi.begin(); iter != opendUi.end(); ++ iter)
	{
		eWroldChildTag uiTag = *iter;
		closeUi(uiTag, false);
	}

	//CC_ASSERT(_curOpendUi.size() == 0);
	//opendUi.clear();

	if(value)
	{
		GET_UI(SystemUi, WCT_SystemUi)->resetShowState();
		ChatUi* pCharUi = GET_UI(ChatUi, WCT_ChatUi);
		if(pCharUi != NULL)
		{
			pCharUi->DetachPhoneText();
			pCharUi->resetShowState();
		}

	}

	SelectRoleHeadUi *selectRoleHeadUi = World::getInstance()->getSelectRoleHeadUi();
	if(selectRoleHeadUi != NULL)
		selectRoleHeadUi->setBtnVisible(false);

	_area[0] = WCT_Null;
	_area[1] = WCT_Null;
	_area[2] = WCT_Null;
}

UiInterface *UiMgr::open( eWroldChildTag tag, eUiArea area , bool isbIsFadeIn)
{
	if(area == UA_AB || area == UA_B)
	{
		GET_UI(ShortCutUi, WCT_ShorCutUi)->showUiUpSystemUi(false);
	}

	UiInstanceMap::iterator iter = _uiMap.find(tag);
	if(iter != _uiMap.end())
	{
		UiInterface *ui = iter->second;
		CCNode *node = NULL;
		if(!isOpen(tag))
		{
 			node = ui->openUi();
			CCScene *scene = getCurScene();
			CC_ASSERT(scene != NULL);
			scene->addChild(node, ui->getZorder(), tag);
			UiResourceMgr::getInstance()->retainPlistFile(ui->_loadSpriteSheet);

			if(ui->canClose())
				addOpendUi(tag);

			//关闭原来所在区域的ui
			
			closeOldByArea(area);
			
			
		}

		moveUi(tag, area);

		//[bing] 来一个打开浮现效果
		if(node)
		{
			if(WCT_NPCCHATUI != tag && false)
			{
				FadeInFrameUI(node, 0.30f);
			}
		}

		for(int i = UA_A; i < UA_C; i ++)
		{
			if(area == i)
				_area[i] = tag;
		}

		NewPlayerGuider::getInstance()->onUiOpen(tag);

		if(area == UA_A || area == UA_AB)
		{//ui出现在A区， 关闭任务跟踪
			World::getInstance()->getTaskTraceUi()->showUi(false);
			GET_UI(ChatUi, WCT_ChatUi)->showVoice(false);
		}

		return ui;
	}
	return NULL;
}

UiInterface *UiMgr::openCallback( eWroldChildTag tag, eUiArea area, unsigned char* ccbiData, unsigned long size)
{
	if(area == UA_AB || area == UA_B)
	{
		GET_UI(ShortCutUi, WCT_ShorCutUi)->showUiUpSystemUi(false);
	}

	UiInstanceMap::iterator iter = _uiMap.find(tag);
	if(iter != _uiMap.end())
	{
		UiInterface *ui = iter->second;
		CCNode *node = NULL;
		if(!isOpen(tag))
		{
			ui->setCCBIData(ccbiData,size);
			node = ui->openUi();
			CCScene *scene = getCurScene();
			CC_ASSERT(scene != NULL);
			scene->addChild(node, ui->getZorder(), tag);
			UiResourceMgr::getInstance()->retainPlistFile(ui->_loadSpriteSheet);

			if(ui->canClose())
				addOpendUi(tag);

			//关闭原来所在区域的ui
			closeOldByArea(area);
		}

		moveUi(tag, area);

		//[bing] 来一个打开浮现效果
		if(node)
		{
			if(WCT_NPCCHATUI != tag)
			{
				FadeInFrameUI(node, 0.30f);
			}
		}

		for(int i = UA_A; i < UA_C; i ++)
		{
			if(area == i)
				_area[i] = tag;
		}

		NewPlayerGuider::getInstance()->onUiOpen(tag);

		if(area == UA_A || area == UA_AB)
		{//ui出现在A区， 关闭任务跟踪
			World::getInstance()->getTaskTraceUi()->showUi(false);
		}

		return ui;
	}
	return NULL;
}

void UiMgr::moveUi( eWroldChildTag tag, eUiArea area )
{
	if (area == UA_A)
		World::getInstance()->getTaskTraceUi()->showUi(false);

	if(area == UA_A || area == UA_B)
	{
		UiLinkMap::iterator iter = _linkMap.find(tag);
		CC_ASSERT(iter != _linkMap.end());
		eUiArea curArea = iter->second.defaultPos;
		
		for(int i = 0; i < 2; i ++)
		{
			if(tag == _area[i])
			{
				curArea = (eUiArea)i;
				_area[i] = WCT_Null;
			}
		}
		_area[area] = tag;
		if(curArea == UA_A || curArea == UA_B)
		{
			if(curArea != area)
			{
				CCNode *uiNode = getUiNode(tag);
				CC_ASSERT(uiNode != NULL);
				uiNode->setPositionX(uiNode->getPositionX() + (area - curArea) * (POSX_A_B + getOffsetX()) );
			}
		}
	}
}

void UiMgr::closeOldByArea( eUiArea area)
{
	if(area == UA_AB)
	{
		for(int i = UA_A; i < UA_C; i ++)
		{
			
			closeUi(_area[i]);
		}
	}
	else if(area == UA_A || area == UA_B)
	{
		//特殊处理
		if (_area[UA_A] == WCT_ROLEEQUIPUI && _area[UA_B] == WCT_PACKAGEUI )
		{
			for(std::vector<eWroldChildTag>::iterator iter = _curOpendUi.begin(); iter != _curOpendUi.end(); ++iter)
			{
				if (*iter == WCT_EquipLevelUpUi || *iter == WCT_STRENGTHENUI || *iter == WCT_InlayUi  || *iter == WCT_EQUIPUPSTARUI || *iter == WCT_EquipFusionUi || *iter == WCT_WING_EVOLVE_UI || *iter == WCT_WING_FLY_UP_UI)
				{
					return;
				}
			}
		}
		closeUi(_area[area]);
		closeUi(_area[UA_AB]);
	}
}

void UiMgr::setNodeCenter(CCNode* pNode)
{
	static CCSize winSize = CCDirector::sharedDirector()->getWinSize();
	pNode->ignoreAnchorPointForPosition(false);
	pNode->setPositionX(winSize.width/2.0f);
	pNode->setPositionY(winSize.height/2.0f);
	pNode->setAnchorPoint(ccp(0.5f,0.5f));
}

float UiMgr::getOffsetX()
{
	CCSize winSize = CCDirector::sharedDirector()->getWinSize();
	return (winSize.width - UI_WIDTH) / 2.0f;
}

float UiMgr::getOffsetY()
{
	CCSize winSize = CCDirector::sharedDirector()->getWinSize();
	return (winSize.height - UI_HEIGHT) / 2.0f;
}

void UiMgr::RemoveUi( eWroldChildTag uiTag )
{
	UiInstanceMap::iterator iter = _uiMap.find(uiTag);
	if(iter != _uiMap.end())
	{
		UiInterface *ui = iter->second;
		UiResourceMgr::getInstance()->releasePlistFile(ui->_loadSpriteSheet);
		ui->_loadSpriteSheet.clear();
		
		CCScene *scene = getCurScene();
		CC_ASSERT(scene != NULL);
		scene->removeChildByTag(uiTag);
// 		CCNode* node = scene->getChildByTag(uiTag);
// 		PopLayer*  popLayer = dynamic_cast<PopLayer*>(node);
// 		//如果是popLayer,调用poplayer的close函数,里面有些东西要处理
// 		if (popLayer)
// 		{
// 			popLayer->close();
// 		}
// 		else
// 		{
// 			scene->removeChildByTag(uiTag);
// 		}
		removeOpendUi(uiTag);

		ui->bIsFadeOut = false;
		ui->closeUI();

		NewPlayerGuider::getInstance()->onUiClose(uiTag);
	}

	for (UiDelayRemoveVec::iterator iter = _delayRemoveVec.begin();iter != _delayRemoveVec.end(); iter++)
	{
		if (*iter == uiTag)
		{
			_delayRemoveVec.erase(iter);
			break;
		}
	}
}

UiInterface* UiMgr::openUiNotCloseUi( eWroldChildTag tag )
{
	UiInstanceMap::iterator iter = _uiMap.find(tag);
	if(iter != _uiMap.end())
	{
		UiInterface *ui = iter->second;
		CCNode *node = NULL;
		if(!isOpen(tag))
		{
			node = ui->openUi();
			CCScene *scene = getCurScene();
			CC_ASSERT(scene != NULL);
			scene->addChild(node, ui->getZorder(), tag);
			UiResourceMgr::getInstance()->retainPlistFile(ui->_loadSpriteSheet);

			if(ui->canClose())
				addOpendUi(tag);
		}

		moveUi(tag, UA_AB);

		//[bing] 来一个打开浮现效果
		if(node)
				FadeInFrameUI(node, 0.30f);

		_area[UA_AB] = tag;

		World::getInstance()->getTaskTraceUi()->showUi(false);
		return ui;
	}
	return NULL;
}

void UiMgr::open_recharge_layer()
{
	openUi(WCT_ChongZhiActivityFarmeUI);
}

void UiMgr::addMessageBoxUi(eWroldChildTag pTag, CCNode* pUi)
{
	UiMessageBoxMap::iterator iter = _mapMessageBoxUi.find(pTag);
	if (iter != _mapMessageBoxUi.end())
	{
		iter->second->removeFromParentAndCleanup(true);
		_mapMessageBoxUi.erase(iter);
	}
	_mapMessageBoxUi[pTag] = pUi;
}

void UiMgr::closeLinkMessageBoxUi(eWroldChildTag tag)
{
	UiMessageBoxMap::iterator iter = _mapMessageBoxUi.find(tag);
	if (iter != _mapMessageBoxUi.end())
	{
		iter->second->removeFromParentAndCleanup(true);
		_mapMessageBoxUi.erase(iter);
	}
}

void UiMgr::addUICloseLink(eWroldChildTag pSrc,eWroldChildTag eTar)
{
	if (isOpen(pSrc))
	{
		m_mapCloseLinkUi[eTar] = pSrc;
	}	
}

void UiMgr::closeOpenCloseLinkUi(eWroldChildTag eTar)
{
	UiTagTagMap::iterator iter = m_mapCloseLinkUi.find(eTar);
	if(iter != m_mapCloseLinkUi.end())
	{
		OPEN_UI(iter->second);
		m_mapCloseLinkUi.erase(iter);
	}	
}

void UiMgr::delUIClostLink(eWroldChildTag tag)
{
	UiTagTagMap::iterator iter = m_mapCloseLinkUi.find(tag);
	if (iter != m_mapCloseLinkUi.end())
	{
		m_mapCloseLinkUi.erase(iter);
	}
}