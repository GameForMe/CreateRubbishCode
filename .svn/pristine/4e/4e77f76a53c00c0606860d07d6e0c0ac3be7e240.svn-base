#ifndef TGADWORDTIME_H
#define TGADWORDTIME_H
#include <string>
const int X_DATATIME_LEN = 19;
//------------------------------------------------------------------------------------
// unsigned int表示的时间,年月日小时分秒,如果把它直接转为unsigned int，可以直接比较大小,但差值无意义
// 值较大者其时间也较后
//------------------------------------------------------------------------------------
struct tagDWORDTime
{
	unsigned int sec		: 6,	// 0 - 59
	min		: 6,	// 0 - 59
	hour    : 5,	// 0 - 23
	day		: 5,	// 1 - 31
	month	: 4,	// 1 - 12
	year	: 6;	// 两位数，比如:05, 表示2005.最大表示到2063年

	void Clear()
	{
		sec=min=hour=day=month=year=0;
	}
	bool IsTimeEmpty()
	{
		if(sec==0&&min==0&&hour==0&&day==0&&month==0&&year==0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	//--------------------------------------------------------------------------------
	// operator =
	//--------------------------------------------------------------------------------
	tagDWORDTime& operator = (const tagDWORDTime& time)
	{ 
		sec=time.sec;
		min=time.min; 
		hour=time.hour;
		day=time.day;
		month=time.month;
		year=time.year;
		if(year == 51){
			year = 0;
		}
		return *this;
	}

	bool isInitData()
	{
		if(2000 == this->year &&
			0 == this->month &&
			0 == this->day &&
			0 == this->hour && 
			0 == this->min &&
			0 == this->sec)
			return true;

		return false;
	}

	//--------------------------------------------------------------------------------
	// operator =
	//--------------------------------------------------------------------------------
	tagDWORDTime& operator = (unsigned int dw_time)
	{
		return (*this = *(tagDWORDTime*)&dw_time);
	}

	//--------------------------------------------------------------------------------
	// convertor
	//--------------------------------------------------------------------------------
	operator unsigned int()
	{
		return *(unsigned int*)this;
	}

	//--------------------------------------------------------------------------------
	// constructor
	//--------------------------------------------------------------------------------
	tagDWORDTime()
	{
	};

	//--------------------------------------------------------------------------------
	// copy constructor
	//--------------------------------------------------------------------------------
	tagDWORDTime(unsigned char bySec,unsigned char byMin,unsigned char byHour,unsigned char byDay,unsigned char byMonth,unsigned char byYear)
	{
		sec = bySec;
		min = byMin;
		hour = byHour;
		day = byDay;
		month = byMonth;
		year = byYear;
	}

	//--------------------------------------------------------------------------------
	// copy constructor
	//--------------------------------------------------------------------------------
	tagDWORDTime(const tagDWORDTime& time)
	{
		*this = time;
	}
	
	//--------------------------------------------------------------------------------
	// copy constructor
	//--------------------------------------------------------------------------------
	tagDWORDTime(unsigned int dw_time)
	{
		*this = dw_time;
	}
};
//-------------------------------------------------------------------------------------
// 得到当前系统时间
//-------------------------------------------------------------------------------------
tagDWORDTime GetCurrentDWORDTime();
//-------------------------------------------------------------------------------------
// 是否是闰年
//-------------------------------------------------------------------------------------
int IsLeapYear(unsigned int iYear);


//-------------------------------------------------------------------------------------
// 计算两个时间差
//-------------------------------------------------------------------------------------
unsigned int CalcTimeDiff(tagDWORDTime destTime, tagDWORDTime srcTime);
unsigned int CalcTimeDiff2(tagDWORDTime destTime, tagDWORDTime srcTime);
//-------------------------------------------------------------------------------------
// 让某个时间加上某个值
//-------------------------------------------------------------------------------------
tagDWORDTime IncreaseTime(tagDWORDTime srcTime, int nIncrementSecond);
//-----------------------------------------------------------------------------
// 时间上递减指定秒数
//-----------------------------------------------------------------------------
tagDWORDTime DecreaseTime(tagDWORDTime srcTime, int nDecrementSecond);
//-------------------------------------------------------------------------------------
// 判断某个时间是星期几
//-------------------------------------------------------------------------------------
unsigned int WhichWeekday(tagDWORDTime dw_time);
//-------------------------------------------------------------------------------------
// 转化成: 年-月-日 时:分:秒 如：2008-9-12 19:19:19
//-------------------------------------------------------------------------------------
int DwordTime2DataTime(char szTime[], int nSzArray, const tagDWORDTime &dw_time);
// 转化成: 年-月-日 时:分:秒 如：2008年9月12日 19:19:19
//-------------------------------------------------------------------------------------
int DwordTime2DataTimeChina(std::string& str, const tagDWORDTime &dw_time);
//-------------------------------------------------------------------------------------
// 转化成秒
//-------------------------------------------------------------------------------------
int DwordTime2UTCTime(tagDWORDTime dw_time);
//-------------------------------------------------------------------------------------
// 将 年-月-日 时:分:秒 格式的数据转换为tagDWORDTime
//-------------------------------------------------------------------------------------
int DataTime2DwordTime(tagDWORDTime &dw_time, const unsigned char szTime[], int nSzArray);

// 日期加一天
tagDWORDTime AddDay(tagDWORDTime st_time);

//当前时间是否在两个时间点之间
bool is_between_two_time(tagDWORDTime cur_time, int nBeginWeek, int by_start_h, int by_start_m, int nEndWeek, int by_end_h, int by_end_m);

#endif //TGADWORDTIME_H