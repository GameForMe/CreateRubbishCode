#ifndef SELECTROLEUI_H
#define SELECTROLEUI_H

//#include "CreateRoleUi.h"
#include "SelectRoleViewNode.h"
#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"
#include "GameActionNode.h"
#include "AnimationCache.h"

using namespace cocos2d;
using namespace cocos2d::extension;
#define FA_SHI_FIRE_EFFECT_TAG 202
enum eRoleSelectPos
{
	RSP_LEFT = 0,
	RSP_CENTER,
	RSP_RIGHT,
	RSP_NUM,
	RSP_XiaoMiBBS = 5,
	RSP_BackBtn = 10,
	RSP_NextBtn = 11,
	RSP_Fashi_Fire = 12,
	RSP_SETag = 1004,				//特效用tag
};

class TouchSprite;
class GameActionNode;

class SelectRoleUi : public CCLayer
{
public:
	CREATE_FUNC(SelectRoleUi);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	bool init();
	void addRoleView(RoleInfo roleInfo);
	void removeRoleView();
	int getSelectRoleId();
	int getSelectRoleLevel();
	std::string getSelectRoleName();
	void onRoleSelected(SelectRoleViewNode *roleView);
	virtual void onExit();
	void updateRolePhoto(int i);
SIGNALS:
	c_signal<void> signalCreateRoleBtn;
	c_signal<void> signalChangeServerBtn;
	c_signal<void> signalBeginGameBtn;
	c_signal<void> signalBackBtn;
	c_signal<void> signalNextBtn;

protected:
	SelectRoleUi();
	~SelectRoleUi();
public:
	CCSprite* roleBody;
	CCControlButton *_backBtn;
	CCControlButton *_nextBtn;
	//CCSprite *_frame;
protected:
	SelectRoleViewNode* _roleView[1];

private:
	std::set<std::string> _plist;
	std::map<int, CCPoint>  _selectPosMap;				//保存选择框特效坐标
	GameActionNode* m_pActionNode;
	GameActionNode* m_FireLiftEffect;
	GameActionNode* m_FireRightEffect;
	GameActionNode* m_SelectAcNode;							//选中角色名称特效		【Ji：】
	CCNode* seNode1;									//获取玩家人物显示情况	【Ji：】
	CCSprite* m_pShadow;
	CCSprite* ding;//鼎

	AnimationCache::AnimateList m_pAnimateFireM;
	AnimationCache::AnimateList m_pAnimateFireW;
};

class SelectRoleUiLoaderLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SelectRoleUiLoaderLayer, create);

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	//virtual void onEnter();
	virtual void onExit();
	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void changeServerBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void beginGameBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onEnterXiaomiBBSPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//合区 角色超过一页; 
	void onBackBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onNextBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	GameActionNode* getSelectAcNode() {return _selectAcNode;}

private:

	GameActionNode* _selectAcNode;
	GameActionNode* _beginAcNode;
	std::set<std::string> _plist;
	std::map<int, CCPoint> _selectPosMap;
}; 

class SelectRoleUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(SelectRoleUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(SelectRoleUiLoaderLayer);
};

#endif //SELECTROLEUI_H