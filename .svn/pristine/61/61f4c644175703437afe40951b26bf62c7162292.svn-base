#include "ClientCfg.h"
#include "CfgReader.h"
#include "cocos2d.h"
using namespace cocos2d;


ClientCfg * ClientCfg::getInstance()
{
	static ClientCfg instance;
	return &instance;
}

ClientCfg::ClientCfg()
{
	std::string cfgFile = CCFileUtils::sharedFileUtils()->getWritablePath() + "ClientConfig.cfg";
	_cfg = new CFGReader2(cfgFile.c_str());
}

ClientCfg::~ClientCfg()
{
	flush();
	delete _cfg;
}

void ClientCfg::flush()
{
	std::string cfgFile = CCFileUtils::sharedFileUtils()->getWritablePath() + "ClientConfig.cfg";
	_cfg->write(cfgFile.c_str());
}

std::string ClientCfg::getString( const std::string& section_, const std::string& key_, const std::string& defstr_ )
{
	return _cfg->get_profile_string(section_, key_, defstr_);
}

int ClientCfg::getInt( const std::string& section_, const std::string& key_, int def_ )
{
	std::ostringstream ostr;
	ostr << def_;
	return atoi(_cfg->get_profile_string(section_, key_, ostr.str()).c_str());
}

void ClientCfg::setString( const std::string& section_, const std::string& key_, const std::string& str )
{
	_cfg->set_profile_string(section_, key_, str);
}

void ClientCfg::setInt( const std::string& section_, const std::string& key_, int v )
{
	std::ostringstream ostr;
	ostr << v;
	_cfg->set_profile_string(section_, key_, ostr.str());
}

void ClientCfg::setInt64( const std::string& longsection_, const std::string& longkey_, INT64 longv )
{
	std::ostringstream ostr;
	ostr << longv;
	_cfg->set_profile_string(longsection_, longkey_, ostr.str());
}

INT64 ClientCfg::getInt64( const std::string& longsection_, const std::string& longkey_, INT64 longdef_ )
{
	std::ostringstream ostr;
	ostr << longdef_;
#ifdef WIN32
	return _atoi64(_cfg->get_profile_string(longsection_, longkey_, ostr.str()).c_str());
#else
	return atoll(_cfg->get_profile_string(longsection_, longkey_, ostr.str()).c_str());
#endif
}
