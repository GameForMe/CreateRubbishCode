#ifndef SMALLMAP_H
#define SMALLMAP_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"
#include "FrameNode.h"
#include "RewardProto.h"
#include "tagDWORDTime.h"
#include "GameActionNode.h"
#include "ConcernMgr.h"
#include "AnimationCache.h"
#include "ProgressBar.h"
#include "AlignComponent.h"
#include "ServerTime.h"
#include "FuncGuideMgr.h"

using namespace cocos2d;
using namespace cocos2d::extension;
struct HearSayChannel;
struct GUAJIBTNNEEDCANGET;
class MiniMapNode;
class GameActionNode;
struct QuestDataInited;
struct LpLevelUpEvent;
struct refresh_invitation_list;
#define TMP_AC_NODE10 -100
class ActivityBtnGroup
	: public FrameNode
	, public cocos2d::extension::CCNodeLoaderListener
	,public AlignComponent
{
public:
	enum eNodeTag
	{
		NT_ChongzhiBtn = 0,
		NT_HuoyueBtn,
		NT_HuodongBtn,
		NT_FubenBtn,
		NT_BibleBtn,//新手宝典
		BT_ShouChong,
		NT_ConsumptionBtn,
		
		NT_TreasureBtn = 8,
		NT_End,
		NT_AnimBegin = 10,
		NT_TimeLabel =11,
		NT_GiftBtn=12,
		NT_QiandaoBtn=13,
	};

	enum eBtnPos
	{
		//EBP_Boss =0,
		EBP_Battle=0,
		EBP_TB,
		EBP_Arena,
		EBP_OR,
		EBP_Dragon,
		EBP_Total,
	};

public:
	CREATE_FUNC(ActivityBtnGroup);
	virtual void onNodeLoaded(CCNode * pNode, CCNodeLoader * pNodeLoader);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	void showFrame(bool show);						//活动按钮隐藏和显示

	void showBtn(eNodeTag btnTag,bool show);
	void setTime( const std::string &time);
	void runAnimationOnButton(eNodeTag btnTag);
	void stopAnimationOnButton(eNodeTag btnTag);

	bool isShow() { return _show; }

	virtual void onEnter();
	virtual void onExit();
	
	void enableBtns(size_t index,bool bEnable);
	bool isEnableBtn(size_t index)const;
	void setActivityBtn(CCControlButton* btn)
	{
		_activityBtn = btn;
	}
	//第二排排序
	void sortBtnPos1();
private:
	void initBtns();
	void onEventQuestInited(QuestDataInited* evt);
	void onEventLevelUp(LpLevelUpEvent* evt);
protected:
	CCPoint _showPos;
	bool _show;
	CCControlButton* _activityBtn;
	CCPoint _noticeStartPt;
};

struct change_map;
struct notify_on_fire;
struct GuildBossButtonState;

class MiniMapUiLoaderLayer;
class MiniMapUi : public CCLayer,public AlignComponent
{
	friend class MiniMapUiLoaderLayer;
public:

	enum eNodeTag
	{
		NT_ChongZhiActivityFarmeBtn = 6,
		NT_CoretreeBtn = 7,
		NT_TreasureLoftBtn = 8,
		NT_ZaiXIanBtn = 8,
		NT_RewardBtn = 10,
		NT_ActivityBtnGroup = 12,
		NT_HuoBtn = 13,
		NT_HUOYUE = 22,
		NT_FUNCGUIDE = 24, //功能引导node
		NT_SERVERACTIVITYBTN = 25,
		NT_QianDao	=	37,
		NT_FMBCueBtn	=	49,
		NT_FMBBetBtn	=	50,
		BT_MysteryBox = 100,						//【Ji：】 神秘宝箱
	};

	enum eButtonTag
	{
		BT_Chongzhi,
		BT_OldBoss = 0,
		BT_OutBoss = 0,
		BT_Activity,
		BT_Instance,
		BT_NoticeBtn = 4,
		BT_ShouChong = 5,
		BT_GiftBtn = 12,
		BT_AutoFight = 20,
		BT_InsideBoss =20,
		BT_LeaveScripte = 21,
		BT_RichangBtn = 22,
		BT_ZhanBaoBtn = 23,
		BT_ExpLixianBtn = 23,
		BT_ActivityTransfer = 24,
		BT_Store = 36,
		BT_InsideSignBtn = 38,
// 		BT_SBKActivityTransfer = 38,
// 		LB_SBKActivityTransferTime = 39,
// 		BT_LuanDouHui = 40,
		BT_YunyingBtn = 48,//运营活动按钮
		BT_Invite = 51,//邀请
		BT_Fire = 52,//火堆
		BT_GuildBoss = 53,//行会Boss
		BT_TradeBtn = 55,//交易行
	};

public:
	CREATE_FUNC(MiniMapUi);
	void updateDisplay();
	bool init();
	void changeAreaName(const char *areaName);
	void setMapSize(int width, int height);
	
	void runActivityAnimation();
	void stopActivityAnimation();
    void runShouChongAnimation();
    void stopShouChongAnimation();
	
	void showActivityBtnGroup(bool show);
    void showServerActivityBtn(bool show);
    // get Huo button position by Kid
    CCPoint getHuoBtnPosition();
    // set visible by Kid
    void setShouChongIconVisible(bool show);
	void showHand(bool show);
	/*void showActivityBtn(int tag, bool show);*/
	//显示离开副本按钮;
	void showLeaveScripteBtn(bool show);
 
	void showActivityTransferBtn(bool show);
	void showExpLixianBtn(bool show);

	void showLuanDouHuiBtn(bool show);

	void create_fmb_btn();
	void refresh_fmb_btn_state();
	void create_bet_btn();
	void refresh_bet_btn_state(bool is_show);
	void setOnlineTime(const std::string &time);
	void showUi(bool show);
	void hideUi(bool isHide);
	void forceShowUi(bool show);
	bool isActivityGroupShow() { return _activityBtnGroup->isShow(); }
	void updateAnimation();
	void updateActivityAnimation();
	void setSeverTime(const tagDWORDTime time);
	void setScriptDaojishi(int min, int sec);
	void showScriptTime(bool state);
	void giftBtnShow(bool show);
	CCControlButton* getServerActivityBtn();
	CCNode* getAutoFightNode();								//获得自动战斗图标		【Ji：】
	void setServerActivityState();
	void setSynthesisActivityState();
	//new player guide
	CCRect getAutoBattleBtnPos(); 

	void runAnimationOnButton(eNodeTag btnTag);
	void stopAnimationOnButton(eNodeTag btnTag);
//	GameActionNode* getActiveSuperEffect();						//创建活跃光圈特效
	void setBtnHighLight(int tag);//设置叹号标识
	void revokeBtnHighLight(int tag);//撤销叹号标识
	void onXuanshangPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void setBaoDianBtnVisible(bool bSet);
	void SetxuanshangLockVisible(bool bset);
	CCRect GetBaoDianBtnPos();
	int getHuoYueRewardNum();
	void setIsOver(bool value) { isOver = value;}
	//void setTradingRedPoint(bool value);
	
	//沙巴克攻城相关的接口
	bool getIsSBKTransferFrame(){return isSBKTransferFrame;}
	void showSBKActivityTransferBtnDisplay(bool isNeed);
	void showSBKActivityScriptTime(bool state);
	void setSBKActivityScriptDaojiShi(int min,int sec); 

	void refreshActivityBtnGroup(size_t pos){_activityBtnGroup->showImme(pos);}
	MiniMapUiLoaderLayer* getMinimapUILoaderLayer() const{return m_pLayer;}
	CCLayer* getLayer(){
		return layer;
	}
	CCNode* getActBtn()const{return _huoBtn;}
	CCNode* getSignBtn()const{return _signBtn;}
	CCNode* getInsideSignBtn(){return getChildByTag(0)->getChildByTag(1)->getChildByTag(12)->getChildByTag(38);}

	void enableGroupBtn(size_t index,bool bEnable){CC_ASSERT(_activityBtnGroup);_activityBtnGroup->enableBtns(index,bEnable);}
	bool isGroupBtnEnable(size_t index)const{CC_ASSERT(_activityBtnGroup);return _activityBtnGroup->isEnableBtn(index);}
	void setSignShowInfo(bool show) { _isSignShow = show; }
	bool isSignShowInfo() { return _isSignShow; }
	void setActivityBtn(CCControlButton* btn)
	{
		_activityBtnGroup->setActivityBtn(btn);
	}
	CCControlButton* getBossBtn(eButtonTag index, bool isOut);
	void showOutBoss(bool isShow);
	void showNewBoss(bool isShow);
	//功能引导屏蔽
	/*void showFuncGuide(bool show, bool funcOpen = false);
	void setFuncOpen(bool show);
	bool getFuncOpen() { return _funcOpen; }
	bool getFuncGuideVis();*/
	bool getTLTimeIsShow();
	void setTLTimeHide(bool isHide);
	void setTLTimeInfo(tagDWORDTime serverTime);

	void showLeftTimeLabel(bool _show);
	void updateLeftTimeLabel(string str);

	virtual void onEnter();
	virtual void onExit();
public SLOTS:
	void onFocusPointChanged(const CCPoint &pos);
	//void stopAutoFight();
	//void StartAutoFight();
	void ClickAutoFightBtn();

	void update(float delta);

	CCRect GetMiniMapBtnPos(int nTag);

	void LPLvSetBtnVisible(int nLevel, bool bIsInit);
	void setOffPercent(LocalPlayer* ploc);
	cocos2d::CCPoint getOfflineExpBtnPos();
	cocos2d::CCPoint getActivityBtnPos();
	void setupGoupBtnLock(CCNode* root);
	void showZhanBaoBtn(bool isShow);
	void SetGuaJiBtn( bool isShow );
	void showIosRechargeFunction(bool isShow);
	void showGiftBtn(bool isShow);
	void showServeractivityBtn(bool isShow);
	void sortBtnPos1();//排列活字里面的第二排按钮位置

	void showYunyingBtn(bool isShow);
	
	void showLongWeiBtn(bool isShow);
	void showIntruduceBtn(bool isShow);
	bool getZhanBaoShow() { return _zhanbaoIsShow; }
	void showBFBattleUi(bool pIsShow);
	void showBFBattlePrepareUi(bool isShow);
	void setShowBFPrepareEff(bool isShow);
	void showIntruduce1Btn(bool isShow);
private:
	void on_event_change_map(change_map* evt);
	void refresh_leave_btn(unsigned int map_id);

	void on_event_refresh_invite_btn(refresh_invitation_list* evt);
	void on_event_on_fire(notify_on_fire* evt);
	void hide_fire(float);

	void showGuildBossBtn(GuildBossButtonState* trans);

	void onGetName(unsigned int roleid , const std::string& name);
protected:
	ActivityBtnGroup *_activityBtnGroup;
private:
	CCLayer *layer;

	LabelFT *_areaName;
	LabelFT *_areaNameFuben;
	MiniMapNode *_miniMapNode;
	
	CCNode *_huoBtn;
	CCSprite *_rewardAnim;
	CCSprite *_rewardEffect;
	CCSprite *_activityAnim;
	CCSprite *_activityEffect;
    CCSprite *_shouChongEffect;
	LabelFT *_severTime;
	LabelFT *_enterScriptTime;
	CCControlButton *_leaveScripte;
	CCControlButton *_battleBtn;					//自动战斗和自动寻路特效放在按钮上,所以如需隐藏按钮时要注意
	CCControlButton *_explixian;
	CCControlButton *_activitytransfer;
	CCControlButton* _serveractivityBtn;//福利活动
	CCControlButton* _coretreeBtn;
	CCControlButton* _shouChong;
	CCControlButton* _signBtn;
	CCControlButton* _xuanshangBtn;
	//CCControlButton* _luanDouHuiBtn;
	CCControlButton* _zhanBaoBtn;//战报按钮
	CCControlButton* _giftBtn;//礼包
	CCControlButton* _yunyingBtn;//运营按钮
	CCControlButton*	_invite_list_btn;//邀请
	CCControlButton*	_on_fire_btn;
	CCControlButton* _guildBossBn;  //行会Boss传送Btn
	CCNode* m_mfb_cue_btn;
	CCNode* m_mfb_bet_btn;
	//CCControlButton *_tradingBtn;
	CCRect _btnRec[11];
	CCRect _srcBtnRec[6];
	//沙巴克攻城相关
	//CCControlButton* _sbkactivitytransfer;
	bool isSBKTransferFrame;
	//LabelFT *_enterSBKScriptTime;
	/*//功能引导
	CCNode*   _funcGuideNode;
	LabelFT*  _funcGuideOpenLv;
	LabelFT*  _funcGuideTitle;
	GameActionNode* _funcOpenEffe;
	bool _funcOpen;
	*///功能引导屏蔽
	bool _zhanbaoIsShow;

	MiniMapUiLoaderLayer* m_pLayer;
	GameActionNode* m_pHand;	//引导手
	bool isOver;
	bool _isSignShow;
	CCPoint _noticeStartPt;
	bool _isOfflineExpRedPoint;//离线经验小红点

	//进入勇闯天牢的活动需要显示结束时间
	CCNode* _tlTimeNode;
	LabelFT* _tlTimeInfo;
	int _tlTimeNums;

};
enum eMiniMapTag
{
	MMT_RedPacket = 5,				//红包				5
	MMT_GoodTimePaying,				//聚划算			6
	MMT_MoneyTree,					//摇钱树			7
	MMT_TreasureLoft,				//藏宝阁			8
	MMT_NewSever = 25,				//开服活动			25
	MMT_Mystery = 100,				//神秘宝箱			100
	BT_BaoDian = 45,
	BT_AutoAction = 20,
	MM_Btn_BFPrepare = 30,
	MM_Eff_BFPreEff = 110
};

struct refresh_auto_btn;
struct refresh_bfprepare_btn;
class MiniMapUiLoaderLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
	, public AlignComponent
{

public:
	MiniMapUiLoaderLayer();
	~MiniMapUiLoaderLayer(){CC_SAFE_DELETE(_expProgress);}
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MiniMapUiLoaderLayer, create);
	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	virtual void onEnter();
	virtual void onExit();

	void on_event_refresh_autoact_btn(refresh_auto_btn* evt);
	void delay_refresh_autoact_btn();
	void on_event_refresh_bfPrepare_btn( refresh_bfprepare_btn* evt );
	void delay_refresh_bfPrepare_btn();

	void showUi(bool show);
	void hideUi(bool isHide);
	void forceShowUi(bool show);
	void hideTianlaoTimeInfo(bool isHide);//勇闯天牢是否显示时间

	void showBFBattleUi(bool pIsShow);
	void showBFBattlePrepareUi(bool isShow);
	void setShowBFPrepareEff(bool pIsShow); // 显示

	void hidePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onHookPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGuaJiPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onNoticePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void StartAutoFight();
	void SetGuaJiBtn( bool isShow );
	void activitiesPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//右上角活动按钮事件
	void rankPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void mapPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//离开脚本
	void onLeaveScripteBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//活动传送
	void onActivityTransferBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//离线经验
	void onExpLixianBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	//reward btn group
	void onZaixianPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onQiandaoPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGiftPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void emailPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onzhanbaoPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void onyugaoPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//屏蔽
	/*
	NT_ChongzhiBtn = 0,
	NT_HuoyueBtn,
	NT_HuodongBtn,
	NT_FubenBtn,
	NT_BibleBtn,//新手宝典
	NT_PayBtn,
	NT_ConsumptionBtn,//消费返利
	NT_CoretreeBtn,
	NT_TreasureBtn,
	*/
	//activity btn group;
	void onHuoyuePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onHuodongPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onFubenPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBiblePressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onShouChongPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCoreTreePressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onTreasurePressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onArenaPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBossPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onNewBossPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onMysteryPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onJuHuaSuanPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onjiaoyihangBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	
	void QiangHongBaoPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCanReceiveBtnPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onStorePressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onLuanDouHuiPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onbaodianBtnPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void stopAutoFight();
	void onshenlongbaozangPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onwanfashuomingPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onlongweitiaozhanPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onwanfashuoming1Pressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent );
	void onStore1Pressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent );

	void onyaoqingPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	 //?a・t???ˉ
	void onServerActivityBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//SBK活动传送
	void gongchengPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//运营活动按钮
	void onhuodongzhongxinPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void onFMBTransmit(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onFMBBetCue(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void onBloodFightBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void on_fire(CCObject * pSender, CCControlEvent pCCControlEvent);
	void confirm_teleport();

	void onGuildBossBtnPressed(CCObject * pSender, CCControlEvent pCCControlEvent);
	void toChallengeBoss();

	bool getMiniMapIsShow(){ return _showState; };
	GameActionNode* getTmpSuperEffect(int idx);					//获得展示特效
	void eraseTmpSE(int idx);

	void LPLvSetBtnVisible(int nLevel, bool bIsInit);
	void setOffPercent(LocalPlayer* ploc);
	void SetBtnVisible(int idx, bool bVisible, bool bSort);
	void setBackGroundSize();
	GameActionNode* getTmpBallEffect();
	GameActionNode* getTmpWaveEffect();
	void setBallEffct();
	GameActionNode* getTmpBoomEffect();
	//void setTradingRedPoint(bool value);

	virtual void update(float);
	void setTmpAcNode10Play(bool isPlay)
	{
		CCLayer *layer = (CCLayer*)getChildByTag(1);
		_tmpAcNode10 = this->getTmpSuperEffect(9);
		CCControlButton* buttonNode = dynamic_cast<CCControlButton*>(layer->getChildByTag(BT_BaoDian));
		if(buttonNode != NULL)
		{
			_tmpAcNode10->setPosition(ccp(buttonNode->getContentSize().width / 2.0f, buttonNode->getContentSize().height / 2.0f));
			_tmpAcNode10->setTag(TMP_AC_NODE10);
			buttonNode->addChild(_tmpAcNode10,RZN_EFFECT);
		}
		_tmpAcNode10->BeginAction(0.1f,isPlay);
	}
	bool isTmpAcNode10Play()
	{
		if(_tmpAcNode10 != NULL)
		{
			return _tmpAcNode10->GetActionState();
		}
		return false;
	}
	void closeBaoDianEffect(int functionValue);
	void showHand(bool show);

	void showLongWeiBoxBtn(bool show);
	void showIntruduceBtn(bool show);
	void showIntruduce1Btn(bool show);

	void showLeftTimeLabel(bool _show);
	void updateLeftTimeLabel(string str);

	void on_sure_fmb_transmit();

	void guaJiBtnSetHeightLight(GUAJIBTNNEEDCANGET* btnCanGet);
public:
	GameActionNode* _tmpAcNode9;

private:
	bool _showState;
	CCPoint _srcPos;
	GameActionNode* _tmpAcNode1;					//临时特效展示			【Ji：】
	GameActionNode* _tmpAcNode2;
	GameActionNode* _tmpAcNode3;
	GameActionNode* _tmpAcNode4;
	GameActionNode* _tmpAcNode5;
	GameActionNode* _tmpAcNode6;
	GameActionNode* _tmpAcNode7;
	GameActionNode* _tmpAcNode8;
	GameActionNode* _tmpAcNode10;
	CCSprite*		m_Sprite;
	CCSprite*		m_Sprite2;
	std::set<std::string> _plist;			//保存特效名称

	//[bing] 小地图旁边6个按钮的初始位置
	CCPoint m_BtnPos[6];
	CCControlButton* m_pBtnArray[6];	//6个按钮
	CCPoint m_old_intruducepos;
	std::list<int> m_ShowBtnList;
	CCScale9Sprite *_background;

	//离线经验池
	ProgressBar *_expProgress;//进度条
	float _offPercentPositiony;
	AnimationCache::AnimateList _waveAnims;
	AnimationCache::AnimateList _ballAnims;

	CCControlButton* _auto_act_btn;
	//交易行红点
	CCSprite	* m_pTradingRedPoint;

	CCNode*		mpTeamNotice;
	void onTeamNotice(CCObject * pSender, CCControlEvent pCCControlEvent);
	
	/*屏蔽
	CCNode* _funcGuideNode;
	CCPoint _funcGuidePos;*/
	GameActionNode* _hand;
	CCNode* m_btnGuaJi;
	CCNode* m_btnLongWeiBox;
	CCNode* m_btnLongWeiDes;

	CCNode* _fmLefetTimeNode;
	LabelFT* _fmLeftTimeLabel;

	CCControlButton* m_pBtnBFPrepare;
	CCControlButton* m_pBtnBFCancel;

	bool m_bf_prepare_btn_state_pre;
	bool m_auto_act_btn_state_cache;
};

class MiniMapUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(MiniMapUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(MiniMapUiLoaderLayer);
};


#endif //SMALLMAP_H
