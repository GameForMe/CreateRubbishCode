#ifndef SYSTEMMSG_H
#define SYSTEMMSG_H

#include "AnimationCache.h"
#include "GameActionNode.h"
#include "cocos2d.h"
#include "BaseDefine.h"
using namespace cocos2d;

#define SYSTEM_MSG_POS1 70
#define SYSTEM_MSG_POS2 100

#define SYSTEM_MSG1_ENDPOS 150   //120
#define SYSTEM_MSG1_BEGINPOS (SCREEN_WIDTH - SYSTEM_MSG1_ENDPOS)

class SystemMsg : public CCObject
{
public:
	enum eMsgType
	{
		MT_Sys1,
		MT_Sys2,
		MT_Sys3
	};

	typedef std::vector<std::string> MsgList;
public:
	static SystemMsg *getInstance();
	void delayDestroy();//延迟重连需要销毁
	void runMsg(const std::string &msg, eMsgType msgType = MT_Sys1);
	virtual void update(float dt);
	void clear();
	void ChangeSpriteBackGround(bool);
protected:
	SystemMsg();
	~SystemMsg();

	void callback1(CCNode *node);
	void callback2(CCNode *node);
	void callback3(CCNode *node);

	void runMsg1(const std::string &msg);
	void runMsg2(const std::string &msg);
	void runMsg3(const std::string &msg);

	ccColor3B getChangeColor(std::string const& str);

	CCLabelTTF *createLabel(const std::string &str);
	LabelFT* createLabFT(const std::string &str);
	CCNode *createMsg1Mask();

	void createMSG(MsgList const& msgListData ,MsgList const& msgListColor);
	void createMSG2(MsgList const&  msgListData ,MsgList const&  msgListColor);
	void createMSGForMarry(MsgList const&  msgListData ,MsgList const& msgListColor);
	void runBackgroundEffect();

	void parse_msg_string(std::string& msg,MsgList& msg_list,MsgList& color_list);
protected:
	MsgList _msgList1;
	MsgList _msgList2;
	MsgList _msgList3;
	//CCLabelTTF *_lastLabel1;
	//CCLabelTTF *_lastLabel2;
	//CCLabelTTF *_lastLabel3;
	LabelFT* _lastLabel1;
	LabelFT* _lastLabel2;
	LabelFT* _lastLabel3;

	CCSprite *_lab1Back;
	CCSprite *_lab2Back;
	CCSprite *_lab3Back;
	bool isLab2Finsh;
	bool isLab3Finsh;
	GameActionNode* _jiehunAcNode;	
	std::string m_sBlingSEName;		
	GameActionNode* _jiehunAcNode1;	
	std::string m_sBlingSEName1;		
};

#endif //SYSTEMMSG_H