#ifndef	TRADINGMGR_H
#define TRADINGMGR_H

//交易行管理
#include <string>
#include <map>
#include <vector>
#include<list>
#include "CmdAdapter.h"
#include "TradingProto.h"
#include "PackageManager.h"
#include "Trading_Define.h"

using namespace std;

struct TowclassInfo
{
  int		oneclassId;
  int		towclassId;
  string	towclassName;
  string	towclassIcon;
};

struct TradingData
{
	int oneclassId;
	string labelIcon; 
	std::vector<TowclassInfo> vTowclassInfo;
	bool professionClass;
	bool lvClass;
	TradingData()
			:oneclassId(0)
			,labelIcon("")
			,professionClass(false)
			,lvClass(false)
	{
		vTowclassInfo.clear();
	}
};


//重载（）用于vector查找 提高效率
class FindItemData
{
public:
	bool operator()(tagTradingItemDataMsg &tValue)
	{
		return m_val.m_ItemInfo.n64_serial == tValue.m_ItemInfo.n64_serial;
	}

	static void SetTagTradingItem(tagTradingItemDataMsg tVal)
	{
	   m_val = tVal;
	}

private:
	static tagTradingItemDataMsg m_val;
};

class FindOntherItemData
{
public:
	bool operator()(tagTradingOntherItemDataMsg &tValue)
	{
		return m_onther_val.n64Serial == tValue.n64Serial;
	}

	static void SetTagTradingItem(tagTradingOntherItemDataMsg tVal)
	{
		m_onther_val = tVal;
	}

private:
	static tagTradingOntherItemDataMsg m_onther_val;
};

class FindItemGetData
{
public:
	bool operator()(tagTradingGetItemDataMsg &tValue)
	{
		return m_get_val.n64Serial == tValue.n64Serial;
	}

	static void SetTagTradingItem(tagTradingGetItemDataMsg tVal)
	{
		m_get_val = tVal;
	}

private:
	static tagTradingGetItemDataMsg m_get_val;
};

class TradingMgr
{
public:
	TradingMgr();

	~TradingMgr();
public:
	typedef std::vector<tagTradingItemDataMsg> tagTrading_item_vector;

	typedef std::vector<tagTradingGetItemDataMsg> tagTrading_get_item_vector;

	typedef std::vector<tagTradingOntherItemDataMsg> tagTrading_onther_item_vector;

private:
	typedef std::map<unsigned int,TradingData> TradingMap;

	TradingMap _TradingInfo;
public:
	void getTradingInfo();

	void Destroy();

	static TradingMgr* getInstance();

	TradingMap GetTradingMap(){return _TradingInfo;}

public:
	void init();

	void destroy();

private:
	unsigned int PushUpItem(s_net_cmd* cmd);

	unsigned int InitAllUpItem(s_net_cmd* cmd);

	unsigned int UpdateBuyItem(s_net_cmd* cmd);

	unsigned int DeleteRoleTradingItem(s_net_cmd* cmd);

	unsigned int InitGetTradingItem(s_net_cmd* cmd);

	unsigned int BuyTradingItem(s_net_cmd* cmd);

	unsigned int updateOverTimeState(s_net_cmd* cmd);

	unsigned int trading_Server_state(s_net_cmd* cmd);

	unsigned int UpdateSearchItem(s_net_cmd* cmd);

	unsigned int UpdateGetSearchItemInfo(s_net_cmd* cmd);

	void PushTradingGetItem(tagTradingGetItemDataMsg *item);

	void DeleteTradingGetItem(tagTradingGetItemDataMsg item);

	void PushTradingBuyItem(tagTradingItemDataMsg item);

public:
	//std::string preSubLevelToMsg(int level);

	const std::string GetTradingMsgString();

	void GetBuyItemByMsg(const string strMsg);

	void GetLoadTradingBuyDataByMsg(const string strMsg);

	unsigned int GetTradingOneItem(s_net_cmd* cmd);

	void GetLoadTradingBuyOtherDataByMsg(const string strMsg,INT64 n64Serial,DWORD	dwItemId);

	std::string GetTradingOtherItemMsgString(const ItemTypeData data);

	void PushTradingOntherItem(tagTradingOntherItemDataMsg item);

	void DeleteTradingOntherItem(tagTradingOntherItemDataMsg item);

	unsigned int UpdateOntherItem(s_net_cmd* cmd);

	void GetLoadTradingAllDataByMsg();

	unsigned int GetTradingAllItem(s_net_cmd* cmd);

	std::string preSellLeftItemNolistString(int index);

	int getRoleTradingSize(){return (int)m_vRoleTradingInfo.size();}

	int getRoleTradingGetSize(){return (int)m_vGetTradingInfo.size();}

	int preSellLeftItemNolist();

	void SendTradingUpMsg(DWORD dwClientRoleID,INT64 n64Serial, DWORD dwItemId, int nUnitPrice, int nNumber);

	tagTradingItemDataMsg* FindTradingBuyItem(tagTradingItemDataMsg item);

	unsigned int RemoveItemGem(s_net_cmd* cmd);

	void GetLoadTradingOneDataByMsg();

	tagTradingGetItemDataMsg* FindTradingGetItem(tagTradingGetItemDataMsg item);

	int GetBuyTradingInfoSize(){return (int)m_vBuyTradingInfo.size();}

	void SetDelayShow(bool value);

	void ClearTradingState();

	bool IsHaveFreeSize(int size, const tagTrading_get_item_vector &ItemData,int bagCount);

	void SendDeleteGetOneItemCallFun();

	void SendDeleteGetAllItemCallFun();

	void GetLoadTradingSearchItemInfo(const string strMsg,std::vector<DWORD> &itemInfo);

	void GetLoadSearchTradingBuyDataByMsg();

	bool getIsShowRedFlag();//判断领取是否为空，决定红点提示
	void setSystemRedFlag();//将systemUi中的交易行按钮显示红点

public:
	tagTrading_item_vector m_vBuyTradingInfo;

	tagTrading_item_vector m_vRoleTradingInfo;

	tagTrading_get_item_vector m_vGetTradingInfo;

	tagTrading_onther_item_vector m_vOntherTradingInfo;

public:
	int		m_nLevel;

	int		m_nProfession;

	int		m_nOneClassId;

	int		m_nTowClassId;

	int     m_nSearchSendMsgCount;

	int     m_nSearchReceiveMsgCount;

	bool	m_bLevelClick;

	bool	m_bProfessionClick;

	bool	m_bOneClassClick;

	bool	m_bTowClassClick;

	bool	m_bProfessionClass;
	
	bool	m_bLvClass;

	bool	m_bPriceState;

	bool	m_bTradingSearch;

public:
	bool	m_bTradingUpMsgIsReceive;

	bool	m_bTradingDownMsgIsReceive;

	bool	m_bTradingGetOneIsReceive;

	bool	m_bTradingGetAllIsReceive;

	bool	m_bTradingLoadDataIsReceive;
};

#endif
