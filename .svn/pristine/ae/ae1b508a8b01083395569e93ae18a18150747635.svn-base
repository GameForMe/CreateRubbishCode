#pragma once
#include <map>
#include <string>
#include <list>
#include "Signals.h"
#include "CmdAdapter.h"
class NameMgr2
{
private:
	std::map<unsigned int , std::string> _namePool;
	std::map<unsigned int , std::string> _guildPool;
	std::list<unsigned int> _nameQueue;
	std::list<unsigned int> _guildQueue;
	unsigned int _lastSendTime;
	unsigned int _lastSendTime2;
	unsigned int _curTime;
	unsigned int _curTime2;
	struct SNamePool
	{
		unsigned int id;
		std::string name;
	};
	std::vector<SNamePool> _NameEmitPool;
public:
	NameMgr2();
	~NameMgr2();
	void Destroy();//防止退回选择新服后，与名称相关的显示错误
SIGNALS:
	c_signal<void , unsigned int , const std::string&> _sigGetName;
	c_signal<void , unsigned int , const std::string&> _sigGetGuildName;
public:
	static NameMgr2* getInstance();
	void init();
	bool queryName(unsigned int roleid , std::string& ret);
	bool queryGuildName(unsigned int guildid , std::string& ret);
	void SetLeaderName(unsigned int roleid , wchar_t* wNameStr);
	void SetGuildName(unsigned int guildid , wchar_t* wNameStr);
	void update(float dt);
	void updateRoleName(unsigned int role_id,std::string role_name);//角色更名后修改容器相应的信息
	void updateGuildName(unsigned int guild_id,std::string guild_name);//行会更改后修改容器对应的信息
private:
	unsigned int onGetNames(s_net_cmd* cmd);
	unsigned int onGetGuildNames(s_net_cmd* cmd);
};

#define  REG_NAME_CB NameMgr2::getInstance()->_sigGetName.connect
#define  REG_GUILD_NAME_CB NameMgr2::getInstance()->_sigGetGuildName.connect

#define  UNREG_NAME_CB NameMgr2::getInstance()->_sigGetName.disconnect
#define  UNREG_GUILD_NAME_CB NameMgr2::getInstance()->_sigGetGuildName.disconnect