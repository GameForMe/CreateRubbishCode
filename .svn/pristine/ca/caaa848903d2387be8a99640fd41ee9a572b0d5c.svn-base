#ifndef ITEMMARIX_H
#define ITEMMARIX_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "DropDragDelegate.h"

using namespace cocos2d;
using namespace cocos2d::extension;

//先建一个340 243的框吧

//[bing] 一个ItemNode底图是54x54
// 横向间距15
// 纵向间距 8

class ItemMarixLayer : public DropDragInterface
{
public:
	ItemMarixLayer(){ m_pItemMap = NULL; }
	~ItemMarixLayer() {};

	static ItemMarixLayer* create(int nWidth, int nHeight, int nX = 0, int nY = 0, int nXoffset = 15, int nYoffset = 8);

	virtual bool init(int nWidth, int nHeight, int nX, int nY, int nXoffset, int nYoffset);
	virtual void onEnter();
	virtual void onExit();

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	virtual short getItemBegin(CCTouch &touch, eGetResult &result);
	virtual short getItemEnd(CCTouch &touch, eGetResult &result, EItemConType src, short itemIndex);
	virtual bool onClicked(CCTouch &touch);
	virtual bool onDoubleClicked(CCTouch &touch);
	virtual EItemConType getConType() { return m_EItemConType; }

	virtual f_item* GetItemData( short nIdx );

public:
	void clearMarix();
	void reMarixSize(int nX, int nY, int nXoffset, int nYoffset);
	void createLabelTTF();

	void setConType( EItemConType e ) { m_EItemConType = e; }
	short getItem(CCTouch &touch, eGetResult &result);
	short getCustomItem( CCTouch &touch, eGetResult &result );
	void SetItemMap( std::map<short, f_item*>* setMap )
	{
		m_pItemMap = setMap;
	}
	void SetItemID( short idx, unsigned int dwItemID,f_item* fItem = NULL,bool isShowNum = false );

	//[bing] 根据idx得到ItemNode
	ItemNode* GetItemNode( short idx );
	ItemNode* GetCustomNode( short idx );

	void InsertTargetNodeMap( CCNode* pNode );

	void SetColNum( unsigned short uNum ) { m_uXnum = uNum; }
	void SetRowNum( unsigned short uNum ) { m_uYnum = uNum; }
	//根据map刷新数据
	void RefreshData(bool isShowNum = false);
	void RefreshData_UpStar(ItemNode* node, f_item* item);
	//增加列
	void AddColum(short nAdd);
	//增加行
	void AddRow(short nAdd);
	//增加自定义元素
	void AddCustomNode( ItemNode* pNode );

	void SetCanScrollView( bool bSet ) 
	{ 
		bCanScrollView = bSet;
		SetScrollViewTouchEnable( bSet != false );
	}

	void SetSrollViewOffSetY(int nIdx);
	void SetSrollViewOffSet(CCPoint& cp)
	{
		if(!_itemScrollView)
			return;

		_itemScrollView->setContentOffset(cp);
	}
	CCPoint GetSrollViewOffSet()
	{
		if(!_itemScrollView)
			return CCPoint(-1.0f, -1.0f);

		return _itemScrollView->getContentOffset();
	}

	void SetScrollViewTouchEnable( bool bEnable );
	void insteadChildNode(ItemNode* targetNode);			//播放特效用	add 【J】
	CCNode* getItemContent() {return _itemContent;}			//播放特效用	add 【J】

	c_signal<void, CCNode*, short> signalCallEndItem;	//放下物品时触发之前绑定的targetnode
	c_signal<void, short> signalClickItem;				//单击触发 注意idx可能返回-1
	c_signal<void, short> signalDoubleClickItem;		//双击触发 注意idx可能返回-1
	c_signal<void, short, short> signalInChangePos;		//容器内内部交换触发
	void setItemNodeTouchEnable(bool bEnable);
	void ClearMap();	
private:
	CCScrollView *_itemScrollView;
	CCNode *_itemContent;

	unsigned int m_dwWidth;
	unsigned int m_dwHeight;

	EItemConType m_EItemConType;

	unsigned short m_uWidthSpace;
	unsigned short m_uHeightSpace;
	unsigned short m_uXnum;
	unsigned short m_uYnum;

	//传递进来的数据map
	typedef std::map<short, f_item*> ItemMap;
	ItemMap* m_pItemMap;

	//传进来的要放下物品执行的node序列
	typedef std::vector<CCNode*> TargetNodeMap;
	TargetNodeMap m_TargetNodeMap;

	bool bCanScrollView;
	int _selectIndex;//获取当前选择的itemnode是第几个itemnode
	//自定义node 用于设置非标准矩阵的node
public:
	typedef std::vector<ItemNode*> CustomNodeMap;
	CustomNodeMap m_CustomNodeMap;
	ItemMap* GetItemMap(){
		return m_pItemMap;
	}
	int getSelectIndex(){
		return _selectIndex;
	}
};

#endif //ITEMMARIX_H