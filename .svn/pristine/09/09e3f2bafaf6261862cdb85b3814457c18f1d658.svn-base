#ifndef PACKAGEPROTO_H
#define PACKAGEPROTO_H

#include "CmdAdapter.h"
#include "BaseDefine.h"
#include "ItemDefine.h"

#pragma pack(push, 1)


enum
{
	// 该部分放到protocol_common_errorcode.h中，以便各模块通用
	E_Item_LevelLimit				= 9,		// 等级不满足要求
	E_Item_SexLimit					= 10,		// 性别不满足要求
	E_Item_ClassLimit				= 11,		// 职业不满足要求
	E_Item_TalentLimit				= 12,		// 天资不满足要求
	E_Item_ClanRepLimit				= 13,		// 氏族声望不满足要求
	E_Item_OtherRepLimit			= 14,		// 其他声望不满足要求
	E_Item_RoleStatusLimit			= 15,		// 玩家状态(战斗，非战斗)不满足要求
	E_Item_AttA_Limit				= 16,		// 一级属性不满足
	E_Item_Pk_Value_Limit			= 17,		// pk值超出范围

	E_Equip_OnFailed				= 100,		// 装备失败
	E_Equip_NotRing					= 101,		// 装备不是ring
	E_Equip_InvalidPos				= 102,		// 装备栏位与装备类型要求栏位不符
	E_Equip_NotRingPos				= 103,		// 装备栏位中移动的目标位置不是ring栏位
	E_Equip_SamePos					= 104,		// 目标位置与当前位置同
	E_Equip_NotIdentify				= 105,		// 装备没有鉴定
	E_Equip_WeaponPos_Overlap		= 106,		// 武器位置重复
	E_Equip_Idendtifed				= 107,		// 武器已鉴定过
	E_Equip_Guard_DeadPunish		= 108,		// 装备具有死亡守护特殊属性，角色死亡不掉落
	E_Equip_Lock					= 109,		// 锁定物品
	E_Equip_VocationLimit			= 110,		// 该职业不能装备该装备
	E_Equip_Prictice				= 111,		// 武器修炼中不能换武器

	E_BagPsd_Exist					= 150,		// 已设密码
	E_BagPsd_NoExist				= 151,		// 未设密码
	E_BagPsd_SafeCode_Error			= 152,		// 安全码错误
	E_BagPsd_Error					= 153,		// 密码错误
	E_BagPsd_OK						= 154,		// 密码正确

	E_Dye_OtherItem                 = 170,      // 只能对时装进行染色
	E_Dye_Exist                     = 171,      // 该时装已为该颜色，不需染色
	E_Dye_LvLimit                   = 172,      // 染料等级不足
	E_Dye_NotExist					= 173,		// 装备或者染料不存在

	E_Hang_NoCan_ChangeEquip		= 174,		// 挂机中不能换装


	E_Destory_Equip_Error			= 200,		// 矿洞不能摧毁装备

	//功法装备相关错误码定义
	E_State_NoCan_ChangeKungfu		= 201,		//摆摊，双修中不能装备功法
	E_SameKungfu_Cannt_Equip		= 202,		//同种类型的功法不能重复装备
	E_Kungfu_Up_Failed				= 203,		//功法经验升级失败
	E_Kungfu_Level_Max				= 204,		//待升级功法已经是满级
	E_Kungfu_Not_Quality			= 205,		//普通功法不可执行融合
	E_Kungfu_Exp_And_Kungfu			= 206,		//经验珠与普通功法不可执行融合
	E_Kungfu_Is_Lock				=	207,
	E_Equip_Not_Abrase			=211,		//装备未磨损,不需要修理
};
//----------------------------------------------------------------------------
// 物品位置发生变化
//----------------------------------------------------------------------------
// 物品位置移动-- 同一个容器内
struct NET_SIC_item_position_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_item_position_change);
	EItemConType	eConType;		// 容器类型
	INT64			n64_serial;		// 移动位置的物品
	short			n16Num;			// 移动物品的个数(0表示全部移动)
	short			n16PosDst;		// 物品移动的目标位置
	unsigned int	dwNPCID;		// 职能NPC ID(现在只有仓库使用)
};

// 物品位置移动-- 同一个容器内
struct NET_SIS_item_position_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_item_position_change);
	unsigned int   dw_error_code;  //错误码
	EItemConType	eConType;		// 容器类型
	INT64			n64Serial1;		// 移动位置的物品
	INT64			n64Serial2;		// 受影响物品, 当为INVALID_VALUE时, 表示将物品移动到一个空位
	short			n16PosDst1;		// 物品移动的目标位置
	short			n16PosDst2;		// 物品移动的目标位置
	short			n16Num1;		// 物品最终个数-- 当该值为0时,需将该物品删除,服务器不另发消息
	short			n16Num2;		// 物品最终个数
	int				bCreateItem;	// n64Serial2是否为新创建的物品堆-- 为新建堆时，需客户端处理，服务器不另发消息
};

// 物品位置移动-- 不同容器内
struct NET_SIC_item_position_change_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_item_position_change_extend);
	EItemConType	eConTypeSrc;	// 源容器类型
	INT64			n64Serial1;		// 移动位置的物品
	EItemConType	eConTypeDst;	// 目的容器类型
	short			n16PosDst;		// 物品移动的目标位置,为INVALID_VALUE时表示没有指定目标位置
	short			n16Dummy;
	unsigned int			dwNPCID;		// 职能NPC ID(现在只有仓库使用)
	unsigned int			dw_safe_code;	// 安全码
};

// 物品位置移动-- 不同容器内
struct NET_SIS_item_position_change_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_item_position_change_extend);
	EItemConType	eConTypeSrc1;	// 容器类型-- n64Serial1的原容器
	EItemConType	eConTypeSrc2;	// 容器类型-- n64Serial2的原容器
	EItemConType	eConTypeDst1;	// 容器类型-- n64Serial1的目标容器
	EItemConType	eConTypeDst2;	// 容器类型-- n64Serial2的目标容器
	short			n16PosDst1;		// 物品移动的目标位置
	short			n16PosDst2;		// 物品移动的目标位置
	INT64			n64Serial1;		// 移动位置的物品, 当为INVALID_VALUE时, 表示物品移动到一个空位
	INT64			n64Serial2;		// 移动位置的物品, 当为INVALID_VALUE时, 表示物品移动到一个空位
	short			n16Num1;		// 物品最终个数-- 当该值为时,需将该物品删除,服务器不另发消息
	short			n16Num2;		// 物品最终个数
};

struct NET_SIS_new_item_add : public s_net_cmd//添加新物品协议
{
	DECL_NETCMD(NET_SIS_new_item_add);
	tagItem			Item;
};

struct NET_SIS_new_equip_add : public s_net_cmd//添加装备协议
{
	DECL_NETCMD(NET_SIS_new_equip_add);
	tagEquip		Equip;
	int			bPickUp;
};

// 自动整理
struct tagItemOrder
{
	short	n16OldIndex;
	short	n16NewIndex;
};

// 行囊整理
struct NET_SIC_item_reorder : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_item_reorder);
	unsigned int			dwNPCID;		// INVALID_VALUE时，为背包整理；否则为仓库整理
	unsigned char			by_type;		// 0 包裹1 任务 2 功法包裹 3 功法临时包裹
	short			n16ItemNum;		// 物品个数
	short			n16Index[1];	// 排序前物品在容器中的位置，当前数组下标为排序后顺序
};

struct NET_SIS_item_reorder : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_item_reorder);
	unsigned int			dw_error_code;
	EItemConType	eConType;		// 容器类型
	short			n16ItemNum;		// 物品个数
	short			n16OldIndex[1];	// 当前数组下标为排序后顺序
};

// 行囊整理
struct NET_SIC_item_reorder_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_item_reorder_extend);
	unsigned int			dwNPCID;		// INVALID_VALUE时，为背包整理；否则为仓库整理
	unsigned char	by_type;		// 0 包裹 1 任务 2 功法背包 3 功法临时背包
	short			n16ItemNum;		// 物品个数
	tagItemOrder	byData[1];		// tagItemOrder
};

struct NET_SIS_item_reorder_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_item_reorder_extend);
	unsigned int			dw_error_code;
	EItemConType	eConType;		// 容器类型
	short			n16ItemNum;		// 物品个数
	tagItemOrder byData[1];		// tagItemOrder
};

//堆叠物品
struct NET_SIC_stack_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_stack_item);
	EItemConType	eConType;		// 容器类型
};

struct NET_SIS_stack_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_stack_item);
	EItemConType	eConType;		// 容器类型
};

//-----------------------------------------------------------------------------
// 所有金钱
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_money : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_role_init_state_money);
	int	 nBagDiamond;
	INT64	n64BagSilver;
	INT64	n64BagBindSilver;
	INT64	n64WareSilver;
	int	 nBaiBaoYuanBao;
	int	 nExchangeVolume;
	//int	nCurClanCon[ECLT_NUM];
	int   n32Exploit;
};
//金钱变化
struct NET_SIS_bag_silver : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_bag_silver);
	INT64		n64CurSilver;		// 当前总的金钱
	INT64		n64ChangeSilver;	// 变化的金钱(正: 获得; 负: 失去)
	int		bBind;				// 0 为非绑定币1 为绑定币
};
//背包元宝变化
struct NET_SIS_baibao_yuanbao : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_baibao_yuanbao)
	int		nCurYuanBao;		// 当前总的元宝
	int		nChangeYuanBao;		// 变化的元宝
	int		bBillYuanbao;		// 是否是充值的
	unsigned int dw_cmd_id;			//元宝来源 gx add 2014.3.21
};
//绑定元宝
struct NET_SIS_bag_yuanbao : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_bag_yuanbao);
	int  nCurYuanBao;		// 当前总的元宝
	int		nChangeYuanBao;		// 变化的元宝
};

//充值抢红包
struct NET_SIC_ChongZhi_HongBao : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_ChongZhi_HongBao)
	DWORD	dw_role_id;
	DWORD	dw_recharge_id;
};

//充值抢红包
struct NET_SIS_ChongZhi_HongBao : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_ChongZhi_HongBao)
	DWORD	dw_role_id;
	int		yuanbao;	//抢到元宝数
	bool	isFirst;	//是否第一个红包
};

struct NET_SIS_ChongZhi_HongBao_Be_Grab : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_ChongZhi_HongBao_Be_Grab)
	DWORD	dw_role_id;
	BYTE	sex;
	BYTE	vipLevel;
	wchar_t	name[X_SHORT_NAME];
};

//背包荣誉点变化
struct NET_SIS_exploits : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_exploits)
	int n32CurExploits;
	int n32ChangeExploits;
};
//使用物品
struct NET_SIC_use_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_use_item);
	float		vSrcPos[3];			//物品使用者当前坐标
	unsigned int dwTargetRoleID;		//目标ID
	INT64		n64ItemID;			//物品位ID
	unsigned int dwSerial;			//消息序列号
	unsigned char byUseType;		//使用类型 0=单个,1=批量
};

struct NET_SIS_use_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_use_item);
	unsigned int dwSrcRoleID;		//物品使用者ID
	unsigned int 	dwTarRoleID;		//目标ID
	INT64		n64ItemID;			//物品位ID
	unsigned int 	dw_data_id;			//物品TypeID
	unsigned int 	dwSerial;			//消息序列号
	int			nSpellTime;			//吟唱时间，不带吟唱的物品为
	unsigned int 	dw_error_code;		//错误代码
	bool		bInmmediate;		//是否瞬发？
	int         in_data_num;		//物品数量
};

struct NET_SIC_item_remove : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_item_remove);
	EItemConType	eConType;
	INT64			n64_serial;
};

struct NET_SIS_item_remove : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_item_remove);
	//	unsigned int			dw_error_code;
	EItemConType	eConType;
	INT64			n64_serial;
	short			n16Index;
	short			n16Num;			// 如果是可堆叠物品,则为剩余个数,为表示全部删除
	unsigned int			dwCmdID;		// 通过什么删除的,目前只用于武器修炼153 为修炼
};

struct NET_SIS_role_putdown_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_putdown_item);
	INT64	n64_serial;	// 物体序列号
	unsigned int dw_error_code;	//返回错误码
};

struct NET_SIC_role_putdown_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_role_putdown_item);
	INT64	n64_serial;	// 物体序列号
	char by_type;	// 容器类型0 包裹1 人物
	unsigned int dw_safe_code;
};

// 装备
struct NET_SIC_equip : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_equip);
	EEquipPos	ePosDst;		// 装备部位(注意戒指装备部位，客户端需做判断处理)
	INT64		n64_serial;		// 装备位序列号
};

// 反回装备结果，相关影响由其他消息处理
struct NET_SIS_equip : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_equip);
	unsigned int 	dw_error_code;
	INT64		n64_serial;		// 装备位序列号
};

struct NET_SIC_unequip : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_unequip);
	short		n16PosDst;		// 待放入背包中位置
	short		n16Dummy;		// 对齐用
	INT64		n64_serial;		// 装备位序列号
};

struct NET_SIS_unequip : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_unequip);
	unsigned int 	dw_error_code;
	INT64		n64_serial;		// 装备位序列号
};
//功法穿脱相关的消息 gx add 2013.12.24
// 装备
struct NET_SIC_equip_kungfu : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_equip_kungfu);
	EKungfuEquipPos	ePosDst;		// 装备部位
	INT64		n64_serial;		// 装备64位序列号
};

// 反回装备结果，相关影响由其他消息处理
struct NET_SIS_equip_kungfu : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_equip_kungfu);
	unsigned int	dw_error_code;
	INT64		n64_serial;		// 装备64位序列号
};

struct NET_SIC_unequip_kungfu : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_unequip_kungfu);
	short		n16PosDst;		// 待放入背包中位置
	short		n16Dummy;		// 对齐用
	INT64		n64_serial;		// 装备64位序列号
};

struct NET_SIS_unequip_kungfu : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_unequip_kungfu);
	unsigned int dw_error_code;
	INT64		n64_serial;		// 装备64位序列号
};
//end by gx 
struct NET_SIS_synchronize_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_synchronize_item);
	INT64	n64_serial;			// 物体序列号
	unsigned int dwPutDownUnitID;	// 掉落物品的UintID
	unsigned int dwOwnerID;			// 归属角色
	unsigned int dwTeamID;			// 归属小队ID
	unsigned int IsDrop;
	//unsigned int dwGroupID;			// 归属团队ID
	unsigned int dw_data_id;			// 类型
	unsigned short	n_num;				// 数目
	float vPos[3];				// 物品掉落位置
	//int bKilled;			// 怪物是否被击杀或玩家死亡
	char byQuality;			// 品质
	tagDWORDTime	dwDropTime;	//物体掉落时间
};

struct NET_SIS_role_ground_item_disappear : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_ground_item_disappear);
	INT64	n64_serial[1];	// 物体序列号
};

#define Max_Pickup 5
//-----------------------------------------------------------------------------
//	拾取物品
//-----------------------------------------------------------------------------
struct NET_SIC_role_pickup_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_role_pickup_item);
	INT64 n64_serial[Max_Pickup];		//物品ID 
};

struct NET_SIS_role_pickup_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_pickup_item);
	unsigned int dw_role_id;			// 拾取人ID
	INT64 n64_serial;
	unsigned int dw_error_code;		// 返回错误码
};
//物品增加
struct NET_SIS_item_add : public s_net_cmd//添加堆叠物协议
{
	DECL_NETCMD(NET_SIS_item_add);
	//	unsigned int			dw_error_code;
	INT64			n64_serial;
	EItemConType	eConType;
	short			n16Index;		// 容器中位置下标
	short			n16Num;			// 如果是可堆叠物品,则为该堆总数
	bool			bOverlap;		// 重叠物品是否放入已有堆，如果true，需考虑释放内存
	EItemCreateMode	eCreateMode;	// 物品&装备生成方式 gx add 为了识别抽奖得到的物品
};

//强化
struct NET_SIC_shengxing : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_shengxing);
	INT64	n64SerialEquip;		//装备
	BOOL	bIsYuanBao;			//是否使用元宝
	int	nIsWendingStone;	//稳定石 0否1是
	//unsigned int dwStuffID;	//强化石
	//int nStuffNum;				//强化石数量
	//unsigned int dwNPCID;			//NPCID
	//INT64	n64ShengXingItem;	//升品物品(强化石)
	//int bBind;				//是否是绑定的
	//INT64	n64BaohuItem;		//保护石
	//unsigned int dw_safe_code;
};

struct NET_SIS_shengxing : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_shengxing);
	INT64	n64SerialEquip;
	INT64   n64NewSerialEquip;
	unsigned int dw_error_code;
};

struct NET_SIS_equip_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_equip_change);
	INT64			n64_serial;
	tagEquipSpec	equipSpec;
};

// 武器鉴定
struct NET_SIC_identify_equip : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_identify_equip);
	INT64		n64SerialReel;	// 鉴定卷轴
	INT64		n64SerialEquip;	// 装备
};

// 武器鉴定
struct NET_SIS_identify_equip : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_identify_equip);
	unsigned int		dw_error_code;
	INT64		n64_serial;
};

//开凿
struct NET_SIC_chisel : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_chisel);
	INT64				n64SrcItemID;	//装备的ID
	unsigned int dwNPCID; 		//NPCID
	INT64				n64StuffID;		//打孔石
};

struct NET_SIS_chisel : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_chisel);
	unsigned int dw_error_code;	//返回码
};

struct NET_SIC_inlay : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_inlay);
	INT64				n64DstItemID;	//装备的ID
	INT64				n64SrcItemID[MAX_EQUIPHOLE_NUM];	//宝石的ID
};

struct NET_SIS_inlay : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_inlay);
	unsigned int dw_error_code;	//返回码
};

//拆嵌
struct NET_SIC_unbeset : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_unbeset);
	INT64		n64SerialEquip;		//装备
	unsigned int dwNPCID;			//NPCID
	unsigned char		byUnBesetPos;		//需要拆除的镶嵌物品位置
	//INT64		n16SerialUnBesetItem;		//拆嵌物品
	//INT64		n64StuffID;		//保底物品
	//BYTE		byYuanBaoNum;	//元宝数量
};
//摘除镶嵌
struct NET_SIS_unbeset : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_unbeset);
	unsigned int dw_error_code;
};
//替换装备时的宝石替换
struct NET_SIC_gem_exchange:public s_net_cmd{
	DECL_NETCMD(NET_SIC_gem_exchange);
	INT64 src_Equip_Id;
	INT64 desc_Equip_Id;
};

struct NET_SIS_gem_exchange:public s_net_cmd{
	DECL_NETCMD(NET_SIS_gem_exchange);
	unsigned int dw_error_code;
};
// 装备变换
struct NET_SIC_equip_type_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_equip_type_change);
	INT64		n64EquipID;	
	unsigned int		n64Item1;
	unsigned int		n64Item2;
	unsigned int		n64Item3;
};

struct NET_SIS_equip_type_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_equip_type_change);
	INT64		n64EquipID;	
	unsigned int dw_error_code;
};

struct NET_SIC_bag_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_bag_extend);
	int		n32_num;		// 开启数量
	int 	n32_type;		// 0 包裹 1 仓库
};

struct NET_SIS_bag_extend : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_bag_extend);
	unsigned int	dw_error_code;
	int		n32_type;		// 0 包裹 1 仓库
	short	n16BagNum;
};

//struct NET_SIC_learn_skill : public s_net_cmd
//{
//	DECL_NETCMD(NET_SIC_learn_skill);
//	unsigned int	dwSkillID;				// 技能ID（大ID）
//	unsigned int	dwNPCID;				// NPC的全局ID（如果不是通过NPC则为INVALID_VALUE）
//	INT64	n64ItemID;				// 技能书物品的64位ID（如果不是通过技能书，则为INVALID_VALUE）
//};
//
//struct NET_SIS_learn_skill : public s_net_cmd
//{
//	DECL_NETCMD(NET_SIS_learn_skill);
//	unsigned int	dw_error_code;			// 错误码
//	unsigned int	dwSkillID;				// 技能ID（大ID）
//};
//----------------------------------------------------------------------------
// 崭新度更新
//----------------------------------------------------------------------------
struct NET_SIS_newess_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_newess_change);
	INT64		n64EquipSerial;		//装备ID
	int	 nAttackTimes;		//装备当前使用次数
};

// 使用祝福油
struct NET_SIC_use_luck_you : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_use_luck_you)
	INT64		n64Item;
	unsigned char	byType; //类型 0=单个使用 1=批量使用
};

struct NET_SIS_use_luck_you : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_use_luck_you)
	signed char	ch_CurLuck;//当前武器幸运值
	signed char	ch_ChangeLuck;//幸运变化值
	unsigned int dw_error_code;
};

// 批量使用好人卡
struct NET_SIC_AllUse_Good_Man_Card: public s_net_cmd
{
	DECL_NETCMD(NET_SIC_AllUse_Good_Man_Card)
	INT64		n64Item; //物品流水号
};

// 批量使用好人卡结果
struct NET_SIS_AllUse_Good_Man_Card: public s_net_cmd
{
	DECL_NETCMD(NET_SIS_AllUse_Good_Man_Card)
	unsigned int dwErrorCode; //错误代码
	int dwRedPKValue;//减少的PK值
};

//----------------------------------------------------------------------------
// 使用修复神水
//----------------------------------------------------------------------------
struct NET_SIC_abrase_stone : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_abrase_stone)
	INT64	n64AbraserSerial;	// 磨石64位id
	//INT64	n64WeaponSerial;	// 武器64位id
};

struct NET_SIS_abrase_stone : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_abrase_stone)
	unsigned int	dw_error_code;
	//INT64	n64WeaponSerial;	// 武器64位id
	//INT		nAttackTimes;		// 更新后武器使用次数
};


// 功法升级
struct NET_SIC_Kungfu_Exp_Up:public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Kungfu_Exp_Up)
	INT64	n64KungfuSerial_main;		//待升级功法ID
	INT64	n64KungfuSerial_back;		//被吃的功法ID
	unsigned char uType;//融合类型：0，背包内普通融合。1，功法槽内的功法融合背包内的功法。2，功法槽内的功法被背包内的功法融合掉；这个判断由客户端判断
};
struct NET_SIS_Kungfu_Exp_Up:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Kungfu_Exp_Up)
	INT64	n64KungfuSerial_main;		//主功法ID
	INT64	n64KungfuSerial_back;		//被吞噬的功法ID
	unsigned char uType;
	unsigned int	dwErrCode;//错误码
};
//玩家元宝消费 gx add 2014.2.4
struct NET_SIS_totalconsume_yuanbao : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_totalconsume_yuanbao)
	int	   nTotalYBConsume;	// 当前总的元宝消耗数
};
//摇钱树活动期间充值数变化 gx add 2014.2.4
struct NET_SIS_recharge_feedback : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_recharge_feedback)
	INT64		nCurRecharge;		// 活动期间的充值数
	int			nCurRechargeFeedback;		// 活动期间的充值返利数
	int			nFeedback_Times;		//当前已摇的次数
};


//装备分解
struct decomposeItem
{
	INT64 itemid;
	int itemnum;
	decomposeItem():itemid(0),itemnum(0)
	{
	
	}
};

struct sDecomposeBind : public decomposeItem
{
	bool isBind;
	sDecomposeBind():isBind(false)
	{
	}
};

#define  ITEMMAX 30


//开始锻造
struct NET_SIC_Forging_begin : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Forging_begin)
	INT	forgingId;	//锻造id
};

//锻造结果
struct NET_SIS_Forging_result : public s_net_cmd
{  
	DECL_NETCMD(NET_SIS_Forging_result)
	INT64	FinalId;//最后生成id
	DWORD	result;//锻造结果
};

//开始分解
struct NET_SIC_Decompose_begin : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Decompose_begin)
	INT64 decomposeid[1];	//分解装备
};

//分解完成
struct NET_SIS_Decompose_result : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Decompose_result)
	DWORD			errorInfo;
	decomposeItem	data_infos[1];	//分解完成后的奖励
};

//书页兑换
struct NET_SIC_Convert_Exchange : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Convert_Exchange)
	unsigned int	exchangeId;
	unsigned int	npcId;
};

//书页兑换
struct NET_SIS_Convert_Exchange_Result : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Convert_Exchange_Result)
	DWORD			dwError;
};

//装备指定属性洗炼
struct NET_SIC_Equip_Fusion_Specify : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Equip_Fusion_Specify)
		INT64	n64_serial;//指定属性装备的索引
	bool	b_autoBuy;
	BYTE	by_att[MAX_RAND_ATT];
};

struct NET_SIS_Equip_Fusion_Specify : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Equip_Fusion_Specify)
	INT64	n64_serial;//指定属性装备的索引
	DWORD	dwError;
};

struct sEquipRecastDiscount
{
	DWORD	dwId;
	BYTE	byDiscunt;			//折扣
	DWORD	dwStartTime;
	DWORD	dwEndTime;
	bool    b_IsOpen;			// 1 是开 0 是关
};

//装备重铸
struct NET_SIC_Equip_Recast : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Equip_Recast)
	INT64	n64_serial;		//重铸装备的索引
	bool	bDiscount;		//是否折扣
};

struct NET_SIS_Equip_Recast : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Equip_Recast)
	DWORD	dwError;
	INT64	n64_serial;		//重铸装备的索引
	INT64	n64_newSerial;	//重铸新装备的索引
	sEquipRecastDiscount	info;
};

//重铸活动开启条件
struct NET_SIS_Equip_Recast_Activity : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Equip_Recast_Activity)
	bool	isOpen;				//是否开启
	INT		nLevel;				//开启需要等级
	INT		nRecharge;			//开启需要充值数
	BYTE	byBehavior;			//行为条件
	BYTE	byCondition[3];		//
	BYTE	byConditionNum[3];	//开启需要的装备数量
	DWORD	dwStartTime;
	DWORD	dwEndTime;
};

//重铸折扣装备列表
struct NET_SIC_Equip_Recast_Discount : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Equip_Recast_Discount)
};

//重铸折扣装备列表
struct NET_SIS_Equip_Recast_Discount : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Equip_Recast_Discount)
	INT16					n16Num;
	sEquipRecastDiscount	info[1];
};

//重铸活动开启条件和折扣装备列表
struct NET_SIS_Equip_Recast_All_Info : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Equip_Recast_All_Info)
	bool	isOpen;				//是否开启
	INT		nLevel;				//开启需要等级
	INT		nRecharge;			//开启需要充值数
	BYTE	byBehavior;			//行为条件
	BYTE	byCondition[3];		//
	BYTE	byConditionNum[3];	//开启需要的装备数量
	DWORD	dwStartTime;
	DWORD	dwEndTime;
	INT16					n16Num;
	sEquipRecastDiscount	info[1];
};

struct SSuitNumInfo
{
	DWORD		dwSuitID;
	char		n8Num;
};

// 玩家登陆时，套装初始化信息
struct NET_S2C_Suit_Init_Info : public s_net_cmd
{
	DECL_NETCMD(NET_S2C_Suit_Init_Info)

	char            nCount;
	SSuitNumInfo    sSuitNumInfo[1];
};

// 套装个数改变
struct NET_SIS_suit_num : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_suit_num)

	DWORD		dwSuitID;
	char		n8Num;
	char		n8Dummy[3];
};


//功法锁定
struct NET_SIC_GongFa_Lock : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_GongFa_Lock)
	INT64	n64_serial;		//功法的索引
	bool	bLock;			//是否锁定
};

//功法锁定
struct NET_SIS_GongFa_Lock : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_GongFa_Lock)
	DWORD	dwError;
	INT64	n64_serial;		//功法的索引
	BYTE	byLock;			//是否锁定
};

#pragma pack(pop)


#endif //PACKAGEPROTO_H