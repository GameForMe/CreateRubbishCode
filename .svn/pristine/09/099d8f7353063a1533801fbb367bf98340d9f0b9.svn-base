#ifndef UPDATEUI_H
#define UPDATEUI_H

//#include "UpdateManager.h"
#include "AppDelegate.h" 
#include "ResUpdateManager.h"

#include "cocos2d.h"
#include "cocos-ext.h"

#include "ProgressBar.h"
#include <math.h>
using namespace cocos2d;
using namespace cocos2d::extension;

//class ProgressBar;
class UpdateUI;

//extern const char* serverlistDownFileName;

//class UpMgrDelegateProtocol : public UpdateManagerDelegateProtocol
//{
//public:
//	UpMgrDelegateProtocol(UpdateUI* pUI)
//	{
//		m_pUI = pUI;
//	}
//
//	void SetUpManger(UpdateManager* pManager)
//	{
//		m_pUpManager = pManager;
//	}
//
//	virtual void onError(std::string& errorCode);
//	/** 报告进度 会传入已经完成字节数和总共多少字节数的. (也可通过 getCompleteCount 和 getTotalCount 获取 ) */
//	virtual void onProgress(long complete, long total);
//	/** 更新完成, 会传入一个bool值代表该版本是否需要重启生效. */ 
//	virtual void onSuccess(bool needToRestart = false);
//
//private:
//	UpdateUI* m_pUI;
//	UpdateManager* m_pUpManager;
//};

class UpdateDelegateProtocol;

class UpdateUI 	: public CCLayer
    , public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	UpdateUI():_expProgress(NULL){}
	~UpdateUI(){CC_SAFE_DELETE(_expProgress);}
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(UpdateUI, create);
	//static UpdateUI *getInstance();
	static UpdateUI* Init(CCScene* pScene, AppDelegate* pAppDelegate);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	void onOKBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCancelBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	void SetScene(CCScene* pScene)
	{
		m_pScene = pScene;
	}
	CCScene* GetScene()
	{
		return m_pScene;
	}

	void SetProgressZHJL( int cur,double totalToDownload,double nowDownloaded);
	void SetProgress( long cur, long max );
    void onFirstCopy(int type);
    void onDownloadBegin();
	void onDownLoadOK();
	void onOneUpdate();
	void onSuccess();
	void onError(ResUpdateManager::ErrorCode errorCode);

	void SetAppDelegate(AppDelegate* pAppDelegate)
	{
		m_AppDelegate = pAppDelegate;
	}

	void startupdate(float fdt);
	void startFileCheck(float fdt);
	void copySOFile(float fdt);

	void RunGame();	//启动游戏
	void RestartGame();	//退出游戏
	//void checkRomSpace();//进入设置软件容量界面
	void DownLoadFullPackage(); //下载整包
	//void checkNetWork();//进入检查网络界面
	void showTip(int n,  const std::string &string );
	void hideTip();

	std::set<std::string> m_loadSpriteSheet;
	CCLabelTTF* m_pNewVersion;
	CCLabelTTF* m_pNowVersion;
	CCLabelTTF* m_pInfo;
	float convertCapacityIntoTheAppropriateUnits(long sizeOfUpdateFile);
	long convertCapacityIntoKB(long sizeOfUpdateFile);
	const char* displayBinaryUnit(int kindOfCountSize);
	//新的更新界面申明变量名
	//检查文件差异框
	CCSprite* m_infoShowSprite; //检查文件差异sprite
	CCLabelTTF* m_infoShowLabel; //lable
	CCControlButton* m_infoBtnOk;
	//下载进度框
	CCSprite* m_barSprite; //进度条界面
	CCSprite* m_barBox;		//进度框
	CCSprite* m_barVal;		//进度条
	CCLabelTTF* m_barBanben; //版本
	CCLabelTTF* m_barFileSize; //文件大小
	CCLabelTTF* m_barPercent;  //百分比
	CCLabelTTF* m_barTitle; //版本
	ProgressBar* _expProgress;
private:
	CCProgressTimer* m_pUpdateBar;

	CCScene* m_pScene;

	//UpdateManager* m_pUpdateMgr;
	//UpMgrDelegateProtocol* m_pMgrDelegate;

	ResUpdateManager* m_pResUpdateMgr;
	UpdateDelegateProtocol* m_pMgrDelegate;

	AppDelegate* m_AppDelegate;
	int kindOfCountSize;//容量的类型
	static const int GB_Size = 1024 * 1024 * 1024;
	static const int MB_Size = 1024 * 1024;
	static const int KB_Size = 1024;
	
};

class UpdateDelegateProtocol :public ResUpdateManagerDelegateProtocol
{
public:
	UpdateDelegateProtocol();
	~UpdateDelegateProtocol();
    
	void setUI(UpdateUI* pUI)
	{
		m_pUI = pUI;
	}

	void update();

	void setFtpInfo(const char* user, const char* addr1, const char* addr2, int t);

	virtual void onError(cocos2d::extension::ResUpdateManager::ErrorCode errorCode);
	virtual void onProgress(int percent,double totalToDownload,	double nowDownloaded);
	virtual void onSuccess();
    virtual void onFirstUncompress();
    virtual void onOneUpdate();
    virtual void onDownloadBegin();
    virtual void onDownloadOK();
    virtual void onDelTempData();
    virtual void onUpdateType(int t);
    void doUpdateUILayer();
    void doManiUILayer();
    
	void retrydoUpdate();
private:
	cocos2d::extension::ResUpdateManager* getAssetsManager();
	void createDownloadedDir();

	std::string userName;
	std::string addrZip;
	std::string addrVer;
	std::string pathToSave;
	int nTime;

	UpdateUI* m_pUI;
};

#endif
