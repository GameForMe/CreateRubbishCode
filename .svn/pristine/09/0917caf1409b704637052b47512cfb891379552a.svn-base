#ifndef REWARDQUESTUI_H
#define REWARDQUESTUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
#include "DropDragDelegate.h"
#include "RewardQuestMgr.h"
#include "RewardGotoItem.h"

using namespace cocos2d;
using namespace cocos2d::extension;

#define REWARD_ITEM_SPACE 6
#define REWARD_ITEM_WIDTH 459
#define REWARD_ITEM_HEIGHT 59
#define REWARD_ALREADY_ACCEPT 88 //“已接受”这三个字的tag
class RewardUiItemFrame;
class FrameSprite;

class RewardQuestItem 
{
	friend class RewardUiItemFrame;

public:
	RewardQuestItem();
	~RewardQuestItem();
	void initAccpetReward();
	RewardUiItemFrame *getUiFrame() { return _uiFrame; }
	void setPosition(const CCPoint &pos);

	void addSelected();
	void removeSelected();

	void updateData(RewardQuestProto* rewardQuest);

	RewardQuestProto *getRewardQuest(){return _rewardQuest;};
	bool isSelect()
	{
		return _isSelect;
	}
private:
	RewardUiItemFrame *_uiFrame;
	std::set<std::string> _usedPlistFile;
	RewardQuestProto *_rewardQuest;
	CCSprite *describeSprite;
	CCSpriteFrame* Frame;
	bool _isSelect;
};

class RewardUiItemFrame 
	: public CCSprite
	, public cocos2d::extension::CCBSelectorResolver
	, public CCTouchDelegate
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class RewardQuestItem;
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(RewardUiItemFrame, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void onAcceptBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent); 

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	virtual void onEnter();
	virtual void onExit();
protected:
	RewardQuestItem *_item;
	CCPoint _stPt;
};

class RewardQuestItemLoader : public CCSpriteLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(RewardQuestItemLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(RewardUiItemFrame);
};


class RewardQuestUiLayer;
class RewardQuestMgr;
class RewardQuestUi:public UiInterface
{
public:
	RewardQuestUi();
	virtual ~RewardQuestUi();
	virtual CCNode *openUi();
	virtual void closeUI();
	RewardQuestUiLayer *getUiLayer();
	void updateData(long long leftTime);
	void updateGotoData(int questID,int number);
	void CreateGotoItem();
	void updateDetail(RewardQuestProto* rewardQuest);
};

class RewardQuestUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class RewardQuestUiLayer;
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(RewardQuestUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void updateDetail(RewardQuestProto* rewardQuest);
	void updateData(long long leftTime);

	void addContentItem(CCNode *item);
	void removeContentItem(CCNode *item);
	float getContentLayerHeight();
	CCNode *getContainer();
	void resetScrollPosition();

	void oncloseRewardPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void oncolseHelpBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onviewHelpBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void giveupBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void updateBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onSplitItemMessageBoxNo();
	void onSplitItemMessageBoxYes();

	virtual void onEnter();
	virtual void onExit();

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	void updateGotoData(int questID,int number);

	void removeGotoItem();

	void update(float dt);

	void setDescribeLabel(bool isShow);

	void setGiveupButton(bool isShow);

	bool isGiveupButtonShow()
	{
		return _giveupButon->isVisible();
	}
	std::list<RewardQuestItem*> getItemList()
	{
		return _items;
	};
	RewardGotoItem* getGotoItem()
	{
		return _gotoItem;
	}
	CCSprite* getFrame()
	{
		return _frame;
	}
	void CreateGotoItem()
	{
		_gotoItem = new RewardGotoItem();
	}
private:
	void addItem(RewardQuestItem *item);
	void removeItem(unsigned long itemId);
	void removeAllItem();
	void updateList();

	long long _leftTime;

	//FrameSprite *heleContent;
	CCSprite *_frame;
	CCLabelBMFont *_zhandouli;
	CCNode *_contentLayer;
	//CCScrollView *scrollView;
	CCScrollView *_scrollView;
	CCNode *_container;
	//CCNode *_gotoContainer;
	LabelFT *_updateTime;
	CCSprite *_describeSprite;
	//LabelFT *_acceptDescibe;
	CCControlButton *_giveupButon;
	std::set<std::string> _pBrowlist;				//保存特效名称

	typedef std::list<RewardQuestItem*> RewardQuestUiItemList;
	RewardQuestUiItemList _items;
	RewardGotoItem* _gotoItem;
};

#endif //REWARDQUESTUI_H