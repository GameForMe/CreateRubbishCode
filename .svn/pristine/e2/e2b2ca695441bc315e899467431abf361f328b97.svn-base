#ifndef STALLUI_H
#define STALLUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "DropDragDelegate.h"
#include "ItemNode.h"
#include "FrameSprite.h"
#include "VerticalList.h"
#include "ListItem.h"
#include "UiInterface.h"
#include "Stall_define.h"
using namespace cocos2d;
using namespace cocos2d::extension;

class StallUiLayer;
class f_equipment;
class f_item;
class NumKeyPadLabelDelegate;

class StallLogItem : public ListItem
{
	enum eNodeTag
	{
		NT_ItemName			= 0,
		NT_SoldTime	,
		NT_Num	,
		NT_Price			
	};

	enum eHorizonPos
	{
		HP_ItemName		= 0,
		HP_SoldTime		= 102,
		HP_Num			= 210,
		HP_Price		= 270
	};

public:
	StallLogItem();
	virtual ~StallLogItem();
	virtual CCSize getContentSize();
	void setData(const tagStallGoodsLog &stallgoodslog);
	const tagStallGoodsLog &getData() { return _stallgoodslog; }
private:
	CCLabelTTF *getLabel(eNodeTag tag);
	CCLabelTTF* createLabel(const std::string &text);
	void updateContent();
private:
	CCSize _contentSize;
	tagStallGoodsLog _stallgoodslog;
};

///////////////////////////////////////////////////////////////////
class StallUiSellSetFrame 
	: public FrameSprite
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eNodeTag
	{
		NT_ItemIcon = 0,
		NT_ItemName = 1,
		NT_ItemPrice = 2,
		NT_ItemPriceLabel = 3,
		NT_ItemCountLabel = 4,
		NT_ItemNode = 10,
	};

public:
	StallUiSellSetFrame();
	virtual ~StallUiSellSetFrame();
	CREATE_FUNC(StallUiSellSetFrame);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	virtual void onNodeLoaded(CCNode * pNode, CCNodeLoader * pNodeLoader);
	void setItemTypeId(unsigned int id);
	void setItemNum(int num);
	void setItemName(const std::string &name);
	void setPrice(int price);
	void setPackageIndex(short index);
	short getPackageIndex() { return _packageIndex; }
	void setDestIndex(short index) { _destIndex = index; }
	short getDestIndex() { return _destIndex; }
	int getPrice();
protected:
	CCNode *_inputNode;
	NumKeyPadLabelDelegate *_keypadDelegate;
	short _packageIndex;
	short _destIndex;
	int _maxPrice;

	bool b_touched;
};

class StallUiSellSetFrameLoader : public FrameSpriteLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(StallUiSellSetFrameLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(StallUiSellSetFrame);
};

//////////////////////////////////////////////////////////////////////////

class StallUiBuyFrame
	: public FrameSprite
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eNodeTag
	{
		NT_ItemIcon = 0,
		NT_ItemNameLabel = 1,
		NT_CountNode = 2,
		NT_CountLabel = 3,
		NT_AllPrice = 4,
		NT_ItemNode = 10
	};

public:
	StallUiBuyFrame();
	virtual ~StallUiBuyFrame();
	CREATE_FUNC(StallUiBuyFrame);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onNodeLoaded(CCNode * pNode, CCNodeLoader * pNodeLoader);
	void setItemTypeId(unsigned int id);
	void setItemName(const std::string &name);
	void setBuyCount(int count);
	void setBuySumPrice(int price);
	void setPrice(int price);
	void setMaxBuyCount(int count) { _maxCount = count; }
	int getBuyCount();
private:
	int _price;
	int _maxCount;
	CCNode *_inputContent;
	NumKeyPadLabelDelegate *_keypadDelegate;

	bool	b_touched;
};

class StallUiBuyFrameLoader : public FrameSpriteLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(StallUiBuyFrameLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(StallUiBuyFrame);
};

//////////////////////////////////////////////////////////////////////////

class StallStallNameFrame
	: public FrameSprite
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eNodeTag
	{
		NT_InputNode = 0
	};
public:
	CREATE_FUNC(StallStallNameFrame);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onNodeLoaded(CCNode * pNode, CCNodeLoader * pNodeLoader);
	std::string getStallName();
protected:
	CCTextFieldTTF *_inputText;
};

class StallStallNameFrameLoader : public FrameSpriteLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(StallStallNameFrameLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(StallStallNameFrame);
};

//////////////////////////////////////////////////////////////////////////

class StallUi : public UiInterface
{
public:
	virtual CCNode *openUi();
	StallUiLayer *getUiLayer();

	//设置当前所属角色的id;
	void setRoleId(unsigned int id);
	void updateData();
};

class StallUiLayer 
	: public DropDragInterface
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class StallUi;

	enum eFrameTag
	{
		FT_Main = 3,
		FT_SellSet = 0,
		FT_Buy = 1,
		FT_StallSet = 2,
		FT_StallLog = 4,
		FT_Content = 5
	};

	enum eMainFrameTag
	{
		MFT_NodeBegin = 0,
		MFT_NodeNum = 10,
		MFT_ItemPriceLabelBegin = 10,
		MFT_SelectSprite = 49,
		MFT_ItemNodeBegin = 50,
		MFT_AllPriceLabel = 20,
		MFT_StallBtn = 21,
		MFT_LogBtn = 22,
		MFT_StopStallBtn = 23,
		MFT_SiliaoBtn = 24,
		MFT_BuyBtn = 25,
		MFT_ChedanBtn = 26
	};

	enum eBtnState
	{
		BS_PreStall,
		BS_DurStall,
		BS_OtherStall
	};

public:
	StallUiLayer();
	~StallUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(StallUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();

	virtual short getItemBegin(CCTouch &touch, eGetResult &result);
	virtual short getItemEnd(CCTouch &touch, eGetResult &result, EItemConType src, short itemIndex);
	virtual bool onClicked(CCTouch &touch);
	virtual bool onDoubleClicked(CCTouch &touch) { return false; }
	virtual EItemConType getConType() { return EICT_CLIENT; }

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCloseBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCloseBtnPressed2(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCloseBtnPressed3(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onOkBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onOkBtnPressed2(bool, int);
	void onOkBtnPressed3(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void onStallBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onLogBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onStopStallBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onSiLiaoBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBuyBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChedanBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onLogOkBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onLogCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

protected:
	ItemNode *getItemNode(int tag);
	CCLabelTTF *getPriceLabel(int tag);
	int getItemUnderPoint(const CCPoint &point);
	void setRoleId(unsigned int roleId);
	void updateDisplayData();
	void showFrame(eFrameTag frame, bool show);
	void setBtnState(eBtnState state);
	void setAllPriceLabel(int price);
	void setSelectItem(short index);
	bool isLocalPlayer();
	void setListVisible(bool visible);
	//void updateData();
private:
	CCSprite *_frame;
	StallUiSellSetFrame *_sellSetFrame;
	StallUiBuyFrame *_buyFrame;
	StallStallNameFrame *_nameSetFrame;
	CCSprite *_stalllogframe;
	VerticalList<StallLogItem> *_verticalList;
	CCScrollView *_scrollView;
	CCNode *_content;
	CCPoint _pos[MFT_NodeNum];
	unsigned int _roleId;
	short _selectIndex;
};


#endif //STALLUI_H