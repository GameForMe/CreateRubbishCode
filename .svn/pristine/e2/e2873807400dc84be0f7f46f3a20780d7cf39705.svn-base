#include "NumericalIniMgr.h"
#include "CfgReader.h"
#include "LocalPlayer.h"
#include "cocos2d.h"
#include "RoleManager.h"
#include "f_util.h"
using namespace cocos2d;
//////////////////////////////////////////////////////////////////////////

NumericalIniMgr::NumericalIniMgr()
{
//#if (CC_TARGET_PLATFORM != CC_PLATFORM_ANDROID)
	std::string cfgFile = CCFileUtils::sharedFileUtils()->fullPathForFilename("Numerical.cfg");
	if(!cfgFile.compare("Numerical.cfg"))
	{
		if(f_util::MDecryptFile("Numerical.escfg", "Numerical.cfg", 0))
		{
			cfgFile = CCFileUtils::sharedFileUtils()->fullPathForFilename("Numerical.cfg");
		}
	}
	if(!cfgFile.compare("Numerical.cfg"))
	{
		if(f_util::MDecryptFile("Numerical.eccfg", "Numerical.cfg", 1))
		{
			cfgFile = CCFileUtils::sharedFileUtils()->fullPathForFilename("Numerical.cfg");
		}
	}
	if(!cfgFile.compare("Numerical.cfg"))
	{
		if(f_util::MDecryptFile("Numerical.elcfg", "Numerical.cfg", 2))
		{
			cfgFile = CCFileUtils::sharedFileUtils()->fullPathForFilename("Numerical.cfg");
		}
	}
// #else
// 	std::string cfgFile = CCFileUtils::sharedFileUtils()->getWritablePath() + "Numerical.cfg";
// #endif

	_cfg = new CFGReader3(cfgFile.c_str());
	//----------------------------------------------------------------------------------------
	//构造函数
	//装备强化所需金钱
	m_nStrengthenK = 0; 
	m_nStrengthenB = 0;

	//装备升级所需金钱
	m_nLevelUpK = 0;
	m_nLevelUpB = 0;

	//融合升级所需经验
	m_nFusionMaxExpK = 0;
	m_nFusionMaxExpB = 0;

	//被融合的装备经验
	m_fFusionExpK = 0.0f;
	m_fFusionExpB = 0.0f;

	//升阶所需融合符数量
	m_fFusionNumK = 0.0f;
	m_fFusionNumB = 0.0f;

	//升阶所需融合符单价(品质)
	m_n32FusionQuality1_YuanBao = 0; //白->绿
	m_n32FusionQuality2_YuanBao = 0; //绿->蓝
	m_n32FusionQuality3_YuanBao = 0; //蓝->紫
	m_n32FusionQuality4_YuanBao = 0; //紫->橙
	m_n32FusionQuality5_YuanBao = 0; //橙->金

	//加速融合
	m_n32FusionFastYuanBao = 0; //所需元宝
	m_dwFusionFastExp = 0; //经验基数
	m_dwFusionFastCritProb1 = 0; //暴击几率1
	m_dwFusionFastCritNum1 = 0; //暴击倍数1
	m_dwFusionFastCritProb2 = 0; //暴击几率2
	m_dwFusionFastCritNum2 = 0; //暴击倍数2

	//高级融合
	m_fFusionAdvExp = 0.0f; //经验价值 = 每一点经验需要花费 0.2元宝

	//装备洗炼
	m_n32AttrRandomYuanBao = 0; //所需元宝

	//装备升星所需金钱
	m_nStarLvUpMoneyK = 0;
	m_nStarLvUpMoneyB = 0;

	//装备升星所需星魂数量
	m_fStarLvUpNumK = 0.0f;
	m_nStarLvUpNumB = 0;

	//装备升星成功率
	m_fStarLvUpRateK = 0.0f;
	m_fStarLvUpRateB = 0.0f;

	//功法获取
	m_n64KungFuMoney = 0; //所需金币
	m_n32KungFuYuanBao = 0; //所需元宝
	m_n32KungFuOneKeyYuanBao = 0; //一键获取所需元宝

	//坐骑金币培养(金币)
	m_dwMoneyRaidCritProb = 0; //暴击几率
	m_nMoneyRaidCritNum = 0; //暴击倍数
	m_nMoneyRaidExp = 0; //经验基数
	m_n64MoneyRaidMoney = 0; //所需金币

	//坐骑快马加鞭培养(优先钻石，其次元宝)
	m_dwDiamondRaidCritProb = 0; //暴击几率
	m_nDiamondRaidCritNum = 0; //暴击倍数
	m_nDiamondRaidExp = 0; //经验基数
	m_n32DiamondRaidYuanBao = 0; //所需钻石Or元宝

	//坐骑一骑绝尘培养(元宝10次)
	m_dwYuanBao10RaidCritProb = 0; //暴击几率
	m_nYuanBao10RaidCritNum = 0; //暴击倍数
	m_nYuanBao10RaidExp = 0; //经验基数
	m_n32YuanBao10RaidYuanBao = 0; //所需元宝

	//坐骑天马行空培养(元宝100次)
	m_dwYuanBao100RaidCritProb = 0; //暴击几率
	m_nYuanBao100RaidCritNum = 0; //暴击倍数
	m_nYuanBao100RaidExp = 0; //经验基数
	m_n32YuanBao100RaidYuanBao = 0; //所需元宝

	//竞技场奖励经验
	m_fJJCRankRewardExpK = 0;
	m_fJJCRankRewardExpB = 0;
	//竞技场奖励金钱
	m_fJJCRankRewardMoneyK = 0;
	m_fJJCRankRewardMoneyB = 0;
	//竞技场奖励钻石
	m_fJJCRankRewardDiamondK = 0;
	m_fJJCRankRewardDiamondB = 0;
	//竞技场奖励等级系数
	m_JJCRankRewardLevelNumK = 0;
	m_JJCRankRewardLevelNumB = 0;
	//快速完成日常任务消耗元宝
	yuanbao = 0;
	double_yuanbao = 0;
	//行会上香
	m_Guild_donate_fund_K = 0.0f;
	m_Guild_donate_fund_B = 0.0f;
	m_Guild_donate_fund_P1 = 1;
	m_Guild_donate_fund_P2 = 1;
	m_Guild_donate_fund_P3 = 1;

	n_weapon_abrasion_times = 1;//武器使用次数/耐久
	n_equip_abrasion_times = 1;//防具使用次数/耐久

	//交易行
	m_trading_price_tax				=	0;
	m_trading_price_traing_tax		=	0.0;
	m_trading_update_up_time		=	0;
	m_trading_other_num				=	0;
	m_trading_push_max				=	8;
	m_trading_over_time_money		=	0;
	m_trading_open_level			=	0;

	m_trading_1_base					=	0;
	m_trading_1_value					=	0;
	m_trading_2_base					=	0;
	m_trading_2_value					=	0;
	m_trading_3_base					=	0;
	m_trading_3_value					=	0;
	m_trading_4_base					=	0;
	m_trading_4_value					=	0;
	m_trading_5_base					=	0;
	m_trading_5_value					=	0;
	m_trading_6_base					=	0;
	m_trading_6_value					=	0;
	m_trading_error						=	0;

	_biQiOneKeyFinishList.clear();
	_biQiFinishAllMessageList.clear();

	heart_hook_open = 0;
	n_DuoRen_Fuben_Num = 0;
	n_monster_instruct_num = 0;
	n_guild_league_time_limit = 0;
	n_guild_war_continue_time_limit = 0;
	n_guild_war_cost_money = 0;
	n_guild_diplomacy_information_limit = 0;
	n_guild_fuben_open_start_hour = 0;
	n_guild_fuben_open_start_min = 0;
	n_guild_fuben_open_end_hour = 0;
	n_guild_fuben_open_end_min = 0;
	n_guild_fuben_close_hour = 0;
	n_guild_fuben_close_min = 0;

	m_fmb_open_min_week = 0;
	m_fmb_apply_begin_week = 0;
	m_fmb_apply_begin_hour = 0;
	m_fmb_apply_end_week = 0;
	m_fmb_apply_end_hour = 0;


	max_activity_value = 0;
	//摆摊
	m_stall_price_tax				=		0;
	m_stall_info_yuanbao_max		=		0;
	m_stall_info_yuanbao_min		=		0;

	n_fire_massacre_yuanbao = 0;
	n_guard_customs_yuanbao = 0;
	n_under_palace_yuanbao = 0;
	n_under_fane_summon_boss_yuanbao = 0;
	n_boss_show_time = 0;

	//自动挂机相关
// 	auto_hang_open_flag = 0;
// 	auto_hang_time_limit = 0;
// 	auto_hang_level_limit = 0;
// 	auto_hang_free_time = 0;
}

NumericalIniMgr::~NumericalIniMgr()
{
	delete _cfg;
}

NumericalIniMgr * NumericalIniMgr::getInstance()
{
	static NumericalIniMgr instance;
	return &instance;
}

std::string NumericalIniMgr::getString( const std::string& section_, const std::string& key_, const std::string& defstr_ )
{
	return _cfg->get_profile_string(section_, key_, defstr_);
}

int NumericalIniMgr::getInt( const std::string& section_, const std::string& key_, int def_ )
{
	std::ostringstream ostr;
	ostr << def_;
	return atoi(_cfg->get_profile_string(section_, key_, ostr.str()).c_str());
}

void NumericalIniMgr::setString( const std::string& section_, const std::string& key_, const std::string& str )
{
	_cfg->set_profile_string(section_, key_, str);
}

void NumericalIniMgr::setInt( const std::string& section_, const std::string& key_, int v )
{
	std::ostringstream ostr;
	ostr << v;
	_cfg->set_profile_string(section_, key_, ostr.str());
}

void NumericalIniMgr::setInt64( const std::string& longsection_, const std::string& longkey_, INT64 longv )
{
	std::ostringstream ostr;
	ostr << longv;
	_cfg->set_profile_string(longsection_, longkey_, ostr.str());
}

INT64 NumericalIniMgr::getInt64( const std::string& longsection_, const std::string& longkey_, INT64 longdef_ )
{
	std::ostringstream ostr;
	ostr << longdef_;
#ifdef WIN32
	return _atoi64(_cfg->get_profile_string(longsection_, longkey_, ostr.str()).c_str());
#else
	return atoll(_cfg->get_profile_string(longsection_, longkey_, ostr.str()).c_str());
#endif
}

float NumericalIniMgr::getFloat( const std::string& longsection_, const std::string& longkey_, INT64 longdef_ )
{
	std::ostringstream ostr;
	ostr << longdef_;
#ifdef WIN32																																    
	return atof(_cfg->get_profile_string(longsection_, longkey_, ostr.str()).c_str());
#else
	return atof(_cfg->get_profile_string(longsection_, longkey_, ostr.str()).c_str());
#endif
}

//根据系数类型获取系数
float NumericalIniMgr::GetFusionNumerical( EItemQuality eQuality, tagFusionNumerical eFN )
{
	float nResult = 0.0f;
	nResult = 999.0;
	switch( eQuality )
	{
	case EIQ_Quality0: //白
		switch( eFN )
		{
		case EFN_Exp:		//经验系数
			nResult = 1.0;
			break;
		case EFN_Decompose: //分解系数
			nResult = 1.0;
			break;
		case EFN_Num:		//数量系数
			nResult = 1.0;
			break;
		}
		break;
	case EIQ_Quality1: //绿
		switch( eFN )
		{
		case EFN_Exp:		//经验系数
			nResult = 2.0;
			break;
		case EFN_Decompose: //分解系数
			nResult = 1.5;
			break;
		case EFN_Num:		//数量系数
			nResult = 1.0;
			break;
		}
		break;
	case EIQ_Quality2: //蓝
		switch( eFN )
		{
		case EFN_Exp:		//经验系数
			nResult = 4.0;
			break;
		case EFN_Decompose: //分解系数
			nResult = 2.0;
			break;
		case EFN_Num:		//数量系数
			nResult = 1.0;
			break;
		}
		break;
	case EIQ_Quality3: //紫
		switch( eFN )
		{
		case EFN_Exp:		//经验系数
			nResult = 8.0;
			break;
		case EFN_Decompose: //分解系数
			nResult = 2.5;
			break;
		case EFN_Num:		//数量系数
			nResult = 1.0;
			break;
		}
		break;
	case EIQ_Quality4: //橙
		switch( eFN )
		{
		case EFN_Exp:		//经验系数
			nResult = 15.0;
			break;
		case EFN_Decompose: //分解系数
			nResult = 3.0;
			break;
		case EFN_Num:		//数量系数
			nResult = 1.0;
			break;
		}
		break;
	case EIQ_Quality5: //金
		switch( eFN )
		{
		case EFN_Exp:		//经验系数
			//满品不需经验系数了
			nResult = 0.0;
			break;
		case EFN_Decompose: //分解系数
			nResult = 3.5;
			break;
		case EFN_Num:		//数量系数
			//满品不需要数量系数了
			nResult = 1.0;
			break;
		}
		break;
	}
	return nResult;
}

//方程方法开始
//获取装备强化所需金币(加载)
INT64 NumericalIniMgr::GetEquipStrengthenMoney( unsigned char byMinEquipLv )//已经替换成referLv
{
	//公式：k*装备等级+b
	int nK =  GetStrengthenK();
	int nB =  GetStrengthenB();

	return nK * byMinEquipLv + nB;
}

//获取装备升级所需金币(加载)
INT64 NumericalIniMgr::GetEquipLevelUpMoney( unsigned char byMinEquipLv )//已经替换成referLv
{
	//公式：k * 装备等级 + b
	int nK =  GetLevelUpK();
	int nB =  GetLevelUpB();

	return nK * byMinEquipLv + nB;
}

//获取装备融合最大经验值(加载)
unsigned int NumericalIniMgr::GetEquipFusionMaxExp( unsigned char byMinEquipLv, EItemQuality eQuality )//已经替换成referLv
{
	//经验上限 公式：（k * 装备等级 + b）* 经验系数
	int nK = GetFusionMaxExpK();
	int nB = GetFusionMaxExpB();
	float fExp = GetFusionNumerical(eQuality, EFN_Exp); //经验系数
	return (nK * byMinEquipLv + nB) * fExp;
}

//获取装备分解所获得的经验
unsigned int NumericalIniMgr::GetEquipFusionDecompose( unsigned char bySrcMinEquipLv, unsigned char byUseMinEquipLv, EItemQuality eQuality, EItemQuality eUseQuality )//已经替换成referLv
{
	float nK =  GetFusionExpK();
	float nB =  GetFusionExpB();

	unsigned int dwMaxExp = GetEquipFusionMaxExp(byUseMinEquipLv, eUseQuality);
	//BaseExp=(k * 被融合的装备等级 + b) * 融合升级经验(dwMaxExp) * 分解系数
	float fDecompose = GetFusionNumerical(eQuality, EFN_Decompose); //分解系数
	int nBaseExp = int((nK * byUseMinEquipLv + nB) * dwMaxExp * fDecompose); //基础经验
	//如果原料装备lv > 升级装备Lv 则直接 = BaseExp
	if( byUseMinEquipLv > bySrcMinEquipLv )
		return nBaseExp;
	else
	{
		//否则分解经验= BaseExp + BaseExp *（原料装备Lv-升级装备lv）* 5%
		nBaseExp = nBaseExp + nBaseExp * (byUseMinEquipLv - bySrcMinEquipLv) * 0.05;
		//如果装备等级差过大产生负数，则只给点经验
		if( nBaseExp <= 0 )
			nBaseExp = 1;
		return nBaseExp;
	}
}

//获取装备升阶所需物品数量
signed int NumericalIniMgr::GetEquipFusionLvUpItemNum( unsigned char byMinEquipLv, EItemQuality eQuality )//已经替换成referLv
{
	//融合符数量 =（k * 装备等级 + b）* 数量系数
	float nK = GetFusionNumK();
	float nB = GetFusionNumB();
	float fNum = GetFusionNumerical(eQuality, EFN_Num);
	return ( nK * byMinEquipLv + nB ) * fNum;
}

//根据装备升阶所需物品数量获取所需元宝
signed int NumericalIniMgr::GetEquipFusionLvUpYuanBao(EItemQuality eQuality, signed int n32NeedCount )
{
	//所需元宝 = 融合符单价 * 所需融合符数量
	signed int n32YuanBao = 999;
	switch( eQuality )
	{
	case EIQ_Quality0: //白->绿
		n32YuanBao = GetFusionQuality1_YuanBao();
		break;
	case EIQ_Quality1: //绿->蓝
		n32YuanBao = GetFusionQuality2_YuanBao();
		break;
	case EIQ_Quality2: //蓝->紫
		n32YuanBao = GetFusionQuality3_YuanBao();
		break;
	case EIQ_Quality3: //紫->橙
		n32YuanBao = GetFusionQuality4_YuanBao();
		break;
	case EIQ_Quality4: //橙->金
		n32YuanBao = GetFusionQuality5_YuanBao();
		break;
	}
	return n32YuanBao * n32NeedCount;
}

//获取装备升星所需金币
INT64 NumericalIniMgr::GetEquipStarLevelUpMoney( unsigned char byMinEquipLv )//已经替换成referLv
{
	//公式：k * 装备等级 + b
	int nK =  GetStarLvUpMoneyK();
	int nB =  GetStarLvUpMoneyB();

	return nK * byMinEquipLv + nB;
}

//获取装备升星所需星魂数
signed int NumericalIniMgr::GetEquipStarLevelUpItemNum( unsigned char byMinEquipLv, int nStarLv )//已经替换成referLv
{
	//公式：k * 装备等级 + b
	float nK = GetStarLvUpNumK();
	int nB =  GetStarLvUpNumB();

	return ( nK * byMinEquipLv + nB ) * GetEquipLevelUpNumerical( 0, nStarLv );
}

//获取装备升星成功率
unsigned int NumericalIniMgr::GetEquipStarLevelUpRate( unsigned char byMinEquipLv, int nStarLv )//已经替换成referLv
{
	//公式：k * 装备等级 + b
	float nK =  GetStarLvUpRateK();
	float nB =  GetStarLvUpRateB();

	return (nK * byMinEquipLv + nB) * GetEquipLevelUpNumerical( 1, nStarLv ) * 100;
}

//获取竞技场奖励经验
INT64 NumericalIniMgr::GetJJCRankRewardExp( int nRank, int nLevel )
{
	//公式：( ( k * 排名 ) + b ) * ( 等级系数k * 等级 + 等级系数b )
	float fK = GetJJCRankRewardExpK();
	float fB = GetJJCRankRewardExpB();

	float fK1 = GetJJCRankRewardLevelNumK();
	float fB1 = GetJJCRankRewardLevelNumB();

	return ((fK * nRank) +fB) * (fK1 * nLevel + fB1);
}

//获取竞技场奖励金币
int NumericalIniMgr::GetJJCRankRewardMoney( int nRank, int nLevel )
{
	//公式：( ( k * 排名 ) + b ) * ( 等级系数k * 等级 + 等级系数b )
	float fK = GetJJCRankRewardMoneyK();
	float fB = GetJJCRankRewardMoneyB();

	float fK1 = GetJJCRankRewardLevelNumK();
	float fB1 = GetJJCRankRewardLevelNumB();

	return ((fK * nRank) +fB) * (fK1 * nLevel + fB1);
}

//获取竞技场奖励钻石
int NumericalIniMgr::GetJJCRankRewardDiamond( int nRank, int nLevel )
{
	//公式：( ( k * 排名 ) + b ) * ( 等级系数k * 等级 + 等级系数b )
	float fK = GetJJCRankRewardDiamondK();
	float fB = GetJJCRankRewardDiamondB();

	float fK1 = GetJJCRankRewardLevelNumK();
	float fB1 = GetJJCRankRewardLevelNumB();

	return ((fK * nRank) +fB) * (fK1 * nLevel + fB1);
}

void NumericalIniMgr::Init()
{
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
	{
		//[bing] 如果开着界面强关LP会先于HookSetUi释放 所以如果为NULL就不要存了表示是强关
		return;
	}

	//unsigned int roleID = ploc->getId();
	std::stringstream ss;
	ss<<"equip_strengthen_money";
	//装备强化所需金钱
	m_nStrengthenK = getInt(ss.str(),"k",1233);
	m_nStrengthenB = getInt(ss.str(),"b",267);
	ss.clear();
	ss.str("");
	ss<<"equip_level_up_money";
	//装备升级所需金钱
	m_nLevelUpK = getInt(ss.str(),"k",8000);
	m_nLevelUpB = getInt(ss.str(),"b",-300000);
/*
	ss.clear();
	ss.str("");
	ss<<"equip_level_up_return_money";
	//装备升级返还金钱
	m_nLevelUpReturnMoneyK = getInt(ss.str(),"k",76);
	m_nLevelUpReturnMoneyB = getInt(ss.str(),"b",424);
*/
	ss.clear();
	ss.str("");
	ss<<"equip_fusion_level_up_exp";
	//融合升级所需经验
	m_nFusionMaxExpK = getInt(ss.str(),"k",50);
	m_nFusionMaxExpB = getInt(ss.str(),"b",450);
	ss.clear();
	ss.str("");
	ss<<"equip_fusion_exp";
	//被融合的装备经验
	m_fFusionExpK = getFloat(ss.str(),"k",-0.00042);
	m_fFusionExpB = getFloat(ss.str(),"b",0.10042);
	ss.clear();
	ss.str("");
	ss<<"equip_fusion_num";
	//升阶所需融合符数量
	m_fFusionNumK = getFloat(ss.str(),"k",0.411765);
	m_fFusionNumB = getFloat(ss.str(),"b",0.588235);
	ss.clear();
	ss.str("");
	ss<<"equip_fusion_yuanbao";
	m_n32FusionQuality1_YuanBao = getInt(ss.str(),"quality1_yuanbao",10); //白->绿
	m_n32FusionQuality2_YuanBao = getInt(ss.str(),"quality2_yuanbao",20); //绿->蓝
	m_n32FusionQuality3_YuanBao = getInt(ss.str(),"quality3_yuanbao",30); //蓝->紫
	m_n32FusionQuality4_YuanBao = getInt(ss.str(),"quality4_yuanbao",40); //紫->橙
	m_n32FusionQuality5_YuanBao = getInt(ss.str(),"quality5_yuanbao",50); //橙->金
	ss.clear();
	ss.str("");
	ss<<"equip_fusion_fast";
	//加速融合
	m_n32FusionFastYuanBao = getInt(ss.str(),"yuanbao",20); //所需元宝
	m_dwFusionFastExp = getInt64(ss.str(),"exp",100); //经验基数
	m_dwFusionFastCritProb1 = getInt64(ss.str(),"crit_prob1",6500); //暴击几率1
	m_dwFusionFastCritNum1 = getInt64(ss.str(),"crit_num1",5); //暴击倍数1
	m_dwFusionFastCritProb2 = getInt64(ss.str(),"crit_prob2",500); //暴击几率2
	m_dwFusionFastCritNum2 = getInt64(ss.str(),"crit_num2",10); //暴击倍数2
	ss.clear();
	ss.str("");
	ss<<"equip_fusion_adv";
	//高级融合
	m_fFusionAdvExp = getFloat(ss.str(),"exp_yuanbao",0.2);//经验价值 = 每一点经验需要花费 0.2元宝
	ss.clear();
	ss<<"equip_attr_random";
	//装备洗炼
	m_n32AttrRandomYuanBao = getInt(ss.str(),"yuanbao",20); //所需元宝
	ss.clear();
	ss.str("");
	ss<<"equip_star_level_up_money";
	//装备升星所需金钱
	m_nStarLvUpMoneyK = getInt(ss.str(),"k",3333);
	m_nStarLvUpMoneyB = getInt(ss.str(),"b",-83333);
	ss.clear();
	ss.str("");
	ss<<"equip_star_level_up_num";
	//装备升星所需星魂数量
	m_fStarLvUpNumK = getFloat(ss.str(),"k",7.5);
	m_nStarLvUpNumB = getInt(ss.str(),"b",-250);
	ss.clear();
	ss.str("");
	ss<<"equip_star_level_up_rate";
	//装备升星成功率
	m_fStarLvUpRateK = getFloat(ss.str(),"k",-0.0034);
	m_fStarLvUpRateB = getFloat(ss.str(),"b",1.04);
	ss.clear();
	ss.str("");
	ss<<"kungfu_get";
	//功法获取
	m_n64KungFuMoney = getInt(ss.str(),"money",50000);//所需金币
	m_n32KungFuYuanBao = getInt(ss.str(),"yuanbao",20);//所需元宝
	m_n32KungFuOneKeyYuanBao = getInt(ss.str(),"one_key_yuanbao",200); //一键获取所需元宝
	ss.clear();
	ss.str("");
	ss<<"raid_culture_money";
	//坐骑金币培养(金币)
	m_dwMoneyRaidCritProb = getInt64(ss.str(),"crit_prob",2500); //暴击几率
	m_nMoneyRaidCritNum = getInt(ss.str(),"crit_num",10); //暴击倍数
	m_nMoneyRaidExp = getInt(ss.str(),"exp",500); //经验基数
	m_n64MoneyRaidMoney = getInt64(ss.str(),"money",20000); //所需金币
	ss.clear();
	ss.str("");
	ss<<"raid_culture_diamond_yuanbao";
	//坐骑快马加鞭培养(优先钻石，其次元宝)
	m_dwDiamondRaidCritProb = getInt64(ss.str(),"crit_prob",4500);//暴击几率
	m_nDiamondRaidCritNum = getInt(ss.str(),"crit_num",10); //暴击倍数
	m_nDiamondRaidExp = getInt(ss.str(),"exp",500);//经验基数
	m_n32DiamondRaidYuanBao = getInt(ss.str(),"diamond_yuanbao",10); //所需钻石Or元宝
	ss.clear();
	ss.str("");
	ss<<"raid_culture_yuanbao_10";
	//坐骑一骑绝尘培养(元宝10次)
	m_dwYuanBao10RaidCritProb = getInt64(ss.str(),"crit_prob",6500);//暴击几率
	m_nYuanBao10RaidCritNum = getInt(ss.str(),"crit_num",10); //暴击倍数
	m_nYuanBao10RaidExp = getInt(ss.str(),"exp",500);//经验基数
	m_n32YuanBao10RaidYuanBao = getInt(ss.str(),"yuanbao",100); //所需元宝
	ss.clear();
	ss.str("");
	ss<<"raid_culture_yuanbao_100";
	//坐骑天马行空培养(元宝100次)
	m_dwYuanBao100RaidCritProb = getInt64(ss.str(),"crit_prob",7500);//暴击几率
	m_nYuanBao100RaidCritNum = getInt(ss.str(),"crit_num",10); //暴击倍数
	m_nYuanBao100RaidExp = getInt(ss.str(),"exp",500); //经验基数
	m_n32YuanBao100RaidYuanBao = getInt(ss.str(),"yuanbao",1000);//所需元宝
	//竞技场奖励经验
	ss.clear();
	ss.str("");
	ss<<"jjc_rank_reward_exp";
	m_fJJCRankRewardExpK = getFloat(ss.str(),"k",-299.278);
	m_fJJCRankRewardExpB = getFloat(ss.str(),"b",309277.6);
	//竞技场奖励金钱
	ss.clear();
	ss.str("");
	ss<<"jjc_rank_reward_money";
	m_fJJCRankRewardMoneyK = getFloat(ss.str(),"k",-201.238);
	m_fJJCRankRewardMoneyB = getFloat(ss.str(),"b",206238.4);
	//竞技场奖励钻石
	ss.clear();
	ss.str("");
	ss<<"jjc_rank_reward_diamond";
	m_fJJCRankRewardDiamondK = getFloat(ss.str(),"k",-0.06089);
	m_fJJCRankRewardDiamondB = getFloat(ss.str(),"b",61.88751);
	//竞技场奖励等级系数
	ss.clear();
	ss.str("");
	ss<<"jjc_rank_reward_level_num";
	m_JJCRankRewardLevelNumK = getFloat(ss.str(),"k",0.004202);
	m_JJCRankRewardLevelNumB = getFloat(ss.str(),"b",0.495798);
	//竞技场奖励等级系数
	ss.clear();
	ss.str("");
	ss<<"fast_daily_quest";
	yuanbao = getInt(ss.str(),"yuanbao",5);
	double_yuanbao = getInt(ss.str(),"double_yuanbao",10);
	ss.clear();
	ss.str("");
	ss<<"guild_donate_fund";
	m_Guild_donate_fund_K = getFloat(ss.str(),"k",4444.444);
	m_Guild_donate_fund_B = getFloat(ss.str(),"b",-33333.3);
	m_Guild_donate_fund_P1 = getInt(ss.str(),"p1",1);
	m_Guild_donate_fund_P2 = getInt(ss.str(),"p2",2);
	m_Guild_donate_fund_P3 = getInt(ss.str(),"p3",6);

	//装备耐久
	ss.clear();
	ss.str("");
	ss<<"dead_penalty";
	n_weapon_abrasion_times = getInt(ss.str(),"weapon_abrasion_times",1500);
	n_equip_abrasion_times = getInt(ss.str(),"equip_abrasion_times",250);

	ss.clear();
	ss.str("");
	ss<<"trading_price_info";
	m_trading_push_max					=  getInt(ss.str(),"trading_push_max",8);
	m_trading_price_traing_tax			=  getFloat(ss.str(),"trading_price_traing_tax",0.0);
	m_trading_price_tax					=  getInt(ss.str(),"trading_price_tax",9000);
	m_trading_over_time_money			=  getInt(ss.str(),"trading_over_time_money",50000);
	m_trading_update_over_time			=  getInt(ss.str(),"trading_update_over_time",259200);
	m_trading_update_up_time			=  getInt(ss.str(),"trading_update_up_time",86400);
	m_trading_plane_num					=  getInt(ss.str(),"trading_plane_num",10);
	m_trading_other_num					=  getInt(ss.str(),"trading_other_num",4);
	m_trading_open_level				=  getInt(ss.str(),"trading_open_level",20);
	m_trading_get_container_count		=  getInt(ss.str(),"trading_get_container_count",50);
	m_trading_max_tax					=  getInt(ss.str(),"trading_max_tax",140);

	ss.clear();
	ss.str("");
	ss<<"trading_price_info_price_tax";
	m_trading_1_base				=  getInt(ss.str(),"trading_1_k",2);
	m_trading_1_value				=  getInt(ss.str(),"trading_1_b",3000);
	m_trading_2_base				=  getInt(ss.str(),"trading_2_k",50);
	m_trading_2_value				=  getInt(ss.str(),"trading_2_b",5000);
	m_trading_3_base				=  getInt(ss.str(),"trading_3_k",100);
	m_trading_3_value				=  getInt(ss.str(),"trading_3_b",12000);
	m_trading_4_base				=  getInt(ss.str(),"trading_4_k",500);
	m_trading_4_value				=  getInt(ss.str(),"trading_4_b",25000);
	m_trading_5_base				=  getInt(ss.str(),"trading_5_k",5000);
	m_trading_5_value				=  getInt(ss.str(),"trading_5_b",50000);
	m_trading_6_base				=  getInt(ss.str(),"trading_6_k",999999);
	m_trading_6_value				=  getInt(ss.str(),"trading_6_b",100000);
	m_trading_error					=  getInt(ss.str(),"trading_error",200000);	

	//比奇任务相关
	ss.clear();
	ss.str("");
	ss<<"biqi_quest_one_key_finish";
	for(int i = 0; i < BIQI_TOTAL_COUNT; ++i)
	{
		biQiOneKeyFinishData data;
		ostringstream ostr;
		ostr << (i + 1);
		string biqi = "biqi";
		string yuanbao = "_yuanbao_num";
		string jingyan = "_jingyan_beishu";
		data.m_BiQi_yuanbao_num = getInt(ss.str(), biqi + ostr.str() + yuanbao, 0);
		data.m_BiQi_jingyan_beishu = getFloat(ss.str(), biqi + ostr.str() + jingyan, 0);
		_biQiOneKeyFinishList.push_back(data);
	}

	ss.clear();
	ss.str("");
	ss<<"biqi_quest_finish_all";
	for(int i = 0; i < BIQI_TOTAL_COUNT; ++i)
	{
		biQiOneKeyFinishData data;
		ostringstream ostr;
		ostr << (i + 1);
		string biqi = "biqi";
		string yuanbao = "_yuanbao_num_finishAll";
		string jingyan = "_jingyan_beishu_finishAll";
		data.m_BiQi_yuanbao_num = getInt(ss.str(), biqi + ostr.str() + yuanbao, 0);
		data.m_BiQi_jingyan_beishu = getFloat(ss.str(), biqi + ostr.str() + jingyan, 0);
		_biQiFinishAllMessageList.push_back(data);
	}

	//每日清除
	ss.clear();
	ss.str("");
	ss<<"role_day_clear";
	n_DuoRen_Fuben_Num = getInt(ss.str(),"DuoRen_Fuben_Num",3);
	n_monster_instruct_num = getInt(ss.str(),"monster_instruct_num",3);

	//离线经验池
	ss.clear();
	ss.str("");
	ss<<"offline_time_exp";
	m_OfflineExp_Base_Time		=	getInt(ss.str(),"OfflineExp_Base_Time",0);

	ss.clear();
	ss.str("");
	ss<<"heart_hook";
	heart_hook_open				= getInt(ss.str(),"heart_hook_open",0);

	//行会
	ss.clear();
	ss.str("");
	ss<<"guild_info";
	n_guild_league_time_limit			= getInt(ss.str(),"guild_league_time_limit",60);
	n_guild_war_continue_time_limit		= getInt(ss.str(),"guild_war_continue_time_limit",120);
	n_guild_war_cost_money				= getInt(ss.str(),"guild_war_cost_money",1000);
	n_guild_diplomacy_information_limit = getInt(ss.str(),"guild_diplomacy_information_limit",20);
	n_guild_fuben_open_start_hour		= getInt(ss.str(),"guild_fuben_open_start_hour",16);
	n_guild_fuben_open_start_min		= getInt(ss.str(),"guild_fuben_open_start_min",0);
	n_guild_fuben_open_end_hour			= getInt(ss.str(),"guild_fuben_open_end_hour",22);
	n_guild_fuben_open_end_min			= getInt(ss.str(),"guild_fuben_open_end_min",0);
	n_guild_fuben_close_hour			= getInt(ss.str(),"guild_fuben_close_hour",23);
	n_guild_fuben_close_min				= getInt(ss.str(),"guild_fuben_close_min",0);



	//封魔榜
	ss.clear();
	ss.str("");
	ss<<"fmb_info";

	m_fmb_open_min_week					= getInt(ss.str(),"fmb_open_min_week",0);
	m_fmb_apply_begin_week				= getInt(ss.str(),"fmb_apply_begin_week",0);
	m_fmb_apply_begin_hour				= getInt(ss.str(),"fmb_apply_begin_hour",0);
	m_fmb_apply_end_week				= getInt(ss.str(),"fmb_apply_end_week",0);
	m_fmb_apply_end_hour				= getInt(ss.str(),"fmb_apply_end_hour",0);


	ss.clear();
	ss.str("");
	ss<<"stall_info";
	m_stall_price_tax			=	getFloat(ss.str(),"stall_info_tax",0.0);
	m_stall_info_yuanbao_max	=	getInt(ss.str(),"stall_info_yuanbao_max",15);
	m_stall_info_yuanbao_min	=	getInt(ss.str(),"stall_info_yuanbao_min",0);

	ss.clear();
	ss.str("");
	ss<<"max_activite_value";
	max_activity_value = getInt(ss.str(),"max_activite_value",0);

	ss.clear();
	ss.str("");
	ss<<"map_info";
	n_fire_massacre_yuanbao	= getInt(ss.str(),"fire_massacre_yuanbao",30);
	n_guard_customs_yuanbao	= getInt(ss.str(),"guard_customs_yuanbao",50);
	n_under_palace_yuanbao	= getInt(ss.str(),"under_palace_yuanbao",100);
	n_under_fane_summon_boss_yuanbao = getInt(ss.str(),"under_fane_summon_boss_yuanbao",100);

	ss.clear();
	ss.str("");
	ss<<"boss_info";
	n_boss_show_time = getInt(ss.str(),"boss_show_time",300);
	if (n_boss_show_time < 30)
		n_boss_show_time = 30;

	ss.clear();
	ss.str("");
	ss<<"guaji_start_level";
	n_guaji_start_level = getInt(ss.str(),"guaji_start_level",30);

// 	ss.clear();
// 	ss.str("");
// 	ss<<"guild_store_yushou_item_number";
// 	guild_store_yushou_item_number = getInt(ss.str(),"guild_store_yushou_item_number",20);

	ss.clear();
	ss.str("");
	ss<<"find_exp";
	m_JinBiFindRate=getInt(ss.str(),"jinbi_find_rate",80);
	m_YuanBaoFindRate=getInt(ss.str(),"yuanbao_find_rate",100);


	ss.clear();
	ss.str("");
	ss<<"dragon_curly";
	dragon_curly_progress_one=getInt(ss.str(),"dragon_curly_progress_one",20);
	dragon_curly_progress_two=getInt(ss.str(),"dragon_curly_progress_two",50);
	dragon_curly_progress_tree=getInt(ss.str(),"dragon_curly_progress_three",100);
	ss.clear();
	ss.str("");
	ss<<"immediately_auto_use";
	int immediately_auto_use_type_number;
	immediately_auto_use_type_number = getInt(ss.str(),"immediately_auto_use_type_number",0);
	for(int i = 1; i <= immediately_auto_use_type_number; ++i)
	{
		ostringstream ostr;
		ostr << i;
		int index = getInt(ss.str(),"immediately_auto_use_typeId" + ostr.str(),0);
		immediately_auto_use.insert(make_pair(index,index));
	}

	dragon_killone_yuanbao=getInt(ss.str(),"dragon_killone_yuanbao",1);
	dragon_killten_yuanbao=getInt(ss.str(),"dragon_killten_yuanbao",10);

	dragon_killone_book=getInt(ss.str(),"dragon_killone_book",1);
	dragon_killten_book=getInt(ss.str(),"dragon_killten_book",10);


	ss.clear();
	ss.str("");
	ss<<"mobai_exp";
	int mobai_exp_num = getInt(ss.str(),"mobai_exp_num",0);
	for(int i = 1; i <= mobai_exp_num; ++i)
	{
		ostringstream ostr;
		ostr << i;
		unsigned int value = getInt(ss.str(),"mobai_exp_value" + ostr.str(),0);
		mobai_exp_values.push_back(value);
	}

	//功法
	ss.clear();
	ss.str("");
	ss<<"gongfa";
	gongfa_benison_max=getInt(ss.str(),"gongfa_benison_max",100);
	gongfa_item_scale=getFloat(ss.str(),"gongfa_item_scale",0.85);
// 	//自动挂机
// 	ss.clear();
// 	ss.str("");
// 	ss<<"auto_hang";
// 	auto_hang_open_flag    = getInt(ss.str(),"auto_hang_open_flag",0);
// 	auto_hang_time_limit   = getInt(ss.str(),"auto_hang_time_limit",0);
// 	auto_hang_level_limit  = getInt(ss.str(),"auto_hang_level_limit",0);
// 	auto_hang_free_time    = getInt(ss.str(),"auto_hang_free_time",0);
}	

//根据星级获取升星数值系数 0=星魂,1=成功率
float NumericalIniMgr::GetEquipLevelUpNumerical( BYTE byType, BYTE byStarLv )
{
	float fResult = 0.0f;
	switch( byType )
	{
	case 0: //星魂系数
		switch( byStarLv )
		{
		case 0: //0->1
			fResult = 1.0;
			break;
		case 1: //1->2
			fResult = 2.0;
			break;
		case 2: //2->3
			fResult = 3.0;
			break;
		default:
			break;
		}
		break;
	case 1: //成功率系数
		switch( byStarLv )
		{
		case 0: //0->1
			fResult = 1.0;
			break;
		case 1: //1->2
			fResult = 0.9;
			break;
		case 2: //2->3
			fResult = 0.8;
			break;
		default:
			break;
		}
		break;
	default:
		break;
	}
	return fResult;
}

int NumericalIniMgr::GetGuild_donate_fund_P( int index )
{
	int m_value = 1;
	switch (index)
	{
	case 1:
		m_value = m_Guild_donate_fund_P1;
		break;
	case 2:
		m_value = m_Guild_donate_fund_P2;
		break;
	case 3:
		m_value = m_Guild_donate_fund_P3;
		break;
	}
	return m_value;
}

int NumericalIniMgr::Get_trading_push_max()
{	
	return m_trading_push_max;
}

int	NumericalIniMgr::get_trading_max_tax()
{
	return m_trading_max_tax;
}

int NumericalIniMgr::Get_trading_price_tax(int value)
{
	if(m_trading_1_base >= value)
		return m_trading_1_value;
	else if(m_trading_2_base > value)
		return m_trading_2_value;
	else if(m_trading_3_base > value)
		return m_trading_3_value;
	else if(m_trading_4_base > value)
		return m_trading_4_value;
	else if(m_trading_5_base > value)
		return m_trading_5_value;
	else if(m_trading_6_base >= value)
		return m_trading_6_value;
	else 
		return m_trading_error;
}

float NumericalIniMgr::get_trading_price_traing_tax()
{
	return m_trading_price_traing_tax ;
}

int NumericalIniMgr::Get_trading_over_time_money()
{
	return m_trading_over_time_money;
}

int NumericalIniMgr::get_trading_update_over_time()
{
	return m_trading_update_over_time;
}  

int NumericalIniMgr::get_trading_plane_num()
{
	return m_trading_plane_num;
}

int NumericalIniMgr::get_trading_update_up_time()
{
	return m_trading_update_up_time;
}

int NumericalIniMgr::get_trading_other_num()
{
	return m_trading_other_num;
}

int NumericalIniMgr::get_trading_open_level()
{
	return m_trading_open_level;
}

int NumericalIniMgr::get_m_trading_get_container_count()
{
	return m_trading_get_container_count;
}

int NumericalIniMgr::get_DuoRen_Fuben_Num()
{
	return n_DuoRen_Fuben_Num;
}
int NumericalIniMgr::get_Max_activity_value()
{
	return max_activity_value;
}
int NumericalIniMgr::Get_Monster_Instruct_Num()
{
	return n_monster_instruct_num;
}

float NumericalIniMgr::get_stall_price_tax()
{
	return m_stall_price_tax;
}

int NumericalIniMgr::get_stall_info_yuanbao_max()
{
	return m_stall_info_yuanbao_max;
}

int NumericalIniMgr::get_stall_info_yuanbao_min()
{
	return m_stall_info_yuanbao_min;
}

int NumericalIniMgr::Get_Guild_League_Time_Limit()
{
	return n_guild_league_time_limit;
} 

int NumericalIniMgr::Get_Guild_War_Continue_Time_Limit()
{
	return n_guild_war_continue_time_limit;
}

int NumericalIniMgr::Get_Guild_War_Cost_Money()
{
	return n_guild_war_cost_money;
}

int NumericalIniMgr::Get_Guild_Diplomacy_Info_Limit()
{
	return n_guild_diplomacy_information_limit;
}

int NumericalIniMgr::Get_Fire_Massacre_Yuanbao()
{
	return n_fire_massacre_yuanbao;
}

int NumericalIniMgr::Get_Guard_Customs_Yuanbao()
{
	return n_guard_customs_yuanbao;
}

int NumericalIniMgr::Get_Under_Palace_Yuanbao()
{
	return n_under_palace_yuanbao;
}

int NumericalIniMgr::Get_Under_Fane_Summon_Boss_Yuanbao()
{
	return n_under_fane_summon_boss_yuanbao;
}

int NumericalIniMgr::Get_Boss_Show_Time()
{
	return n_boss_show_time;
}
int NumericalIniMgr::Get_GuaJi_Start_Level()
{
	return n_guaji_start_level;
}
// int NumericalIniMgr::Get_Guild_Store_Book_Item_Number()
// {
// 	return guild_store_yushou_item_number;
// }
int NumericalIniMgr::Get_Guild_Fuben_Open_Start_Hour()
{
	return n_guild_fuben_open_start_hour;
}

int NumericalIniMgr::Get_Guild_Fuben_Open_Start_Min()
{
	return n_guild_fuben_open_start_min;
}

int NumericalIniMgr::Get_Guild_Fuben_Open_End_Hour()
{
	return n_guild_fuben_open_end_hour;
}

int NumericalIniMgr::Get_Guild_Fuben_Open_End_Min()
{
	return n_guild_fuben_open_end_min;
}

int NumericalIniMgr::Get_Guild_Fuben_Close_Hour()
{
	return n_guild_fuben_close_hour;
}

int NumericalIniMgr::Get_Guild_Fuben_Close_Min()
{
	return n_guild_fuben_close_min;
}

int NumericalIniMgr::get_fmb_open_min_week()
{
	return m_fmb_open_min_week;
} 

int NumericalIniMgr::get_fmb_apply_begin_week()
{
	return m_fmb_apply_begin_week;
} 

int NumericalIniMgr::get_fmb_apply_begin_hour()
{
	return m_fmb_apply_begin_hour;
} 

int NumericalIniMgr::get_fmb_apply_end_week()
{
	return m_fmb_apply_end_week;
} 

int NumericalIniMgr::get_fmb_apply_end_hour()
{
	return m_fmb_apply_end_hour;
} 