#define _CRT_SECURE_NO_DEPRECATE

#include "BaseDefine.h"
#include "Platform.h"
#include "tagDWORDTime.h"
#include "time.h"
#include <stdio.h>
#include <stdlib.h>
#include "cocos2d.h"
#include "f_string_util.h"
#include "f_string_table.h"
using namespace cocos2d;
#include <cassert>

//static const INT64 TICKS_FROM_1601_TO_1900 = 94354848000000000LL;
//-------------------------------------------------------------------------------------
// 得到当前时间
//-------------------------------------------------------------------------------------
tagDWORDTime GetCurrentDWORDTime()
{
// #ifdef OVD_PLATFORM_WINDOWS
// 	SYSTEMTIME CurTime;
// 	GetLocalTime(&CurTime);
// 	tagDWORDTime time;
// 	time.day = CurTime.wDay;
// 	time.hour = CurTime.wHour;
// 	time.min = CurTime.wMinute;
// 	time.month = CurTime.wMonth;
// 	time.sec = CurTime.wSecond;
// 	time.year = (CurTime.wYear) % 100;
// 	return time;
// #else
	time_t seconds = time(0);
	tm date = *localtime(&seconds);
	tagDWORDTime time;
	time.day = date.tm_mday;
	time.hour = date.tm_hour;
	time.min = date.tm_min;
	time.month = date.tm_mon + 1;
	time.sec = date.tm_sec;
	time.year = (date.tm_year+1900)%100;
	return time;
/*#endif*/
}

//-------------------------------------------------------------------------------------
// 判断某年是否为闰年
//-------------------------------------------------------------------------------------
int IsLeapYear(unsigned int iYear)
{
	return (!(iYear % 4) && (iYear % 100)) || !(iYear % 400);
}   
 
//-------------------------------------------------------------------------------------
// 计算两个日期的时间差，返回秒
//-------------------------------------------------------------------------------------
unsigned int CalcTimeDiff(tagDWORDTime destTime, tagDWORDTime srcTime)
{
	if( *(unsigned int*)(&destTime) == *(unsigned int*)(&srcTime) )
		return 0;

	tagDWORDTime* pDestTime = (tagDWORDTime*)(&destTime);
	tagDWORDTime* pSrcTime = (tagDWORDTime*)(&srcTime);

	// 以dwSrcTime的年份一月一日0时0分0秒为基准,看看过了多少秒时间
	unsigned int dwSrcRun =  0;	// src流逝的时间
	unsigned int dwDestRun =  0;   // dest流逝的时间

	{
		// 计算src的流逝时间(秒)
		for(int i = 1; i < (int)pSrcTime->month; i++)
		{
			// 流逝的月份
			if( i == 2 )
			{
				// 二月,我们看看是不是闰年
				if( 1 == IsLeapYear((unsigned int)(pSrcTime->year) + 2000) )
				{
					dwSrcRun += 29 * 24 * 60 * 60;
				}
				else
				{
					dwSrcRun += 28 * 24 * 60 * 60;
				}

				continue;
			}

			if( i <= 7 )
			{
				if( i%2 == 0 )
					dwSrcRun += 30 * 24 * 60 * 60;
				else
					dwSrcRun += 31 * 24 * 60 * 60;
			}
			else
			{
				if( i%2 == 1 )
					dwSrcRun += 30 * 24 * 60 * 60;
				else
					dwSrcRun += 31 * 24 * 60 * 60;
			}
		}

		// 加上日,小时，分，秒等零碎时间
		dwSrcRun += (pSrcTime->day-1) * 24 * 60 * 60 + \
			pSrcTime->hour * 60 * 60 + \
			pSrcTime->min * 60 + \
			pSrcTime->sec;

	}

	{
		// 计算dest流逝的时间
		if( pSrcTime->year <= pDestTime->year ) {
			for(int i = pSrcTime->year; i < (int)pDestTime->year; i++)
			{
				// 流逝的整年数
				if( 1 == IsLeapYear(i + 2000) )
				{
					dwDestRun += 366 * 24 * 60 * 60;
				}
				else
				{
					dwDestRun += 365 * 24 * 60 * 60;
				}
			}
		} else {
			for(int i = pDestTime->year; i < (int)pSrcTime->year; i++)
			{
				// 流逝的整年数
				if( 1 == IsLeapYear(i + 2000) )
				{
					dwSrcRun += 366 * 24 * 60 * 60;
				}
				else
				{
					dwSrcRun += 365 * 24 * 60 * 60;
				}
			}
		}


		//dest以该年一月一日0时0分0秒为基准所流逝的时间
		for(int i=1; i<(int)pDestTime->month; i++)
		{
			//流逝的月份
			if( i == 2 )
			{
				//二月,我们看看是不是闰年
				if( 1 == IsLeapYear((unsigned int)pDestTime->year + 2000) )
				{
					dwDestRun += 29 * 24 * 60 * 60;
				}
				else
				{
					dwDestRun += 28 * 24 * 60 * 60;
				}

				continue;
			}
			if( i <= 7 )
			{
				if( i%2 == 0 )
					dwDestRun += 30 * 24 * 60 * 60;
				else
					dwDestRun += 31 * 24 * 60 * 60;
			}
			else
			{
				if( i%2 == 1 )
					dwDestRun += 30 * 24 * 60 * 60;
				else
					dwDestRun += 31 * 24 * 60 * 60;
			}
		}

		//加上日,小时，分，秒等零碎时间
		dwDestRun += (pDestTime->day-1) * 24 * 60 * 60 + \
			pDestTime->hour * 60 * 60 + \
			pDestTime->min * 60 + \
			pDestTime->sec;
	}
	
	
	if(pSrcTime->IsTimeEmpty())
	{
		return (dwDestRun);
	}
	else
	{
		if( dwDestRun < dwSrcRun )
			return 0;

		return (dwDestRun - dwSrcRun);
	}
	// SI_ASSERT( dwDestRun >= dwSrcRun );
	
}


//-----------------------------------------------------------------------------
// 时间上递增指定秒数
//-----------------------------------------------------------------------------
tagDWORDTime IncreaseTime(tagDWORDTime srcTime, int nIncrementSecond)
{
	tagDWORDTime* pSrcTime = (tagDWORDTime*)(&srcTime);

	// 以dwSrcTime的年份一月一日0时0分0秒为基准,看看过了多少秒时间
	unsigned int dwSrcRun =  0;		// src流逝的时间

	{
		// 计算src的流逝时间(秒)
		for(int i = 1; i < (int)pSrcTime->month; i++)
		{
			// 流逝的月份
			if( i == 2 )
			{
				// 二月,我们看看是不是闰年
				if( 1 == IsLeapYear((unsigned short)pSrcTime->year + 2000) )
				{
					dwSrcRun += 29 * 24 * 60 * 60;
				}
				else
				{ 
					dwSrcRun += 28 * 24 * 60 * 60;
				}

				continue;
			}

			if( i <= 7 )
			{
				if( i%2 == 0 )
					dwSrcRun += 30 * 24 * 60 * 60;
				else
					dwSrcRun += 31 * 24 * 60 * 60;
			}
			else
			{
				if( i%2 == 1 )
					dwSrcRun += 30 * 24 * 60 * 60;
				else
					dwSrcRun += 31 * 24 * 60 * 60;
			}
		}

		// 加上日,小时，分，秒等零碎时间
		dwSrcRun += (pSrcTime->day-1) * 24 * 60 * 60 + \
			pSrcTime->hour * 60 * 60 + \
			pSrcTime->min * 60 + \
			pSrcTime->sec;

	}


	// 加上递增的时间
	unsigned int dwRunTime = dwSrcRun + nIncrementSecond;

	// 将时间折算
	int nDays = dwRunTime / (24*60*60);           // 整天数
	int nSecs  = dwRunTime % (24*60*60);          // 零碎剩余的妙数

	// 初始化结果时间
	tagDWORDTime destTime;
	tagDWORDTime* pDestTime = (tagDWORDTime*)(&destTime);

	// 先计算年
	pDestTime->year = pSrcTime->year;
	for( ;; )
	{
		int nDaysPerYear = 0;
		if( 1 == IsLeapYear((unsigned short)pDestTime->year + 2000) )
			nDaysPerYear = 366;
		else
			nDaysPerYear = 365;

		if( nDays < nDaysPerYear )
			break;

		pDestTime->year++;
		nDays -= nDaysPerYear;
	}

	// 再计算月日
	pDestTime->month = 1;
	pDestTime->day = 1;
	for( ;; )
	{
		int nDaysPerMonth = 0;

		// 计算该月需要的天数
		if( pDestTime->month == 2 )
		{
			// 二月,我们看看是不是闰年
			if( 1 == IsLeapYear((unsigned short)pDestTime->year + 2000) )
			{
				nDaysPerMonth = 29;
			}
			else
			{
				nDaysPerMonth = 28;
			}
		}
		else if( pDestTime->month <= 7 )
		{
			if( pDestTime->month % 2 == 0 )
				nDaysPerMonth = 30 ;
			else
				nDaysPerMonth = 31;
		}
		else
		{
			if( pDestTime->month % 2 == 1 )
				nDaysPerMonth = 30;
			else
				nDaysPerMonth = 31;
		}

		if( nDays < nDaysPerMonth )
		{
			// 该月天数不够
			pDestTime->day += nDays;
			break;
		}

		pDestTime->month++;
		nDays -= nDaysPerMonth;
	}

	// 计算小时分秒
	pDestTime->hour = nSecs / (60*60);
	pDestTime->min = (nSecs / 60) % 60;
	pDestTime->sec = nSecs % 60;

	return destTime;
}

//-----------------------------------------------------------------------------
// 时间上递减指定秒数
//-----------------------------------------------------------------------------
tagDWORDTime DecreaseTime(tagDWORDTime srcTime, int nDecrementSecond)
{
	tagDWORDTime* pSrcTime = (tagDWORDTime*)(&srcTime);

	// 以dwSrcTime的年份一月一日0时0分0秒为基准,看看过了多少秒时间
	unsigned int dwSrcRun =  0;		// src流逝的时间
	{
		// 计算src的流逝时间(秒)
		for(int i = 1; i < (int)pSrcTime->month; i++)
		{
			// 流逝的月份
			if( i == 2 )
			{
				// 二月,我们看看是不是闰年
				if( 1 == IsLeapYear((unsigned short)pSrcTime->year + 2000) )
				{
					dwSrcRun += 29 * 24 * 60 * 60;
				}
				else
				{ 
					dwSrcRun += 28 * 24 * 60 * 60;
				}

				continue;
			}

			if( i <= 7 )
			{
				if( i%2 == 0 )
					dwSrcRun += 30 * 24 * 60 * 60;
				else
					dwSrcRun += 31 * 24 * 60 * 60;
			}
			else
			{
				if( i%2 == 1 )
					dwSrcRun += 30 * 24 * 60 * 60;
				else
					dwSrcRun += 31 * 24 * 60 * 60;
			}
		}

		// 加上日,小时，分，秒等零碎时间
		dwSrcRun += (pSrcTime->day-1) * 24 * 60 * 60 + \
			pSrcTime->hour * 60 * 60 + \
			pSrcTime->min * 60 + \
			pSrcTime->sec;

	}

	unsigned int dwSrcLeft =  0;		// src当前所剩的时间 
	int nDaysPerYear = 0;
	if( 1 == IsLeapYear((unsigned short)pSrcTime->year + 2000) )
		nDaysPerYear = 366;
	else
		nDaysPerYear = 365;

	dwSrcLeft = nDaysPerYear * 24 * 60 * 60 - dwSrcRun;

	// 加上递减的时间
	unsigned int dwDesTime = dwSrcLeft + nDecrementSecond;

	// 将时间折算
	int nDays = dwDesTime / (24*60*60);           // 整天数

	int nSecs  = dwDesTime % (24*60*60);          // 零碎剩余的妙数

	// 初始化结果时间
	tagDWORDTime destTime;
	tagDWORDTime* pDestTime = (tagDWORDTime*)(&destTime);

	// 先计算年
	pDestTime->year = pSrcTime->year;
	for( ;; )
	{
		//int nDaysPerYear = 0;
		if( 1 == IsLeapYear((unsigned short)pDestTime->year + 2000) )
			nDaysPerYear = 366;
		else
			nDaysPerYear = 365;

		if( nDays < nDaysPerYear )
			break;

		pDestTime->year--;
		nDays -= nDaysPerYear;
	}

	// 转换成Des年流逝的时间
	nDays = nDaysPerYear - nDays - 1;
	if(nSecs == 0) nDays += 1;
	else nSecs = 24 * 60 * 60 - nSecs;

	// 再计算月日
	pDestTime->month = 1;
	pDestTime->day = 1;
	for( ;; )
	{
		int nDaysPerMonth = 0;

		// 计算该月需要的天数
		if( pDestTime->month == 2 )
		{
			// 二月,我们看看是不是闰年
			if( 1 == IsLeapYear((unsigned short)pDestTime->year + 2000) )
			{
				nDaysPerMonth = 29;
			}
			else
			{
				nDaysPerMonth = 28;
			}
		}
		else if( pDestTime->month <= 7 )
		{
			if( pDestTime->month % 2 == 0 )
				nDaysPerMonth = 30 ;
			else
				nDaysPerMonth = 31;
		}
		else
		{
			if( pDestTime->month % 2 == 1 )
				nDaysPerMonth = 30;
			else
				nDaysPerMonth = 31;
		}

		if( nDays < nDaysPerMonth )
		{
			// 该月天数不够
			pDestTime->day += nDays;
			break;
		}

		pDestTime->month++;
		nDays -= nDaysPerMonth;
	}

	// 计算小时分秒
	pDestTime->hour = nSecs / (60*60);
	pDestTime->min = (nSecs / 60) % 60;
	pDestTime->sec = nSecs % 60;

	return destTime;
}

//---------------------------------------------------------------------------
// 判断某年某月某日是星期几，0为星期日
//---------------------------------------------------------------------------
unsigned int WhichWeekday(tagDWORDTime dw_time)
{
	// 首先求出是哪一年
	int nYear = (int)dw_time.year + 2000;

	// 然后看当前是这一年的第几天
	int nDay = 0;
	for( int i = 1; i < (int)dw_time.month; i++ )
	{
		if( i == 2 )
		{
			if( 1 == IsLeapYear(nYear) )
			{
				nDay += 29;
			}
			else
			{
				nDay += 28;
			}
		}

		else if( i <= 7 )
		{
			if( i%2 == 0 )	nDay += 30;
			else			nDay += 31;
		}
		else
		{
			if( i%2 == 0 )	nDay += 31;
			else			nDay += 30;
		}
	}
	nDay += dw_time.day;

	// 年和日都已经知道，就可以计算了
	// 泰勒公式：x-1+[(x-1)/4]-[(x-1)/100]+[(x-1)/400]+c
	return ( (nYear-1) + (nYear-1)/4 - (nYear-1)/100 + (nYear-1)/400 + nDay ) % 7;
}

//-------------------------------------------------------------------------------------
// 转化成: 年-月-日 如：2008-09-12
//-------------------------------------------------------------------------------------
int DwordTime2DataTime(char szTime[], int nSzArray, const tagDWORDTime &dw_time)
{
	if(nSzArray <= X_DATATIME_LEN)
	{
		return false;
	}

	//sprintf(szTime, "%d%d%d-%d%d-%d%d %d%d:%d%d:%d%d", 20, dw_time.year/10, dw_time.year%10,
	//	dw_time.month/10, dw_time.month%10, dw_time.day/10, dw_time.day%10, dw_time.hour/10, 
	//	dw_time.hour%10, dw_time.min/10, dw_time.min%10, dw_time.sec/10, dw_time.sec%10);

	sprintf(szTime, "20%02d-%02d-%02d %02d:%02d:%02d", 
		dw_time.year, dw_time.month, dw_time.day, dw_time.hour, dw_time.min, dw_time.sec);

	return 1;
}

int DwordTime2DataTimeChina(std::string& str, const tagDWORDTime &dw_time)
{
	safe_sprintf(str,STRING_TABLE["second_verify_force_unlock_time"],dw_time.year, dw_time.month, dw_time.day, dw_time.hour, dw_time.min, dw_time.sec);
	return 1;
}

//-------------------------------------------------------------------------------------
// 将 年-月-日 格式的数据转换为tagDWORDTime
//-------------------------------------------------------------------------------------
int DataTime2DwordTime(tagDWORDTime &dw_time, const char szTime[], int nSzArray)
{
	dw_time.Clear();

	if(nSzArray != X_DATATIME_LEN)
	{
		return false;
	}

	/************************************
	*  2008-09-12 13:21:00
	*  0123456789ABCDEFGHI19
	*************************************/
	
	char p[X_DATATIME_LEN + 1];
	memcpy(p, szTime, X_DATATIME_LEN);
	p[4] = p[7] = p[10] = p[13] = p[16] = p[19] = '\0';

	dw_time.year		= atoi(p + 2);
	dw_time.month	= atoi(p + 5);
	dw_time.day		= atoi(p + 8);
	dw_time.hour		= atoi(p + 11);
	dw_time.min		= atoi(p + 14);
	dw_time.sec		= atoi(p + 17);

	return 1;

	//CHAR p[5];
	//CHAR *pCur = szTime;
	//unsigned int dwValue = 0;
	//
	//for( int i = 0; i < 6; i++ )
	//{
	//	dwValue++;
	//	if( dwValue == 1 )
	//	{//年
	//		memcpy(p, szTime, 4);
	//		p[4] = '\0';
	//		dw_time.year = atoi(p) % 100;
	//		pCur += 2;		//比别的情况多出2个字节
	//	}
	//	else if( dwValue == 2)
	//	{//月
	//		memcpy(p, pCur, 2);
	//		p[2] = '\0';
	//		dw_time.month = atoi(p);
	//	}
	//	else if( dwValue == 3)
	//	{//日
	//		memcpy(p, pCur, 2);
	//		p[2] = '\0';
	//		dw_time.day = atoi(p);
	//	}
	//	else if( dwValue == 4)
	//	{//小时
	//		memcpy(p, pCur, 2);
	//		p[2] = '\0';
	//		dw_time.hour = atoi(p);
	//	}
	//	else if( dwValue == 5)
	//	{//分
	//		memcpy(p, pCur, 2);
	//		p[2] = '\0';
	//		dw_time.min = atoi(p);
	//	}
	//	else if( dwValue == 6)
	//	{//秒
	//		memcpy(p, pCur, 2);
	//		p[2] = '\0';
	//		dw_time.sec = atoi(p);
	//	}
	//	else
	//	{
	//		SI_ASSERT(false);
	//	}
	//	pCur += 3;
	//}
}

unsigned int CalcTimeDiff2( tagDWORDTime destTime, tagDWORDTime srcTime )
{
	if( *(unsigned int*)(&destTime) == *(unsigned int*)(&srcTime) )
		return 0;

	tagDWORDTime* pDestTime = (tagDWORDTime*)(&destTime);
	tagDWORDTime* pSrcTime = (tagDWORDTime*)(&srcTime);

	// 以dwSrcTime的年份一月一日0时0分0秒为基准,看看过了多少秒时间
	unsigned int dwSrcRun =  0;	// src流逝的时间
	unsigned int dwDestRun =  0;   // dest流逝的时间

	{
		// 计算src的流逝时间(秒)
		for(int i = 1; i < (int)pSrcTime->month; i++)
		{
			// 流逝的月份
			if( i == 2 )
			{
				// 二月,我们看看是不是闰年
				if( 1 == IsLeapYear((unsigned short)(pSrcTime->year) + 2000) )
				{
					dwSrcRun += 29 * 24 * 60 * 60;
				}
				else
				{
					dwSrcRun += 28 * 24 * 60 * 60;
				}

				continue;
			}

			if( i <= 7 )
			{
				if( i%2 == 0 )
					dwSrcRun += 30 * 24 * 60 * 60;
				else
					dwSrcRun += 31 * 24 * 60 * 60;
			}
			else
			{
				if( i%2 == 1 )
					dwSrcRun += 30 * 24 * 60 * 60;
				else
					dwSrcRun += 31 * 24 * 60 * 60;
			}
		}

		// 加上日,小时，分，秒等零碎时间
		dwSrcRun += (pSrcTime->day-1) * 24 * 60 * 60 + \
			pSrcTime->hour * 60 * 60 + \
			pSrcTime->min * 60 + \
			pSrcTime->sec;

	}

	{
		// 计算dest流逝的时间
		if( pSrcTime->year <= pDestTime->year ) {
			for(int i = pSrcTime->year; i < (int)pDestTime->year; i++)
			{
				// 流逝的整年数
				if( 1 == IsLeapYear(i + 2000) )
				{
					dwDestRun += 366 * 24 * 60 * 60;
				}
				else
				{
					dwDestRun += 365 * 24 * 60 * 60;
				}
			}
		} else {
			for(int i = pDestTime->year; i < (int)pSrcTime->year; i++)
			{
				// 流逝的整年数
				if( 1 == IsLeapYear(i + 2000) )
				{
					dwSrcRun += 366 * 24 * 60 * 60;
				}
				else
				{
					dwSrcRun += 365 * 24 * 60 * 60;
				}
			}
		}

		//dest以该年一月一日0时0分0秒为基准所流逝的时间
		for(int i=1; i<(int)pDestTime->month; i++)
		{
			//流逝的月份
			if( i == 2 )
			{
				//二月,我们看看是不是闰年
				if( 1 == IsLeapYear((unsigned short)pDestTime->year + 2000) )
				{
					dwDestRun += 29 * 24 * 60 * 60;
				}
				else
				{
					dwDestRun += 28 * 24 * 60 * 60;
				}

				continue;
			}
			if( i <= 7 )
			{
				if( i%2 == 0 )
					dwDestRun += 30 * 24 * 60 * 60;
				else
					dwDestRun += 31 * 24 * 60 * 60;
			}
			else
			{
				if( i%2 == 1 )
					dwDestRun += 30 * 24 * 60 * 60;
				else
					dwDestRun += 31 * 24 * 60 * 60;
			}
		}

		//加上日,小时，分，秒等零碎时间
		dwDestRun += (pDestTime->day-1) * 24 * 60 * 60 + \
			pDestTime->hour * 60 * 60 + \
			pDestTime->min * 60 + \
			pDestTime->sec;
	}


	// SI_ASSERT( dwDestRun >= dwSrcRun );
	if( dwDestRun < dwSrcRun )
		return (unsigned int)-1;

	return (dwDestRun - dwSrcRun);	
}

tagDWORDTime AddDay(tagDWORDTime st_time)
{
	int n_day = st_time.day;
	int n_month = st_time.month;
	int n_year = st_time.year;
	n_day++;
	if(IsLeapYear(n_year))
	{
		if(n_month == 2 && n_day == 30)
		{
			n_day = 1;
			n_month++;
		}
	}
	else
	{
		if(n_month == 2 && n_day == 29)
		{
			n_day = 1;
			n_month++;
		}
	}

	if(n_day > 31)
	{
		if(n_month == 12)
		{
			n_day = 1;
			n_month = 1;
			n_year++;
		}
		else
		{
			n_day = 1;
			n_month++;
		}
	}
	else if(n_day == 31)
	{
		if(n_month == 4 || n_month == 6 || n_month == 9 || n_month == 11)
		{
			n_day = 1;
			n_month++;
		}
	}

	tagDWORDTime st_temp(0, 0, 0, n_day, n_month, n_year);
	return st_temp;
}

bool is_between_two_time( tagDWORDTime cur_time, int nBeginWeek, int by_start_h, int by_start_m, int nEndWeek, int by_end_h, int by_end_m )
{
	INT  WeekDay = (INT)WhichWeekday(cur_time); 
	if (nEndWeek < nBeginWeek)
	{
		nEndWeek += 7;
		if (WeekDay < nBeginWeek)
			WeekDay += 7;
	}
	tagDWORDTime perDayTimeStart = cur_time, perDayTimeEnd = cur_time;
	tagDWORDTime yuandianTime = cur_time;
	yuandianTime.hour = 0;
	yuandianTime.min = 0;
	yuandianTime.sec = 0;
	yuandianTime = DecreaseTime(yuandianTime, WeekDay * 24 * 60 * 60);
	perDayTimeStart = IncreaseTime(yuandianTime, nBeginWeek * 24 * 60 * 60);
	perDayTimeEnd = IncreaseTime(yuandianTime, nEndWeek * 24 * 60 * 60);
	perDayTimeStart.hour = by_start_h;
	perDayTimeStart.min = by_start_m;

	perDayTimeEnd.hour = by_end_h;
	perDayTimeEnd.min = by_end_m;

	int leftToTodayStart = CalcTimeDiff(perDayTimeStart, cur_time);
	int leftToTodayEnd = CalcTimeDiff(perDayTimeEnd, cur_time);
	if(leftToTodayStart > 0 || leftToTodayEnd <= 0) 
		return false;

	return true;
}

int DwordTime2UTCTime(tagDWORDTime dw_time)
{
	tm t;
	time_t t_of_day;
	t.tm_year = dw_time.year + 2000 - 1900;
	t.tm_mon = dw_time.month - 1;  //月数取值范围[0, 11], 0代表一月
	t.tm_mday = dw_time.day;
	t.tm_hour = dw_time.hour;
	t.tm_min = dw_time.min;
	t.tm_sec = dw_time.sec;
	t.tm_isdst = 0;
	t_of_day = mktime(&t);
	int serverUTCTime = (int)t_of_day;
	return serverUTCTime;
}
