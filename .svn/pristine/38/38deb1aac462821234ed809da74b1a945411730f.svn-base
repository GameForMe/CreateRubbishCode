/**
 *	@file		SBKShenDianUI.h
 *	@author		shenyaoyan
 *	@date		2016/07/28
 *	@version	
 *	@brief		沙巴克神殿界面
 */

#ifndef _SBKSHENDIANUI_H_
#define _SBKSHENDIANUI_H_

#include "UiInterface.h"
#include "NormalLayer.h"
#include "SBKSDManager.h"

class SBKShenDianUI
	: public UiInterface
{
public:
	SBKShenDianUI();
	~SBKShenDianUI();
	virtual CCNode* openUi();
};

class ItemNode;
class ListControl;

class SBKShenDianUILayer
	: public NormalLayer
{
	enum
	{
		ENT_GuildTitle = 1, //当前行会提示
		ENT_CheckTitle = 2, //最大关卡提示
		ENT_GuildName  = 3, //当前行会名称
		ENT_CheckNum   = 4, //最大关卡数
		ENT_DropLabel  = 6, //可能掉落
		ENT_TimeLabel  = 7, //剩余次数
		ENT_ItemNode1  = 10,
		ENT_ItemNode2  = 11,
		ENT_ItemNode3  = 12,
		ENT_ItemNode4  = 13,
		ENT_ItemNode5  = 14,
		ENT_ItemNode6  = 15,
	};

public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SBKShenDianUILayer,create);

	SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	bool onAssignCCBMemberVariable(CCObject* pTarget,const char* pMemberVariableName, CCNode* pNode);
	void onNodeLoaded(CCNode* pNode,CCNodeLoader* pNodeLoader);

	SBKShenDianUILayer();
	~SBKShenDianUILayer();

	virtual void onEnter();
	virtual void onExit();

	void setData();

	void onCloseBtnPressed(CCObject* pSender,CCControlEvent pCCControlEvent);
	void onTeamEnterBtnPressed(CCObject* pSender, CCControlEvent pCCControlEvent);

private:
	CCSprite* m_frame;
	LabelFT* m_guildName;
	LabelFT* m_maxCheck;
	LabelFT* m_timeLabel;
	ItemNode* m_itemNode[MAYDROPITEMMAX];
	ListControl* m_list;
	CCLabelTTF* m_descTitle;
};

class ShenDianItem
	: public CCNode
	, public CCBSelectorResolver
	, public CCNodeLoaderListener
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(ShenDianItem,create);

	ShenDianItem();
	~ShenDianItem();

	static CCNode* getShenDianItem();

	SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	void onNodeLoaded(CCNode * pNode, CCNodeLoader * pNodeLoader);

	void onCheckBtn1Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn2Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn3Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn4Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn5Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn6Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn7Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn8Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn9Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);
	void onCheckBtn10Pressed(CCObject* pSender, CCControlEvent pCCControlEvent);

	void showTips();

private:
	int checkPoint;
};

#endif