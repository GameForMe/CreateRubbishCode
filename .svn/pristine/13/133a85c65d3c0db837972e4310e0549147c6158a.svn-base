#pragma  once
#include <string>
#include "item.h"
#include "ItemNode.h"
#include "NumKeypad.h"
#include "cocos-ext.h"
#include "TradingUI.h"
#include "UiInterface.h"
#include "NormalLayer.h"
#include "ListControl.h"
#include "LocalPlayer.h"
#include "VerticalList.h"
#include "Trading_Define.h"
#include "TradingSetPlane.h"
#include "TradingEquipData.h"
#include "TradingEquipItemTipUI.h"

using namespace std;
using namespace cocos2d;
using namespace cocos2d::extension;

class TradingEquipItemTipUILayer;
class TradingEquipItemTipUI :public UiInterface
{
public:
	// 装备属性的标签页
	TradingEquipItemTipUI();
	~TradingEquipItemTipUI();
	virtual CCNode *openUi();
	TradingEquipItemTipUILayer *getUiLayer();
};

class TradingEquipItemTipUILayer :public NormalLayer
{
public:
	TradingEquipItemTipUILayer();
	~TradingEquipItemTipUILayer();

	enum eTradingTag
	{
	   	ETT_onTherFrame = 1,//其他人物品信息
		ETT_payDutyFrame ,//交易税
		ETT_equipFrame ,//装备
		ETT_itemFrame ,//物品
		ETT_setDataFrame,//设置界面
		ETT_TradingTotal,
	};

	enum epayDutyTag
	{
		ETT_payDutyPrice= 1, //上架费
		ETT_payDutyTradTax ,//交易税
		ETT_payDutyTotal,
	};

	enum eAttrTag
	{
		ETT_AttrFirst = 1,
		ETT_AttrSecond = 2,
		ETT_AttrTotal = 3,
	};

	enum eItemTag
	{
		NT_Icon = 0,
		NT_Name = 1,
		NT_State = 2,
		NT_Desc = 3,
		NT_Price = 4,
		NT_UseLevel = 5,
		NT_UseTimes = 6,
		NT_SpeDesc = 7,
	};

	enum eEquipTag
	{
		ETT_EquipName = 1,	                //装备名字 1;
		ETT_Quality,		                //装备品质名字 2;
		ETT_FightNumSE,		              //战斗力特效node 3
		ETT_Profession,		                //适合职业 4;
		ETT_EquipLevel,		                //等级 5;
		ETT_EquipPos,		                //部位 6;
		ETT_EquipDurability,                //耐久 7;
		ETT_BaseAttr,		                //基础属性 8;
		ETT_IndentifyAttr,	                //附加属性 9;
		ETT_FightPicture,		            //战斗力底纹图片 10;
		ETT_ItemNode,                       //道具框 11;
		ETT_BaseAttrCutline,                //基础属性栏分割线 12;
		ETT_AditionalAttrCutline,           //附加属性栏分割线 13;
		ETT_Luck,                           //幸运 14;
		ETT_SpecialRingDesc,                //特戒说明 15;
		ETT_BaseAttrLabel,                //基础属性label		16-21
		ETT_AdditionalLabel = 22,            //附加属性label		22-27
		ETT_FightNum = 28,                 //战斗力字体		30
		ETT_EquipedSymbol = 101,            //已经装备的标志 101;
	};

 public:
	static TradingEquipItemTipUILayer* createFromCCBI(const char* szFile,CCObject* pOwner=NULL,UiInterface* holder=NULL);
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(TradingEquipItemTipUILayer, create);
	virtual void onExit();
	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void ondanjiaBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent );
	void onshuliangBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent );
	void onClickBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent );

	void initWithItem(f_item *item,const tagTradingItemDataMsg *itemdata = NULL);
	void setCommonTitleText(CCNode * node,int tag, int value,bool redColor = false,bool systemColor = false,CCPoint pos = CCPoint(0,0));
	void setCommonTitleText(CCNode * node,int tag, const string str, bool redColor = false,bool systemColor = false,CCPoint pos = CCPoint(0,0));
	void setCommonText(LabelFT *label, const string str, bool redColor = false,bool systemColor = false);

	void refreshItemData(f_item *item);
	void setItemUseLevel( int level );
	void setItemDesc(const std::string desc);
	void setItemPrice(int price);
	void setItemSpecialDesc(const std::string spedesc);
	void setItemName(const char* name);
	void setItemNode(f_item *item);
	void hideCompose(bool value);

	void refreshEquipData(f_item *item);
	void setEquipName(const char* name);
	void setEquipNode(f_item *item);
	void setEquipEqualityText( EItemQuality eQuality );
	void setEquipBattleSuperEffect();
	void setEquipFightText( int value);
	void setEquipBaseAttr();
	void hideEquipBaseAttr();

	void setEquipIdentifyAttr();
	void hideEquipIdentifyAttr();
	
	void SetPayDutyTradetax(float value);
	void updateItemTipList();

	void CheakEquipIsPosy(f_item*	m_pFitem);
	void SetBtnImage(eBtnType Type );
	eBtnType GetBtnType(){return m_eBtnType;}
public:
	 cocos2d::CCNode *getPayDutyInfoNode(){return m_pPayDutyInfo;}
private:
	std::string preSubLevelToMsg(int level);
	void setRefreshSetPlaneData(f_item *item,const tagTradingItemDataMsg *itemdata);
	void setBind( bool state);
	void SendDeleteRoleDownCallFun();
	void CheakUpConditionToMsg(LocalPlayer* player);
	void TradingUpRemoveGemBtnCallFun();
	void SendTradingUpCallFun();
private:
	TradingEquipData*				m_pEquipData;
	cocos2d::CCNode*				m_pUICCLayer;
	ListControl*					m_pItemTipControl;
	f_item*							m_pFitem;  
	const tagTradingItemDataMsg*	m_PItemdata;

	cocos2d::CCNode*				m_pOnterInfo; 
	cocos2d::CCNode*				m_pItemTipTalk;
	TradingSetPlane*				m_pSetPrice;
	TradingSetPlane*				m_pSetNum;

	cocos2d::CCNode*				m_pEquipInfo; 
	cocos2d::CCNode*				m_pEquipCCNode;
	ItemNode*						m_pEquipnode;
	LabelFT*						m_pEquipName;
	LabelFT*						m_pEquipqualityName;
	GameActionNode*					m_pEquipFireSEAcNode;
	cocos2d::CCNode*				m_pEquipFireCCNode;
	CCLabelBMFont*					m_pEquipFightNumBLabel;
	cocos2d::CCNode*				m_pEquipFightNumBCCNode;
	cocos2d::CCSprite*				m_pEquipFireSprite;

	cocos2d::CCNode*				m_pItemInfo; 
	cocos2d::CCNode*				m_pItemCCNode;
	LabelFT*						m_pItemName;
	LabelFT*						m_pItemUseLevel;
	LabelFT*						m_pItemDesc;
	LabelFT*						m_pItemDescSpecial;
	LabelFT*						m_pItemState;
	ItemNode*						m_pItemnode;

	cocos2d::CCNode*				m_pPayDutyInfo; 
	LabelFT*						m_pPayDutyPrice;
	LabelFT*						m_pPayDutyTradetax;

	cocos2d::CCNode*				m_pSetDataInfo; 
	cocos2d::CCNode*				m_pPriceCCNode;
	cocos2d::CCNode*				m_pNumCCNode;
	cocos2d::CCNode*				m_pPriceKeypad;
	cocos2d::CCNode*				m_pNumKeypad;
	cocos2d::CCLabelTTF*			m_pTotalPriceLabel;
	cocos2d::CCLabelTTF*			m_pOnePriceText;
	cocos2d::CCLabelTTF*			m_pAllPriceText;
	cocos2d::CCLabelTTF*			m_pNumText;
	cocos2d::CCLabelTTF*			m_pUseLevelText;
	cocos2d::CCLabelTTF*			m_pTimeText;
	CCControlButton*				m_pClickBtn;
	eBtnType						m_eBtnType;

public:
	static INT64					m_n64_serial;
};

