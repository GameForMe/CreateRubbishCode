#ifndef ROLETITLEUI_H
#define ROLETITLEUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
using namespace cocos2d;
using namespace cocos2d::extension;

#include "FrameSprite.h"
#include "ListItem.h"
#include "VerticalList.h"
#include "UiInterface.h"

class TouchSprite;
class  CheckButton;
class RoleTitleUiLayer;

class RoleTitleListItem : public ListItem
{
	friend class RoleTitleUiLayer;
	enum eNodeTag
	{
		NT_Name = 0,
	};

	enum eHorizonPos
	{
		HP_Name = 75,
	};

public:
	RoleTitleListItem();
	virtual ~RoleTitleListItem();
	void setData(unsigned int id);
	unsigned int getId() const {return _id;}
	virtual CCSize getContentSize();
	RoleTitleUiLayer *getUiLayer();
	virtual void onSelectChanged(bool select);
private:
	unsigned int _id;
};

class TitleSelectFrame 
	: public FrameSprite
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eNodeTag
	{
		NT_Content = 0
	};
public:
	TitleSelectFrame();
	virtual ~TitleSelectFrame();
	CREATE_FUNC(TitleSelectFrame);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onNodeLoaded(CCNode * pNode, CCNodeLoader * pNodeLoader);
	void showFrame(bool show);
	void setTitleIndex(int index) { _index = index; }
	int getTitleIndex() const { return _index; }
	unsigned int getSelect();
protected:
	void updateList();
private:
	CCPoint _stPt;
	CCScrollView *_scrollView;
	CCNode *_content;
	VerticalList<RoleTitleListItem> *_verticalList;
	int _index;
};

class RoleTitleUi : public UiInterface
{
	friend class RoleTitleUiLayer;
public:
	RoleTitleUi();
	~RoleTitleUi();
	virtual CCNode *openUi();
	virtual void popupUIOnEnd();
	RoleTitleUiLayer *getUiLayer();
	void setRoleId(unsigned int roleId);
	void updateData(unsigned int roleId);
/*	void saveTitleData();*/
};

class RoleTitleUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class RoleTitleUi;

	enum eNodeTag
	{
		NT_Frame = 0,
		NT_SelFrame = 1,
		NT_Title1 = 0,
		NT_Title2 = 1,
		NT_Title3 = 2,
		NT_ChangeTitle1 = 3,
		NT_ChangeTitle2 = 4,
		NT_ChangeTitle3 = 5,
		NT_TitleAttrLabel = 6,
		NT_TitleDescLabel = 7,
		NT_SelRect1 = 8,
		NT_SelRect2 = 9,
		NT_SelRect3 = 10,
		NT_EquipTab = 20,
		NT_AttrTab = 21,
		NT_MsgTab = 22,

		//是否选择更换称号的复选框Tag
		NT_SelectChange1 = 31,
		NT_SelectChange2 = 32,
		NT_SelectChange3 = 33
	};

public:
	RoleTitleUiLayer();
	~RoleTitleUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(RoleTitleUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCloseBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void onOkBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void changeTitle();
	
	void onEquipTabClicked(TouchSprite*, bool);
	void onAttrTabClicked(TouchSprite*, bool);
	void onInfoTabClicked(TouchSprite*, bool);

	//声明称号更换按钮点击事件;
	void onChangeBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChangeBtnPressed2(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChangeBtnPressed3(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void setSelectTitle(int index);

	//是否显示称号;
	void onShowTitle1State(CheckButton*, bool);
	void onShowTitle2State(CheckButton*, bool);
	void onShowTitle3State(CheckButton*, bool);

protected:
	void setRoleId(unsigned int roleId);
	unsigned int getRoleId() const { return _roleId; }
	void updateDisplayData(unsigned int roleId);
	void setTitle(int titleIndex, unsigned int titleId);
	void setTitleAttr(const std::string &str);
	void setDesc(const std::string &desc);
private:
	CCSprite *_frame;
	TitleSelectFrame *_selectFrame;
	CCNode* m_no_title_cue;
	unsigned int _roleId;
	CCPoint _stPt;
	int _selectTitle;
	std::map<int,bool>m_AttrRemoveMapTitle;
};


#endif //ROLETITLEUI_H