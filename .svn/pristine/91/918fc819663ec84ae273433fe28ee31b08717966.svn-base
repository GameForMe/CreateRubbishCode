#include "CreatureCacheData.h"
#include "CommonDefine.h"
#include "CommonClient.h"
#include "DBMgr.h"
#include "UiTools.h"

AUTO_REGISTER_DATABASE(CreatureCacheData);

CreatureCacheData::CreatureCacheData()
	:f_cache_data_base(EDBL_Game)
{

}

CreatureCacheData::~CreatureCacheData()
{
}

void CreatureCacheData::clear()
{
// 	auto iter = mCache.begin();
// 	auto end = mCache.end();
// 	for (; iter != end  ; ++iter )
// 	{
// 		stCreateProto* p = iter->second;
// 		if (p)
// 		{
// 			delete p;
// 		}
// 	}
	mCache.clear();

	mMapIDToBossID.clear();
}

void CreatureCacheData::load()
{
	loadWithXML();
/*	char tmp[64]={0};*/
// 	safe_sprintf(tmp,"SELECT * FROM %s","CreatureInfo");
// 	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation(tmp);
// 	c_sql_table* table = c_db_manager::getSingleton()->create_table();
// 	while(table->retrieve_row())
// 	{
// 		//stCreateProto* p = new  stCreateProto;
// 		stCreateProto data ;
// 		unsigned int idx = table->get_index("id");
// 		//SQL_START_WITH_DATA(CreatureInfo,stCreateProto,data);
// 		SQL_EXTRA_INT(data.dwID ,AnimaterId);
// 		SQL_EXTRA_STRING(data.strAnimatorName ,AnimaterFileName);
// 		SQL_EXTRA_STRING(data.strName ,CreatureName);
// 		SQL_EXTRA_STRING(data.strContext ,Context);
// 		SQL_EXTRA_INT(data.nPosX ,xpos);
// 		SQL_EXTRA_INT(data.nPosY ,ypos);
// 		SQL_EXTRA_STRING(data.strMapName ,map);
// 		SQL_EXTRA_INT(data.nFuncType ,funtype);
// 		SQL_EXTRA_INT(data.nFunid ,funid);
// 		SQL_EXTRA_INT(data.nLevel ,Level);
// 		SQL_EXTRA_INT(data.nBossType ,boss);
// 		SQL_EXTRA_STRING(data.strPortrait ,portrait);
// 		SQL_EXTRA_STRING(data.strSound1 ,sound1);
// 		SQL_EXTRA_STRING(data.strSound2 ,sound2);
// 		SQL_EXTRA_STRING(data.strSound3 ,sound3);
// 		SQL_EXTRA_INT(data.fRatio ,hpRatio);
// 		SQL_EXTRA_INT(data.nMsgID ,msgID);
// 		SQL_EXTRA_STRING(data.strEffectName ,effectName);
// 		SQL_EXTRA_INT(data.fBodyRatio ,bodyRatio);
// 		SQL_EXTRA_STRING(data.strAttSound ,attsound);
// 		SQL_EXTRA_STRING(data.strDieSound ,diesound);
// 		SQL_EXTRA_INT(data.nType ,type);
// 		SQL_EXTRA_INT(data.nAniType ,animateEX);
// 		SQL_EXTRA_INT(data.nbodyDisplayID ,body);
// 		SQL_EXTRA_INT(data.nweaponDisplayID ,weapon);
// 		SQL_EXTRA_INT(data.nwingDisplayID ,wing);
// 		SQL_EXTRA_INT(data.nDeadEffectType,dieeffect);
// 		if (data.fBodyRatio >0)
// 		{
// 			unsigned int id = name_crc32(convertWName(data.strMapName));
// 			mMapIDToBossID[id] = data.dwID;
// 		}
// 
// 		mCache.insert(std::make_pair(data.dwID,data));
// 	}
// 	c_db_manager::getSingleton()->destroy_table(table);
// 	c_db_manager::getSingleton()->end_operation(cmd);
	//SQL_END;
}

void CreatureCacheData::loadWithXML()
{
	f_data_set dataset;
	std::list<std::string> fields;

	bool ret = dataset.load("Config/db/CreatureInfo.xml","AnimaterId",&fields);
	CC_ASSERT(ret);

	std::for_each(fields.begin(),fields.end(),[&](std::string const& one)
	{
		stCreateProto data ;
		data.dwID =  dataset.get_int("AnimaterId",one.c_str(),0);
		data.strAnimatorName = dataset.get_string("AnimaterFileName",one.c_str(),"");
		data.strName = dataset.get_string("CreatureName",one.c_str(),"");
		data.strContext = dataset.get_string("Context",one.c_str(),"");
		data.nPosX =  dataset.get_int("xpos",one.c_str(),0);
		data.nPosY =  dataset.get_int("ypos",one.c_str(),0);
		data.strMapName = dataset.get_string("map",one.c_str(),"");
		data.nFuncType =  dataset.get_int("funtype",one.c_str(),0);
		data.nFunid =  dataset.get_int("funid",one.c_str(),0);
		data.nLevel =  dataset.get_int("Level",one.c_str(),0);
		data.nBossType =  dataset.get_int("boss",one.c_str(),0);
		data.strPortrait = dataset.get_string("portrait",one.c_str(),"");
		data.strSound1 = dataset.get_string("sound1",one.c_str(),"");
		data.strSound2 = dataset.get_string("sound2",one.c_str(),"");
		data.strSound3 = dataset.get_string("sound3",one.c_str(),"");
		data.fRatio =  dataset.get_int("hpRatio",one.c_str(),0);
		data.nMsgID =  dataset.get_int("msgID",one.c_str(),0);
		data.strEffectName = dataset.get_string("effectName",one.c_str(),"");
		data.fBodyRatio =  dataset.get_int("bodyRatio",one.c_str(),0);
		data.strAttSound = dataset.get_string("attsound",one.c_str(),"");
		data.strDieSound = dataset.get_string("diesound",one.c_str(),"");
		data.nType =  dataset.get_int("type",one.c_str(),0);
		data.nAniType =  dataset.get_int("animateEX",one.c_str(),0);
		data.nbodyDisplayID =  dataset.get_int("body",one.c_str(),0);
		data.nweaponDisplayID =  dataset.get_int("weapon",one.c_str(),0);
		data.nwingDisplayID =  dataset.get_int("wing",one.c_str(),0);
		data.nDeadEffectType =  dataset.get_int("dieeffect",one.c_str(),0);
		data.nHitSound = dataset.get_string("hitsound",one.c_str(),"");
		if (data.fBodyRatio >0)
		{
			unsigned int id = name_crc32(convertWName(data.strMapName));
			mMapIDToBossID[id] = data.dwID;
		}
		mCache.insert(std::make_pair(data.dwID,data));
	});
}

stCreateProto const* CreatureCacheData::getProto( unsigned int dwID )
{
	auto p = mCache.find(dwID);
	if (p != mCache.end())
	{
		return &p->second;
	}

	return NULL;
// 	BOOST_AUTO(iter,mCache.find(dwID));
// 	if (iter != mCache.end())
// 	{
// 		return &iter->second;
// 	}
// 
// 	return NULL;
}
