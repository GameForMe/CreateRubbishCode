#include "SQLCommand.h"
c_sql_command::c_sql_command(sqlite3* db_, std::string &_cmd)
	:m_db(db_),
	m_vm(NULL),
	mCmd(_cmd)
{}
//--------------------------------------------------------
c_sql_command::~c_sql_command()
{ 
	//sqlite3_free(m_vm);
	CCLOG("c_sql_command delete!!! cmd[%s]", mCmd.c_str());
}
//--------------------------------------------------------
int c_sql_command::get_index(const std::string& name_) const
{
	return sqlite3_bind_parameter_index(m_vm, (const char*)name_.c_str());
}
//--------------------------------------------------------
void c_sql_command::set_text(int index_, const std::string& value_)
{
	const char* str = (const char*)value_.c_str();
	int ret = sqlite3_bind_text(m_vm, index_, str, strlen(str), SQLITE_TRANSIENT);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_text(const std::string& name_, const std::string& value_)
{
	int idx = sqlite3_bind_parameter_index(m_vm, (const char*)name_.c_str());
	const char* str = (const char*)value_.c_str();
	int ret = sqlite3_bind_text(m_vm, idx, str, strlen(str), SQLITE_TRANSIENT);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_boolean(int index_, bool value_)
{
	int ret = sqlite3_bind_int(m_vm, index_, value_ ? 1 : 0);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_boolean(const std::string& name_, bool value_)
{
	int idx = sqlite3_bind_parameter_index(m_vm, (const char*)name_.c_str());
	int ret = sqlite3_bind_int(m_vm, idx, value_ ? 1 : 0);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_integer32(int index_, int value_)
{
	int ret = sqlite3_bind_int(m_vm, index_, value_);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_integer32(const std::string& name_, int value_)
{
	int idx = sqlite3_bind_parameter_index(m_vm, (const char*)name_.c_str());
	int ret = sqlite3_bind_int(m_vm, idx, value_);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_integer64(int index_, INT64 value_)
{
	int ret = sqlite3_bind_int64(m_vm, index_, value_);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_integer64(const std::string& name_, INT64 value_)
{
	int idx = sqlite3_bind_parameter_index(m_vm, (const char*)name_.c_str());
	int ret = sqlite3_bind_int64(m_vm, idx, value_);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_double(int index_, double value_)
{
	int ret = sqlite3_bind_double(m_vm, index_, value_);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}
//--------------------------------------------------------
void c_sql_command::set_double(const std::string& name_, double value_)
{
	int idx = sqlite3_bind_parameter_index(m_vm, (const char*)name_.c_str());
	int ret = sqlite3_bind_double(m_vm, idx, value_);
	if(ret != SQLITE_OK)
	{
		std::string error = (char*)sqlite3_errmsg(m_db);
	}
}