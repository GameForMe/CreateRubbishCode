#include "cocos2d.h"
using namespace cocos2d;
#include "Phyx.h"
#include "RoleManager.h"
#include "LocalPlayer.h"

Phyx::Phyx(){m_simulate = true;}
//////////////////////////////////////////////////////////////////////////
Phyx::~Phyx(){}
//////////////////////////////////////////////////////////////////////////
bool Phyx::initialize()
{
	return true;
}
//////////////////////////////////////////////////////////////////////////
void Phyx::shutdown()
{
}
//////////////////////////////////////////////////////////////////////////
void Phyx::addPhyxObject( unsigned int id , int x , int y )
{
	BCircle bc;
	bc.m_center = ccp(x, y);
	bc.m_radius = 12;
	_allOtherObjects.insert(std::make_pair(id , bc));
}
//////////////////////////////////////////////////////////////////////////
void Phyx::modifyPhyxObjectPos( unsigned int id , int x , int y )
{
	std::map<unsigned int , BCircle>::iterator iter = _allOtherObjects.find(id);
	if(iter!=_allOtherObjects.end())
	{
		iter->second.m_center = ccp(x , y);
		iter->second.m_radius = 12;
	}
}
//////////////////////////////////////////////////////////////////////////
void Phyx::removePhyxObject( unsigned int id )
{
	std::map<unsigned int , BCircle>::iterator iter = _allOtherObjects.find(id);
	if(iter!=_allOtherObjects.end())
		_allOtherObjects.erase(iter);
}
//////////////////////////////////////////////////////////////////////////
Phyx* Phyx::getInstance()
{
	static Phyx phyx;
	return &phyx;
}
//////////////////////////////////////////////////////////////////////////
void Phyx::clear()
{
	_allOtherObjects.clear();
}
//////////////////////////////////////////////////////////////////////////
bool Phyx::queryCollision(int x , int y , const CCPoint& dir)
{
	if(m_simulate)
	{
		CCPoint d = ccpNormalize(dir);
		BCircle bc;
		bc.m_center = ccp(x+d.x*24, y+d.y*24);	
		bc.m_radius = 12;
		std::map<unsigned int , BCircle>::iterator iter = _allOtherObjects.begin();
		for(;iter!=_allOtherObjects.end();++iter)
		{
			if(circleCollision(bc , iter->second))
				return true;
		}
	}
	return false;
}
//////////////////////////////////////////////////////////////////////////
bool Phyx::queryCollision( int x , int y )
{
	if(m_simulate)
	{
		BCircle bc;
		bc.m_center = ccp(x, y);	
		bc.m_radius = 12;
		std::map<unsigned int , BCircle>::iterator iter = _allOtherObjects.begin();
		for(;iter!=_allOtherObjects.end();++iter)
		{
			if(circleCollision(bc , iter->second))
				return true;
		}
	}
	return false;
}

void Phyx::simulate( bool _sim )
{
	m_simulate = _sim;
}
