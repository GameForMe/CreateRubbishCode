#ifndef TEAMSETTINGPANEL_H__
#define TEAMSETTINGPANEL_H__

#include "NormalLayer.h"
#include "RadioMutex.h"
#include "TeamMgr.h"

class RadioMutex;
class TuningScrollView;

class TeamSettingPanel:public NormalLayer
{
public:
	TeamSettingPanel();
	~TeamSettingPanel();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(TeamSettingPanel, create);

	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	static TeamSettingPanel* createPanel(const char* szFile,CCObject* pOwner);

	void setup(stTeamFilter const& filter);
private:
	void onTarget(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onNone(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onAllClass(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onWarr(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onMag(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onPri(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onApply(CCObject * pSender, CCControlEvent pCCControlEvent);

	void scorllEnd(TuningScrollView* scroll,size_t endAt);
	void initTuningSV();
	void initTargetSV();
	void initClass();

	void apply();
private:
	CCNode*				mpSelector;
	RadioMutex*		mpClassMutex;

	RadioMutex*		mpTargetMutex;
	
	TuningScrollView*	 mpLvLower;
	TuningScrollView*	 mpLvUpper;

	cocos2d::extension::CCScrollView*			mpTargetSV;

	stTeamFilter			moFilterCache;
};


#endif // TEAMSETTINGPANEL_H__
