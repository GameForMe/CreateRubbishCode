/**
 *	@file		SBKShouTongShowUI.cpp
 *	@author		shenyaoyan
 *	@date		2016/07/28
 *	@version	
 *	@brief		沙巴克首通奖励查看界面
 */

#include "SBKShouTongShowUI.h"
#include "UiLoader.h"
#include "ListControl.h"
#include "UiTools.h"
#include "CommonClient.h"
#include "UiManager.h"
#include "SBKSDManager.h"
#include "CfgReader.h"
#include "ItemNode.h"

SBKShouTongShowUI::SBKShouTongShowUI()
{

}

SBKShouTongShowUI::~SBKShouTongShowUI()
{

}

CCNode* SBKShouTongShowUI::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["SBKShouTongShowUI"] = UiLayerLoader<SBKShouTongShowUILayer>::loader();
	nodeLoaders["ListControl"] = ListControlLoader::loader();
	CCNode* uiNode = readUiFromCCBI("sbkfubenjiangli",nodeLoaders,_loadSpriteSheet);
	return uiNode;
}

//////////////////////////////////////////////////////////////////

SBKShouTongShowUILayer::SBKShouTongShowUILayer()
	: m_list(NULL)
{

}

SBKShouTongShowUILayer::~SBKShouTongShowUILayer()
{

}

SEL_MenuHandler SBKShouTongShowUILayer::onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

SEL_CCControlHandler SBKShouTongShowUILayer::onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName)
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this,"onCloseBtnPressed",SBKShouTongShowUILayer::onCloseBtnPressed);
	return NULL;
}

bool SBKShouTongShowUILayer::onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode)
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(ListControl*,m_list);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*, m_descLabel);
	return false;
}

void SBKShouTongShowUILayer::onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader)
{
	Helper::replaceLabelTTFWithLabelFTAndRemove(m_descLabel);
	setData();
}

void SBKShouTongShowUILayer::setData()
{
	SBKSDManager* sbkManager = SBKSDManager::get_singleton_ptr();
	const SBKSDManager::check_data& data = sbkManager->getData();
	int checkPoint = 0;
	std::for_each(data.begin(),data.end(),[&](SBKSDManager::check_data::value_type const& item)
	{
		SBKShouTongItem* sbkItem = SBKShouTongItem::createItem();
		bool isPass = sbkManager->getIsPassCheck(checkPoint);
		sbkItem->setData(item.second,isPass);
		m_list->add_item(sbkItem);
		++checkPoint;
	});
	m_list->scroll_to_top();
}

void SBKShouTongShowUILayer::onCloseBtnPressed(CCObject* pSender, CCControlEvent pCCControlEvent)
{
	CLOSE_UI(WCT_ShenDian_First_UI);
}

/////////////////////////////////////////////////////////////////

SBKShouTongItem::SBKShouTongItem()
	: m_checkLabel(NULL)
	, m_getSprite(NULL)
	, m_unGetSprite(NULL)
	, m_frame(NULL)
{
	for ( int i = 0 ; i < SHENDIANSHOUTONGMAX ; ++i )
	{
		m_itemNode[i] = NULL;
	}
}

SBKShouTongItem::~SBKShouTongItem()
{

}

SBKShouTongItem* SBKShouTongItem::createItem()
{
	CCNodeLoaderLibrary* ccNodeLoaderLibrary = CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
	ccNodeLoaderLibrary->registerCCNodeLoader("SBKShouTongItem",UiNodeLoader<SBKShouTongItem>::loader());
	ccNodeLoaderLibrary->registerCCNodeLoader("ItemNode",UiNodeLoader<ItemNode>::loader());
	CCBReader* ccbReader = new CCBReader(ccNodeLoaderLibrary);
	std::string strFullPath = CFGReader::instance()->get_ui_ccbi_filepath("sbkfubenjiangliitem");
	CCNode* uiNode = ccbReader->readNodeGraphFromFile(strFullPath.c_str());
	SBKShouTongItem* item = dynamic_cast<SBKShouTongItem*>(uiNode);
	CC_ASSERT(item);
	ccbReader->autorelease();
	return item;
}

SEL_MenuHandler SBKShouTongItem::onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

SEL_CCControlHandler SBKShouTongItem::onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName)
{
	return NULL;
}

bool SBKShouTongItem::onAssignCCBMemberVariable(CCObject* pTarget,const char* pMemberVariableName, CCNode* pNode)
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCNode*, m_frame);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_getSprite);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*, m_unGetSprite);
	return false;
}

void SBKShouTongItem::onNodeLoaded(CCNode * pNode, CCNodeLoader * pNodeLoader)
{
	CC_ASSERT(m_frame);

	m_checkLabel = Helper::replaceLabelTTFWithLabelFTAndRemove(dynamic_cast<CCLabelTTF*>(m_frame->getChildByTag(ENT_CheckLabel)));

	for ( int i = 0 ; i < SHENDIANSHOUTONGMAX ; ++ i )
	{
		m_itemNode[i] = dynamic_cast<ItemNode*>(m_frame->getChildByTag(ENT_ItemNode1+i));
		CC_ASSERT(m_itemNode[i]);
	}
}

void SBKShouTongItem::setData(shendian_check_data const& item,bool isPass)
{
	std::string checkStr;
	safe_sprintf(checkStr,STRING_TABLE["check_num_str"],item.check_point);
	m_checkLabel->setString(checkStr);

	for ( int i = 0 ; i < SHENDIANSHOUTONGMAX ; ++i )
	{
		m_itemNode[i]->setDataId(item.item_first_pass_id[i]);
		m_itemNode[i]->setNum(item.item_first_pass_num[i]);
		m_itemNode[i]->hideItemOpBtn();
		m_itemNode[i]->setClickable(true);
	}

	m_getSprite->setVisible(isPass);
	m_unGetSprite->setVisible(!isPass);
}