#ifndef RECEIVEREWARDUI_H
#define RECEIVEREWARDUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiTools.h"
#include "UiInterface.h"
#include "item.h"
#include "ItemNode.h"

using namespace cocos2d;
using namespace cocos2d::extension;


#define REWARDITEMBIANJIE 22
#define REWARDITEMJIANJU 45

struct SignReceiveRewardData
{
	unsigned int selectIndex;
	int vipLevel;
};

struct ReceiveRewardItem
{
	unsigned int itemId;
	int itemCount;
	std::string itemName;
	std::string iconName;
	ReceiveRewardItem()
		: itemId(0)
		, itemCount(0)
		, itemName("")
		, iconName("")
	{

	}
};

class ReceiveRewardUiMgr
{
public:
	ReceiveRewardUiMgr();
	~ReceiveRewardUiMgr();
	static ReceiveRewardUiMgr* GetInstance();
	void setItemData(unsigned int Id,int Count = 1,int index = 0);
	std::vector<ReceiveRewardItem> const& getItemBowl();
	void clearItemBowl();
	int getInformation(){return _isHaveInformation;}

	void openRewardUi();
	//继续领取按钮状态
	bool getContinueLingquReward(){ return isShowContinueBtn; }
	void setContinueLingquReward(bool isOk){ isShowContinueBtn = isOk;}
	//充值后是否发邮件领奖
	int getRechargeTimes(){return rechargeTimes;}
	void setRechargeTimes(int times){rechargeTimes = times;}
	//向服务器请求邮件奖励
	void sendToServerRequestEmailReward(int level);
	//保存签到的数据
	void setRewardData(SignReceiveRewardData _rewardData){rewardData = _rewardData; }
	SignReceiveRewardData getRewardData(){return rewardData; }
	void setAwardBySelf(std::string name,std::string iconname);
	void CloseReceiveRewardUI();
	void setUiTag(eWroldChildTag tag){
		uiTag = tag;
	}
	eWroldChildTag getUiTag(){
		return uiTag;
	}
private:
	std::vector<ReceiveRewardItem> _RewardItemBowl;
	int _isHaveInformation;	//控制界面上是否有说明信息文字
	bool isShowContinueBtn; //是否显示继续领取按钮	
	int rechargeTimes;
	SignReceiveRewardData rewardData;
	eWroldChildTag uiTag; //用于标识是在哪个UI开启的此页面
};

class ReceiveRewardUi : public UiInterface
{
public:
	ReceiveRewardUi();
	~ReceiveRewardUi();
	CCNode* openUi();
};

class ReceiveRewardUiLayer
	: public CCLayer
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	enum eRewardNodeTag
	{
		RNT_Sprite = 0,
		RNT_Layer = 1,
		RNT_LabelTTF = 2,
		RNT_BUTTON = 4,
		RNT_ItemSprite = 10,
		RNT_ItemNodeBegin = 20,
		RNT_ItemLabelTTF = 30,
	};

	ReceiveRewardUiLayer();
	~ReceiveRewardUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(ReceiveRewardUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onExit();


	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);

	void onOkBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent); 
	void onjixulingquBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	ItemNode *getItemNode(int index);
	void setRewardData();
	void setContinueButtonDisplay(bool isShow);
private:
	CCLabelTTF * _btn;
	CCNode *_moveNode;
	CCControlButton* _continueRewardButton;
	//int _itemCount;
	float _itemSpriteWidth;
	//std::vector<ReceiveRewardItem>  _RewardItemList;
	CCScrollView *_itemListScrollView;
	CCSprite *_awardSprite;
	bool _isLessThanFore;    //是否少于四个物品
};







#endif	//RECEIVEREWARDUI_H