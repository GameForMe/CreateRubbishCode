#ifndef AUDIOPLAYER_H
#define AUDIOPLAYER_H

#include <vector>
#include <string>
#include <map>
#include "SimpleAudioEngine.h"

using namespace CocosDenshion;

class AudioPlayer
{
public:
	static AudioPlayer *getSigletonPtr();
	static void setBackgroundVolume(float volume);
	static void setEffectVolume(float volume);
	virtual ~AudioPlayer() { }

	void stopAllSoundEffect();

	void playerMusic(const std::string& musicName, bool loop = true);
	void stopMusic(bool releaseData = true);
	//技能音效
	int playerEffect(const std::string & effectFileName, bool loop = false);
	void stopEffect(unsigned int effectId = 0);
	//场景音效
	int playerSoundSceneEffect(const std::string & effectFileName, bool loop = false);
	void stopSoundSceneEffect(unsigned int effectId = 0);
	//UI音效
	int playerSoundUIEffect(const std::string & effectFileName, bool loop = false);
	void stopSoundUIEffect(unsigned int effectId = 0);
	//npc音效
	int playerSoundNpcEffect(const std::string & effectFileName, bool loop = false);
	void stopSoundNpcEffect(unsigned int effectId = 0);

	int playerMonsterSceneEffect( const std::string & effectFileName, bool loop /*= false*/ );
	void stopSoundMonsterEffect(unsigned int effectId = 0);

	void setNoStopAudio(unsigned int effectId);
	//升级音效特殊处理
	int playerLevelUpSoundEffect(const std::string & levelUpFileName,bool loop=false);
	unsigned int getNoStopAudio() {return _noStopAudio;}
	inline std::string getLastMusicName() {return _lastMusic;}	
protected:
	AudioPlayer();
	std::string _lastMusic;
	std::vector<int> _senceAudio;
	std::vector<int> _uiAudio;
	std::vector<int> _npcAudio;
	std::vector<int> _monssterAudio;
	unsigned int _noStopAudio;
};

#endif //AUDIOPLAYER_H