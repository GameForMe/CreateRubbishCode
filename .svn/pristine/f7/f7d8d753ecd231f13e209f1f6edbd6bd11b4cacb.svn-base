#ifndef ROLEINFOPROTO_H
#define ROLEINFOPROTO_H

#include "basedefine.h"
#include "buff_define.h"
#include "CmdAdapter.h"
#include "RoleDefine.h"
#include "TeamProto.h"

#pragma pack(push, 1)

#define SHACHENCHENZHUID 2910373

struct NET_SIC_get_name_by_nameid : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_get_name_by_nameid)
	unsigned int	dwNameID;			// NameID
};

struct NET_SIS_get_name_by_nameid : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_name_by_nameid)
	int	bResult;				// TRUE = 成功
	unsigned int	dwNameID;				// 请求NameID
	wchar_t	szName[X_SHORT_NAME];	// name
};

//----------------------------------------------------------------
// 游戏内生物种类
//----------------------------------------------------------------
enum ECreatureType
{
	ECT_NULL		=	0,
	ECT_Monster		=	1,		// 怪物
	ECT_GameObject	=	2,		// 可交互的地物
	ECT_NPC			=	3,		// 普通NPC
	ECT_Pet			=	4,		// 宠物
};

// 游戏内生物ai种类	by zhang
enum Eaiaction
{
	AIAT_Attack		=	0,									// 攻击型
	AIAT_Guard		=	1,									// 防守型
	AIAT_Barbette	=	2,									// 炮塔型
	AIAT_SpaceOut	=	3,									// 风筝型
	AIAT_PetAttack  =	4,									// 宠物攻击型
	AIAT_Alert		=   5,									// 警戒型	by ljp [2010-03-26:10-03]
	AIAT_Hucheng	=	6,									// 护城型
};
//---------------------------------------------------------------------
// 远程生物属性结构
//---------------------------------------------------------------------
struct tagRemoteCreatureData
{
	unsigned int			dwID;						// 生物ID
	unsigned int			dw_data_id;					// 属性ID
	int						nLevel;						// 等级
	unsigned int			dwState;					// 状态标志位
	float					fPos[3];					// 位置
	float					fFaceTo[3];					// 朝向
	int						nAtt[ERRA_End];				// 远程玩家基本属性
	ECreatureType			eCreType;					// 类型
	unsigned int			dwTargetID;					// 目标id
	int						bDynamic;					//是否动态出现
	Eaiaction				attackType;
	int						nBuffNum;					// 状态数量
	tagBuffMsgInfo	Buff[1];							// 状态列表
};

struct NET_SIS_get_remote_creature_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_remote_creature_state);
	tagRemoteCreatureData	CreatureData;		// 远程生物结构
};

struct NET_SIS_change_role_level : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_change_role_level);
	unsigned int dw_role_id;
	short nLevel;
	//int bKill;				// 是否因为击杀怪物产生变化
};

//-----------------------------------------------------------------------------
// 所有物品装备
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_item : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_role_init_state_item);
	short	n16SzBag;					// 背包大小
	short	n16SzRoleWare;				// 仓库大小
	int		n_num;						// 物品装备个数
	unsigned char	b_Over;						// 是否结束
	unsigned char byData[1];					// 技能列表
};


struct NET_SIS_change_role_exp : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_change_role_exp);
	INT64	nExp;				// 当前
	INT64	nChange;			// 变化多少
	int		bKill;				// 是否通过击杀怪物获得
	int     nSpecial;			//经验获得途径标识，1代表宝箱获得，2代表彩蛋，3代表神秘宝箱，后续还可能增加   大于1000的部分是师徒打怪加成
};

struct NET_SIS_avatar_equip_change : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_avatar_equip_change);
	unsigned int 	dw_role_id;
	tagEquipDisplay	EquipDisplay;	// 装备外观
	int		dw_data_id;	
	char pos;
	bool isEquip;
};

//-----------------------------------------------------------------------------
// 每天清零数据
//-----------------------------------------------------------------------------
struct NET_SIS_role_day_clear : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_day_clear)
	unsigned char byDayClear[ROLE_DAY_CLEAR_NUM];
};

struct NET_SIS_role_day_clear_two : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_day_clear_two)
	unsigned char byDayClear[ROLE_DAY_CLEAR_TWO_NUM];
};

struct NET_SIS_role_day_clear_two_data : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_day_clear_two_data)
	BYTE byType;
	BYTE bydata;
};


struct NET_SIS_role_day_all_Flower : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_day_all_Flower)
	BYTE byFlowerCount;
	INT FlowerExp;	
};

struct NET_SIS_role_day_all_byself : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_day_all_byself)
	INT BySelfExp;	
};

struct NET_SIS_role_day_all_startTime : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_day_all_startTime)
	tagDWORDTime time;
};

	  
struct NET_SIS_role_day_all_Doublepair : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_day_all_Doublepair)
	BYTE byDoublepairCount;
	INT  DoubleExp;
};


struct NET_SIS_role_day_all_RedEnvelope : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_role_day_all_RedEnvelope)
	BYTE byRedEnvelopeCount;
	INT RedEnvelopeExp;
};

//每日清除数据同步
struct NET_SIS_all_day_clear_data_sync : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_all_day_clear_data_sync)
	int		nDragonBookNum;
	int		nOpenBookNum;
	int		nDragonYuanbaoNum;
	int		nOpenYuanbaoNum;
	int		nGongFaBenison;
	int		nGongFaSummonNum;
};

struct roleOnlineState
{
	INT64 hpID;
	INT64 traID;
	int open[7];
};


//-----------------------------------------------------------------------------
// 人物快捷键数据
//-----------------------------------------------------------------------------
struct NET_SIC_key_info : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_key_info)
};

struct NET_SIS_key_info : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_key_info)
	roleOnlineState stKeyInfo;
};

//-----------------------------------------------------------------------------
// 修改人物快捷键数据
//-----------------------------------------------------------------------------
struct NET_SIC_modify_key_info : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_modify_key_info)
	roleOnlineState stKeyInfo;
};

//-----------------------------------------------------------------------------
// 设置pk值
//-----------------------------------------------------------------------------
struct NET_SIS_change_pk_value : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_change_pk_value);
	unsigned int		dw_role_id;				//角色ID
	int			iPKValue;
	int         LuckYouLess;
	//BOOL		bIsPurpureDec;
};


// 发送队伍装备数据同步消息
struct NET_SIS_Team_Equip_Info : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Team_Equip_Info);
	unsigned int dw_RoleID;
	tagEquipTeamInfo st_EquipTeamInfo;
};

// 当前外观
struct NET_SIS_avatar_equip : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_avatar_equip);
	unsigned int			dw_role_id;
	tagAvatarEquip	sAvatarEquip;
	unsigned char			fasion_flag;	// 是否使用使装模式
};

// 设置时装模式
struct NET_SIC_fashion : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_fashion);
	unsigned char			fasion_flag;	// 是否使用使装模式
};

struct NET_SIS_set_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_set_state);
	unsigned int		dw_role_id;
	EState		eState;
};

struct NET_SIS_unset_state : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_unset_state);
	unsigned int		dw_role_id;
	EState		eState;
};

//更新脚本数据数组，gx add 2014.3.12
struct NET_SIS_set_role_script_data_array:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_set_role_script_data_array);
	unsigned int dwRoleScript[MAX_ROLE_SCRIPT_DATA_NUM];
};

//gx add 2014.3.14更新玩家一些基本数据，客户端需要
struct NET_SIS_get_role_some_data:public s_net_cmd
{
	DECL_NETCMD(NET_SIS_get_role_some_data)
	//tagDWORDTime dwRoleCreateTime;
	int	nDayNumsFromCreate;//玩家创建角色距离现在几天啦
};
//end by gx 

//[bing] 副本完成度相关信息 包括星级评价等
struct s_enter_map_limit
{
	unsigned int		dw_map_id_;				// 地图ID
	unsigned int		dw_enter_num_;			// 权值
	int					e_enter_limit_;			// 副本条件

	//[bing]
	BYTE		byRankStar;				// 完成星级
	BYTE				is_get_reward;				//是否领取宝箱
};

//为了购买星魂使用的结构
struct s_enter_map_xinghun
{
	unsigned int		dw_map_id;				// 地图ID
	unsigned int		dw_id;			// 权值
};

//----------------------------------------------------------------------------
// 播放一个特效(场景的或怪物的)
//----------------------------------------------------------------------------
struct NET_SIS_play_scene_effect : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_play_scene_effect);

	ESceneEffectType		eType;				// 场景特效类型
	unsigned int			dwObjID;			// 特效ObjID
	float					cPos[3];			// 播放坐标
	unsigned int			dwEffectID;			// 特效ID，最终特效文件名格式：SCN+特效ID，场景特效存放于指定目录
};

#pragma pack(pop)

#endif //ROLEINFOPROTO_H