#ifndef NEWFUNCGUIDER_H__
#define NEWFUNCGUIDER_H__

#include "f_singleton.h"
#include <string>
#include <map>
#include <boost/function.hpp>
#include "CommonClient.h"

struct LpLevelUpEvent;
struct QuestComplete;

struct stGuideModelData 
{
	int nIndex;
	int nType;
	int nParam;
	int nForceOpenLv;
	
	std::string strPic;
};

typedef std::map<int,stGuideModelData> GuildeModelMap;

class NewFuncGuider:public f_singleton<NewFuncGuider>
{
public:
	enum
	{
		//各项目与db中id对应
		eSkill=1,              //技能
		eBattle,               //战役
		eSign,                 //签到
		eGuild,                //行会
		eInstance,             //多人副本
		eMinitaryQuest,        //军需任务
		eArena,                //竞技场
		eRide,                 //坐骑
		eOfferReward,          //悬赏
		eForge,                //锻造
		eDragon,               //龙卫开启
		eGongFa,				//功法
	};

	enum
	{
		eDirNull=-1,
		eDirLower,
		eDirUpper,
		eDirTarget,
	};

	enum
	{
		eTargetNull =-1,
		eTargetSignNode,
		eTargetNPC,
		eTargetAct,
	};
public:
	NewFuncGuider();
	~NewFuncGuider();

	bool init();
	void destroy();

	stGuideModelData const*  getModelData(int nID)const;

	int getDir(int index); 
	int getFuncPos(int nIndex);
	int getTargetType(int nIndex);

	void getInvisibleLowerBtns(std::vector<size_t>& indexList);
	void getInvisibleActGroupBtns(std::vector<size_t>& indexList);
	
	bool questIsInNewFuncGuide(unsigned short questID)const;
	bool cacheSkillFuncGuideByLocalPlayerLv(int nSkillID);

	bool enableSign()const;

	void continueSkillGuide();

	bool isForceOpen(int nFuncType)const;
	bool isForceOpenByActPos(int nActFuncPos)const;
private:
	void loadData();
	void cleanData(){mModel.clear();mQuestList.clear();}

	void onEventLvUp(LpLevelUpEvent* pEvent);
	void onEventQuestComplete(QuestComplete* pEvent);

	void invoke(int nIndex);
	int convertActFuncPosToGuideID(int funcPos)const;
private:
	GuildeModelMap			mModel;
	std::vector<unsigned short>  mQuestList;

	int								mnCacheSkillID;
};
#endif // NEWFUNCGUIDER_H__
