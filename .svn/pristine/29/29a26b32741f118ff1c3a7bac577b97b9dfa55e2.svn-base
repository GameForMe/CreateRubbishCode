/**
 *	@file		BFBattleResultUi.h
 *	@author		zhangyajie
 *	@date		2016/05/09
 *	@version	
 *	@brief		血战到底扎战斗结果UI
 */

#ifndef __BF_BATTLE_RESULT_UI__
#define __BF_BATTLE_RESULT_UI__
#include "NormalLayer.h"
#include "UiInterface.h"
#include "client_common_define.h"

using namespace cocos2d;
using namespace cocos2d::extension;

#define BF_SHOW_TIME_MIN 3

class BFBattleResultUiLayer;
class BFBattleResultUi : public UiInterface
{
public:
	BFBattleResultUi();
	~BFBattleResultUi();

	virtual CCNode *openUi();
	BFBattleResultUiLayer *getUiLayer();
	void refreshUiByResult(s_net_cmd *cmd);
	void refreshUiByBFResult(s_net_cmd *cmd);
};

class BFBattleResultUiLayer: public NormalLayer
{
	enum e_BFResultTag
	{
		BF_Node_Line1Des = 101,
		BF_Node_Line2Des,
		BF_Node_Line3Des,
		BF_Node_Line4Des,
		BF_Node_Line1Bg = 7,
		BF_Node_Line2Bg,
		BF_Node_Line3Bg,
		BF_Node_Line4Bg ,
	};
public:
	BFBattleResultUiLayer();
	~BFBattleResultUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(BFBattleResultUiLayer, create);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void update(float delta);

	virtual void onEnter();
	virtual void onExit();

/*	void refreshUiByResultType(e_BFBattleResultType pType);*/
	void refreshUiByResult(s_net_cmd *cmd);
	void refreshUiByBFResult(s_net_cmd *cmd);

	void initWinAnimation();
	void onChangeNodeVisible(CCObject* sprite);
private:
	CCNode* m_pNodeMain;
	CCNode* m_pNodeWin;
	CCNode* m_pNodeDead;
	CCNode* m_pNodeTied;
	CCNode* m_pNodeResult;


	CCNode* m_pNodeWinner;//赢家的模块
	LabelFT* m_ftWinNum;		//连胜场次

	LabelFT* m_ftResultScore;		//胜负积分
	LabelFT* m_ftKillScore;			//杀人积分
	LabelFT* m_ftSerialScore;		//连续胜负积分
	LabelFT* m_ftKillSerialScore;	//终结连胜
	LabelFT* m_ftDeadDes;			//死亡Desc
	LabelFT* m_ftTiedDes;			//战平Desc
	LabelFT* m_ftResultDes;			//最终结果描述
	e_BFBattleResultType m_pResultType;
	float m_fShowTime;
};




#endif
