#ifndef MESSAGEBOXUI_H
#define MESSAGEBOXUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"
#include "BaseDefine.h"
#include "CheckButton.h"
using namespace cocos2d;
using namespace cocos2d::extension;

class MessageBoxUi : public CCLayer
{
public:
	enum
	{
		MessageBox_Begin,
		MessageBox_Trading,
		MessageBox_End,
	};

	CREATE_FUNC(MessageBoxUi);
	bool init();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	static MessageBoxUi* createWithOneBtn(const char *title, const char *msg, const char *btnStr);
	static MessageBoxUi* createWithTwoBtn(const char *title, const char *msg, const char *btnStr1, const char *btnStr2);
	static MessageBoxUi *createWithTwoBtnWithCheck(const char *title, const char *msg, const char *btnStr1, const char *btnStr2, bool checkState);
	static MessageBoxUi* createWithTwoBtnAndCloseBtn(const char* title, const char* msg, const char* btnStr1, const char* btnStr2);
	
	static MessageBoxUi* createWithTwoBtnEx(const char *title, const char *msg, const char *btnStr1, const char *btnStr2);
	static MessageBoxUi* createWithTwoBtn_LabelEx(const char *title, const char *msg, const char *btnStr1, const char *btnStr2);	//使用LabelEx，支持设置颜色

	static MessageBoxUi* getMessageBox() ;
	static void   clearSelf();
	 
	static CCRect GetBtnPos(int nIdx);
	void updateYandiFuHuoBtnPosition(int lenth); //角色被怪物打死之后，如果不能原地复活就隐藏原地复活按钮
	CCPoint getMsgLabelPt();
	void setMsgLabelPt(CCPoint pt);
	void addToFrame(CCNode* node);
	void setSignalHide( bool signal_hide);
	bool getSignalHideState() { return is_signal_hide; }
	void updateMsgInfo(const char* title, const char* msg);
	void setButtonEnable(bool isEnbale);

	void setLinkUITag(eWroldChildTag pType);

	void close();
protected:
	void checkStateChanged(CheckButton*, bool);

SIGNALS:
	c_signal<void> signalOkBtnPressed;
	c_signal<void> signalCancelBtnPressed;
	c_signal<void, bool> signalCheckStateChange;

protected:
	CCSprite *_frame;
	LabelFT *_title;
	LabelFT *_message;
	int		m_nTag;
	CCControlButton *_okBtn;
	CCControlButton *_cancelBtn;
	LabelFT *_contentMessage;

private:
	bool is_signal_hide;
	eWroldChildTag m_eLinkUi;//链接的UI 当链接的UI关闭的时候 MessageBox也关闭 //选择性配置
};

class MessageBoxUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MessageBoxUiLayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void onOkBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCancelBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent); 
};

class MessageBoxUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(MessageBoxUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(MessageBoxUiLayer);
};



#endif //MESSAGEBOXUI_H