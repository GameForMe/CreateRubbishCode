#include "Jiehun.h"
#include "StringMgr.h"
#include "ToolTip.h"
#include "UiLoader.h"
#include "World.h"
#include "CfgReader.h"
#include "AnimationCache.h"
#include "BSAnimate.h"

JieHunUiMgr::JieHunUiMgr()
{

}
JieHunUiMgr::~JieHunUiMgr()
{

}
JieHunUiMgr* JieHunUiMgr::GetInstance()
{
	static JieHunUiMgr mgr;
	return &mgr;
}

void JieHunUiMgr::openFenUi()
{
	OPEN_UI(WCT_JieHun);
}


JieHunUi::JieHunUi()
{

}

JieHunUi::~JieHunUi()
{

}

CCNode* JieHunUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["SonghuaUiLayer"] = UiLayerLoader<JieHunUiLayer>::loader();
	nodeLoaders["FrameSprite"] = FrameSpriteLoader::loader();
	CCNode* pNode = readUiFromCCBI("jiehun", nodeLoaders, _loadSpriteSheet);
	return pNode;
}

cocos2d::SEL_MenuHandler JieHunUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler JieHunUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onSendBtnPressed", JieHunUiLayer::onSendBtnPressed);
	return NULL;
}
void JieHunUiLayer::onSendBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{
	StopYanHuaEfeect();
	_effectPosVecList.clear();
	_effectSpriteVecList.clear();
	AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_5);
	CLOSE_UI(WCT_JieHun);
}
void JieHunUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{	
	_frame = dynamic_cast<CCSprite*>(this->getChildByTag(0));
	lbName1 = dynamic_cast<CCLabelTTF*>(_frame->getChildByTag(2));
	lbName2 = dynamic_cast<CCLabelTTF*>(_frame->getChildByTag(3));
	_bgLayer = dynamic_cast<CCNode*>(this->getChildByTag(4));
	lbName1->setString(JieHunUiMgr::GetInstance()->name1.c_str());
	lbName2->setString(JieHunUiMgr::GetInstance()->name2.c_str());
	SetEffectPosion(_effectPosVecList);	
	if (_effectPosVecList.size() > 0)
	{
		RunYanHuaEffect();
	}
	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 1, true);
}
void JieHunUiLayer::RunYanHuaEffect()
{
	for (std::vector<CCPoint>::iterator iter = _effectPosVecList.begin();iter !=_effectPosVecList.end(); ++ iter)
	{
		//ÑÌ»¨ÌØÐ§
		AnimationCache::AnimateList anims;
		AnimationCache::createDefList(1, anims);
		AnimationCache::getInstance()->getMonsterAni(0,"mon_086", anims);					
		BSAnimate *animste = anims[0];
		CCSprite* sprite = CCSprite::create();	
		sprite->setPosition(ccp(iter->x,iter->y));

		sprite->setAnchorPoint(ccp(0.5f,0.7f));	
		_bgLayer->addChild(sprite);		
		sprite->runAction(CCRepeatForever::create(animste));	
		_effectSpriteVecList.push_back(sprite);
	}
}
void JieHunUiLayer::StopYanHuaEfeect()
{
	for (std::vector<CCSprite*>::iterator iter = _effectSpriteVecList.begin();iter !=_effectSpriteVecList.end(); ++ iter)
	{
		(*iter)->stopAllActions();
		(*iter)->removeFromParent();
	}
}
void JieHunUiLayer::SetEffectPosion(std::vector<CCPoint>& vec)
{
	CCPoint point1 = ccp(_frame->getContentSize().width - 30,_frame->getContentSize().height - 30);
	CCPoint point2 = ccp(_frame->getContentSize().width/2,_frame->getContentSize().height);
	CCPoint point3 = ccp(30,_frame->getContentSize().height - 30);
	CCPoint point4 = ccp(0,_frame->getContentSize().height/2);
	CCPoint point5 = ccp(100,100);
	CCPoint point6 = ccp(_frame->getContentSize().width/2,100);
	CCPoint point7 = ccp(_frame->getContentSize().width - 100,100);
	CCPoint point8 = ccp(_frame->getContentSize().width - 80,_frame->getContentSize().height/2);	
	vec.push_back(point1);
	vec.push_back(point2);
	vec.push_back(point3);
	vec.push_back(point4);
	vec.push_back(point5);
	vec.push_back(point6);
	vec.push_back(point7);
	vec.push_back(point8);
}
bool JieHunUiLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
{
	return true;
}
void JieHunUiLayer::onEnter()
{
	CCLayer::onEnter();
}
void JieHunUiLayer::onExit()
{
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCLayer::onExit();
}