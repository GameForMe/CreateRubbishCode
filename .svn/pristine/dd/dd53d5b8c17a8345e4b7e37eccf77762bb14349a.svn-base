#ifndef _OPENSERVER_ACT_PROTOCOL_H_
#define _OPENSERVER_ACT_PROTOCOL_H_

#include "BaseDefine.h"
#include "RoleDefine.h"
#include "CmdAdapter.h"

#pragma pack(push, 1)
#define PACKET_ACT_MAX_TAR 15
#define PACKET_ACT_MAX_RANK 5
#define MAX_Activity_Reward 5


enum E_OS_Activity_Type
{
	EOSAT_Activity_Login = 1,							//登陆
	EOSAT_Activity_Level,								//冲级
	EOSAT_Activity_Zhanli,								//战力
	EOSAT_Activity_Meili,							    //会员集体
	EOSAT_Activity_Guild,								//军团 帮会排名
	EOSAT_Activity_Vip,									//vip
	EOSAT_Activity_Boon,								//福利大派送
	EOSAT_Activity_Consume,								//消费
	EOSAT_Activity_OldPlayer_Level,						//老玩家冲级（第三方平台活动）
	EOSAT_Activity_Skill,								//技能等级
	EOSAT_Activity_JJC,									//竞技场排名
	EOSAT_Activity_GuildLevel,							//行会等级

	EOSAT_Activity_Zuoqi,								//坐骑
	EOSAT_Activity_Bill,								//充值
	EOSAT_Activity_Shop,                                //限时出售
	EOSAT_Activity_Text,                                // 纯文字类提示活动 [2016-3-18 by willing]
	EOSAT_Activity_KillBoos,                            //击杀BOSS[2016-4-17 by willing]
	EOSAT_Activity_XiLian,                              // 每日洗练 [2016-4-15 by willing]
	EOSAT_Activity_XuanShang,                           // 悬赏任务 [2016-4-18 by willing]
	EOSAT_Activity_GuanQia,                             // 通关关卡活动 [2016-4-21 by willing]

	EOSAT_Activity_Rank_Begin   = 1000,                 // 需要临时榜 的 活动类型，强制赋值，是为了保证在以后的更新，新增活动后 活动类型都能保证唯一 [2016-3-15 by willing]
	EOSAT_Activity_Rank_Consume,                        // 元宝消耗排行榜 [2016-3-17 by willing]
	EOSAT_Activity_Rank_Bill,                           // 元宝充值排行榜 [2016-3-17 by willing]
	EOSAT_Activity_Rank_RecvFlower,                     // 被送花排行榜 [2016-3-25 by willing]
	EOSAT_Activity_Rank_JJC,                            // 竞技场排行榜 [2016-3-25 by willing]
	EOSAT_Activity_Rank_Level,                          // 等级排行榜 [216-4-11 by syy]
	EOSAT_Activity_Rank_Fight,                          // 战力排行榜 [216-4-11 by syy]
	EOSAT_Activity_Rank_RideLevel,                      // 坐骑等级排行榜 [216-4-11 by syy]
	EOSAT_Activity_Rank_MoHun,                          // 魔魂排行榜 [216-4-11 by syy]
	EOSAT_Activity_Rank_End     = 2000,
};
// 判断是否是 使用临时榜的 活动类型 [2016-3-15 by willing]
#define IsActRank(act_type) ((act_type>EOSAT_Activity_Rank_Begin)&&(act_type<EOSAT_Activity_Rank_End))

// 限时购买活动 购买物品 的 错误码 [2016-2-6 by willing]
enum E_Activity_BuyResult
{
	EABR_Activity_Sucess = 0,
	EABR_Activity_NotShop,              // 不是限时购买活动 [2016-2-6 by willing]
	EABR_Activity_NotProcess,           // 不在活动期限内 [2016-2-6 by willing]
	EABR_Activity_YuanBao,              // 元宝不足 [2016-2-6 by willing]
	EABR_Activity_BagFreeSize,          // 背包空间不足 [2016-2-6 by willing] 
	EABR_Activity_BugLimit,             // 限时购买 次数 达到上限 [2016-2-10 by willing]
	EABR_SystemError,                   // 系统内部错误 [2016-2-6 by willing]
};

struct SPacket_ActTarget
{
	int m_iID;             //1 不在领奖时间 2等级不足 其他：领取条件不足 16.2.10
	int m_iValue;			// 0 不能领取 1 可以领取 2 已经领取
};

struct SPacket_Activity 
{
	SPacket_Activity()
	{
		memset(this, 0, sizeof(SPacket_Activity));
	}
	tagDWORDTime beginTime;						//活动开始时间
	tagDWORDTime endTime;						//活动结束时间
	int			m_iId;
	int			m_Value[2];
	int			m_TargetNum;
	SPacket_ActTarget		byData[PACKET_ACT_MAX_TAR];
};

struct NET_SIC_Request_Activity : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_Request_Activity)
	int type;			// 0 为请求数据 1领奖 2 获得排行榜 //add 16.2.9发送4为获取运营活动数据（0为开服活动数据） 3为购买限时物品  5为运营活动排行榜
	int actID;			//活动id
	int targetId;		//目标id
};

struct NET_SIS_Request_Activity : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Request_Activity)
	int m_DataNum;
	bool isUpdata;						//true 为全部刷新 false 更新单个
	SPacket_Activity byData[1];			//!< 其它数据
};

struct SPacket_YunYing_ActTarget
{
	int m_iID;             //1 不在领奖时间 2等级不足 其他：领取条件不足 16.2.10
	int m_iValue;			// 0 不能领取 1 可以领取 2 已经领取
	int m_iExtra;           // 扩展字段 [2016-2-10 by willing]
};

struct SPacket_YunYing_Activity 
{
	SPacket_YunYing_Activity()
	{
		memset(this, 0, sizeof(SPacket_YunYing_Activity));
	}
	tagDWORDTime beginTime;						//活动开始时间
	tagDWORDTime endTime;						//活动结束时间
	int			m_iId;
	int			m_Value[2];				//一般活动代表的是积分值
	int			m_TargetNum;
	SPacket_YunYing_ActTarget		byData[PACKET_ACT_MAX_TAR];
};

//运营活动数据，在NET_SIC_Request_Activity的type值4请求时，返回//16.2.9
struct NET_SIS_Request_YunYing_Activity : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Request_YunYing_Activity)
	int m_DataNum;
	bool isUpdata;						//true 为全部刷新 false 更新单个
	SPacket_YunYing_Activity byData[1];			//!< 其它数据
};

struct NET_SIS_Request_Activity_Result : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Request_Activity_Result)
	int result;
};

struct tagActRankInfo 
{
	tagActRankInfo()
	{
		memset(this, 0, sizeof(tagActRankInfo));
	};
	DWORD			dw_role_id;			// 人物ID
	INT				nLevel;				// 人物等级
	EClassType		eClass;				// 职业
	wchar_t szName[X_SHORT_NAME];
};

struct NET_SIS_Activity_Rank : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_Activity_Rank)
	int actID;			//活动id
	INT		n_num;
	tagActRankInfo st_LevelRank[PACKET_ACT_MAX_RANK];
};

struct NET_SIS_IOS_Recharge_Function : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_IOS_Recharge_Function)
	bool	isRechargeOpen;	////ios平台下是否需要显示各种充值相关活动
	bool	isGiftOpen;		////ios平台下是否需要显示礼包
	bool	isActCentreOpen;////ios平台下是否需要显示活动中心
};
struct NET_SIC_third_recharge_reward : public s_net_cmd
{
	DECL_NETCMD(NET_SIC_third_recharge_reward)
};

struct NET_SIS_third_recharge_reward : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_third_recharge_reward)
	DWORD				dw_error_code;	//返回码
};

// 活动排行榜 [2016-3-17 by willing]
struct NET_SIS_YunYing_Activity_Rank_Item
{
	NET_SIS_YunYing_Activity_Rank_Item()
	{
		memset(this,0,sizeof(NET_SIS_YunYing_Activity_Rank_Item));
	}

	int nRoleId;
	int nScore;
	wchar_t szRoleName[X_SHORT_NAME];
	DWORD dwReward[MAX_Activity_Reward];        // 奖励物品 [2016-3-17 by willing]
	int   nRewardCount[MAX_Activity_Reward];    // 奖励物品的数量 [2016-3-17 by willing]
};

struct NET_SIS_YunYing_Activity_Rank : public s_net_cmd
{
	DECL_NETCMD(NET_SIS_YunYing_Activity_Rank);
	int nActID;
	int nCount;
	int nOrder;     // 名次
	int nScore;     // 积分 [2016-3-18 by willing]
	tagDWORDTime dwBeginTime;
	tagDWORDTime dwEndTime;
	int nState;     // 活动的状态 [2016-3-24 by willing]
	int nMinScore;  // 活动最小积分

	NET_SIS_YunYing_Activity_Rank_Item rankItem[1];
};

enum E_Activity_State
{
	EAS_Activity_None,				//未开始
	EAS_Activity_Process,			//进行中
	EAS_Activity_Show,				//展示阶段
	EAS_Activity_End,				//结束
};

struct NET_GS2C_Refresh_Activity : public s_net_cmd
{
	DECL_NETCMD(NET_GS2C_Refresh_Activity);
};

#pragma pack(pop)

#endif