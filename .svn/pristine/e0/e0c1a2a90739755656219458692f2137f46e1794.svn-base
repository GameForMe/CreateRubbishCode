#ifndef BSANIMATION_H
#define BSANIMATION_H

#include "cocos2d.h"
using namespace cocos2d;


class BSAnimation/* : public CCObject*/
{
public:
	struct AnimationFrame
	{
		float dt;
		int zorder;
		CCSpriteFrame *frame;


		friend void swap(AnimationFrame& lh,AnimationFrame& rh)
		{
			using std::swap;
			swap(lh.dt,rh.dt);
			swap(lh.zorder,rh.zorder);
			swap(lh.frame,rh.frame);
		}

		AnimationFrame():dt(0)
			,zorder(0)
			,frame(NULL)
		{
		}

		AnimationFrame(AnimationFrame&& other)
			:dt(0),zorder(0),frame(NULL)
		{
			swap(*this,other);
			//std::swap(dt,other.dt);
			//std::swap(zorder,other.zorder);
			//std::swap(frame,other.frame);
		}

		AnimationFrame& operator=(AnimationFrame&& other)
		{
			swap(*this,other);
			return *this;
		}

		AnimationFrame(AnimationFrame const& other)
			:dt(other.dt)
			,frame(other.frame)
			,zorder(other.zorder)
		{
			if (frame) frame->retain();
		}

		AnimationFrame(float dt,int zorder,CCSpriteFrame* frame)
			:dt(dt),zorder(zorder),frame(frame)
		{
			if(frame) frame->retain();
		}

		AnimationFrame& operator=(AnimationFrame const& other)
		{
			AnimationFrame copy(other);
			swap(*this, copy);

			return *this;
		}

		~AnimationFrame()
		{
			if (frame) frame->release();
		}
		
	};

public:
	BSAnimation();
	~BSAnimation();
	//CREATE_FUNC(BSAnimation);
	//bool init() { return true; }
	void addSpriteFrame(CCSpriteFrame* frame, float dt, int zorder = 0);
	void cal_split_time();
	//CCSpriteFrame *getOrigSpriteFrame();
	float getDuration() const { return _dt; }
	int getFramesNun() { return (int)_animFrames.size(); }
	float getSplitTime(int n) { CC_ASSERT(n < (int)_splitTime.size()); return _splitTime[n]; }
	AnimationFrame& getAnimationFrame(int n) { CC_ASSERT(n < (int)_animFrames.size()); return _animFrames[n]; }
protected:
	float _dt;
	typedef std::vector<AnimationFrame> AnimationFrames;
	AnimationFrames _animFrames;
	std::vector<float> _splitTime;
};

#endif //BSANIMATION_H
