#include "TouchLabel.h"
#include "BaseDefine.h"

TouchLabel::TouchLabel()
	: _touchPriority(1)
{

}

bool TouchLabel::init()
{
	_signalWhenNotTouched = false;
	if(!CCLabelTTF::init())
		return false;
	return true;
}

void TouchLabel::onEnter()
{
	CCSprite::onEnter();
	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, _touchPriority, true);
}

void TouchLabel::onExit()
{
	CCSprite::onExit();
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
}

bool TouchLabel::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	if(isVisible())
	{
		_isMoved = false;
		_touchPt = pTouch->getLocationInView();
		CCPoint p = convertTouchToNodeSpace(pTouch);
		CCRect boundBox = boundingBox();
		CCRect rect(0, 0, boundBox.size.width, boundBox.size.height);
		if(rect.containsPoint(p))
		{
			return true;
		}
		else
		{
			if(_signalWhenNotTouched)
				signalTouched.emit(this, false);
		}
	}
	return false;
}

void TouchLabel::ccTouchEnded( CCTouch *pTouch, CCEvent *pEvent )
{
	if(isVisible())
	{
		CCPoint touchPt = pTouch->getLocationInView();
		float dis = ccpDistance(_touchPt, touchPt);
		if(dis < TOUCH_MOVE_DIS)
		{
			CCPoint p = convertTouchToNodeSpace(pTouch);
			CCRect boundBox = boundingBox();
			CCRect rect(0, 0, boundBox.size.width, boundBox.size.height);
			if(rect.containsPoint(p))
			{
				signalTouched.emit(this, true);
			}
		}
	}
}

TouchLabel::~TouchLabel()
{

}

void TouchLabel::ccTouchMoved( CCTouch *pTouch, CCEvent *pEvent )
{

}

//////////////////////////////////////////////////////////////////////////

void TouchLabelLoader::onHandlePropTypeInteger( CCNode * pNode, CCNode * pParent, const char* pPropertyName, int pInteger, CCBReader * pCCBReader )
{
	if(CCString::create(pPropertyName)->isEqual(CCString::create("touchPriority")))
	{
		((TouchLabel*)pNode)->_touchPriority = pInteger;
	}
	else
	{
		CCLabelTTFLoader::onHandlePropTypeInteger(pNode, pParent, pPropertyName, pInteger, pCCBReader);
	}
}
