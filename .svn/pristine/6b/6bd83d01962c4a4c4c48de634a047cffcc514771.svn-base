#ifndef  MARTIALEQUIPUI_H
#define MARTIALEQUIPUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
#include "UiManager.h"
#include "DropDragDelegate.h"
#include "ItemNode.h"
#include "ItemDefine.h"
#include "ListItem.h"
#include "VerticalList.h"

using namespace cocos2d;
using namespace cocos2d::extension;

#define EMPTY_MARTIAL_DATAID 0

#define MARTIALEQUIPUI_TEXT_LINE_SPACE 25

class TouchSprite;
class MartialEquipUiLayer;
class f_equipment;
class f_item;

class InstructListForMartial : public ListItem
{
	enum eNonticTextTag  { NTT_Text = 0};
public:
	InstructListForMartial();
	~InstructListForMartial();
	virtual CCSize getContentSize();
	void setData(const std::string &text);
private:
	CCLabelTTF *getLabel(eNonticTextTag tag);
	CCLabelTTF* createLabel(const std::string &text);
	void updateContent();
private:
	CCSize _contentSize;
};


class MartialEquipUi : public UiInterface
{
public:
	virtual CCNode *openUi();
	MartialEquipUiLayer *getUiLayer();
	void updateMartialData();
	void setPlayerId(unsigned int id);
	unsigned int getPlayerId();
	void setInstructFrameShow(bool show);
	void setZhandouli(int val);
	void updateData();

	//new player guide
	CCRect getPosition(int tag);
	CCRect getCloseBtnPos();
// 	void onServerChisel(bool success);
// 	void onServerMartial(bool success);

};

class MartialEquipUiLayer
	: public DropDragInterface
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class MartialEquipUi;

public:
	enum eMartialEquipUiTag
	{
		MET_Frame = 0,
	/*	MET_Container = 8,*/

		MET_ItemBegin = 0,
		MET_ItemNum = 8,
		MET_ItemEnd = MET_ItemBegin + 8,
		MET_NodeFrame = 10,
		MET_MagicNode = 11,
		MET_ZhandouLi = 12,
		MET_ItemNodeBegin = 20,
		MET_LevelLabBegin = MET_ItemNodeBegin * 2,
		MET_LevelLabEnd = MET_LevelLabBegin + 8,

		/*MET_UpgradTab = 30, //功法升级页签;*/
		MET_ObtainTab = 32,  //功法获取页签;
		INT_SELECTSPRITE = 200 
	};
public:
	MartialEquipUiLayer();
	~MartialEquipUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MartialEquipUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	void onCloseBtn2Pressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	virtual void onEnter();
	virtual void onExit();	

	virtual short getItemBegin(CCTouch &touch, eGetResult &result);
	virtual short getItemEnd(CCTouch &touch, eGetResult &result, EItemConType src, short itemIndex);
	virtual bool onClicked(CCTouch &touch);
	virtual bool onDoubleClicked(CCTouch &touch);
	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	virtual EItemConType getConType() { return EICT_KungfuEquip; }
protected:
	short getItem( CCTouch &touch, eGetResult &result );
	void setInstructFrameShow(bool show);
	int getItemUnderPoint(const CCPoint &point);
	void setMartialData(f_equipment *equip);
	void putMartial(f_item *item, int index);
	ItemNode *getItemNode(eMartialEquipUiTag tag);
	CCLabelTTF *getLevelLab(eMartialEquipUiTag tag);
	void setLevelShow(int i,bool show);
	void openGrid(int i);
	void updateMartialData();
	int  getGridNum(int level);
	void setContainerEmpty();
	void updateContainer();
	void setPlayerId(int id);
	void setZhandouli(int val);
	bool setItemSelect(int index);
	void updateData();
	//new player guide
	CCRect getPosition(int tag);
	CCRect getCloseBtnPos();
	/*void onMartialUpgradTabClicked(TouchSprite*, bool);		// 点击功法升级页签;*/
	void onMartialObtainTabClicked(TouchSprite*, bool);		// 点击功法获取页签;
private:
	CCSprite *_frame;
	CCSprite *_nodeFrame;
	CCLabelTTF *_zhandouli;
	CCNode *_container;
	CCSprite *_selectSprite;
	int _curSelectIndex;
	CCPoint _itemPos[MET_ItemNum];
	INT64 _putMartialId[MET_ItemNum];
	unsigned int _playerId;
	VerticalList<InstructListForMartial> *_verticalList;
	CCScrollView *_scrollView;
	CCSprite *_instructframe;
	CCNode *_containerinstruct;
};


#endif //MARTIALEQUIPUI_H