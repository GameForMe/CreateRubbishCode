#ifndef SHORTCUTUI_H
#define SHORTCUTUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "DropDragDelegate.h"
#include "Signals.h"
#include "CDButton.h"
#include "UiInterface.h"
#include "GameEventDefine.h"
using namespace cocos2d;
using namespace cocos2d::extension;


#define SHORTCUT_BTN_WIDTH 54
#define SHORTCUT_BTN_HEIGHT 54
#define MAX_SKILL_USE_NUM 7

class CDButton;
class ShortCutUi : public UiInterface
{
public:
	ShortCutUi();
	virtual CCNode *openUi();
	virtual void closeUI();
	virtual eWorldZorder getZorder() { return WZ_SHORTCUTUI; }
	virtual bool canClose() { return false; }

	void setSkillCD(int skillId, float duration);
	void setRandTransCD(float duration);
	void setMedicineCD(float duration);
	void runSKillCd(int skillId, float duration);
	void updateUsedItem();
	void updateMedicineAndRandtran();
	void useItem(INT64 itemId);
	void initSkillId();
	void AttBtnClick();
	void SetSkillId(int nIdx, int nSkillID);
	int GetSkillId(int nIdx);

	void setMedicineId(INT64 id);
	void setRandTransId(INT64 id);

	void try_to_set_rand_trans(INT64 id);

	INT64 getMedicineId();
	INT64 getRandTransId();
	//保存传送石;
	void saveRandTranId(INT64 id);

	CCRect GetRandTransPos();
	CCRect GetMedicineBtnPos();
	CCRect GetSkillBtnPos(int nIdx);

	void showUi(bool show);
	void showUiUpSystemUi(bool show);
	void showTransBtn(bool isShow);

	void refreshSkillBtnRotateFromSkillInfo();

	bool getSkillBtnCanRotate() { return _canRotate;}
private:
	bool _canRotate;
};

struct sync_skill_cd_duration;
struct add_new_item;

class ShortCutUiLayer 
	: public DropDragInterface
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class ShortCutUi;
public:
	ShortCutUiLayer();
	~ShortCutUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(ShortCutUiLayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();

	virtual short getItemBegin(CCTouch &touch, eGetResult &result);
	virtual short getItemEnd(CCTouch &touch, eGetResult &result, EItemConType src, short itemIndex);
	virtual EItemConType getConType() { return EICT_CLIENT; }
	virtual bool onClicked(CCTouch &touch) { return false; }
	virtual bool onDoubleClicked(CCTouch &touch) { return false; }

	void attrackPresseddao(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void attrackPressedzhan(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void attrackPressedfa(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void sync_skill_cd(int skill_id,float duration,float max);
	void setSkillCD(int skillId, float duration, float maxCD,bool run = false);
	void setSkillStop(int skillId, float duration, float maxCD);
	void setRandTransCD(float duration);
	void setMedicineCD(float duration);
	void runSKillCd(int skillId, float duration);
	void move(bool up = true);
	void updateUsedItem();
	//读取更新药品，传送石
	void updateMedicineAndRandtran();
	void useItem(INT64 itemId);

	//保存药品;
	void saveMedicineId(INT64 id);
	//保存传送石;
	void saveRandTranId(INT64 id);

	void setMedicineId(INT64 id);
	void setRandTransId(INT64 id);
	INT64 getMedicineId() const { return _medicine; }
	INT64 getRandTransId() const { return _trans; }

	void setSkillId(int index, int skillIndex, bool save = true);
	void setSkillShowOnly(int index, int skillIndex, bool save = true);
	void showUi(bool show);
	void showUiUpSystemUi(bool show);

	CCRect GetRandTransPos();
	CCRect GetMedicineBtnPos();
	CCRect GetSkillBtnPos(int nIdx);
	int GetSkillId(int nIdx);

	void MedicineRunEffect();
	void SkillRunEffect();
	void BreakRunEffect();
	void stopAllEffectAction();
	bool getMedicineState(){return m_pIsMedicineRunEffect;}
	bool getSkillState(){return m_pIsSkillRunEffect;}
	bool getBreakState(){return m_pIsBreakRunEffect;}
	void onAttackBtnPressed();
	void setRecordNodeState(bool isShow);
	void showTransBtn(bool isShow);
protected:
// 	void onSkillBtnPressed0();
// 	void onSkillBtnPressed1();
// 	void onSkillBtnPressed2();
	void onRandTransBtnPressed();
	void onMedicineBtnPressed();

	void setSkillBtnDisplayFrame(int index, const char *frameName);
// 	void onSkillBtnPressedEnd0();
// 	void onSkillBtnPressedEnd1();
// 	void onSkillBtnPressedEnd2();
	void onRandTransBtnPressedEnd();
	void onMedicineBtnPressedEnd();
	void onAttackBtnPressedEnd();

	
	void onEnterBloodFightMode(enter_blood_fight* pEvn);
public:
	void initSkillBtn();
	void setJNvecPosition(int index, float fjd = 0, bool isEnd = false);
	int getNowStartPosition();		//开始旋转时判断第几个技能在起始位置
	int getEndStartPosition();		//结束旋转时判断第几个技能在起始位置
	bool checkCanMove(float fjd, int index);			//判断当前是否可以移动
	void setShowSkill(bool all, const int index = 0);
	void onMoveAroundAttackBtnByAngle(CCNode* pNode, float pAngle);
	
	void onSkillBtnPressedEnd(int pTag,bool isSlider);
	void onSkillBtnPressed(int pTag);
	float getPointJD(CCPoint pot);
	void setBtnScale(int pBtnTag , float pScale);
	void onSkillBtnTouch(CCPoint pPos,CCTouchEventType pType,int pTag);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);

	void setSkillBtnCanRotate(bool isTrue);
SIGNALS:
	c_signal<void, int> signalSkillBtnPressed;
	//c_signal<void> signalAttrackBtnPressed;
	c_signal<void> signalMedicineBtnPressed;
	c_signal<void> signalTransBtnPressed;
private:
	void on_event_sync_cd(sync_skill_cd_duration* evt);
	void on_event_add_item(add_new_item* evt);

	void try_to_set_trans_id(INT64 id);
private:
	CCControlButton *button1;
	CDButton *_skillBtn[3];
	CDButton *_medicineBtn;	//[bing] 使用药品按钮
	
	CDButton *_attackBtn;
	CCSprite* m_pMedicineSprite;
	//CCSprite* m_pSkillSprite[3];
	CCSprite* m_pBreakSprite;
	bool m_pIsMedicineRunEffect;
	bool m_pIsSkillRunEffect;
	bool m_pIsBreakRunEffect;
	
	INT64 _medicine;
	INT64 _trans;
	bool _isUpSystemUi;
	bool _isShow;
	CCSprite *_spriteBack[5];
	CCSprite *_pricture[5];
	CCNode *_recordNode;
	//回城按钮
	CCSprite* _randTransBtnBack;
	CCSprite* _randTransBtnLight;
	CDButton* _randTransBtn;
//----------- 新版技能按钮
	CCPoint _secondPoint;		//第二个技能位置
	CCPoint _fristPoint;		//第一个技能位置
	bool _showSkill;
	float _startBeginJD;		//触摸开始的角度
	float _moveJiaoDu;			//移动的角度
	float _canMoveJiaoDu;		//当前旋转的角度
	bool _canAttach;			//技能按钮是否可以点击出发技能
	bool _isCanRotate;
	int _nowIndex;				//触摸开始时在第一个位置的按钮
	float _startJiaoDu;			//第一个技能时技能位置的角度90
	float _fBanjing;				//技能旋转的半径110；
	CCSprite* _jiantou1;
	CCSprite* _jiantou2;
	int _skillTypeId[MAX_SKILL_USE_NUM];
	CCLabelTTF* m_plabelSkill[MAX_SKILL_USE_NUM];
	LabelFT* m_pFTSkillTag[MAX_SKILL_USE_NUM];
	CCSprite* m_pSkillSprite[MAX_SKILL_USE_NUM];
	CDButton* _pSkillBtnArr[MAX_SKILL_USE_NUM]; //所有技能的数组
	CCSprite* _pSkillBtnMaskArr[MAX_SKILL_USE_NUM];
	CCSprite* _pSkillBtnBackArr[MAX_SKILL_USE_NUM];

};

#endif //SHORTCUTUI_H