#ifndef LOGIN_H
#define LOGIN_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "CmdAdapter.h"
#include "Thread.h"
#include "http.h"
#include "tagDWORDTime.h"
using namespace cocos2d;
class LoginUi;
class BoundingUi; 

class MovingBackGround;
class RegisterUi;
class ResLoading;
enum eSDKPlatform
{
	SPT_TX,
};

class entranceUIForTX;
enum eDOWN_STATE
{
	DS_NO_NET , 
	DS_OK , 
	DS_DOWNLOAD_FAIL
};



class Login:public CCObject
{
	enum eLoginTag
	{
		ELT_LoadingSE,			//登陆界面loading特效tag	【J】2014.12.9
	};
public:
	~Login();
	Login();
	static Login *getInstance();
public:
	inline CCScene *getScene(bool bCreateIfNotExist =false) 
	{
		if (bCreateIfNotExist)
		{
			if(!_scene)
			{
				_scene = CCScene::create();
				//_scene->retain();
			}
			return _scene;
		}
		else
		{
			CC_ASSERT(_scene);
			return _scene;
		}
	}
	LoginUi* GetLoginUi(){return _loginUi;};
	//CG动画与安卓沟通，分成4步来处理。
	void openOnCGVedioEnd1();
	void openOnCGVedioEnd2();
	void openOnCGVedioEnd3();
	void openOnCGVedioEnd4();

	void loginBtnPressed();
	void registerBtnPressed();
	void backBtnPressed();
	void open(bool bFirst=true);
	void close();
	void showTip(const std::string &string);
	void hideTip();
	//void updateResource();
	//void updateOver();
	void update(float dt);
	void setisFirstLogin(bool i){isFirstLogin = i;};
	bool getisFirstLogin(){return isFirstLogin;};
	std::string getWriteblePath() { return _writeble; }
	//!更新流程相关
	//!检查是否存在opk文件
	//void checkOPKExist();
	//!下载原始opk
	//eDOWN_STATE downOriginOPK();
	//!删除opk文件，退出游戏
	//void deleteOPKAndExit();
	//!显示没有网络信息，退出游戏
	//void showInfoAndExit();
	//!获取本地OPK的version
	//void getLocalOPKVersion();
	//!下载服务器的ResVersion文件，获取相关字符
	//eDOWN_STATE getServerOPKVersion();
	//!对比本地与服务器的md5值
	//bool checkMd5();
	//!无限循环下载补丁，直至与服务器版本一致
	//eDOWN_STATE patchAlways();

	void onExitMessageBox();
	//发送登陆验证
	void loginVerifyCallback(bool success, const std::string &guid, const std::string &szCode);
	//选择服务器
	void onSeverSelect();
	//打开服务器列表
	bool openServerList();
	//打开服务器列表
	bool openServerList2();
	//开始登陆
	void beginLogin();
	MovingBackGround *_moveBack;
	void backtoLoginUI();
	void openOnSwitchAccount();		//[bing] 腾讯平台会用到这个

	void openOnSwitchAccount2();	//[bing] 非腾讯用这个吧 区别开

	//设置腾讯登录功能按钮
	void setTXEntranceFunc(int nState);
	//播放loading特效
	void showLoadingSE();
	//移除loading特效
	void removeLoadingSE();
	
	void setUiToLoginFromMen();

	std::string& getLoginServerName() { return loginServerName;}
	//unsigned int getGameServerIP() {return _gameServerIP;}
	std::string& GetGameServerIP() {return m_GameServerIP;}

	void checkGameLoginInfo();
	inline void setTicket(std::string ticket, std::string userid, const unsigned int sdkType)
	{
		m_ticket = ticket;
		m_userid = userid;
		m_sdkType = sdkType;
	}
	void resetLoginState();

	void dumpTexture(CCObject* pSender);

	inline const char* getUserId() { return m_userid.c_str();}

	void removeTXPlatformView();

	inline bool getIsFirstCreateRole() { return _isFirstCreateRole; }
	inline void setIsFirstCreateRole(bool isFirstCreate) { _isFirstCreateRole = isFirstCreate; }

private:
	bool isFirstLogin;
	unsigned int onProof(s_net_cmd* cmd);
	unsigned int onJoinGame(s_net_cmd *cmd);
	unsigned int onEnumRoleList(s_net_cmd *cmd);
	unsigned int onSynchronizeTime(s_net_cmd *cmd);
	unsigned int onQueue(s_net_cmd *cmd);
	unsigned int onCheckLoginFirstResult(s_net_cmd *cmd);

	void saveUsedLoginServer(const std::string & ip , int port , const std::string & serverName);
private:
	//THREAD_FUNC _download_thread_func(void* thread_);
	//void download_func();

// 	void onDownloadInc(size_t sz)
// 	{
// 		m_downloadsz += sz;
// 	}
private:
	CCScene *_scene;
	LoginUi *_loginUi;
	RegisterUi *_registerUi;

	//c_thread *_downloadThread;
	//bool _update_res;
	bool _needShowExit;
	bool m_needExit;

	//bool m_opkExist;
	//std::string _opkmd5;
	//unsigned int m_opkVer;

	//unsigned int m_serverVer;
	//std::string m_serverMd5;

	//size_t m_checkingsz;
	//size_t m_totalsz;
	//size_t m_downloadsz;
	std::string m_info;

	//ResLoading *_loading;
	//unsigned char* _opkData;
	//unsigned long _opksize;

	std::string _userName;
	std::string _pwd;
	std::string m_sSEName;					//保存特效名称(loading特效)【J】2014.12.9
	entranceUIForTX* _txLoginUI;
	std::string loginServerName;

	//unsigned int _gameServerIP;
	std::string m_GameServerIP;

	std::string m_ticket;
	std::string m_userid;
	unsigned int m_sdkType;
	bool _isFirstCreateRole;

public:
	std::string _writeble;
	bool _openServerListUi;
	bool _openServerListUi2;
	bool _sendProof;
	bool _verifyFailed;
	bool _needLogin;
	bool _needShowSdkLoginUI;
	bool _needShowSdkSwitchUI;

	//bool _resInited;
};

class entranceUIForTX : public CCLayer
{
	enum eTXLayerTag
	{
		TXUI_QQ,
		TXUI_WX,
	};
public:
	entranceUIForTX() {}
	~entranceUIForTX() {}
	CREATE_FUNC(entranceUIForTX);
	bool init();

	void onQQBtnPressed(CCObject *pSender, extension::CCControlEvent pCCControlEvent);
	void onWXBtnPressed(CCObject *pSender, extension::CCControlEvent pCCControlEvent);
	void setMenuFucntion(bool canTouch);
	void addTXFunctionMenu();
	CCSpriteFrame* getBtnStateFram(const char* fileName);

};

#endif //LOGIN_H
