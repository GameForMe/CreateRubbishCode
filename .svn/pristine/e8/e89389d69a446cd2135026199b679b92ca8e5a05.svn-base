#ifndef __H_932A90C2_9C9A_409F_85E9_6A96411A554F__
#define __H_932A90C2_9C9A_409F_85E9_6A96411A554F__
/********************************************************************
	created:	2015/08/25
	created:	25:8:2015   11:52
	filename: 	C:\chuanqi\trunk\Client\code\source\f_data_set.h
	file path:	C:\chuanqi\trunk\Client\code\source
	file base:	f_data_set
	file ext:	h
	author:		gh
	
	purpose:简单的xml读取器
*********************************************************************/
#include <string>
#include <map>
#include <list>
#include "BaseDefine.h"

class IFS;

class f_data_set
{
private:
	std::map<unsigned long, std::string>	m_data_map;

	bool						b_support_save;
	std::map<unsigned long, std::string>	m_name_map;
	std::list<std::string>			m_name_list;

	f_data_set*					m_local_ds;

	static std::string			ms_local_path;
public:
	// 添加元素
	bool			add(std::string& val_, std::string& name_);

	bool			add(char const* val_, char const* name_);
	bool			add(unsigned long val_, char const* name_);
	bool			add(float val_, char const* name_);

	// 读取元素
	char const*	get_string(char const* name_);
	unsigned long			get_dword(char const* name_);
	//unsigned long  get_dword2( char const* name_, char const* field_, unsigned long def_val_);
	float			get_float(char const* name_);
	int				get_int(char const* name_);
	INT64         get_int64(char const* name_);

	char const*	get_string(char const* name_, char const* field_);
	unsigned long			get_dword(char const* name_, char const* field_);
	float			get_float(char const* name_, char const* field_);
	int				get_int(char const* name_, char const* field_);
	INT64         get_int64(char const* name_,char const* field_);

	char const*	get_string(char const* name_, char const* field_, char const* def_val_);
	unsigned long			get_dword(char const* name_, char const* field_, unsigned long def_val_);
	float			get_float(char const* name_, char const* field_, float def_val_);
	int				get_int(char const* name_, char const* field_, int def_val_);
	INT64			get_int64(char const* name_, char const* field_, INT64 def_val_);

	char const*	get_string(char const* name_, char const* name_postfix, char const* field_, char const* def_val_);
	unsigned long			get_dword(char const* name_, char const* name_postfix, char const* field_, unsigned long def_val_);
	float			get_float(char const* name_, char const* name_postfix, char const* field_, float def_val_);
	int				get_int(char const* name_, char const* name_postfix, char const* field_, int def_val_);
	INT64           get_int64(char const* name_, char const* name_postfix, char const* field_, INT64 def_val_);

	// 设置元素，如果没有就添加并返回false
	bool			set(char const* val_, char const* name_);
	bool			set(unsigned long val_, char const* name_);
	bool			set(float val_, char const* name_);

	// 删除元素
	bool			remove(char const* name_);
	bool			remove(char const* name_, char const* field_);
	void			clear() { m_data_map.clear(); m_name_map.clear(); }

	// 其它辅助操作
	unsigned long			get_var_num() { return m_data_map.size(); }	// 得到元素数目
	std::list<std::string>&	get_var_name();	// 得到容器所有键名

	bool			load(char const* filename_, char const* keyname_ = "name", std::list<std::string>* fieldlist_ = NULL);	// 读取文件
	bool			save(char const* filename_);	// 保存文件

	// 设置是否支持存盘
	void			set_save_support(bool support_save_) { b_support_save = support_save_;	}

	// 默认不支持存盘
	f_data_set():b_support_save(false), m_local_ds(NULL){}
	~f_data_set() { if ( m_local_ds ) delete m_local_ds; }

	static const char* get_local_path(){ return ms_local_path.c_str(); }
	static void	set_local_path(const char* path) { ms_local_path = path ? path : "";  }
};

#endif //__H_932A90C2_9C9A_409F_85E9_6A96411A554F__
