#ifndef BOSSPKMGR_H
#define BOSSPKMGR_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "CmdAdapter.h"
using namespace cocos2d;
using namespace cocos2d::extension;

enum BossDataTag
{
	BPK_BOSSIDMAP,							//BOSS  ID map
	//BPK_BOSSFLUSHTIMEMAP,					//BOSS刷新时间map
	//BPK_BOSSDATA							//BOSS ID LEVEL
	BPK_BOSSTYPE,							//BOSS TYPE     3是世界boss  11是野外boss
};

struct sBossProto
{
	int		bossId;
	short	bossLevel;
	string	name;
	string  m_sPortrait;
	int		m_nRelayID;
	string	m_sDesc;//描述
	string	m_sHaunt;
	unsigned long	m_nMapID;
	int		m_nItem1ID;
	int		m_nItem2ID;
	int		m_nItem3ID;
	int		m_nItem4ID;
	int		m_nItem5ID;
	int		m_nItem6ID;
	string	m_sPortraitNew;
	short	showLevel;
	sBossProto()
	{
		m_nItem1ID = 0;
		m_nItem2ID = 0;
		m_nItem3ID = 0;
		m_nItem4ID = 0;
		m_nItem5ID = 0;
		m_nItem6ID = 0;
	}


};

struct sBossFlushData
{
	int				oddTime;	//剩余冷却时间
	unsigned int	flushTime;	//boss刷新时间
	short			showLv;
	sBossFlushData()
	{
		oddTime = 0;
		flushTime = (unsigned int)INVALID;
		showLv = 0;
	}
};

struct s_net_cmd;
class BossPKMgr
{
public:
	typedef std::map<int, int> BossDataMap;
	typedef std::map<int, sBossFlushData> BossFlushMap;
	typedef std::map<int, sBossProto> BossProMap;
	BossPKMgr();
	~BossPKMgr();
	void Init();
	
	void Destory();
	
	void InitBossDataFromXML();
	const sBossProto* getBossDataByBossID(unsigned int pID);

	static BossPKMgr* getInstance();
	void getBossData(s_net_cmd* cmd);
	BossDataMap* getBossDatamap(BossDataTag eBossData);
	BossFlushMap& getBossFlushMap();
	BossProMap& getBossProMap();

	int getBossCount();
	void setOpenBossUi(bool flag , bool bNeedSortBossUI = true);
	bool isNeedSortBossUI()		{return _IsNeedSortBossUI;}
	bool isOpenBossUi()			{  return _isOpenBossUi;  }
	bool isFlushBossData(int boosId,int time);
	void addBossIDMap(int index,int boosId);
	void addbossFlushTimeMap(int boosId, int oddTime,unsigned int flushTime = INVALID);
	void addBossType(int boosId,int bossType);
	bool isBossNeedShow();
	bool getFuctionOpen();
	string get_boss_name_by_id(int boss_id);

	unsigned int onServerNewFuctionOpen(s_net_cmd* cmd);
private:
	bool _isOpenBossUi;
	bool _IsNeedSortBossUI;
	BossDataMap _bossIDMap;
	BossFlushMap _bossFlushTimeMap;
	BossProMap	_mapBossData;
	unsigned int _lastBossDataSyncTime;//同步boss刷新列表的时间
	bool _isNewFuctionOpen;
	BossDataMap	_mapBossType;
};
#endif //BOSSPKMGR_H