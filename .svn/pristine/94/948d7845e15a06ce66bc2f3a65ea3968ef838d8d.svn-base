/**
 *	@file		WingManager.h
 *	@author		guantiejun
 *	@date		2016/04/18
 *	@version	
 *	@brief		翅膀管理类
 */

#ifndef WING_MANAGER_H
#define WING_MANAGER_H

#include "BaseDefine.h"

class f_equipment;
struct s_net_cmd;
struct RoleBaseAtt;
struct WingEvolve;
struct WingFlyUp;

class WingManager
{
public:
	typedef std::map<int, RoleBaseAtt> map_role_base_att;
	typedef std::map<DWORD, WingEvolve> map_wing_evolve_att;
	typedef std::map<DWORD, WingFlyUp> map_wing_fly_up;

public:
	WingManager();
	~WingManager();

	void Init();
	void Destroy();

	static WingManager* getInstance();

	inline map_role_base_att& get_role_base_att() {return m_role_base_att;}
	inline map_wing_evolve_att& get_wing_evolve() {return m_wing_evolve_data;}
	inline map_wing_fly_up& get_wing_fly_up() {return m_wing_fly_up_data;}

	const WingEvolve& get_one_wing_evolve_data(DWORD type_id);
	const WingFlyUp& get_one_wing_fly_up_data(int level);
	const RoleBaseAtt& get_att_base_value_level(int level);

	void send_evolve(INT64 wing_id);
	void send_fly_up(INT64 wing_id, bool is_use_gold);

	// 通过翅膀获取增加基础属性（万分比 如果返回值为50， 则增加0.5%）
	int get_add_base_att_by_equip(f_equipment* equip);
	// 通过翅膀飞升等级获取增加基础属性（万分比 如果返回值为50， 则增加0.5%）
	int get_add_base_att_by_level(int level);

	// 通过翅膀获取增加轻盈效果附加闪避值
	int get_add_dodge_by_equip(f_equipment* equip);
	// 通过翅膀获飞升等级取增加轻盈效果附加闪避值
	int get_add_dodge_by_level(int level);

	// 通过翅膀type ID获取buff持续时间
	float get_buff_time_by_type_id(DWORD type_id);

	// 通过翅膀type ID获取buffID
	DWORD get_buff_id_by_type_id(DWORD type_id);

	void init_table_info();

private:
	unsigned int on_server_evolve(s_net_cmd *cmd);
	unsigned int on_server_fly_up(s_net_cmd *cmd);

	void show_error_info(DWORD error);

	bool init_role_att_table();
	bool init_evolve_table();
	bool init_fly_up_table();

private:
	map_role_base_att m_role_base_att;
	map_wing_evolve_att m_wing_evolve_data;
	map_wing_fly_up m_wing_fly_up_data;
};

#endif