#ifndef CHATDEFINE_H
#define CHATDEFINE_H
#include "BaseDefine.h"
#include "HearSayProto.h"

typedef std::string tstring;
#ifndef MDEL_MSG
#define MDEL_MSG(PSEND)		(0)
#endif

//玩家聊天发言频道
enum ESendChatChannel
{
	ESCC_NULL = -1,
	ESCC_Common = 0,		//普通
	ESCC_Secret,			//密语
	ESCC_Team,				//队伍 
	ESCC_Guild,				//帮派 
	ESCC_Map,				//区域 附近频道
	ESCC_World,				//世界
	ESCC_Qianli,			//千里传音

	ESCC_Decree,			//昭告 天下号令
	ESCC_Hearsay,			//传闻
	ESCC_Combat,			//战斗
	ESCC_Affiche,			//公告
	ESCC_GM,				//GM
	ESCC_System,			//系统

	ESCC_SiLiao,			//私聊
	ESCC_System_Online_Remain,
	ESCC_System_No_System,
	ESCC_System_White,
	ESCC_System_White_Yellow,
	ESCC_System_White_Green,
	ESCC_System_White_Pink,
	ESCC_System_White_Purple,
	ESCC_Red_Cue,

	ESCC_End,	
};
//玩家接受频道定义
enum EReceiveChatChannel
{
	ERCC_NULL = -1,
	ERCC_All = 0,//全体
	ERCC_Decree,//天下号令
	ERCC_Qianli,//千里传音
	ERCC_World,//世界
	ERCC_Guild,//行会
	ERCC_Team,//队伍
	ERCC_Map,//附近
	ERCC_SiLiao,//私聊
	ERCC_System,//系统
	ERCC_END,
};

//玩家发送的大表情的类型
enum eBrowTag
{
	BT_BIGLAUGH = 1,
	BT_LAUGHAT,
	BT_ACTINGCUT,
	BT_COLDSWEAT,
	BT_CURSE,
	BT_ANGRY,
	BT_COOL,
	BT_DEFY,
	BT_LOVE,
	BT_PRAISE,
	BT_SHY,
	BT_CRY,
};

//-------------------------------------------------------
//常量定义
//-------------------------------------------------------
#define DECREE_NEED_ITEM	1003011 //号令天下所需道具ID
#define QIANLI_NEED_ITEM	1003012	//千里传音所需道具ID
#define MAX_SAVE_CHAT_RECORD	10//客户端保存的各频道聊天记录，只做重复判断时用
#define MAX_RECEIVE_CHAT_RECORD	80//客户端常规信息保存的聊天记录数，供UI使用
/*
世界: 40
行会: 40
组队：20
私聊：20
附近：20
系统：20
*/
#define MAX_RECEIVE_CHAT_RECORD_WORLD 20
#define MAX_RECEIVE_CHAT_RECORD_GUILD 20
#define MAX_RECEIVE_CHAT_RECORD_TEAM 20
#define MAX_RECEIVE_CHAT_RECORD_SILIAO 20
#define MAX_RECEIVE_CHAT_RECORD_MAP	 20
#define MAX_RECEIVE_CHAT_RECORD_SYSTEM 20
#define MAX_RECEIVE_CHAT_RECORD_ALL 30
//end
#define MAX_RECEIVE_CHAT_RECORD_SPECIAL 20//千里传音最多保存的记录
#define MAX_DECREE_RECORD_NUM	3//客户端最多保存的号令天下记录数
//世界频道消息长度限制
const int WORLD_CHANNEL_MSG_LEN = 100;
//世界频道消息玩家等级限制
const int	WORLD_CHANNEL_ROLE_LVL = 10;

const int DECREE_COST_YUANBAO = 10;
const unsigned char NUM_SEND_CHAT = 8;				//客户端发言频道的数量
const unsigned char NUM_CHAT_CHANNEL = 8;			//客户端接收频道的数量
const int MIN_REPEAT_SPEAK_TIME = 5000;		//当前频道重复发言的时间间隔
const int MIN_World_Text_SPEAK_TIME = 15000;		//当前频道重复发言的时间间隔
const int MIN_WORLD_RESPEAK_TIME = 30000;	//世界频道重复发言的判定时间
const int DECREE_DISAPPER_TIME = 45000;		//号令天下消失时间，单位为毫秒 增加号令时间 by zhang
const int MIN_RUNHORSE_RESPEAK_TIME = 30;	//跑马灯发言的判定时间
const int MIN_YY_SPEAK_TIME = 1500;		//语音发言最短时间
const int MAX_YY_SPEAK_TIME = 15000;	//语音发言最长时间

//-----------------------------------------------------------------
//从服务器接受到的聊天信息的数据结构（接受服务器发言）
//-----------------------------------------------------------------
struct s_receive_chat_info
{
	unsigned int		send_role_id;		//发送者 INVALID代表系统发送	
	unsigned int		receive_role_id;		//接收者
	ESendChatChannel	send_channel;			//发言频道
	tstring				send_role_name;	//发言者的名称
	tstring				receive_role_name;	//接受者姓名
	tstring				chat_text;			//发言内容
	unsigned char		is_auto_reply;		//是否自动回复 0:不是 1:是
	unsigned char		is_gm;				//是否是GM
	unsigned int		receive_Time;		//接收到的时间
	int		nVIPLv;			//VIP等级
	unsigned char		bySex;				//0 == 女 1 == 男
	long long			gotyeId;			//语音id
	unsigned short		gotyeTime;
	s_receive_chat_info()
		: send_role_id(INVALID)
		, receive_role_id(INVALID)
		, send_channel(ESCC_NULL)
		, is_auto_reply(false)
		, is_gm(false)
		, send_role_name("")
		, receive_role_name("")
		, receive_Time(INVALID)
		, nVIPLv(0)
		, bySex(1)
		, gotyeId(0)
		, gotyeTime(0)
	{		

	}
	s_receive_chat_info(const s_receive_chat_info& other)
	{
		Copy(other);
	}

	const s_receive_chat_info& operator = (const s_receive_chat_info& other)
	{
		if(this!=&other)
			Copy(other);
		return *this;
	}
private:
	void Copy(const s_receive_chat_info&  other)
	{
		send_role_id		= other.send_role_id;
		receive_role_id		= other.receive_role_id;
		send_channel		= other.send_channel;
		send_role_name		= other.send_role_name;
		receive_role_name	= other.receive_role_name;
		chat_text			= other.chat_text;
		is_auto_reply		= other.is_auto_reply;
		is_gm				= other.is_gm;
		receive_Time		= other.receive_Time;
		nVIPLv				= other.nVIPLv;
		bySex				= other.bySex;
		gotyeId				= other.gotyeId;
		gotyeTime			= other.gotyeTime;
	}
};
//----------------------------------------------------------------
//发送给服务器的发言数据结构(发言)
//----------------------------------------------------------------
struct s_send_chat_info
{
	//unsigned int		dest_role_id;				//发送给谁ID
	//tstring				dest_role_name;				//发送给谁name
	unsigned int		send_time;					//发送的时间
	ESendChatChannel	send_channel;					//发言频道
	tstring				send_text;						//发言内容
	//unsigned char		is_auto_reply;				//是否自动回复 0:不是 1:是

	s_send_chat_info()
	{	
		//dest_role_id	= INVALID;
		send_channel	= ESCC_NULL;
		send_time	= INVALID;
		//is_auto_reply = 0;
	}
	s_send_chat_info(const s_send_chat_info& other)
	{
		Copy(other);
	}

	const s_send_chat_info& operator = (const s_send_chat_info& other)
	{
		if(this!=&other) 
			Copy(other);
		return *this;
	}
private:
	void Copy(const s_send_chat_info&  other)
	{
		//dest_role_id	= other.dest_role_id;
		send_channel	= other.send_channel;
		send_time	= other.send_time;
		//dest_role_name	= other.dest_role_name;
		send_text		= other.send_text;
		//is_auto_reply = other.is_auto_reply;
	}
};

//用于缓存传音
struct s_scroll_text					
{
	tstring scroll_info;
	tstring szName;
	//tstring url;
	unsigned int	dw_role_id;
	//float	fTime;
	s_scroll_text():scroll_info("")
		,szName("")
		,dw_role_id(-1)
	{

	}
	s_scroll_text(const s_scroll_text &info)
	{
		Copy(info);
	}
	const s_scroll_text& operator = (const s_scroll_text &other)
	{
		if(this!=&other) 
			Copy(other);
		return *this;
	}
	void Copy(const s_scroll_text& info)
	{
		scroll_info = info.scroll_info;
		szName = info.szName;
		dw_role_id = info.dw_role_id;
	}
};

struct s_declare_test					
{
	tstring declare_info;
	tstring name;
	unsigned int	role_id;
	unsigned char is_gm;
};
struct s_hearsay_info					
{
	HearSayChannel hearSay_info;
	//tstring link_key;
	//unsigned char quality;
	tstring srcRoleName;
	tstring desRoleName;
	tstring strGuild;
	bool bFirstGuildGet;
	bool bSecondGuildGet;
	bool bThreeGuildGet;
	bool bFouthGuildGet;
	s_hearsay_info()
		: srcRoleName("")
		, desRoleName("")
	{
		bFirstGuildGet = false;
		bSecondGuildGet = false;
		bThreeGuildGet = false;
		bFouthGuildGet = false;
	}

	s_hearsay_info(const s_hearsay_info& other)
	{
		copy(other);
	}

	const s_hearsay_info& operator = (const s_hearsay_info& other)
	{
		if(this!=&other)
			copy(other);
		return *this;
	}
private:
	void copy(const s_hearsay_info& other)
	{
		hearSay_info = other.hearSay_info;
		srcRoleName = other.srcRoleName;
		desRoleName = other.desRoleName;
	}
};
#endif