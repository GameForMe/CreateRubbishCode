#include "PopLayer.h"

PopLayer::PopLayer(void)
:m_fOriScale(1.0f)
,m_bPopScale(false)
,m_style_flag(0)
{
}

PopLayer::~PopLayer(void)
{
}

void PopLayer::onEnter()
{
	//setOpacity(0);
	this->setTouchEnabled(true);
	this->setTouchMode(kCCTouchesOneByOne);
	this->setTouchPriority(1);

	CCLayer::onEnter();

	//scheduleUpdate();

// 	PopLayerEnter evt;
// 	evt.self = this;
// 	SEND_EVENT(&evt);

	//schedule(schedule_selector(PopLayer::secUpdate),1.0f);
}

bool PopLayer::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	if(!isVisible())
	{
		return false;
	}

	for (CCNode *c = this->m_pParent; c != NULL; c = c->getParent())
	{
		if (c->isVisible() == false)
		{
			return false;
		}
	}

	CCNode* field = this->getChildByTag(9999);
	if(field)
	{
		CCPoint touchLocation = pTouch->getLocation(); // Get the touch position
		touchLocation = this->convertToNodeSpace(touchLocation);

		 CCRect bBox=field->boundingBox();
		if (!bBox.containsPoint(touchLocation))
		{
			closeByClickOutside();

			if(m_style_flag & ESF_RELEASE_TOUCH_OUTSIDE_BOUND)
			{
				return false;
			}
		}
// 		if(!isInField(pTouch,this->getChildByTag(9999)))
// 		{
// 			doClose();
// 
// 			if(m_style_flag & ESF_RELEASE_TOUCH_OUTSIDE_BOUND)
// 			{
// 				return false;
// 			}
// 		}
	}
	return true; 
}


void PopLayer::close()
{
	if(m_close_fn)
	{
		m_close_fn();
	}

// 	if (this->getParent())
// 	{
// 		this->getParent()->removeChild(this,true);
// 	}
	removeFromParentAndCleanup(true);
}

void PopLayer::popShow()
{
// 	if (m_bPopScale)
// 	{
// 		m_fOriScale = this->getScale();
// 
// 		CCActionInterval*  action1 = CCScaleTo::create(0.06f, m_fOriScale*1.08);
//		CCActionInterval*  action2 = CCScaleTo::create(0.06f, m_fOriScale);
// 
// 		this->runAction( CCSequence::create(action1, action2, NULL));
//	}
// 
// 	setOpacity(opacity);	//added by csq 2013.7.26 ±³¾°±ä°µ	
	setVisible(true);
}

void PopLayer::onExit()
{
	//setScale(m_fOriScale);

// 	PopLayerExit evt;
// 	evt.self = this;
// 	SEND_EVENT(&evt);

	CCLayer::onExit();
	
	//unschedule(schedule_selector(PopLayer::secUpdate));

	//unscheduleUpdate();
}

void PopLayer::closeByClickOutside()
{
	close();
}

void PopLayer::closeWithDelay(float seconds)
{
	CCAction* act = CCSequence::createWithTwoActions(
		CCDelayTime::create(seconds),
		CCCallFunc::create(this, callfunc_selector(PopLayer::close))
		);
	runAction(act);
}

// bool PopLayer::init()
// {
// 	bool bRet = CCLayer::init();
// 
// 	//setOpacity(0);
// 
// 	return bRet;
// }
