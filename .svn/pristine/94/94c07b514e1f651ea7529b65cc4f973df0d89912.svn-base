#ifndef EXCHANGEBUSINESSMGR_H
#define EXCHANGEBUSINESSMGR_H
/**
 *	@file		ExchangeBusinessMgr.h
 *	@author		gx
 *	@date		2013/6/29
 *	@version	
 *	@brief		玩家直接交易管理类
 */
#include "Stall_define.h"
#include "ExchangeProto.h"

class f_equipment;

class ExchangeBusinessMgr
{
private:
	unsigned int m_ExchangeRoleID;//记录正在于我进行交易的玩家ID
	tagStallGoodsInfo m_LocalExchangeGoodsInfo[Role_Exchange_Max_Num];//存放本地玩家的交易物品信息
	tagStallGoodsInfo m_RemoteExchangeGoodsInfo[Role_Exchange_Max_Num];//存放远程玩家的交易物品信息
	std::map<int,f_equipment> exchangeLocalEquipmentGoods; //如果本地玩家的交易物品为武器时，存放该物品的信息
	std::map<int,tagEquip> exchangeEquipmentGoods; // 如果远程玩家的交易物品为武器时，存放该物品的信息
	bool b_DestLock;//交易的另一方是否已经确认交易
	bool b_SrcLock;//本地玩家是否已经确认交易
	bool b_NetLock;
public:
	ExchangeBusinessMgr();
	~ExchangeBusinessMgr();
	void Init();
	void Destroy();
	void Reset();
	static ExchangeBusinessMgr* getInstance();
	void InvitePlayerExchange(unsigned int uDesRoleID);//邀请远方玩家进行当面交易
	unsigned int OnServerExchangeRequestResult(s_net_cmd *cmd);//邀请远方玩家进行交易，出现错误的接收
	unsigned int OnServerExchangeRequest(s_net_cmd *cmd);//远方玩家邀请本地玩家进行交易
	void AgreeExchange();//信号连接函数
	void DisagreeExchange();
	void AddExchangeItem(const INT64 &itemServerID);
	unsigned int OnServerAddExchangeItem_Src(s_net_cmd *cmd);//本地玩家添加交易物品后，服务器返回的消息处理
	unsigned int OnServerAddExchangeItem_Dest(s_net_cmd *cmd);//远程玩家添加交易物品后，服务器返回的消息处理
	void CancelExchangeItemAny(unsigned char byIndex);//在交易清单上取消某个物品的交易
	unsigned int OnServerCancelExchangeItemAny(s_net_cmd *cmd);//在交易清单上取消某个物品的交易,服务器返回的消息处理
	void ExchangeItemLock();//锁定交易
	unsigned int OnServerExchangeLock(s_net_cmd *cmd);
	void CancleExchange();//响应“取消”按钮
	unsigned int OnServerCancelExchange(s_net_cmd *cmd);
	void ExchangeVertify();//确认交易
	unsigned int OnServerExchangeFinish(s_net_cmd *cmd);
	inline tagStallGoodsInfo* GetLocalExchangeInfo() {return m_LocalExchangeGoodsInfo;}//获取本地玩家交易界面上的物品信息
	inline tagStallGoodsInfo* GetRemoteExchangeInfo() {return m_RemoteExchangeGoodsInfo;}//获取远程玩家交易界面上的物品信息
	void MakeExchange();//统一响应"交易"按钮
	//是否锁定 
	bool isLocalLock() { return b_SrcLock; }
	bool isRemoteLock() { return b_DestLock; }

	tagEquip const & getRemoteExchangeEquipment(int index) const; //得到远程玩家相应序号的武器
	f_equipment& getLocalExchangeEquipment(int index); //得到本地玩家相应序号的武器
};
#endif