#ifndef COMMONCLIENT_H__
#define COMMONCLIENT_H__
/********************************************************************
	created:	2015/07/13
	created:	13:7:2015   11:36
	filename: 	C:\chuanqi\trunk\Client\code\projects\CommonClient.h
	file path:	C:\chuanqi\trunk\Client\code\projects
	file base:	CommonClient
	file ext:	h
	author:		gh
	
	purpose:	common define
*********************************************************************/

#include "cocos2d.h"
#include "cocos-ext.h"

using namespace cocos2d;
using namespace cocos2d::extension;

#include "CommonDefine.h"
#include "f_string_util.h"

#include "Helper.h"

//simple loader macro
#define REG_LOADER(name,loadername)\
class name##Loader: public loadername\
{\
public:\
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(name##Loader,loader);\
protected:\
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(name);\
};\
	lib->registerCCNodeLoader(#name,name##Loader::loader())

template<typename T>
struct BaseLoader 
{
 	BOOST_STATIC_ASSERT((boost::is_base_of<CCNode,T>::value));
	typedef typename boost::mpl::if_c<
		boost::is_base_of<CCLayer,T>::value,
		CCLayerLoader,
		CCNodeLoader>::type  type;
};

#define  REG_AUTO_LOADER(name) REG_LOADER(name,BaseLoader<name>::type)

#define SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(type_name,var_name)\
	CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,#var_name,type_name,var_name)

#define SIMPLE_SELECTORRESOLVER_CCCONTROL_GLUE(classname,func)\
CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, #func, classname::func)

/*
#define CCB_REPLACETTF_WITH_FT_GLUE_WEAK(TARGET, MEMBERVARIABLENAME, MEMBERVARIABLE) \
	if (pTarget == TARGET && 0 == strcmp(pMemberVariableName, MEMBERVARIABLENAME)) { \
	cocos2d::CCLabelTTF* tmp = dynamic_cast<CCLabelTTF*>(pNode); \
	MEMBERVARIABLE = Helper::replaceLabelTTFWithLabelFTAndRemove(tmp);\
	CC_ASSERT(MEMBERVARIABLE); \
	return true; \
	}

#define SIMPLE_REPLACETTF_WITH_FT_GLUE_WEAK(var_name)\
	CCB_REPLACETTF_WITH_FT_GLUE_WEAK(this, #var_name,var_name )
	*/

#define SQL_START(table_name)\
	char tmp[64]={0};\
	safe_sprintf(tmp,"SELECT * FROM %s",#table_name);\
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation(tmp);\
	c_sql_table* table = c_db_manager::getSingleton()->create_table();\
	while(table->retrieve_row())\
{\
	unsigned int idx = table->get_index("id")

#define SQL_START_WITH_DATA(table_name,data_type,data)\
	char tmp[64]={0};\
	safe_sprintf(tmp,"SELECT * FROM %s",#table_name);\
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation(tmp);\
	c_sql_table* table = c_db_manager::getSingleton()->create_table();\
	if(cmd && table) {\
	data_type data;\
	while(table->retrieve_row())\
	{\
	unsigned int idx = table->get_index("id")

#define SQL_EXTRA_INT(left_val,fielld_name)\
	idx=table->get_index(#fielld_name);\
	left_val = table->get_integer32(idx)

#define SQL_EXTRA_DOUBLE(left_val,fielld_name)\
	idx=table->get_index(#fielld_name);\
	left_val = table->get_double(idx)

#define SQL_EXTRA_STRING(left_val,fielld_name)\
	idx=table->get_index(#fielld_name);\
	left_val = table->get_text(idx)

#define SQL_EXTRA_BOOL(left_val,fielld_name)\
	idx=table->get_index(#fielld_name);\
	left_val = table->get_integer32(idx)!=0

#define SQL_END\
	}}\
	c_db_manager::getSingleton()->destroy_table(table);\
	c_db_manager::getSingleton()->end_operation(cmd)


struct ft_replace_helper
{
	std::map<std::string ,LabelFT*>			replacements;
	
	void make_replacer(std::string const& key,LabelFT* replacer)
	{
		CC_ASSERT(replacements.find(key) == replacements.end());
		replacements[key] = replacer;
	}

	LabelFT* get_replacer(std::string const& key)
	{
		std::map<std::string ,LabelFT*>::iterator iter =replacements.find(key);
		
		CC_ASSERT(iter!= replacements.end());
		return iter->second;
	}
};

#define REPLACE_TTF_WITH_FT(oldptr)\
	make_replacer(#oldptr,Helper::replaceLabelTTFWithLabelFTAndRemove(oldptr))

#define GET_FT_REPLACER(oldptr)\
	get_replacer(#oldptr)

class bind_cccall_helper: public CCObject
{
public:
	typedef boost::function< void(CCObject*) > callbacko_f;

	static bind_cccall_helper* bind_fn_o(bind_cccall_helper::callbacko_f fn);

	bind_cccall_helper(callbacko_f fn);
	virtual ~bind_cccall_helper();

	void on_call_o(CCObject* obj);
private:
	callbacko_f m_fn;
};

#endif // COMMONCLIENT_H__
