#ifndef ROLERINGUI_H
#define ROLERINGUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "DropDragDelegate.h"
#include "ItemDefine.h"
#include "Signals.h"
#include "BaseDefine.h"
#include "BSAnimate.h"
#include "UiInterface.h"
#include "AnimationCache.h"
using namespace cocos2d;
using namespace cocos2d::extension;

class Player;
class TouchSprite;
class f_equipment;
class RoleDisplayNode;
class CheckButton;
#define SPECIAL_RING_NUM 4

class RoleRingUi : public UiInterface
{
	friend class RoleRingUiLayer;
public:
	RoleRingUi() { }

	virtual CCNode *openUi();

	void updateEquipment();
	void updateDisplay();
	void setPlayerId(unsigned int id);
	unsigned int getPlayerId();

	//new player guide
	CCRect getCloseBtnPos();
};

class RoleRingUiLayer 
	: public DropDragInterface
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class RoleRingUi;

	enum eItemNodeTag 
	{  
		INT_DISPLAY = 20, 
		INT_PROPERTYLAB = 99,	//属性标签
		INT_InfoLab = 5,	//信息标签
		INT_TitleLab = 6,	//称号标签
		INT_FashionCheck = 40,
		INT_Fashion=41,
		INT_BEGIN = 100, 
		INT_SELECTSPRITE = 200 
	};
public:
	RoleRingUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(RoleRingUiLayer , create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onRoleEquipBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onRoleRingBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void on_option_btn_pressed(CCObject * pSender, CCControlEvent pCCControlEvent);

	virtual short getItemBegin(CCTouch &touch, eGetResult &result);
	virtual short getItemEnd(CCTouch &touch, eGetResult &result, EItemConType src, short itemIndex);
	virtual bool onClicked(CCTouch &touch);
	virtual bool onDoubleClicked(CCTouch &touch);
	virtual EItemConType getConType() { return EICT_Equip; }

	//new player guide
	CCRect getCloseBtnPos();
protected:
	void onPropertyTabClicked(TouchSprite *, bool );
	void onTitleTabClicked(TouchSprite*, bool);
	void onInfoTabClicked(TouchSprite*, bool);
	bool setItemSelect(int index);
	ItemNode *getItemNode(int i);

	void setUserName(const char *name);
	void setUserName(const wchar_t *name);
	void setDisplayAttr(ePlayerDisplayAttr dsa, unsigned int id);
	void showEquipTip(int index, f_equipment *equip);
	void showEquipTip(int index, const tagEquipViewInfo *equipInfo);
	void setPlayerId(int id);
	unsigned int getPlayerId() const { return _playerId; } 

	void updateEquipment();
	void updateDisplay();
	void onFashionStateChange(CheckButton *, bool);
	void setTitleRingVisile();
private:
	short getItem( CCTouch &touch, eGetResult &result );
	short getItemUnderPoint(const CCPoint &point);
	CheckButton *getFashionStateBtn();//add vvv
	void setFashionVisible(bool visible);
private:
	ItemNode* m_pItem[EEP_MaxEquip];
	CCSprite *_frame;
	unsigned int _playerId;

	CCControlButton*		m_fasion_opt_btn;

	RoleDisplayNode* _displayNode;
	int m_nTmpEquipLevel;							//装备强化等级特效用来保存强化等级
};

#endif //ROLEUI_H