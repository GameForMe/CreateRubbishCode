#ifndef PLAYERSTALLMGR_H
#define PLAYERSTALLMGR_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"

class PlayerStallMgr
{
public:
	struct tagNewStallData 
	{
		INT byIndex; //在摊位中的索引
		unsigned int dwItemID; //物品ID
		INT64 n64Serial; //物品流水号
		INT nCount; //数量
		INT n32YuanBao; //物品单价
		tagNewStallData()
			:byIndex(-1)
			,dwItemID(0)
			,n64Serial(-1)
			,nCount(-1)
			,n32YuanBao(-1)
		{}
	};

	enum eNewStallState
	{
		E_NEWSTALL_NULL = 0,
		E_NEWSTALL_START = 1,
		E_NEWSTALL_ITEMUP = 2,
		E_NEWSTALL_ITEMDOWN = 3,
		E_NEWSTALL_END = 4,
		E_NEWSTALL_LOOK_OTHER = 5,
		E_NEWSTALL_BUY = 6,
	};

	typedef std::vector<tagNewStallData> StallData_Vec;
	typedef std::map<unsigned int, StallData_Vec> StallData_Map;

	PlayerStallMgr();
	~PlayerStallMgr();
	static PlayerStallMgr* getInstance();

	void destory(unsigned int id);
	void clear(unsigned int id);
	void register_net_cmd();
	void unregister_net_cmd();
	void bag2stall(int srcConType, int destConType, short src, short dest, int num);
	void bag2stallImp(const tagNewStallData &data);

	void send_NET_C2G_REQUEST_NEW_STALL_START(const std::string& name,const StallData_Vec& list);//开始摆摊
	void send_NET_C2G_REQUEST_NEW_STALL_END();//摆摊结束
	void send_NET_C2G_REQUEST_NEW_STALL_UP(const tagNewStallData &data);//上架
	void send_NET_C2G_REQUEST_NEW_STALL_DOWN(int idx);//下架
	void send_NET_C2G_REQUEST_NEW_STALL_LOOK_OTHER(unsigned int id);//查看其它
	void send_NET_C2G_REQUEST_NEW_STALL_BUY(unsigned int id, const tagNewStallData &data);//购买

	///
	unsigned int on_NET_G2C_REQUEST_NEW_STALL_START_RESULT( s_net_cmd* cmd );
	unsigned int on_NET_G2C_REQUEST_NEW_STALL_UP_RESULT( s_net_cmd* cmd );
	unsigned int on_NET_G2C_REQUEST_NEW_STALL_DOWN_RESULT( s_net_cmd* cmd );
	unsigned int on_NET_G2C_REQUEST_NEW_STALL_END_RESULT( s_net_cmd* cmd );
	unsigned int on_NET_G2C_REQUEST_NEW_STALL_LOOK_OTHER_RESULT( s_net_cmd* cmd );
	unsigned int on_NET_G2C_REQUEST_NEW_STALL_BUY_RESULT( s_net_cmd* cmd );
	unsigned int on_NET_G2C_NEW_STALL_UPDATE_ITEM(s_net_cmd* cmd);

	void add(unsigned int id,const tagNewStallData&data);
	StallData_Vec * getByid(unsigned int id);
	tagNewStallData* getByItemId(unsigned int id, INT64 itemId);
	void removeByid(unsigned int id);
	void removeByItemId(unsigned int id, INT64 itemId);
	void updateByid(unsigned int id, const tagNewStallData& data);

	void initUI(unsigned int id);
	void closeUI();
	unsigned int onGetStallName( s_net_cmd *cmd );
	void getStallName( unsigned int roleId );
	void updateStallName();
	void openStall();
private:
	void lockPackageItem(INT64 itemId);
	void unlockPackageItem(INT64 itemId);

	StallData_Map mMap;
	tagNewStallData* mSaleData;
	std::list<unsigned int> _needGetStallName;

SIGNALS:
	void onSale(INT64 id, const tagNewStallData& data);
	void onBuy(INT64 id, const tagNewStallData& data);
	c_signal<void, INT64, const tagNewStallData&> _playerStall_connected;
};

#endif