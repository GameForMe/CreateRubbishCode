#include "ShortCutUi.h"
#include "CfgReader.h"
#include "CDButton.h"
#include "PackageManager.h"
#include "UiTools.h"
#include "Auto_ActionMgr.h"
#include "LocalPlayer.h"
#include "RoleManager.h"
#include "ItemNode.h"
#include "UiLoader.h"
#include "UiTools.h"
#include "ExchangeBusinessMgr.h"
#include "SkillUi.h"
#include "UiManager.h"
#include "SkillManager.h"
#include "ClientCfg.h"
#include "tools.h"
#include "BaseDefine.h"
#include "PackageUi.h"
#include "AudioPlayer.h"
#include "AudioProto.h"
#include "RoleManager.h"
#include "ToolTip.h"
#include "StringMgr.h"
#include "PlayerState.h"
#include "NewPlayerGuide.h"
#include "f_string_util.h"
#include "Helper.h"


ShortCutUi::ShortCutUi()
	:_canRotate(false)
{

}
CCNode * ShortCutUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["ShortCutUiLayer"] = UiLayerLoader<ShortCutUiLayer>::loader();
	nodeLoaders["CDButton"] = CDButtonLoader::loader();
	CCNode *uiNode = readUiFromCCBI("shortCutUi", nodeLoaders, _loadSpriteSheet);
	return uiNode;
}

void ShortCutUi::closeUI()
{
	//AnimationCache::getInstance()->releaseSinEffect("E1_118");
	//AnimationCache::getInstance()->releaseSinEffect("E1_119");
}

void ShortCutUi::setSkillCD( int skillId, float duration )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->setSkillCD(skillId, duration,duration);
	}
}

void ShortCutUi::setRandTransCD( float duration )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->setRandTransCD(duration);
	}
}

void ShortCutUi::setMedicineCD( float duration )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->setMedicineCD(duration);
	}
}

void ShortCutUi::runSKillCd( int skillId, float duration )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->runSKillCd(skillId, duration);
	}
}

void ShortCutUi::updateUsedItem()
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->updateUsedItem();
	}
}

void ShortCutUi::updateMedicineAndRandtran()
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->updateMedicineAndRandtran();
	}
}

void ShortCutUi::useItem( INT64 itemId )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->useItem(itemId);
	}
}

void ShortCutUi::setMedicineId( INT64 id )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->setMedicineId(id);
	}
}

void ShortCutUi::setRandTransId( INT64 id )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->setRandTransId(id);
	}
}

INT64 ShortCutUi::getMedicineId()
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		return ui->getMedicineId();
	}

	return -1;
}

INT64 ShortCutUi::getRandTransId()
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		return ui->getRandTransId();
	}
	return -1;
}

void ShortCutUi::showUi( bool show )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->showUi(show);
	}
}

void ShortCutUi::showTransBtn(bool isShow)
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->showTransBtn(isShow);
	}
}
void ShortCutUi::showUiUpSystemUi(bool show)
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->showUiUpSystemUi(show);
	}
}

void ShortCutUi::initSkillId()
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		//gx add
		LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
		unsigned int roleID = ploc->getId();
		std::stringstream ss;
		ss<<"set"<<"_"<<roleID;
		//
		string strKey;
		for (int i= 0; i < MAX_SKILL_USE_NUM; i++)
		{
			safe_sprintf(strKey, "short_skill%d", i);
			ui->setSkillId(i, ClientCfg::getInstance()->getInt(ss.str(), strKey.c_str(), -1) % 10, false);
		}
		
	}
}

cocos2d::CCRect ShortCutUi::GetMedicineBtnPos()
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		return ui->GetMedicineBtnPos();
	}

	return CCRect(0.0f, 0.0f, 0.0f, 0.0f);
}

cocos2d::CCRect ShortCutUi::GetSkillBtnPos( int nIdx )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		return ui->GetSkillBtnPos(nIdx);
	}

	return CCRect(0.0f, 0.0f, 0.0f, 0.0f);
}

int ShortCutUi::GetSkillId( int nIdx )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		return ui->GetSkillId(nIdx);
	}

	return -1;
}

void ShortCutUi::SetSkillId( int nIdx, int nSkillID )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->setSkillId(nIdx, nSkillID);
	}
}

cocos2d::CCRect ShortCutUi::GetRandTransPos()
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		return ui->GetRandTransPos();
	}

	return CCRect(0.0f, 0.0f, 0.0f, 0.0f);
}

void ShortCutUi::saveRandTranId( INT64 id )
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->saveRandTranId(id);
	}
}

void ShortCutUi::AttBtnClick()
{
	ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	if(ui != NULL)
	{
		ui->onAttackBtnPressed();
	}
}

//////////////////////////////////////////////////////////////////////////

ShortCutUiLayer::ShortCutUiLayer()
	: _medicine(-1)
	, _trans(-1)
	,_jiantou1(NULL)
	,_jiantou2(NULL)
	,_isCanRotate(NULL)
{

	for ( int i = 0; i < MAX_SKILL_USE_NUM ; i++)
	{
		_pSkillBtnArr[i] = NULL;
		_pSkillBtnMaskArr[i] = NULL;
		_pSkillBtnBackArr[i] = NULL;
	}
	memset(_skillTypeId, 0, sizeof(int) * MAX_SKILL_USE_NUM);
}

ShortCutUiLayer::~ShortCutUiLayer()
{
// 	for ( int i = 0; i < MAX_SKILL_USE_NUM ; i++)
// 	{
// 		CC_SAFE_REMOVE_CLEANUP_NULL(_pSkillBtnArr[i]);
// 		CC_SAFE_REMOVE_CLEANUP_NULL(_pSkillBtnMaskArr[i]);
// 		CC_SAFE_REMOVE_CLEANUP_NULL(_pSkillBtnBackArr[i]);
// 	}
// 	for (int i = 0; i < 3; i++)
// 	{
// 		if (_skillBtn[i] != NULL)
// 		{
// 			_skillBtn[i]->removeFromParentAndCleanup(true);
// 			_skillBtn[i] = NULL;
// 		}
// 	}
	if (_medicineBtn)
	{
		_medicineBtn->removeFromParentAndCleanup(true);
		_medicineBtn = NULL;
	}
	if (_randTransBtn)
	{
		_randTransBtn->removeFromParentAndCleanup(true);
		_randTransBtn = NULL;
	}
}

cocos2d::SEL_MenuHandler ShortCutUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler ShortCutUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "attrackPresseddao", ShortCutUiLayer::attrackPresseddao);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "attrackPressedzhan", ShortCutUiLayer::attrackPressedzhan);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "attrackPressedfa", ShortCutUiLayer::attrackPressedfa);
	return NULL;
}

bool ShortCutUiLayer::onAssignCCBMemberVariable( CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode )
{

	std::string strKey;
	for (int i = 0 ; i < MAX_SKILL_USE_NUM; i++)
	{
		safe_sprintf(strKey, "m_pSkillBtn%d", i + 1);
		CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,strKey.c_str(),CDButton*,_pSkillBtnArr[i]);
		safe_sprintf(strKey, "m_pSkillBtnMask%d", i + 1);
		CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,strKey.c_str(),CCSprite*, _pSkillBtnMaskArr[i]);
		safe_sprintf(strKey, "m_pSkillBtnBack%d", i + 1);
		CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,strKey.c_str(),CCSprite*, _pSkillBtnBackArr[i]);
 		safe_sprintf(strKey, "m_plabelSkill%d", i + 1);
 		CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,strKey.c_str(),CCLabelTTF*,m_plabelSkill[i]);

	}
	CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,"m_pArrowLeft",CCSprite*, _jiantou2);
	CCB_MEMBERVARIABLEASSIGNER_GLUE_WEAK(this,"m_pArrowRight",CCSprite*, _jiantou1);

	return false;
}

void ShortCutUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	_isUpSystemUi = false;
	//设置所有的子节点中的button的优先级为2
	setAllChildernButtonPriority(this, 2);
	for (int i = 0; i < MAX_SKILL_USE_NUM; i++)
	{
		_pSkillBtnArr[i]->setBtnTag(i);
		m_pFTSkillTag[i] = Helper::replaceLabelTTFWithLabelFTAndRemove(m_plabelSkill[i]);
		m_plabelSkill[i] = NULL;
	}
	
// 	_skillBtn[0] = (CDButton*)getChildByTag(1);
// 	_skillBtn[1] = (CDButton*)getChildByTag(2);
// 	_skillBtn[2] = (CDButton*)getChildByTag(3);
	_medicineBtn = (CDButton*)getChildByTag(5);
	_randTransBtn = (CDButton*)getChildByTag(4);
	_attackBtn = (CDButton*)getChildByTag(23);
	
	_randTransBtnLight=(CCSprite*)getChildByTag(21);
	_randTransBtnBack=(CCSprite*)getChildByTag(16);

// 	_skillBtn[0]->signalClicked.connect(this, &ShortCutUiLayer::onSkillBtnPressed0);
// 	_skillBtn[1]->signalClicked.connect(this, &ShortCutUiLayer::onSkillBtnPressed1);
// 	_skillBtn[2]->signalClicked.connect(this, &ShortCutUiLayer::onSkillBtnPressed2);
	_medicineBtn->signalClicked.connect(this, &ShortCutUiLayer::onMedicineBtnPressed);
	_randTransBtn->signalClicked.connect(this, &ShortCutUiLayer::onRandTransBtnPressed);
	_attackBtn->signalClicked.connect(this, &ShortCutUiLayer::onAttackBtnPressed);
	//
// 	_skillBtn[0]->signalClickEnded.connect(this, &ShortCutUiLayer::onSkillBtnPressedEnd0);
// 	_skillBtn[1]->signalClickEnded.connect(this, &ShortCutUiLayer::onSkillBtnPressedEnd1);
// 	_skillBtn[2]->signalClickEnded.connect(this, &ShortCutUiLayer::onSkillBtnPressedEnd2);
	_medicineBtn->signalClickEnded.connect(this, &ShortCutUiLayer::onMedicineBtnPressedEnd);
	_randTransBtn->signalClickEnded.connect(this, &ShortCutUiLayer::onRandTransBtnPressedEnd);
	_attackBtn->signalClickEnded.connect(this, &ShortCutUiLayer::onAttackBtnPressedEnd);
	//

// 	_skillBtn[0]->signalClicmove.connect(this, &ShortCutUiLayer::onSkillBtnPressedEnd0);
// 	_skillBtn[1]->signalClicmove.connect(this, &ShortCutUiLayer::onSkillBtnPressedEnd1);
// 	_skillBtn[2]->signalClicmove.connect(this, &ShortCutUiLayer::onSkillBtnPressedEnd2);
	_medicineBtn->signalClicmove.connect(this, &ShortCutUiLayer::onMedicineBtnPressedEnd);
	_randTransBtn->signalClicmove.connect(this, &ShortCutUiLayer::onRandTransBtnPressedEnd);
	_attackBtn->signalClicmove.connect(this, &ShortCutUiLayer::onAttackBtnPressedEnd);
	
//gx add
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	unsigned int roleID = ploc->getId();
	std::stringstream ss;
	ss<<"set"<<"_"<<roleID;
	string strKey;
	for ( int i = 0 ; i < MAX_SKILL_USE_NUM; i++)
	{
		_pSkillBtnArr[i]->signalClickedEvent.connect(this,&ShortCutUiLayer::onSkillBtnTouch);
		_pSkillBtnArr[i]->signalClickedAndTag.connect(this,&ShortCutUiLayer::onSkillBtnPressed);
		_pSkillBtnArr[i]->signalClickedEndedAndTag.connect(this,&ShortCutUiLayer::onSkillBtnPressedEnd);
		//_pSkillBtnArr[i]->signalClicmoveAndTag.connect(this,&ShortCutUiLayer::onSkillBtnPressedEnd);

		m_pSkillSprite[i] = CCSprite::create();
		m_pSkillSprite[i]->setPosition(_pSkillBtnArr[i]->getPosition());
		addChild(m_pSkillSprite[i]);

		safe_sprintf(strKey, "short_skill%d", i);
		setSkillId(i, ClientCfg::getInstance()->getInt(ss.str(), strKey.c_str(), -1) % 10, false);
	}

	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 2,true);

// 	LocalPlayer *player = RoleManager::getInstance()->getLocalPlayer();
//     //  player->getRoleType();
// 	  switch(player->getRoleType())//选择角色类型
// 	  {
// 	  case RT_MWARRIOR:
// 	    button1= dynamic_cast<CCControlButton*>(getChildByTag(11));
// 		button1->setVisible(true);
// 	 	 // _mtysprite=CCSprite::createWithSpriteFrameName("attackui_zhan");
// 		  break;
// 	  case RT_WWARRIOR:
//            button1= dynamic_cast<CCControlButton*>(getChildByTag(11));
// 		  button1->setVisible(true);
// 		//  _mtysprite=CCSprite::createWithSpriteFrameName("attackui_zhan");
// 		  break;
// 	  case RT_MMAGE:
// 		  button1= dynamic_cast<CCControlButton*>(getChildByTag(12));
// 		  button1->setVisible(true);
// 
// 		 // _mtysprite->setVisible(false);
// 		//  _mtysprite=CCSprite::createWithSpriteFrameName("attackui_fa");
// 		  break;  
// 	  case RT_WMAGE:
// 		  button1= dynamic_cast<CCControlButton*>(getChildByTag(12));
// 		  button1->setVisible(true);
// 		  // _mtysprite->setVisible(false);
// 		 // _mtysprite=CCSprite::createWithSpriteFrameName("attackui_fa");
// 		  break;
// 	  case RT_MTAOIST:
// 		  button1= dynamic_cast<CCControlButton*>(getChildByTag(10));
// 		  button1->setVisible(true);
// 		  // _mtysprite->setVisible(false);
// 		//  _mtysprite=CCSprite::createWithSpriteFrameName("attackui_dao");
// 		  break;
// 	  case RT_WTAOIST:
// 		  button1= dynamic_cast<CCControlButton*>(getChildByTag(10));
// 		  button1->setVisible(true);
// 		  // _mtysprite->setVisible(false);
// 		//  _mtysprite=CCSprite::createWithSpriteFrameName("attackui_dao");
// 		  break;
// 	  default:
// 		  CC_ASSERT(0);
// 	  }

		
	for (int i=0;i<5;i++)
	{
		_spriteBack[i]=dynamic_cast<CCSprite*>(getChildByTag(i + 13));
	}
	for (int i=0;i<5;i++)
	{
		_pricture[i]=dynamic_cast<CCSprite*>(getChildByTag(i + 18));
	}
	m_pMedicineSprite = CCSprite::create();
	m_pMedicineSprite->setPosition(_medicineBtn->getPosition());
	addChild(m_pMedicineSprite);
// 	m_pSkillSprite[0] = CCSprite::create();
// 	m_pSkillSprite[0]->setPosition(_skillBtn[0]->getPosition());
// 	addChild(m_pSkillSprite[0]);
// 	m_pSkillSprite[1] = CCSprite::create();
// 	m_pSkillSprite[1]->setPosition(_skillBtn[1]->getPosition());
// 	addChild(m_pSkillSprite[1]);
// 	m_pSkillSprite[2] = CCSprite::create();
// 	m_pSkillSprite[2]->setPosition(_skillBtn[2]->getPosition());
// 	addChild(m_pSkillSprite[2]);
	m_pBreakSprite = CCSprite::create();
	m_pBreakSprite->setPosition(_randTransBtn->getPosition());
	addChild(m_pBreakSprite);
	m_pIsSkillRunEffect = false;
	m_pIsMedicineRunEffect = false;
	m_pIsBreakRunEffect = false;
	//读取保存的药品;
	//updateMedicineAndRandtran();
	//
	_recordNode = this->getChildByTag(24);

	initSkillBtn();
}

void ShortCutUiLayer::attrackPresseddao( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//signalAttrackBtnPressed.emit();
}
void ShortCutUiLayer::attrackPressedzhan( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//signalAttrackBtnPressed.emit();
}
void ShortCutUiLayer::attrackPressedfa( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//signalAttrackBtnPressed.emit();
}

void ShortCutUiLayer::onEnter()
{
	CCLayer::onEnter();
	DropDragDelegate::getInstance()->addDropLayer(this);
	//注册消息
	REGISTER_EVENT(enter_blood_fight,ShortCutUiLayer,onEnterBloodFightMode);
	REGISTER_EVENT(sync_skill_cd_duration,ShortCutUiLayer,on_event_sync_cd);
	REGISTER_EVENT(add_new_item,ShortCutUiLayer,on_event_add_item);

}

void ShortCutUiLayer::onExit()
{
	DropDragDelegate::getInstance()->removeDropLayer(this);
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	//删除消息
	UNREGISTER_EVENT(enter_blood_fight,ShortCutUiLayer,onEnterBloodFightMode);
	UNREGISTER_EVENT(sync_skill_cd_duration,ShortCutUiLayer,on_event_sync_cd);
	UNREGISTER_EVENT(add_new_item,ShortCutUiLayer,on_event_add_item);

	CCLayer::onExit();
}

void ShortCutUiLayer::onEnterBloodFightMode(enter_blood_fight* pEvn)
{
	bool isShow = !(pEvn->isEnter);
	CC_ASSERT(_randTransBtn != NULL);
	_randTransBtnBack->setVisible(isShow);
	_randTransBtnLight->setVisible(isShow);
	_randTransBtn->setVisible(isShow);
}

short ShortCutUiLayer::getItemBegin( CCTouch &touch, eGetResult &result )
{
	result = DropDragInterface::GR_ERROR;
	return -1;
}

short ShortCutUiLayer::getItemEnd( CCTouch &touch, eGetResult &result, EItemConType src, short itemIndex )
{
	if(itemIndex >= 0) 
	{
		if(src == EICT_Bag)
		{
			CCPoint medicinePoint = _medicineBtn->convertTouchToNodeSpace(&touch);
			const CCSize medicineSize(SHORTCUT_BTN_WIDTH, SHORTCUT_BTN_HEIGHT);
			CCRect medicineRect(-medicineSize.width / 2.0f, -medicineSize.height / 2.0f, medicineSize.width, medicineSize.height);
			if(medicineRect.containsPoint(medicinePoint))
			{
				PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
				CC_ASSERT(itemMap != NULL);
				f_item *item = PackageManager::getInstance()->getItem(*itemMap, itemIndex);
				CC_ASSERT(item != NULL);
				const ItemTypeData &typeData = PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
				if(typeData.type == PIT_YaoPin)
				{
					if (item->get_item_id() != _medicine)
					{
						LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
						if (player->getLevel() >= typeData.level)
						{
							AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_15);//add by vvv 2015.01.30//药水从背包拖拽到cd键
							setMedicineId(item->get_item_id());
							saveMedicineId(item->get_item_id());
							_medicineBtn->stop();
						}
						else
						{
							ToolTip::getInstance()->push(GET_STR(2070));
						}
					}
					//_medicine = item->get_item_id();
					//CCSprite *sprite = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getIconFrameName(item->get_item_type_id()).c_str());
					//_medicineBtn->setBtnSprite(sprite);
				}

				result = DropDragInterface::GR_SUCCESS;
				return -1;
			}
			else
			{
				CCPoint randTransPoint = _randTransBtn->convertTouchToNodeSpace(&touch);
				const CCSize randTransSize(SHORTCUT_BTN_WIDTH, SHORTCUT_BTN_HEIGHT);
				CCRect randTransRect(-randTransSize.width / 2.0f, -randTransSize.height / 2.0f, randTransSize.width, randTransSize.height);
				if(randTransRect.containsPoint(randTransPoint))
				{
					PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
					CC_ASSERT(itemMap != NULL);
					f_item *item = PackageManager::getInstance()->getItem(*itemMap, itemIndex);
					CC_ASSERT(item != NULL);
					const ItemTypeData &typeData = PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
					if(typeData.type == PIT_SuiJiShi)
					{
						setRandTransId(item->get_item_id());
						//saveRandTranId(item->get_item_id());
						//_trans = item->get_item_id();
						//CCSprite *sprite = CCSprite::createWithSpriteFrameName(PackageManager::getInstance()->getIconFrameName(item->get_item_type_id()).c_str());
						//_randTransBtn->setBtnSprite(sprite);
					}

					result = DropDragInterface::GR_SUCCESS;
					return -1;
				}
			}
		}
		else if(src == EICT_SKILL)
		{
			if( !SkillManager::getInstance()->getSkillLearnState(itemIndex) )
			{
				return DropDragInterface::GR_ERROR;
			}

			for(int i = 0; i < MAX_SKILL_USE_NUM; i ++)
			{
				CCPoint skillBtnPt = _pSkillBtnArr[i]->convertTouchToNodeSpace(&touch);
				const CCSize btnSize(SHORTCUT_BTN_WIDTH, SHORTCUT_BTN_HEIGHT);
				CCRect btnRect(-btnSize.width / 2.0f, -btnSize.height / 2.0f, btnSize.width, btnSize.height);
				if(btnRect.containsPoint(skillBtnPt))
				{
					setSkillId(i, itemIndex);
					int skillId = SkillManager::getInstance()->getSkillId((short)itemIndex);
					SkillData* skillData = SkillManager::getInstance()->getSkillData(skillId);
					if (skillData)
					{
						setSkillStop(skillId, skillData->cur_cd,skillData->proto->max_cd);
						if (skillData->cur_cd > 0)
						{
							setSkillCD(skillId, skillData->cur_cd,skillData->proto->max_cd, true);
						}	
					}
					result = DropDragInterface::GR_SUCCESS;
					return -1;
				}
			}
		}
	}

	result = DropDragInterface::GR_ERROR;
	return -1;
}

void ShortCutUiLayer::onRandTransBtnPressed()
{
	if(!_randTransBtn->isVisible())
		return;
	PackageUi* pUI = getUiNodeByTag<PackageUi>(WCT_PACKAGEUI);
	if(pUI)
	{
		int page = pUI->GetSelectPage();
		short nIdx = (short)(pUI->GetSelectIndex() + page * HORIZONTALCOUNT * VERTICALCOUNT);
		if(nIdx != - 1 && pUI->GetSelectIndex() !=-1)
		{
			//[bing] 找到该物品并且看看是不是药水
			PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
			f_item *item = PackageManager::getInstance()->getItem(*itemMap, nIdx);
			if(item)
			{
				const ItemTypeData &typeData = PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
				if(typeData.type == PIT_SuiJiShi)
				{
					setRandTransId(item->get_item_id());
					//saveRandTranId(item->get_item_id());
					_randTransBtn->stop();
					pUI->SetSelectIndex(-1);
					return;
				}
			}
		}
	}
	signalTransBtnPressed.emit();
	if(_trans != -1)
	{
		//若玩家处于双休或是摆摊中，则无法使用该按钮
		LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
		if (!IS_VALID_PTR(ploc))
			return;
		if (ploc->isInRoleStateAny(RA_ShuangXiu) || ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))
		{
			if (ploc->isInRoleStateAny(RA_Exchange))
			{
				ExchangeBusinessMgr::getInstance()->CancleExchange();
			}
			return;
		}
		PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
		short index = PackageManager::getInstance()->getItemPos(*itemMap, _trans);
		PackageManager::getInstance()->useBagItem(index);
		//TODO:取消挂机
		if (AutoActionMgr::getInstance()->Get_Auto_Action())//gx add
		{
			AutoActionMgr::getInstance()->Set_Auto_Action(false);
		}
	}
	_randTransBtn->setScale(1.2f);
	_spriteBack[3]->setScale(1.2f);
	_pricture[3]->setScale(1.2f);
	NewPlayerGuider::getInstance()->clear();
}

void ShortCutUiLayer::onMedicineBtnPressed()
{
	//[bing] 当背包打开时 并且选中的物品为药水类 点击可以直接放上去
	PackageUi* pUI = getUiNodeByTag<PackageUi>(WCT_PACKAGEUI);
	if(pUI)
	{
		int page = pUI->GetSelectPage();
		short nIdx = (short)(pUI->GetSelectIndex() + page * HORIZONTALCOUNT * VERTICALCOUNT);
		if(nIdx != - 1 && pUI->GetSelectIndex() !=-1)
		{
			//[bing] 找到该物品并且看看是不是药水
			PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
			f_item *item = PackageManager::getInstance()->getItem(*itemMap, nIdx);
			if(item)
			{
				const ItemTypeData &typeData = PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
				if(typeData.type == PIT_YaoPin)
				{
					LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
					if (player->getLevel() < typeData.level)
					{
						ToolTip::getInstance()->push(GET_STR(2070));
						return;
					}
					AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_15);//add by vvv 2015.01.30//药水从背包拖拽到cd键
					setMedicineId(item->get_item_id());
					saveMedicineId(item->get_item_id());
					_medicineBtn->stop();
					pUI->SetSelectIndex(-1);
					return;
				}
			}
		}
	}
	//signalMedicineBtnPressed.emit();
	if(_medicine != -1)
	{
		AudioPlayer::getSigletonPtr()->playerSoundUIEffect(Medicine);//add by vvv 2015.01.30
		PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
		short index = PackageManager::getInstance()->getItemPos(*itemMap, _medicine);
		PackageManager::getInstance()->useBagItem(index);
		//TODO:取消挂机 手动喝药，不会打断挂机
		//if (AutoActionMgr::getInstance()->Get_Auto_Action())//gx add
		//{
		//	AutoActionMgr::getInstance()->Set_Auto_Action(false);
		//}
	}
	_medicineBtn->setScale(1.2);
	_spriteBack[4]->setScale(1.2);
	_pricture[4]->setScale(1.2);
}

void ShortCutUiLayer::setSkillCD(int skillId, float duration, float maxCD,bool run /*= false*/ )
{
	CC_ASSERT(_pSkillBtnArr != NULL);
	for(int i = 0; i < MAX_SKILL_USE_NUM; i ++)
	{
		if(SkillManager::getInstance()->getSkillTypeId(skillId) == _skillTypeId[i])
		{
			_pSkillBtnArr[i]->setCDTime(duration,maxCD);
			if(run)
			{
				int index = getEndStartPosition();
				_pSkillBtnArr[i]->run();
				_pSkillBtnArr[i]->setVisible((i <= index + 2 && i >= index) || _showSkill);
				_pSkillBtnArr[i]->setVisibleWhenStoped((i <= index + 2 && i >= index) || _showSkill);
			}
			//return;
		}
	}
}

void ShortCutUiLayer::setSkillStop(int skillId, float duration, float maxCD)
{
	CC_ASSERT(_pSkillBtnArr != NULL);
	for(int i = 0; i < MAX_SKILL_USE_NUM; i ++)
	{
		if(SkillManager::getInstance()->getSkillTypeId(skillId) == _skillTypeId[i])
		{
			_pSkillBtnArr[i]->setCDTime(duration,maxCD);
			_pSkillBtnArr[i]->stop();
		}
	}
}

void ShortCutUiLayer::setRandTransCD( float duration )
{
	CC_ASSERT(_randTransBtn != NULL);
	_randTransBtn->setCDTime(duration);
}

void ShortCutUiLayer::setMedicineCD( float duration )
{
	CC_ASSERT(_medicineBtn != NULL);
	_medicineBtn->setCDTime(duration);
}

void ShortCutUiLayer::move( bool up /*= true*/ )
{
	stopAllActions();
	const CCPoint &current = getPosition();
	CCAction *action = NULL;
	if(up)
	{
		float positionY = 50.0f;
		float dis = positionY - current.y;
		action = CCMoveTo::create(dis / 500.0f, ccp(0.0f, positionY));
	}
	else
	{
		float positionY = 0.0f;
		float dis = current.y - positionY;
		action = CCMoveTo::create(dis / 500.0f, ccp(0.0f, positionY));
	}
	runAction(action);
}

void ShortCutUiLayer::showUi( bool show )
{
	_isShow = show;

	float posY;
	if(show)
		posY = 0.f;
	else
		posY = -240.f;

	float posX = getPositionX();

	CCAction *moveTo = createMoveTo(getPosition(), ccp(posX, posY));
	stopAllActions();
	runAction(moveTo);

	_isUpSystemUi = false;
}

void ShortCutUiLayer::setSkillBtnDisplayFrame( int index, const char *frameName )
{
	if(index >=0 && index < MAX_SKILL_USE_NUM)
	{
		PackageManager::getInstance()->getIconFrameByName(frameName);
		CCSprite *sprite = CCSprite::createWithSpriteFrameName(frameName);
		_pSkillBtnArr[index]->setBtnSprite(sprite);
	}
}

void ShortCutUiLayer::updateUsedItem()
{
	if(_medicine != -1)
	{
		PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
		CC_ASSERT(itemMap != NULL);
		f_item *item = PackageManager::getInstance()->getItem(*itemMap, _medicine);
		if(item == NULL)
		{
			setMedicineId(-1);
			//_medicine = -1;
			//CCSprite *sprite = CCSprite::createWithSpriteFrameName("rendui_textyaopin");
			//_medicineBtn->setBtnSprite(sprite);
		}
		else
		{
			setMedicineId(_medicine);
		}
	}

	if(_trans != -1)
	{
		PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
		CC_ASSERT(itemMap != NULL);
		f_item *item = PackageManager::getInstance()->getItem(*itemMap, _trans);
		if(item == NULL)
		{
			setRandTransId(-1);
			//_trans = -1;
			//CCSprite *sprite = CCSprite::createWithSpriteFrameName("rendui_textchuansong");
			//_medicineBtn->setBtnSprite(sprite);
		}
		else
		{
			//setMedicineId(_medicine);
			setRandTransId(_trans);
		}
	}
}

void ShortCutUiLayer::updateMedicineAndRandtran()
{
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	unsigned int roleID = ploc->getId();
	std::stringstream ss;
	ss<<"set"<<"_"<<roleID;
	_medicine = ClientCfg::getInstance()->getInt64(ss.str(), "medicineId", -1);
	_trans = ClientCfg::getInstance()->getInt64(ss.str(), "randTranId", -1);

	if (_medicine != -1)
	{
		PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
		CC_ASSERT(itemMap != NULL);
		f_item *item = PackageManager::getInstance()->getItem(*itemMap, _medicine);
		if(item == NULL)
		{
			setMedicineId(-1);
		}
		else
		{
			setMedicineId(_medicine);
		}
	}
	else
	{
		setMedicineId(-1);
	}

	if (_trans != -1)
	{
		PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
		CC_ASSERT(itemMap != NULL);
		f_item *item = PackageManager::getInstance()->getItem(*itemMap, _trans);
		if(item == NULL)
		{
			setRandTransId(-1);
		}
		else
		{
			setRandTransId(_trans);
		}
	}
	else
	{
		setRandTransId(-1);
	}
}

void ShortCutUiLayer::useItem( INT64 itemId )
{
	if(itemId == -1)
		return;

	if(itemId == _medicine)
	{
		PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
		CC_ASSERT(itemMap != NULL);
		f_item *item = PackageManager::getInstance()->getItem(*itemMap, itemId);
		if(item == NULL)
			return;
		const ItemTypeData &typeData = PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
		_medicineBtn->setCDTime((float)typeData.cdTime / 1000.0f);
		_medicineBtn->run();
	}
	else if(itemId == _trans)
	{
		PackageManager::ItemMap *itemMap = PackageManager::getInstance()->getItemMap(EICT_Bag);
		CC_ASSERT(itemMap != NULL);
		f_item *item = PackageManager::getInstance()->getItem(*itemMap, itemId);
		if(item == NULL)
			return;
		const ItemTypeData &typeData = PackageManager::getInstance()->getItemTypeData(item->get_item_type_id());
		_randTransBtn->setCDTime((float)typeData.cdTime / 1000.0f);
		_randTransBtn->run();
	}
}

void ShortCutUiLayer::runSKillCd( int skillId, float duration) 
{
	setSkillCD(skillId, duration,duration, true);
	//_skillBtn->run();
}

void ShortCutUiLayer::setMedicineId( INT64 id )
{
	if(_medicine != id)
	{
		_medicine = id;
		PackageManager::getInstance()->sendShortKeyInfo();
	}
	if(_medicine == -1)
	{
		CCSprite *sprite = CCSprite::createWithSpriteFrameName("rendui_textyaopin");
		sprite->setScale(1.2);
		_medicineBtn->setBtnSprite(sprite);
	}
	else
	{
		f_item *item = PackageManager::getInstance()->getItem(EICT_Bag, _medicine);
		if(item == NULL)
		{
			_medicine = -1;
			CCSprite *sprite = CCSprite::createWithSpriteFrameName("rendui_textyaopin");
			sprite->setScale(1.2);
			_medicineBtn->setBtnSprite(sprite);
		}
		else
		{
			ItemNode *itemNode = ItemNode::create();
			itemNode->setDataId(item->get_item_type_id());
			itemNode->setNum(item->get_item_number());
			itemNode->VisibleBlock(false);
			itemNode->setScale(1.08);
			if (item->get_item_number() > 1)
			{
				itemNode->changeShortCutItemNumPositon();
			}
			_medicineBtn->setBtnSprite(itemNode);
		}
	}
}

void ShortCutUiLayer::saveMedicineId( INT64 id )
{
	if (id != -1)
	{
		LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
		unsigned int roleID = ploc->getId();
		std::stringstream ss;
		ss<<"set"<<"_"<<roleID;
		ClientCfg::getInstance()->setInt64(ss.str(), "medicineId", id);
		ClientCfg::getInstance()->flush();
	}
}

void ShortCutUiLayer::saveRandTranId( INT64 id )
{
	if (id != -1)
	{
		LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
		unsigned int roleID = ploc->getId();
		std::stringstream ss;
		ss<<"set"<<"_"<<roleID;
		ClientCfg::getInstance()->setInt64(ss.str(), "randTranId", id);
		ClientCfg::getInstance()->flush();
	}
}

void ShortCutUiLayer::setRandTransId( INT64 id )
{
	if(_trans != id)
	{
		_trans = id;
		PackageManager::getInstance()->sendShortKeyInfo();
	}
	if(_trans == -1)
	{
		CCSprite *sprite = CCSprite::createWithSpriteFrameName("rendui_textchuansong");
		sprite->setScale(1.2);
		_randTransBtn->setBtnSprite(sprite);
	}
	else
	{
		f_item *item = PackageManager::getInstance()->getItem(EICT_Bag, _trans);
		if(item == NULL)
		{
			_trans = -1;
			CCSprite *sprite = CCSprite::createWithSpriteFrameName("rendui_textchuansong");
			sprite->setScale(1.2);
			_randTransBtn->setBtnSprite(sprite);
		}
		else
		{
			ItemNode *itemNode = ItemNode::create();
			itemNode->setDataId(item->get_item_type_id());
			itemNode->setNum(item->get_item_number());
			itemNode->VisibleBlock(false);			
			_randTransBtn->setBtnSprite(itemNode);
		}
	}

	saveRandTranId(_trans);
}

void ShortCutUiLayer::showUiUpSystemUi(bool show)
{
	if(_isUpSystemUi == show)
		return;

	_isUpSystemUi = show;

	if(show)
	{
		float posY = 70.f;
		float posX = getPositionX();
		CCAction *moveTo = createMoveTo(getPosition(), ccp(posX, posY));
		stopAllActions();
		runAction(moveTo);
	}
	else
	{
		showUi(_isShow);
	}
}


void ShortCutUiLayer::onSkillBtnPressed(int pTag)
{
	SkillUiLayer* layer = getUiNodeByTag<SkillUiLayer>(WCT_SKILLUI);
	int skillIndex = -1;
	if (layer)
	{
		skillIndex = layer->getSkillIndex();
		if (skillIndex >= 0 )
		{
			setSkillId(pTag,skillIndex);
			int skillId = SkillManager::getInstance()->getSkillId((short)skillIndex);

			SkillData* skillData = SkillManager::getInstance()->getSkillData(skillId);
			if (skillData)
			{
				setSkillStop(skillId, skillData->cur_cd,skillData->proto->max_cd);
				if (skillData->cur_cd > 0)
				{
					setSkillCD(skillId, skillData->cur_cd,skillData->proto->max_cd, true);
				}	
			}
			stopAllEffectAction();
			layer->clearSkillIndex();
		}	
	}
	if (!layer || skillIndex < 0)
	{
		//移动到End中
// 		int skillId = SkillManager::getInstance()->getSkillId((unsigned int)_skillTypeId[pTag]);
// 		if(skillId != -1)
// 			signalSkillBtnPressed.emit(skillId);
		_pSkillBtnBackArr[pTag]->setScale(1.2);
		_pSkillBtnArr[pTag]->setScale(1.2);
		_pSkillBtnMaskArr[pTag]->setScale(1.2);
		m_pFTSkillTag[pTag]->setPosition(_pSkillBtnArr[pTag]->getPosition() - ccp(23 * 1.2,23 * 1.2));
	}
}

// void ShortCutUiLayer::onSkillBtnPressed0()
// {
// 	SkillUiLayer* layer = getUiNodeByTag<SkillUiLayer>(WCT_SKILLUI);
// 	int skillIndex = -1;
// 	if (layer)
// 	{
// 		skillIndex = layer->getSkillIndex();
// 		if (skillIndex >= 0 )
// 		{
// 			setSkillId(0,skillIndex);
// 			int skillId = SkillManager::getInstance()->getSkillId((short)skillIndex);
// 
// 			SkillData* skillData = SkillManager::getInstance()->getSkillData(skillId);
// 			if (skillData)
// 			{
// 				setSkillStop(skillId, skillData->cdTime,skillData->cd);
// 				if (skillData->cdTime > 0)
// 				{
// 					setSkillCD(skillId, skillData->cdTime,skillData->cd, true);
// 				}	
// 			}
// 			stopAllEffectAction();
// 			layer->clearSkillIndex();
// 		}	
// 	}
// 	if (!layer || skillIndex < 0)
// 	{
// 		int skillId = SkillManager::getInstance()->getSkillId((unsigned int)_skillTypeId[0]);
// 		if(skillId != -1)
// 			signalSkillBtnPressed.emit(skillId);
// 		_spriteBack[0]->setScale(1.2);
// 		_pSkillBtnArr[0]->setScale(1.2);
// 		_pricture[0]->setScale(1.2);
// 	}
// }
// 
// void ShortCutUiLayer::onSkillBtnPressed1()
// {
// 	SkillUiLayer* layer = getUiNodeByTag<SkillUiLayer>(WCT_SKILLUI);
// 	int skillIndex = -1;
// 	if (layer)
// 	{
// 		skillIndex = layer->getSkillIndex();
// 		if (skillIndex >= 0 )
// 		{
// 			setSkillId(1,skillIndex);
// 			int skillId = SkillManager::getInstance()->getSkillId((short)skillIndex);
// 
// 			SkillData* skillData = SkillManager::getInstance()->getSkillData(skillId);
// 			if (skillData)
// 			{
// 				setSkillStop(skillId, skillData->cdTime,skillData->cd);
// 				if (skillData->cdTime > 0)
// 				{
// 					setSkillCD(skillId, skillData->cdTime,skillData->cd, true);
// 				}	
// 			}
// 			stopAllEffectAction();
// 			layer->clearSkillIndex();
// 		}	
// 	}
// 	if (!layer || skillIndex < 0)
// 	{
// 		int skillId = SkillManager::getInstance()->getSkillId((unsigned int)_skillTypeId[1]);
// 		if(skillId != -1)
// 			signalSkillBtnPressed.emit(skillId);
// 		_spriteBack[1]->setScale(1.2);
// 		_pSkillBtnArr[1]->setScale(1.2);
// 		_pricture[1]->setScale(1.2);
// 	}
// }
// 
// void ShortCutUiLayer::onSkillBtnPressed2()
// {
// 	SkillUiLayer* layer = getUiNodeByTag<SkillUiLayer>(WCT_SKILLUI);
// 	int skillIndex = -1;
// 	if (layer)
// 	{
// 		skillIndex = layer->getSkillIndex();
// 		if (skillIndex >= 0 )
// 		{
// 			setSkillId(2,skillIndex);
// 			int skillId = SkillManager::getInstance()->getSkillId((short)skillIndex);
// 
// 			SkillData* skillData = SkillManager::getInstance()->getSkillData(skillId);
// 			if (skillData)
// 			{
// 				setSkillStop(skillId, skillData->cdTime,skillData->cd);
// 				if (skillData->cdTime > 0)
// 				{
// 					setSkillCD(skillId, skillData->cdTime,skillData->cd, true);
// 				}	
// 			}
// 			stopAllEffectAction();
// 			layer->clearSkillIndex();
// 		}	
// 	}
// 	if (!layer || skillIndex < 0)
// 	{
// 		int skillId = SkillManager::getInstance()->getSkillId((unsigned int)_skillTypeId[2]);
// 		if(skillId != -1)
// 			signalSkillBtnPressed.emit(skillId);
// 		_spriteBack[2]->setScale(1.2);
// 		_pSkillBtnArr[2]->setScale(1.2);
// 		_pricture[2]->setScale(1.2);
// 	}
// }

void ShortCutUiLayer::setSkillId( int index, int skillIndex, bool save /*= true*/ )
{
	//SkillUi *skillUi = GET_UI(SkillUi, WCT_SKILLUI);
	if (!SkillManager::getInstance()->getSkillIsActive(skillIndex)
		|| !SkillManager::getInstance()->getSkillLearnState(skillIndex))//没有学习的技能不能放在快捷栏
	{
		return;
	}	

	std::string frameName = SkillManager::getInstance()->getSkillIcon(skillIndex);
	int skillId = SkillManager::getInstance()->getSkillId((short)skillIndex);
	if(skillId != -1)
	{
		_skillTypeId[index] = SkillManager::getInstance()->getSkillTypeId(skillId);
		setSkillBtnDisplayFrame(index, frameName.c_str());

		if(save)
		{
			std::ostringstream ostr;
			ostr << "short_skill" << index;
			//gx add
			LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
			unsigned int roleID = ploc->getId();
			std::stringstream ss;
			ss<<"set"<<"_"<<roleID;
			//end
			ClientCfg::getInstance()->setInt(ss.str(), ostr.str(), skillIndex);
			ClientCfg::getInstance()->flush();
		}
		setSkillShowOnly(index, _skillTypeId[index]);
	}
	else
	{ 
		_skillTypeId[index] = -1;
		CCSprite *sprite = CCSprite::createWithSpriteFrameName("rendui_textskill");
		_pSkillBtnArr[index]->setBtnSprite(sprite);
	}
}

void ShortCutUiLayer::setSkillShowOnly(int index, int skillTypeId, bool save /*= true*/)
{
	for(int tempIdx = 0; tempIdx < MAX_SKILL_USE_NUM; ++tempIdx)
	{
		if((tempIdx != index) && (_skillTypeId[tempIdx] == skillTypeId))
		{
			_skillTypeId[tempIdx] = -1;
			CCSprite *sprite = CCSprite::createWithSpriteFrameName("rendui_textskill");
			_pSkillBtnArr[tempIdx]->setBtnSprite(sprite);
			if(save)
			{
				std::ostringstream ostr;
				ostr << "short_skill" << tempIdx;
				LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
				unsigned int roleID = ploc->getId();
				std::stringstream ss;
				ss<<"set"<<"_"<<roleID;
				ClientCfg::getInstance()->setInt(ss.str(), ostr.str(), -1);
				ClientCfg::getInstance()->flush();
			}
			break;
		}
	}
}

CCRect ShortCutUiLayer::GetMedicineBtnPos()
{
	//CCPoint cp = _medicineBtn->convertToWorldSpace(ccp(0, 0));
	//CCSize cs = _medicineBtn->getContentSize();
	
	//return CCRect( cp.x, cp.y, cs.width, cs.height );
	SetNodeTintTo(dynamic_cast<CCNode*>(_medicineBtn));
	//CCSize cs = _medicineBtn->getContentSize();	//[bing] 不能用_medicineBtn大小是因为没有放物品的_medicineBtn实际大小只有很窄的一个图片大
	CCSize cs = CCSize(SHORTCUT_BTN_WIDTH - 20, SHORTCUT_BTN_HEIGHT - 20);
	//[bing] 因为程序顺序问题 在这里引导取Y时是错误的没有+70 所以我手动加70吧
	//float fY = _isUpSystemUi ? _medicineBtn->getPositionY() + 70 : _medicineBtn->getPositionY();
	float fY = _medicineBtn->getPositionY() + 70;
	return CCRect( _medicineBtn->getPositionX() - cs.width / 2, fY - cs.height / 2, cs.width, cs.height );
}

cocos2d::CCRect ShortCutUiLayer::GetSkillBtnPos( int nIdx )
{
	//CCPoint cp = _skillBtn[nIdx]->convertToWorldSpace(ccp(0, 0));
	//CCSize cs = _skillBtn[nIdx]->getContentSize();
	SetNodeTintTo(dynamic_cast<CCNode*>( _pSkillBtnArr[nIdx]));
	CCSize cs = CCSize(54.0f, 54.0f);
	float fY = _isUpSystemUi ? _pSkillBtnArr[nIdx]->getPositionY() + 70 : _pSkillBtnArr[nIdx]->getPositionY();
	return CCRect( _pSkillBtnArr[nIdx]->getPositionX() - cs.width / 2, fY - cs.height / 2, cs.width, cs.height );
}

int ShortCutUiLayer::GetSkillId( int nIdx )
{
	if(nIdx < 0 || nIdx >= MAX_SKILL_USE_NUM)
		return -1;

	return _skillTypeId[nIdx];
}

cocos2d::CCRect ShortCutUiLayer::GetRandTransPos()
{
	return CCRect(_randTransBtn->getPositionX() - SHORTCUT_BTN_WIDTH / 2, _randTransBtn->getPositionY() - SHORTCUT_BTN_HEIGHT / 2, SHORTCUT_BTN_WIDTH, SHORTCUT_BTN_HEIGHT - 5);
}

void ShortCutUiLayer::onSkillBtnPressedEnd(int pTag,bool isSlider)
{
	if (!isSlider)
	{
		int skillId = SkillManager::getInstance()->getSkillId((unsigned int)_skillTypeId[pTag]);
		if(skillId != -1)
			signalSkillBtnPressed.emit(skillId);
	}
	

	_pSkillBtnBackArr[pTag]->setScale(1.0);
	_pSkillBtnArr[pTag]->setScale(1.0);
	_pSkillBtnMaskArr[pTag]->setScale(1.0);
	m_pFTSkillTag[pTag]->setPosition(_pSkillBtnArr[pTag]->getPosition() - ccp(23,23));
}

// void ShortCutUiLayer::onSkillBtnPressedEnd0()
// {
// 	_spriteBack[0]->setScale(1.0);
// 	_pSkillBtnArr[0]->setScale(1.0);
// 	_pricture[0]->setScale(1.0);
// }
// 
// void ShortCutUiLayer::onSkillBtnPressedEnd1()
// {
// 	_spriteBack[1]->setScale(1.0);
// 	_pSkillBtnArr[1]->setScale(1.0);
// 	_pricture[1]->setScale(1.0);
// }
// 
// void ShortCutUiLayer::onSkillBtnPressedEnd2()
// {
// 	_spriteBack[2]->setScale(1.0);
// 	_pSkillBtnArr[2]->setScale(1.0);
// 	_pricture[2]->setScale(1.0);
// }

void ShortCutUiLayer::onRandTransBtnPressedEnd()
{
	_randTransBtn->setScale(0.8);
	_spriteBack[3]->setScale(1.0);
	_pricture[3]->setScale(1.0);
}

void ShortCutUiLayer::onMedicineBtnPressedEnd()
{
	_medicineBtn->setScale(0.8);
	_spriteBack[4]->setScale(1.0);
	_pricture[4]->setScale(1.0);
}

void ShortCutUiLayer::MedicineRunEffect()
{
	AnimationCache::AnimateList anims;
	AnimationCache::createDefList(1, anims);
	AnimationCache::getInstance()->getSinEffect(0, "E1_118", anims);
	BSAnimate *animate = anims[0];
	float offestX = 0.0f;
	float offestY = 0.0f;
	getModelOffest("E1_118", offestX, offestY);
	m_pMedicineSprite->setVisible(true);
	m_pMedicineSprite->runAction(CCRepeatForever::create(animate));
	m_pIsMedicineRunEffect = true;
}

void ShortCutUiLayer::SkillRunEffect()
{
	for (int i =0;i < MAX_SKILL_USE_NUM; ++i)
	{
		AnimationCache::AnimateList anims;
		AnimationCache::createDefList(1, anims);
		AnimationCache::getInstance()->getSinEffect(0, "E1_119", anims);
		BSAnimate *animate = anims[0];
		float offestX = 0.0f;
		float offestY = 0.0f;
		getModelOffest("E1_119", offestX, offestY);
		int index = getEndStartPosition();
		for(int j = 0; j < 3; j++)
		{
			m_pSkillSprite[index + j]->setVisible(true);
		}
		
		m_pSkillSprite[i]->runAction(CCRepeatForever::create(animate));
	}
	m_pIsSkillRunEffect = true;
}

void ShortCutUiLayer::BreakRunEffect()
{
	if (_randTransBtn->isVisible())
	{
		AnimationCache::AnimateList anims;
		AnimationCache::createDefList(1, anims);
		AnimationCache::getInstance()->getSinEffect(0, "E1_118", anims);
		BSAnimate *animate = anims[0];
		float offestX = 0.0f;
		float offestY = 0.0f;
		getModelOffest("E1_118", offestX, offestY);
		m_pBreakSprite->setVisible(true);
		m_pBreakSprite->runAction(CCRepeatForever::create(animate));
		m_pIsBreakRunEffect = true;
	}
	
}

void ShortCutUiLayer::stopAllEffectAction()
{
	if(m_pIsMedicineRunEffect)
	{
		m_pMedicineSprite->stopAllActions();
		m_pMedicineSprite->setVisible(false);
		AnimationCache::getInstance()->releaseSinEffect("E1_118");
	}
	m_pIsMedicineRunEffect = false;

	if(m_pIsSkillRunEffect)
	{
		for ( int i = 0 ; i< MAX_SKILL_USE_NUM; i++)
		{
			m_pSkillSprite[i]->stopAllActions();
			m_pSkillSprite[i]->setVisible(false);
			AnimationCache::getInstance()->releaseSinEffect("E1_119");
		}	
	}
	m_pIsSkillRunEffect = false;
	
	if(m_pIsBreakRunEffect)
	{
		m_pBreakSprite->stopAllActions();
		m_pBreakSprite->setVisible(false);
		AnimationCache::getInstance()->releaseSinEffect("E1_118");
	}
	m_pIsBreakRunEffect = false;
}

void ShortCutUiLayer::onAttackBtnPressed()
{
	//首先进行状态限制
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if (!IS_VALID_PTR(ploc))
		return;

	ploc->m_bAttBtnClick = true;
	if(ploc->m_bIsJock)
		return ;

	_attackBtn->setScale(1.2);

	if(ploc->stateMachine()->CurrentState() == LocalPlayerStateRun::getInstance())
		return ;

	if (ploc->isInRoleStateAny(RA_ShuangXiu) || ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))
	{
		if (ploc->isInRoleStateAny(RA_Exchange))
		{
			ExchangeBusinessMgr::getInstance()->CancleExchange();
		}
		return;
	}

	//TODO:取消自动（攻击键）
	if (AutoActionMgr::getInstance()->Get_Auto_Action())//gx add
	{
		AutoActionMgr::getInstance()->Set_Auto_Action(false);
	}
	LocalPlayer *lp = RoleManager::getInstance()->getLocalPlayer();
	if (lp)
	{
		if (lp->getRunSELastState())
		{
			lp->setAutoRunState(false);
		}
	}

	//ZHJL：在攻击状态时不处理
	//if (RoleManager::getInstance()->getLocalPlayer()->getAttackState())
	//	return;

	//!是否选中人物
	//RoleManager::getInstance()->autoSelectCanAttackRole();
	select_enemy_immediately evt;
	SEND_EVENT(&evt);

	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	SkillManager::getInstance()->planUseManual(-1);
	if(roleId != INVALID_ID)
	{
		if (RoleManager::getInstance()->canAttack(roleId,true,true))
		{
			//RoleManager::getInstance()->getLocalPlayer()->setEnterAttackState();
			RoleManager::getInstance()->getLocalPlayer()->attackTo(roleId);
		}
	}
}

void ShortCutUiLayer::onAttackBtnPressedEnd()
{
	_attackBtn->setScale(1.0);
}

void ShortCutUiLayer::setRecordNodeState(bool isShow){
	if(_recordNode)
		_recordNode->setVisible(isShow);
}

void ShortCutUiLayer::showTransBtn( bool isShow )
{
	if(_randTransBtn)
		_randTransBtn->setVisible(isShow);
	if(_randTransBtnBack)
		_randTransBtnBack->setVisible(isShow);
	if(_randTransBtnLight)
		_randTransBtnLight->setVisible(isShow);
}

//****************************************************华丽丽的分割线***************************************
bool ShortCutUiLayer::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	if (!_isCanRotate)
		return false;

	CCSize winSize = CCDirector::sharedDirector()->getWinSize();

	CCPoint pt = convertTouchToNodeSpace(pTouch);

	CCRect shortCutArea1 = CCRectMake(winSize.width * (730.0f/800.0f),0.f,winSize.width - winSize.width * (730.0f/800.0f),winSize.height *(230.0f/480.0f));
	CCRect shortCutArea2 = CCRectMake(winSize.width * (610.0f/800.0f),0.f,winSize.width * (730.0f/800.0f) - winSize.width * (610.0f/800.0f),winSize.height *(150.0f/480.0f));

	if (shortCutArea1.containsPoint(pt)||shortCutArea2.containsPoint(pt))
	{
		//this->setBtnScale(pTag,0.9f);
		_startBeginJD = getPointJD(pTouch->getLocation());
		_nowIndex = getNowStartPosition();
		_canMoveJiaoDu = 0;
		_moveJiaoDu = 0;
		_canAttach = true;

		return true;
	}
	return false;
}

void ShortCutUiLayer::ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent)
{
	setJNvecPosition(getEndStartPosition(), 0, true);
	setShowSkill(false, getEndStartPosition());
}
void ShortCutUiLayer::ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent)
{
	setJNvecPosition(getEndStartPosition(), 0, true);
	setShowSkill(false, getEndStartPosition());
}
void ShortCutUiLayer::ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent)
{
	float moveNow = getPointJD(pTouch->getLocation()) - _startBeginJD - _moveJiaoDu;
	_moveJiaoDu = getPointJD(pTouch->getLocation()) - _startBeginJD;

	_canMoveJiaoDu += moveNow;
	if(abs(_canMoveJiaoDu) > 10)
		_canAttach = false;
	setShowSkill(true);
	if(checkCanMove(_canMoveJiaoDu, _nowIndex))
		setJNvecPosition(_nowIndex, _canMoveJiaoDu);
	else
		_canMoveJiaoDu -= moveNow;
}


void ShortCutUiLayer::onSkillBtnTouch(CCPoint pPos,CCTouchEventType pType,int pTag)
{
	if (!_isCanRotate)
		return;

	CDButton* t_button = _pSkillBtnArr[pTag];
	if (CC_TOUCH_EVENT_BEGAN == pType)
	{
		this->setBtnScale(pTag,0.9f);
		_startBeginJD = getPointJD(pPos);
		_nowIndex = getNowStartPosition();
		_canMoveJiaoDu = 0;
		_moveJiaoDu = 0;
		_canAttach = true;
	}
	if (pType == CC_TOUCH_EVENT_MOVED)
	{
		float moveNow = getPointJD(pPos) - _startBeginJD - _moveJiaoDu;
		_moveJiaoDu = getPointJD(pPos) - _startBeginJD;

		_canMoveJiaoDu += moveNow;

		if(abs(_canMoveJiaoDu) > 10)
			_canAttach = false;
		setShowSkill(true);
		if(checkCanMove(_canMoveJiaoDu, _nowIndex))
			setJNvecPosition(_nowIndex, _canMoveJiaoDu);
		else
			_canMoveJiaoDu -= moveNow;


		CCSize size = t_button->getContentSize();
		CCRect rect(t_button->getPosition().x - size.width / 2, t_button->getContentSize().height - size.height / 2, size.width, size.height);
		if(!rect.containsPoint(pPos))
		{
			this->setBtnScale(pTag,1.0f);
		}
	}

	if (pType == CC_TOUCH_EVENT_ENDED)
	{
		this->setBtnScale(pTag,1.0f);
		setJNvecPosition(getEndStartPosition(), 0, true);
		setShowSkill(false, getEndStartPosition());
		
	}

	if(pType == CC_TOUCH_EVENT_CANCELED)
	{
		this->setBtnScale(pTag,1.0f);
		setJNvecPosition(getEndStartPosition(), 0, true);
		setShowSkill(false, getEndStartPosition());
			
	}
}

void ShortCutUiLayer::setBtnScale(int pBtnTag , float pScale)
{
	
}
void ShortCutUiLayer::initSkillBtn()
{
	_startJiaoDu = 90.0f;
	_moveJiaoDu = 0;
	_canMoveJiaoDu = 0;
	_showSkill = true;

	_fBanjing = ccpDistance(_pSkillBtnArr[0]->getPosition(),_attackBtn->getPosition());
	setJNvecPosition(0,0,false);
	setShowSkill(false);
	_secondPoint = _pSkillBtnArr[1]->getPosition();
	_fristPoint = _pSkillBtnArr[0]->getPosition();
	for (int i = 0; i < MAX_SKILL_USE_NUM; i++)
	{
		m_pSkillSprite[i]->setPosition(_pSkillBtnArr[i]->getPosition());
		m_pSkillSprite[i]->setVisible(false);
	}

}

float ShortCutUiLayer::getPointJD(CCPoint pot)
{
	CCPoint tempPoint = _attackBtn->getPosition();
	if(pot.x < tempPoint.x)
	{
		float b = sqrt((pot.x - tempPoint.x)*(pot.x - tempPoint.x) + (pot.y - tempPoint.y)*(pot.y - tempPoint.y));
		float jiaodu = 0;
		if(b != 0)
			jiaodu = asin((pot.y - tempPoint.y) / b);
		return jiaodu * 180 / 3.14;
	}
	else
	{
		float b = sqrt((pot.x - tempPoint.x)*(pot.x - tempPoint.x) + (pot.y - tempPoint.y)*(pot.y - tempPoint.y));
		float jiaodu = 0;
		if(b != 0)
			jiaodu = asin((pot.y - tempPoint.y) / b);
		return 180 - jiaodu * 180 / 3.14;
	}

	return 0;
}

void ShortCutUiLayer::setShowSkill(bool all, const int index)
{
	if(_showSkill == all)
		return;

	_showSkill = all;
	bool isAll = all;
 	for(int i = 0; i < MAX_SKILL_USE_NUM; i++)
 	{
 		_pSkillBtnArr[i]->setVisible(isAll);
  		_pSkillBtnMaskArr[i]->setVisible(isAll);
  		_pSkillBtnBackArr[i]->setVisible(isAll);
		m_pSkillSprite[i]->setVisible(m_pIsSkillRunEffect ? isAll : false);
		_pSkillBtnArr[i]->setVisibleWhenStoped(isAll);
		m_pFTSkillTag[i]->setVisible(isAll);
 	}
 		
	

	for(int i = 0; i < 3; i++)
	{
 		_pSkillBtnArr[index + i]->setVisible(true);
  		_pSkillBtnMaskArr[index + i]->setVisible(true);
  		_pSkillBtnBackArr[index + i]->setVisible(true);
		m_pSkillSprite[index + i]->setVisible(m_pIsSkillRunEffect);
		m_pFTSkillTag[index + i]->setVisible(true);
		_pSkillBtnArr[index + i]->setVisibleWhenStoped(true);
	}


	if(index == 0)
	{
		_jiantou1->setVisible(true);
		_jiantou2->setVisible(false);
	}
	else if(index == 4)
	{
		_jiantou1->setVisible(false);
		_jiantou2->setVisible(true);
	}
	else
	{
		_jiantou1->setVisible(true);
		_jiantou2->setVisible(true);
	}
}

bool ShortCutUiLayer::checkCanMove(float fjd, int index)
{
	CCNode* widget;
	float jiaodu = 0;

	widget = _pSkillBtnArr[0];
	jiaodu = _startJiaoDu + (0 - index)*45 - fjd;
	float x = _fBanjing * cos(jiaodu*M_PI / 180) + _attackBtn->getPositionX();
	float y = _fBanjing * sin(jiaodu*M_PI / 180) + _attackBtn->getPositionY();
	if(x < _fristPoint.x && y > 0)
	{
		_jiantou1->setVisible(true); //设置箭头
		_jiantou2->setVisible(false);
		return false;		
	}


	widget = _pSkillBtnArr[4];
	jiaodu = _startJiaoDu + (4 - index)*45 - fjd;
	x  = _fBanjing * cos(jiaodu * M_PI / 180) + _attackBtn->getPositionX();
	y  = _fBanjing * sin(jiaodu * M_PI / 180) + _attackBtn->getPositionY();
	if(x > _fristPoint.x && y > 0)
	{
		_jiantou1->setVisible(false);
		_jiantou2->setVisible(true);
		return false;
	}

	_jiantou1->setVisible(true);
	_jiantou2->setVisible(true);
	return true;
}

int ShortCutUiLayer::getEndStartPosition()
{
	int index = 0;
	for(int i = 0; i < MAX_SKILL_USE_NUM; i++)
	{
		CCPoint t_pos = _pSkillBtnArr[i]->getPosition();
		if(t_pos.x >= _fristPoint.x - 2  &&
			t_pos.y > _secondPoint.y)
		{
			index = i;
			break;
		}			
	}
	switch(index)
	{
	case 0:
		index = 0;
		break;
	case 1:
	case 2:
		index = 2;
		break;
	case 3:
	case 4:
		index = 4;
		break;
	}

	return index;
}

int ShortCutUiLayer::getNowStartPosition()
{
	for(int i = 0; i < MAX_SKILL_USE_NUM; i++)
	{
		if(abs(_pSkillBtnArr[i]->getPosition().x - _fristPoint.x) < 20 && abs(_pSkillBtnArr[i]->getPosition().y - _fristPoint.y) < 10)
			return i;
	}
	return 0;
}

void ShortCutUiLayer::setJNvecPosition(int index, float fjd, bool isEnd /*isEnd=false*/)
{
	CCNode* widget;
	CCNode* t_mask;
	CCNode* t_back;
	CCNode* t_label;
	CCNode* t_sprite;
	float jiaodu = 0;

	//CCLog("---!!!index=%d", index);
	for(int i = 0; i < MAX_SKILL_USE_NUM; i++)
	{
		widget = _pSkillBtnArr[i];
		t_mask = _pSkillBtnMaskArr[i];
		t_back = _pSkillBtnBackArr[i];
		t_label = m_pFTSkillTag[i];
		t_sprite = m_pSkillSprite[i];
		jiaodu = _startJiaoDu + (i - index)*45 - fjd;
		
		float x = _fBanjing * cos(jiaodu*3.14 / 180) + _attackBtn->getPositionX();
		float y = _fBanjing * sin(jiaodu*3.14 / 180) + _attackBtn->getPositionY();
		if(isEnd)
		{
			CCMoveTo* moveTo = CCMoveTo::create(0.1, ccp(x, y));
			widget->runAction(moveTo);
			moveTo = CCMoveTo::create(0.1, ccp(x, y));
			t_mask->runAction(moveTo);
			moveTo = CCMoveTo::create(0.1, ccp(x, y));
			t_back->runAction(moveTo);
			moveTo = CCMoveTo::create(0.1,ccp(x - 23 * widget->getScale(),y - 23 * widget->getScale()));
			t_label->runAction(moveTo);
			moveTo = CCMoveTo::create(0.1, ccp(x, y));
			t_sprite->runAction(moveTo);
			
		}
		else
		{
 			t_mask->setPosition(ccp(x, y));
 			t_back->setPosition(ccp(x, y));
 			widget->setPosition(ccp(x, y));
			t_sprite->setPosition(ccp(x, y));
			t_label->setPosition(ccp(x - 23 * widget->getScale(),y - 23 * widget->getScale()));
		}
	}
}

void ShortCutUiLayer::onMoveAroundAttackBtnByAngle(CCNode* pNode, float pAngle)
{
	//CCSize winSize = CCDirector::sharedDirector()->getWinSize();
	CCPoint t_startPos = pNode->getPosition();
	CCPoint t_centerPos = _attackBtn->getPosition();// ccp(winSize.width,0);
	CCPoint newPos =  t_centerPos + ccpRotateByAngle(t_startPos - t_centerPos, CCPointZero, pAngle);  
	pNode->setPosition(newPos);  
	//float rotation = -CC_RADIANS_TO_DEGREES(pAngle);
	//pNode->setRotation(rotation);
}

void ShortCutUi::refreshSkillBtnRotateFromSkillInfo()
{
	 unsigned int totoalNum = SkillManager::getInstance()->getLearnSkillTotalNum();
	 _canRotate = totoalNum > 3;

	 ShortCutUiLayer *ui = getUiNodeByTag<ShortCutUiLayer>(WCT_ShorCutUi);
	 if(ui != NULL)
	 {
		 ui->setSkillBtnCanRotate(_canRotate);
	 }
	//GET_UI(ShortCutUi, WCT_ShorCutUi)->getSkillBtnCanRotate();
}
void ShortCutUiLayer::setSkillBtnCanRotate(bool isTrue)
{
	_isCanRotate = isTrue;  
	if (_isCanRotate)
	{
		checkCanMove(_canMoveJiaoDu, _nowIndex);
	}
	else
	{
		_jiantou1->setVisible(_isCanRotate);
		_jiantou1->setVisible(_isCanRotate);
	}
	
}

void ShortCutUiLayer::sync_skill_cd( int skill_id,float duration,float max )
{
	CC_ASSERT(_pSkillBtnArr != NULL);
	//SkillManager* skill_mgr = SkillManager::getInstance();
	for(int i = 0; i < MAX_SKILL_USE_NUM; i ++)
	{
		if(skill_id == _skillTypeId[i])
		{
			_pSkillBtnArr[i]->sync_cd_time(duration,max);
		}
	}
}

void ShortCutUiLayer::on_event_sync_cd( sync_skill_cd_duration* evt )
{
	sync_skill_cd(evt->skill_id,evt->new_cd,evt->max);
}

void ShortCutUiLayer::on_event_add_item( add_new_item* evt )
{
	PackageManager* pack_mgr = PackageManager::getInstance();
	f_item* new_item = pack_mgr->getItem(evt->item_id);
	if (new_item)
	{
		ItemTypeData const*  item_proto = pack_mgr->get_item_proto_ptr(new_item->get_item_type_id());
		if (item_proto && item_proto->type == PIT_SuiJiShi)
		{
			try_to_set_trans_id(evt->item_id);
		}
	}
}

void ShortCutUiLayer::try_to_set_trans_id( INT64 id )
{
	if (getRandTransId() == -1)
	{
		setRandTransId(id);
	}
}
