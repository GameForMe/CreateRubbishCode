#include "ExchangeMgr.h"
#include "World.h"
#include "DBMgr.h"
#include "World.h"
#include "ShopProtocol.h"
#include "TCPClient.h"
#include "ToolTip.h"
#include "NPCTalkUi.h"
#include "RoleManager.h"
#include "LocalPlayer.h"
#include "MessageBoxUi.h"
#include "StringMgr.h"
#include "PackageManager.h"
#include "MasterPrenticeMgr.h"
#include "UiTools.h"
#include "NpcduihuanUi.h"
#include "InstanceMgr.h"
#include "InstanceProto.h"
#include "Movie.h"
#include "kaifuhudong_protocol.h"
#include "RewardProto.h"
#include "BaseDefine.h"
#include "CommonMsgDefine.h"
#include "WorldPacket.h"
#include "Base.h"
#include "PackageProto.h"
#include "MiniMapUi.h"
#include "NPCTalkUi.h"

ExchangeMgr::ExchangeMgr():_indexID(-1)
{
}

ExchangeMgr::~ExchangeMgr()
{
	//TCP_CLIENT->unregister_net_cmd("NET_SIS_produce" , this , &ExchangeMgr::onProduce);
}

ExchangeMgr* ExchangeMgr::getInstance()
{
	static ExchangeMgr tmg;
	return &tmg;
}
void ExchangeMgr::Init()
{
	LocalPlayer* lp = RoleManager::getInstance()->getLocalPlayer();

	std::vector<sExchange> ss;
	sExchange ex;

	/*
	switch(lp->getRoleType())
	{
	case RT_MWARRIOR:
	case RT_WWARRIOR:
		ex.id = 10001;
		ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE6\x97\x8B\xE9\xA3\x8E\xE6\x96\xA9\xE7\xA7\x98\xE7\xB1\x8D\x28\x32\x30\x30\x30\xE4\xB9\xA6\xE9\xA1\xB5\x29";
		ex.info = GET_STR(2020);
		ss.push_back(ex);
		ex.id = 10002;
		ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE4\xB9\x9D\xE5\xA4\xA9\xE9\x80\x90\xE6\x97\xA5\xE7\xA7\x98\xE7\xB1\x8D\x28\x35\x30\x30\x30\xE4\xB9\xA6\xE9\xA1\xB5\x29";
		ex.info = GET_STR(2020);
		ss.push_back(ex);
		break;
	case RT_MMAGE:
	case RT_WMAGE:
		ex.id = 10003;
		ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE7\x8B\xB1\xE5\xA4\xA9\xE7\x81\xAB\xE7\xA7\x98\xE7\xB1\x8D\x28\x32\x30\x30\x30\xE4\xB9\xA6\xE9\xA1\xB5\x29";
		ex.info = GET_STR(2020);
		ss.push_back(ex);
		ex.id = 10004;
		ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE6\xB5\x81\xE6\x98\x9F\xE7\x81\xAB\xE9\x9B\xA8\xE7\xA7\x98\xE7\xB1\x8D\x28\x35\x30\x30\x30\xE4\xB9\xA6\xE9\xA1\xB5\x29";
		ex.info = GET_STR(2020);
		ss.push_back(ex);
		break;
	case RT_MTAOIST:
	case RT_WTAOIST:
		ex.id = 10005;
		ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE5\x8F\xAC\xE5\x94\xA4\xE5\x9C\xA3\xE5\x85\xBD\xE7\xA7\x98\xE7\xB1\x8D\x28\x32\x30\x30\x30\xE4\xB9\xA6\xE9\xA1\xB5\x29";
		ex.info = GET_STR(2020);
		ss.push_back(ex);
		ex.id = 10006;
		ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE5\x99\xAC\xE8\xA1\x80\xE6\x9C\xAF\xE7\xA7\x98\xE7\xB1\x8D\x28\x35\x30\x30\x30\xE4\xB9\xA6\xE9\xA1\xB5\x29";
		ex.info = GET_STR(2020);
		ss.push_back(ex);
		break;
	}
	// _exMap[1101002] = ss;取消书页兑换 gx modify 
	_exMap[1002001] = ss;
	_exMap[1003001] = ss;
	// _exMap[1011006] = ss;
	_exMap[1009007] = ss;
	ss.clear();
	//土城铁匠装备升级放在这里 gx add
	ex.name = "\xE8\xA3\x85\xE5\xA4\x87\xE5\x8D\x87\xE7\xBA\xA7";
	ex.info = "";
	ss.push_back(ex);
	//
	ex.id = 10007;
	ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE7\xA7\x98\xE9\x93\xB6";
	ex.info = GET_STR(2021);
	ss.push_back(ex);
	ex.id = 10008;
	ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE7\x81\xAB\xE7\x9F\xB3";
	ex.info = GET_STR(2022);
	ss.push_back(ex);
	ex.id = 10009;
	ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE7\x8E\x84\xE9\x93\x81";
	ex.info = GET_STR(2023);
	ss.push_back(ex);
	ex.id = 10010;
	ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE5\xA4\xA9\xE7\x95\x8C\xE9\x99\xA8\xE9\x93\x81";
	ex.info = GET_STR(2024);
	ss.push_back(ex);
	_exMap[1003024] = ss;
	ss.clear();
	ex.id = 10011;
	ex.name = "\xE9\xAB\x98\xE7\xB2\xB1\xE9\x85\x92\x28\x35\xE5\x9D\x9B\xE9\x85\x92\x29";
	ex.info = GET_STR(2025);
	ss.push_back(ex);
	ex.id = 10012;
	ex.name = "\xE6\x9E\x9C\xE9\x9C\xB2\xE9\x85\x92\x28\x31\x30\xE5\x9D\x9B\xE9\x85\x92\x29";
	ex.info = GET_STR(2025);
	ss.push_back(ex);
	ex.id = 10013;
	ex.name = "\xE8\x99\x8E\xE9\xAA\xA8\xE9\x85\x92\x28\x33\x30\xE5\x9D\x9B\xE9\x85\x92\x29";
	ex.info = GET_STR(2025);
	ss.push_back(ex);
	ex.id = 10014;
	ex.name = "\xE6\xB4\xBB\xE8\x84\x89\xE9\x85\x92\x28\x36\x30\xE5\x9D\x9B\xE9\x85\x92\x29";
	ex.info = GET_STR(2025);
	ss.push_back(ex);
	ex.id = 10015;
	ex.name = "\xE7\x8E\x84\xE5\x8F\x82\xE9\x85\x92\x28\x31\x30\x30\xE5\x9D\x9B\xE9\x85\x92\x29";
	ex.info = GET_STR(2025);
	ss.push_back(ex);
	_exMap[1003017] = ss;
	_exMap[1009010] = ss;
	//皇家文学士兑换翅膀
	ss.clear();
	ex.id = 10016;
	ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE5\xA4\xA9\xE4\xBD\xBF\xE4\xB9\x8B\xE7\xBF\xBC\xEF\xBC\x88\x33\x30\xE7\xBF\x85\xE8\x86\x80\xE7\xBE\xBD\xE6\xAF\x9B\xEF\xBC\x89";
	ex.info = GET_STR(2169);
	ss.push_back(ex);
	/*ex.id = 10017;
	ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE5\x9C\xA3\xE5\xA4\xA9\xE7\xBE\xBD\xE7\xBF\xBC\xEF\xBC\x88\x36\x30\xE7\xBF\x85\xE8\x86\x80\xE7\xBE\xBD\xE6\xAF\x9B\xEF\xBC\x89";
	ex.info = GET_STR(2170);
	ss.push_back(ex);
	ex.id = 10018;//技能单兑换
	ex.name = "\xE5\x85\x91\xE6\x8D\xA2\xE8\xB6\x85\xE7\xBA\xA7\xE6\x8A\x80\xE8\x83\xBD\xE4\xB8\xB9\xEF\xBC\x88\xE6\x8A\x80\xE8\x83\xBD\xE4\xB8\xB9\x31\x30\x30\xE4\xB8\xAA\xEF\xBC\x89";
	ex.info = GET_STR(2186);
	ss.push_back(ex);
	_exMap[1101002] = ss;
	*/

	//[bing] 先临时写这了以后换用lua
// 	ss.clear();
// 	ex.name = "\xE8\xBF\x9B\xE5\x85\xA5\xE5\xA4\x9A\xE4\xBA\xBA\xE5\x89\xAF\xE6\x9C\xAC";	//[bing] 进入多人副本
// 	ss.push_back(ex);
// 	_exMap[1002008] = ss;

	//雕像膜拜
	ss.clear();
	ex.name = "\xE9\x9B\x95\xE5\x83\x8F\xE8\x86\x9C\xE6\x8B\x9C";
	ss.push_back(ex);
	switch(lp->getRoleType())
	{
	case RT_MWARRIOR://男战士
		_exMap[2910192] = ss;
		break;
	case RT_WWARRIOR:
		_exMap[2910195] = ss;
		break;
	case RT_MMAGE://男法师
		_exMap[2910193] = ss;
		break;
	case RT_WMAGE:
		_exMap[2910196] = ss;
		break;
	case RT_MTAOIST://男道士
		_exMap[2910194] = ss;
		break;
	case RT_WTAOIST:
		_exMap[2910197] = ss;
		break;
	}
	//end
/*
	//国王出师
	ss.clear();
	ex.name = "\xE5\x87\xBA\xE5\xB8\x88";
	ss.push_back(ex);
	_exMap[1101001] = ss;*/
	//end
	//月老兑换
/*
	ss.clear();
	ex.id = 10019;
	ex.name = "\x31\xE4\xB8\xAA\xE6\x96\xB0\xE5\xB9\xB4\xE7\xBA\xA2\xE5\x8C\x85\x28\xE5\x85\x91\xE6\x8D\xA2\x31\x30\x30\xE4\xB8\x87\xE7\xBB\x8F\xE9\xAA\x8C\x29";
	ex.info = GET_STR(2295);
	ss.push_back(ex);
	ex.id = 10020;
	ex.name = "\x33\xE4\xB8\xAA\xE6\x96\xB0\xE5\xB9\xB4\xE7\xBA\xA2\xE5\x8C\x85\x28\xE5\x85\x91\xE6\x8D\xA2\x35\x30\x30\xE4\xB8\x87\xE7\xBB\x8F\xE9\xAA\x8C\x29";
	ex.info = GET_STR(2296);
	ss.push_back(ex);
	ex.id = 10021;
	ex.name = "\x37\xE4\xB8\xAA\xE6\x96\xB0\xE5\xB9\xB4\xE7\xBA\xA2\xE5\x8C\x85\x28\xE5\x85\x91\xE6\x8D\xA2\x31\x35\x30\x30\xE4\xB8\x87\xE7\xBB\x8F\xE9\xAA\x8C\x29";
	ex.info = GET_STR(2297);
	ss.push_back(ex);
	_exMap[1002018] = ss;*/

	//新添加的npc
	ss.clear();
#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
	
#elif (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
	//ex.id = 10037 ;
	//ex.name = GET_STR(7054);
	//ex.info = GET_STR(7055);
	//ss.push_back(ex);
	ex.id = 10037 ;
	ex.name = GET_STR(9443);
	ex.info ="";
	ss.push_back(ex);//注意：这里是#6449，恢复活动大使返利功能，苹果版这里不需要显示，安卓版需要显示
	ex.id = 10038 ;
	ex.name = GET_STR(9443);
	ex.info ="";
	ss.push_back(ex);
	_exMap[1116004] = ss;
#endif
	

	//end
	//特戒兑换 开启 //add by XSea 2014.10.29
	ss.clear();
	ex.id = 10031; //麻痹戒指Lv1:99热血积分
	ex.name = GET_STR(7009);
	ex.info = GET_STR(2355);
	ss.push_back(ex);
	ex.id = 10032;
	ex.name = GET_STR(7010);
	ex.info = GET_STR(2356);
	ss.push_back(ex);
	ex.id = 10033;
	ex.name = GET_STR(7011);
	ex.info = GET_STR(2357);
	ss.push_back(ex);
	ex.id = 10034;
	ex.name = GET_STR(7012);
	ex.info = GET_STR(2358);
	ss.push_back(ex);
	ex.id = 10035;
	ex.name = GET_STR(7013);
	ex.info = GET_STR(2359);
	ss.push_back(ex);
	ex.id = 10036;
	ex.name = GET_STR(7014);
	ex.info = GET_STR(7008);
	ss.push_back(ex);
	_exMap[1002021] = ss; //特戒npcid
	//戒灵石兑换 开启 //add by XSea 2014.10.30
	ss.clear();
	ex.id = 10027 ;
	ex.name = GET_STR(7020);
	ex.info = GET_STR(2360);
	ss.push_back(ex);
	ex.id = 10028 ;
	ex.name = GET_STR(7021);
	ex.info = GET_STR(2361);
	ss.push_back(ex);
	ex.id = 10029;
	ex.name = GET_STR(7022);
	ex.info = GET_STR(2362);
	ss.push_back(ex);
	ex.id = 10030;
	ex.name = GET_STR(7023);
	ex.info = GET_STR(2363);
	ss.push_back(ex);
	_exMap[1002022] = ss;
	loadConvertExchange();
	//end by gx
	TCP_CLIENT->register_net_cmd("NET_SIS_produce" , this , &ExchangeMgr::onProduce);
	TCP_CLIENT->register_net_cmd("NET_SIS_third_recharge_reward" , this , &ExchangeMgr::onthird_recharge_reward);
	
	TCP_CLIENT->register_net_cmd("NET_SIS_Convert_Exchange_Result",this,&ExchangeMgr::onServerConvertExchangeResult);
	return;
}
void ExchangeMgr::Destroy()
{
	_exMap.clear();
	_convertExMap.clear();
	TCP_CLIENT->unregister_net_cmd("NET_SIS_produce" , this , &ExchangeMgr::onProduce);
	TCP_CLIENT->unregister_net_cmd("NET_SIS_third_recharge_reward" , this , &ExchangeMgr::onthird_recharge_reward);
	TCP_CLIENT->unregister_net_cmd("NET_SIS_Convert_Exchange_Result",this,&ExchangeMgr::onServerConvertExchangeResult);
	return;
}
void ExchangeMgr::doTransScript( unsigned int npcid , unsigned int sid )
{
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return;
	std::map<unsigned int , std::vector<sExchange> >::iterator iter =  _exMap.find(npcid);
	if(iter!= _exMap.end())
	{
		if (1101001 == npcid)//国王
		{
			//若本地玩家是师傅，则不显示出师按钮;
			if (MasterPrenticeMgr::getInstance()->IsMaster_Local(ploc->getId()))
			{
				_npcID = 0;
				return;
			}
		}
		_npcSID = sid;
		_npcID = npcid;
		//特戒兑换大使 //add by XSea 2014.10.29
		/*if (1002021 == _npcID )
			return;*/
		if(_npcSID==2000000003)
		{
			World::getInstance()->getNPCDialog()->appendItem(1 ,"\xE7\x89\xB9\xE6\x88\x92\xE5\x85\x91\xE6\x8D\xA2", true , true, NPCTalkUi::TEXTT_DUIHUAN);
		}
		else if (_npcSID==2000000002)
		{
			World::getInstance()->getNPCDialog()->appendItem(2 ,"\xE7\x81\xB5\xE7\x9F\xB3\xE5\x85\x91\xE6\x8D\xA2", true , true, NPCTalkUi::TEXTT_DUIHUAN);
		}
		else{
			for(size_t i = 0 ; i < iter->second.size() ; ++i)
				World::getInstance()->getNPCDialog()->appendItem(i , iter->second[i].name.c_str(), true , true, NPCTalkUi::TEXTT_INSTANCE);
		}

	}
	else
	{
		_npcID = 0;
	}


	auto nExIter = _convertExMap.find(npcid);
	if (nExIter != _convertExMap.end())
	{
		ExchangeMAP const& exMap = nExIter->second;
		if (!exMap.empty())
		{
			_npcSID = sid;
			_npcID = npcid;
			for (auto exIter = exMap.begin();exIter != exMap.end();++exIter)
			{
				sConvertExchange const& data = exIter->second;
				BYTE roleType = ploc->getAttribute(RA_ROLETYPE);
				if (roleType != data.vocationLimit && data.vocationLimit != 0)
					continue;

				if (ploc->getLevel() < data.showLevel)
					continue;
				
				World::getInstance()->getNPCDialog()->appendItem(data.index , data.info.c_str(), true , true, NPCTalkUi::TEXTT_INSTANCE);
			}
		}
	}
}

void ExchangeMgr::onSelect( unsigned int idx )
{	
	if(_npcID == NULL)
		return;

	//gx add 2013.11.12 摆摊，交易，双修状态锁死
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if (!ploc)
		return;
	if (ploc->isRoleInStaticState())
		return;

	if (1003024 == _npcID && 0 == idx)
		return;//特例，铁匠处的装备升级过滤
	_indexID = idx;

	//雕像膜拜
	if (isMoBaiNpc(_npcID))
	{
		LocalPlayer* lp = RoleManager::getInstance()->getLocalPlayer();
		if (!lp)
			return;
		int nOpenLevel = GetFunOpenLevel(EFOL_HeroWorship);
		if (lp->getLevel() < nOpenLevel)
		{
			ToolTip::getInstance()->push(GET_STR(2183));
			return;
		}
		//首先判断该玩家今日是否已经常规膜拜过
		if (lp->getRoleDayClearInfo(ERDCT_Xili_LIMIT_SOMETHING) >= 1)
		{
			ToolTip::getInstance()->push(GET_STR(2179));
			return;
		}
// 		MiniMapUi* miniMapUi = World::getInstance()->getMiniMapUi();
// 		if(miniMapUi)
// 		{
// 			MiniMapUiLoaderLayer* loaderLayer = miniMapUi->getMinimapUILoaderLayer();
// 			if(loaderLayer)
// 			{
// 				loaderLayer->closeBaoDianEffect(_npcID);
// 			}
// 		}
		NET_SIC_npc_talk cmd;
		//switch(lp->getRoleType())
		//{
		//case RT_MWARRIOR://男战士
		//	cmd.dwNPCId = 1002012;
		//	break;
		//case RT_WWARRIOR:
		//	cmd.dwNPCId = 1002015;
		//	break;
		//case RT_MMAGE://男法师
		//	cmd.dwNPCId = 1002013;
		//	break;
		//case RT_WMAGE:
		//	cmd.dwNPCId = 1002016;
		//	break;
		//case RT_MTAOIST://男道士
		//	cmd.dwNPCId = 1002014;
		//	break;
		//case RT_WTAOIST:
		//	cmd.dwNPCId = 1002017;
		//	break;
		//}
		cmd.dwNPCId = _npcID;
		cmd.param = 0;
		TCP_CLIENT->send_net_cmd(&cmd , NP_NORMAL , false);
	}
	else if (1101001 == _npcID)//出师
	{
		MasterPrenticeMgr::getInstance()->Prentcie_graduate_from_master();
	}
	else if(1002008 == _npcID)	//[bing] 进多人副本NPC
	{
		OPEN_UI(WCT_FubenDuoRenUI);
		World::getInstance()->getNPCDialog()->show(false);
	}
	else if(1116004 == _npcID)	//充值返利大使
	{
		NET_SIC_third_recharge_reward cmd;
		TCP_CLIENT->send_net_cmd(&cmd , NP_NORMAL , false);
	}
	else
	{
		//首先判断兑换
		if (haveConvertExchange(_npcID,_indexID) == false)
		{
			if (idx == 0)
			{
				canSendProduce(_npcID,idx);
			}
			//else if (idx == 1)
			//{
			//	NET_SIC_third_recharge_reward cmd;
			//	TCP_CLIENT->send_net_cmd(&cmd , NP_NORMAL , false);
			//}
		}
	}
}

void ExchangeMgr::doMoBaiScript(unsigned int npcid , unsigned int sid)
{
	_npcSID = sid;
	_npcID = npcid;

	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc){
		return;
	}

	OPEN_UI(WCT_STATUEWORSHIP);
	StatueWorshipUiLayer* targetLayer = getUiNodeByTag<StatueWorshipUiLayer>(WCT_STATUEWORSHIP);
	if (targetLayer){
		targetLayer->updateInfo();
	}
}

void ExchangeMgr::onSelectForBaiBaoYuanBao( unsigned int idx )
{	
	if(_npcID == NULL){
		return;
	}

	//gx add 2013.11.12 摆摊，交易，双修状态锁死
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if (!ploc){
		return;
	}

	if (ploc->isRoleInStaticState()){
		return;
	}

	_indexID = idx;

	//雕像膜拜
	if (isMoBaiNpc(_npcID))
	{
		LocalPlayer* lp = RoleManager::getInstance()->getLocalPlayer();
		if (!lp){
			return;
		}

		int nOpenLevel = GetFunOpenLevel(EFOL_HeroWorship);
		if (lp->getLevel() < nOpenLevel)
		{
			ToolTip::getInstance()->push(GET_STR(2183));
			return;
		}

		//首先判断该玩家今日是否已经元宝膜拜过
		if (lp->getRoleDayClearInfoTwo(ERDCT_STATUE_MORSHIP_YB) >= 1)
		{
			ToolTip::getInstance()->push(GET_STR(2179));
			return;
		}
		else if (PackageManager::getInstance()->getYuanBao() < 100)
		{
			// 判断是否有英雄雕像
			if (PackageManager::getInstance()->getItem(EICT_Bag, (unsigned int)DIAOXIANG_ITEM) == NULL)
			{
				RechargeNewUiMgr::GetInstance()->openRechargeNewUi();	
				RechargeNewUiLayer *layer = GET_UI(RechargeNewUi,WCT_RECHARGENEWUI)->getLayer();
				if (!layer){
					return;
				}

				CLOSE_UI(WCT_STATUEWORSHIP);
				return;
			}
		}

// 		MiniMapUi* miniMapUi = World::getInstance()->getMiniMapUi();
// 		if(miniMapUi)
// 		{
// 			MiniMapUiLoaderLayer* loaderLayer = miniMapUi->getMinimapUILoaderLayer();
// 			if(loaderLayer)
// 			{
// 				loaderLayer->closeBaoDianEffect(_npcID);
// 			}
// 		}
		
		NET_SIC_npc_talk cmd;
		cmd.dwNPCId = _npcID;
		cmd.param = 1;
		TCP_CLIENT->send_net_cmd(&cmd , NP_NORMAL , false);
	}
}

unsigned int ExchangeMgr::onProduce( s_net_cmd* cmd )
{
	NET_SIS_produce* msg = (NET_SIS_produce*)cmd;
	if(msg->dw_error_code == 0)
	{
		World::getInstance()->getNPCDialog()->show(false);
		ToolTip::getInstance()->push(GET_STR(7227));
		GET_UI(NPCduihuanUi,WCT_NPCduihuaUi)->updateJifen();
	}
	else
	{
		if (-1 == _indexID || -1 ==_npcID)
			return 0;
		if (E_Compose_Bag_Full == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(161));
		}
		else if (E_Compose_NPC_Not_Exist == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(9299));
		}
		else if (E_Compose_NPC_Distance == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(9300));
		}
		else if (E_Compose_NPCCanNotCompose == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(9301));
		}
		else if (E_Compose_Formula_Not_Exist == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(9302));
		}
		else if (E_Compose_Consolidate_Lose == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(9303));
		}
		else if (E_Compose_Stuff_Not_Enough == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(_exMap[_npcID][_indexID].info);
		}
	}
	return 0;
}

void ExchangeMgr::confirmTrans()
{
	if (-1 == _indexID)
		return;
	NET_SIC_produce cmd;
	cmd.dwNPCID = _npcSID;
	cmd.dwFormulaID = _exMap[_npcID][_indexID].id;
	TCP_CLIENT->send_net_cmd(&cmd , NP_NORMAL , false);
}

void ExchangeMgr::sendProduceMsg( unsigned int send_id, INT64 n64NPCID, int index )
{
	NET_SIC_produce cmd;
	cmd.dwNPCID = n64NPCID;
	cmd.dwFormulaID = send_id;
	_indexID = index;
	TCP_CLIENT->send_net_cmd(&cmd , NP_NORMAL , false);
}

void ExchangeMgr::setIndex( int index )
{
	_indexID = index-1;
}

unsigned int ExchangeMgr::onthird_recharge_reward( s_net_cmd* cmd )
{
	NET_SIS_third_recharge_reward* msg = (NET_SIS_third_recharge_reward*)cmd;
	if(msg->dw_error_code == 0)
	{

	}
	else
	{
		if (E_Third_Not_Recharge == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(9441));
		}
		else if (E_Third_Not_In_Time == msg->dw_error_code)
		{
			ToolTip::getInstance()->push(GET_STR(9440));
		}
	}
	return 0;
}

void ExchangeMgr::loadConvertExchange()
{
	_convertExMap.clear();
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if (player == NULL)
		return;

	//unsigned char index = 0;
	f_data_set data_set;
	std::list<std::string> fields;
	bool ret =data_set.load("Config/db/convertStoreData.xml","id",&fields);
	CC_ASSERT(ret);
	std::for_each(	fields.begin(),
					fields.end(),
					[&](std::string const& one)
					{
						unsigned int npc_id = data_set.get_int("npcId",one.c_str());
						
						sConvertExchange skillData;
						skillData.id = data_set.get_int("id" ,one.c_str());
						skillData.vocationLimit = data_set.get_int("vocation_limit" ,one.c_str());
						skillData.info = data_set.get_string("testHint" ,one.c_str());
						skillData.showLevel = data_set.get_int("showLv" ,one.c_str());
						skillData.needItem[0] = data_set.get_int("needItem" ,one.c_str());
						skillData.needNum[0] = data_set.get_int("needNumber" ,one.c_str());

						skillData.needItem[1] = data_set.get_int("needItem2" ,one.c_str());
						skillData.needNum[1] = data_set.get_int("needNumber2" ,one.c_str());
						skillData.needItem[2] = data_set.get_int("needItem3" ,one.c_str());
						skillData.needNum[2] = data_set.get_int("needNumber3" ,one.c_str());
						skillData.needItem[3] = data_set.get_int("needItem4" ,one.c_str());
						skillData.needNum[3] = data_set.get_int("needNumber4" ,one.c_str());
						skillData.needItem[4] = data_set.get_int("needItem5" ,one.c_str());
						skillData.needNum[4] = data_set.get_int("needNumber5" ,one.c_str());
						skillData.id = data_set.get_int("id" ,one.c_str());
						skillData.id = data_set.get_int("id" ,one.c_str());
						skillData.id = data_set.get_int("id" ,one.c_str());

						addExchangeMAP(npc_id,skillData);
					});

	/*
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM convertStoreData");
	
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	while(table->retrieve_row())
	{
		unsigned int npcId = 0;
		sConvertExchange skillData;
		unsigned int idx = table->get_index("id");
		skillData.id = table->get_integer32(idx);
		idx = table->get_index("vocation_limit");
		skillData.vocationLimit = table->get_integer32(idx);
		idx = table->get_index("testHint");
		skillData.info = table->get_text(idx);
		idx = table->get_index("showLv");
		skillData.showLevel = table->get_integer32(idx);
		idx = table->get_index("needItem");
		skillData.needItem[0] = table->get_integer32(idx);
		idx = table->get_index("needNumber");
		skillData.needNum[0] = table->get_integer32(idx);
		idx = table->get_index("needItem2");
		skillData.needItem[1] = table->get_integer32(idx);
		idx = table->get_index("needNumber2");
		skillData.needNum[1] = table->get_integer32(idx);
		idx = table->get_index("needItem3");
		skillData.needItem[2] = table->get_integer32(idx);
		idx = table->get_index("needNumber3");
		skillData.needNum[2] = table->get_integer32(idx);
		idx = table->get_index("needItem4");
		skillData.needItem[3] = table->get_integer32(idx);
		idx = table->get_index("needNumber4");
		skillData.needNum[3] = table->get_integer32(idx);
		idx = table->get_index("needItem5");
		skillData.needItem[4] = table->get_integer32(idx);
		idx = table->get_index("needNumber5");
		skillData.needNum[4] = table->get_integer32(idx);
		idx = table->get_index("npcId");
		npcId = table->get_integer32(idx);

// 		for (int i = 0;i < CONVERT_EXC_NUM;++i)
// 		{
// 			char str[256];
// 			sprintf(str,"needItem%d",i);
// 			idx = table->get_index(str);
// 			skillData.needItem[i] = table->get_integer32(idx);
// 			sprintf(str,"needNum%d",i);
// 			idx = table->get_index(str);
// 			skillData.needNum[i] = table->get_integer32(idx);
// 		}
		addExchangeMAP(npcId,skillData);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
	*/
}

void ExchangeMgr::addExchangeMAP( unsigned int npcId,sConvertExchange& data )
{
	if (_convertExMap.empty())
	{
		ExchangeMAP exMap;
		//exMap.clear();
		//data.index = 0;
		exMap.insert(std::make_pair(data.index,data));
		_convertExMap.insert(std::make_pair(npcId,exMap));
		return;
	}
	nExchangeMAP::iterator iter = _convertExMap.find(npcId);
	if (iter == _convertExMap.end())
	{
		ExchangeMAP exMap;
		//exMap.clear();
		//data.index = 0;
		exMap.insert(std::make_pair(data.index,data));
		_convertExMap.insert(std::make_pair(npcId,exMap));
		return;
	}
	else
	{
		ExchangeMAP& exMap = iter->second;
		unsigned char size = exMap.size();
		data.index = size;
		exMap.insert(std::make_pair(data.index,data));
	}
}

bool ExchangeMgr::haveConvertExchange(unsigned int npcId, unsigned char idx)
{
	if (_convertExMap.empty())
	{
		return false;
	}
	auto nExIter = _convertExMap.find(npcId);
	if (nExIter == _convertExMap.end())
	{
		return false;
	}
	ExchangeMAP const& exMap = nExIter->second;
	auto exIter = exMap.find(idx);
	if (exIter == exMap.end())
	{
		ToolTip::getInstance()->push(GET_STR(9431));//没有该兑换选项
		return true;
	}
	sConvertExchange const& data = exIter->second;
	if (canConvertExchange(data))
	{
		NET_SIC_Convert_Exchange cmd;
		cmd.exchangeId = data.id;
		cmd.npcId = npcId;
		TCP_CLIENT->send_net_cmd(&cmd,NP_INSIGNIFICANT,false);
	}
	return true;
}

bool ExchangeMgr::canConvertExchange( sConvertExchange const& data )const
{
	for (int i = 0;i < CONVERT_EXC_NUM;++i)
	{
		if (0 == data.needItem[i] || (unsigned int)-1 == data.needItem[i])
			continue;

		if (data.needNum[i] <= 0)
			continue;

		if ((size_t)(PackageManager::getInstance()->getItemNumber(EICT_Bag,data.needItem[i])) < data.needNum[i])
		{
			ToolTip::getInstance()->push(GET_STR(9433));//书页数量不足
			return false;
		}
	}
	int bagCount = PackageManager::getInstance()->getBlankCount();//获取玩家背包空格数
	if (bagCount <= 0)
	{
		ToolTip::getInstance()->push(GET_STR(161));
		return false;
	}
	return true;
}


void ExchangeMgr::canSendProduce( unsigned int npcId, int idx )
{
	std::map<unsigned int , std::vector<sExchange>>::iterator iter = _exMap.find(_npcID);
	if (iter == _exMap.end())
		return;

	std::vector<sExchange> sExMap = iter->second;
	if (sExMap.empty())
		return;

	int num = 0;
	for (std::vector<sExchange>::iterator iter = sExMap.begin();iter != sExMap.end();++iter,++num)
	{
		if (num == idx)
		{
			NET_SIC_produce cmd;
			cmd.dwNPCID = npcId;
			cmd.dwFormulaID = iter->id;
			TCP_CLIENT->send_net_cmd(&cmd , NP_NORMAL , false);
		}
	}
}

bool ExchangeMgr::isMoBaiNpc(int npcId){
	//雕像膜拜
	if (2910192 == npcId || 
		2910193 == npcId || 
		2910194 == npcId || 
		2910195 == npcId || 
		2910196 == npcId || 
		2910197 == npcId)
	{
		return true;
	}

	return false;
}


unsigned int ExchangeMgr::onServerConvertExchangeResult( s_net_cmd *cmd )
{
	NET_SIS_Convert_Exchange_Result* msg = (NET_SIS_Convert_Exchange_Result*)cmd;
	if (msg)
	{
		switch (msg->dwError)
		{
		case E_Success:
			ToolTip::getInstance()->push(GET_STR(9436));
			break;
		case E_Convert_Exchange_Not_Find:
			ToolTip::getInstance()->push(GET_STR(9431));
			break;
		case E_Convert_Exchange_Profession:
			ToolTip::getInstance()->push(GET_STR(9432));
			break;
		case E_Convert_Exchange_Item_Not_Enough:
			ToolTip::getInstance()->push(GET_STR(9433));
			break;
		case E_Convert_Exchange_Item_Not_Mate:
			ToolTip::getInstance()->push(GET_STR(9434));
			break;
		case E_Convert_Exchange_Fail:
			ToolTip::getInstance()->push(GET_STR(9435));
			break;
		case E_Convert_Exchange_NPC_Not_Exist:
			ToolTip::getInstance()->push(GET_STR(9299));
			break;
		case E_Convert_Exchange_NPC_Distance:
			ToolTip::getInstance()->push(GET_STR(9300));
			break;
		case E_Convert_Exchange_NPC_Not_Function:
			ToolTip::getInstance()->push(GET_STR(9529));
			break;
		case E_Convert_Exchange_Bag_Full:
			ToolTip::getInstance()->push(GET_STR(161));
			break;
		}
	}
	return 0;
}
