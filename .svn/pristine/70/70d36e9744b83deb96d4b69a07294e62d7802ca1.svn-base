#include "CCLabelChange.h"
CCLabelChange::CCLabelChange():
m_nBeginNum(0),
m_nEndNum(0),
m_nIsTime(false)
{

}

CCLabelChange* CCLabelChange::create(float duration , int beginNum , int endNum)
{
	CCLabelChange *pRet = new CCLabelChange();
	pRet->initWithDuration(duration,beginNum,endNum);
	pRet->autorelease();

	return pRet;
}

CCLabelChange* CCLabelChange::create(float duration , int beginNum , int endNum , bool isTime)
{
	CCLabelChange *pRet = CCLabelChange::create(duration,beginNum,endNum);
	pRet->isTimeText(isTime);
	return pRet;
}

bool CCLabelChange::initWithDuration(float duration , int beginNum , int endNum)
{
	if (CCActionInterval::initWithDuration(duration))
	{
		m_nBeginNum = beginNum;
		m_nEndNum = endNum;
		return true;
	}

	return false;
}
void CCLabelChange::isTimeText(bool isTime)
{
	m_nIsTime = isTime;
}

CCObject* CCLabelChange::copyWithZone(CCZone* pZone)
{
	CCZone* pNewZone = NULL;
	CCLabelChange* pCopy = NULL;

	if (pZone && pZone->m_pCopyObject)
	{
		pCopy = (CCLabelChange*)(pZone->m_pCopyObject);
	}
	else
	{
		pCopy = new CCLabelChange();
		pZone = pNewZone = new CCZone(pCopy);
	}
	CCActionInterval::copyWithZone(pZone);
	pCopy->initWithDuration(m_fDuration,m_nBeginNum,m_nEndNum);

	CC_SAFE_DELETE(pNewZone);
	return pCopy;
}

void CCLabelChange::startWithTarget(CCNode *pTarget)
{
	CCActionInterval::startWithTarget(pTarget);

	CCLabelProtocol *pLabel = dynamic_cast<CCLabelProtocol*>(m_pTarget);
	if (pLabel)
	{
		CCString *numStr = CCString::createWithFormat("%i",m_nBeginNum);
		pLabel->setString(numStr->getCString());
	}
}

CCActionInterval* CCLabelChange::reverse()
{
	return CCLabelChange::create(m_fDuration,m_nBeginNum,m_nEndNum);
}

void CCLabelChange::update(float dt)
{
	CCLabelProtocol *pLabel = dynamic_cast<CCLabelProtocol*>(m_pTarget);
	if (pLabel)
	{
		int num = m_nBeginNum + (m_nEndNum - m_nBeginNum) * dt;
		CCString *numStr = NULL;
		if (m_nIsTime)
		{
			numStr = CCString::createWithFormat("%02d:%02d", num/60, num%60);
		}
		else
		{
			numStr = CCString::createWithFormat("%i",num);
		}
		pLabel->setString(numStr->getCString());
	}
}