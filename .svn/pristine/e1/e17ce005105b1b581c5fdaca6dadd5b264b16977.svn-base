#include "TradingSellRightItemList.h"
#include "CommonClient.h"
#include "ListControl.h"
#include "CfgReader.h"
#include "UiTools.h"
#include "UiManager.h"
#include "TradingEquipItemTipUI.h"

TradingSellRightItemList::TradingSellRightItemList()
	:m_pItemCCNode(NULL)
	,m_pItemNode(NULL)
	,m_pItem(NULL)
{

}

TradingSellRightItemList::~TradingSellRightItemList()
{

}

cocos2d::extension::SEL_CCControlHandler TradingSellRightItemList::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

bool TradingSellRightItemList::onAssignCCBMemberVariable( CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode )
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCNode*,m_pItemCCNode)
	return false;
}

void TradingSellRightItemList::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	
}

void TradingSellRightItemList::setClickEnable(bool value)
{
	if(NULL != m_pItemNode)
		m_pItemNode->setClickable(value);
}

void TradingSellRightItemList::initWithItem(f_item *item)
{
	refreshData(item);
}

void TradingSellRightItemList::hideBlank(bool value)
{
	if(NULL != m_pItemNode)
		m_pItemNode->hideBlank(value);
}

void TradingSellRightItemList::hideCompose(bool value)
{
	if(NULL != m_pItemNode)
		m_pItemNode->hideCompose(value);
}

void TradingSellRightItemList::refreshData( f_item *item)
{
	if(NULL == item) 
		return ;

	m_pItem = item;

	if(NULL == m_pItemNode)
	{
		m_pItemNode = ItemNode::create();
		m_pItemCCNode->addChild(m_pItemNode);
	}

	CC_ASSERT(NULL != m_pItemNode);
	CC_ASSERT(NULL != m_pItemCCNode);
	m_pItemNode->hideItemOpBtn();
	m_pItemNode->setClickable(true);
	m_pItemNode->initWithItem(item);
}

TradingSellRightItemList* TradingSellRightItemList::createItem( const char* szFile,CCObject*pOwner,UiInterface* holder )
{
	CCNodeLoaderLibrary* lib  = CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
	CCBReader* reader = new CCBReader(lib);
	reader->autorelease();
	std::string strFullPath  = CFGReader::instance()->get_ui_ccbi_filepath(szFile);
	CCNode* node = reader->readNodeGraphFromFile(strFullPath.c_str(),pOwner);
	TradingSellRightItemList* item = dynamic_cast<TradingSellRightItemList*>(node);

	if (holder)
		holder->mergeSheet(reader->getLoadedSpriteSheet());

	return item;
}

