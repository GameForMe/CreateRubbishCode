/**
 *	@file		SDCheckDefenderUI.h
 *	@author		shenyaoyan
 *	@date		2016/07/27
 *	@version	
 *	@brief		沙巴克神殿关卡守卫者显示界面
 */

#ifndef _SDCHECKDEFENDERUI_H_
#define _SDCHECKDEFENDERUI_H_

#include "UiInterface.h"
#include "NormalLayer.h"

#define DEFENDER_MAX_MUN 5

class SDCheckDefenderUI
	: public UiInterface
{
public:
	SDCheckDefenderUI();
	~SDCheckDefenderUI();
	virtual CCNode* openUi();
};

struct shendian_checkpoint;

class SDCheckDefenderUILayer
	: public NormalLayer
{
	enum 
	{
		ENT_Defender1 = 1,    //第一个守卫者
		ENT_Defender2 = 2,    //第二个守卫者
		ENT_Defender3 = 3,    //第三个守卫者
		ENT_Defender4 = 4,    //第四个守卫者
		ENT_Defender5 = 5,    //第五个守卫者
	};

	enum 
	{
		Defender_ClassType = 1,  //守卫者身份类型
		Defender_Name	   = 2,  //守卫者名称
		Defender_Level	   = 4,  //守卫者等级
		Defender_AttrNode  = 5,  //守卫者战力Node
		Defender_Attr	   = 7,  //守卫者战力数值
		Defender_EffectNode= 8,  //守卫者战斗力特效Node
		Attr_Effect        = 9,  //战斗力特效
	};
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(SDCheckDefenderUILayer,create);

	SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	SDCheckDefenderUILayer();
	~SDCheckDefenderUILayer();

	virtual void onEnter();
	virtual void onExit();

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void updateData(int checkNum);
	void setTypeSprite(int index, int classType);
	void setName(int index,const std::string& nameStr);
	void setLevel(int index, int level);
	void setAttr(int index, int attr, bool isPlayer);

	void onGetCheckPointNum(shendian_checkpoint* trans);

private:
	CCNode* m_frame;
	CCLabelTTF* m_checkNum;
	LabelFT* m_checkLabel;
	CCSprite* m_classType[DEFENDER_MAX_MUN];
	LabelFT* m_nameLabel[DEFENDER_MAX_MUN];
	LabelFT* m_levelLabel[DEFENDER_MAX_MUN];
	LabelFT* m_attLabel[DEFENDER_MAX_MUN];
	CCNode* m_attEffect[DEFENDER_MAX_MUN];
	CCNode* m_attNode[DEFENDER_MAX_MUN];
	bool m_isNeedClose;
};

#endif