#ifndef SKILLANIMMANAGER_H
#define SKILLANIMMANAGER_H

#include "BaseDefine.h"
#include <string>
#include "cocos2d.h"

// enum eSkillEffectPos
// {
// 	SEP_SELF,
// 	ST_TARGET,
// 	ST_SELFLOOP,
// 	ST_TARGETLOOP,
// 	ST_SPECIAL
// };

// struct SkillInfo
// {
// 	int skillID;
// 	std::string animFile;
// 	eDirType dirType;
// 	eSkillEffectPos effectPos;
// 	std::string musicEffectName;
// 	std::string begin_effect;
// 	SkillInfo()
// 		: animFile("")
// 		, musicEffectName("")
// 	{
// 
// 	}
// };

struct st_buf_proto
{
	int			show_tack;
	int			skill_id;
	std::string pic_name;
	std::string buff_take_effect_sfx;
};

class SkillEffect;
struct st_skill_proto;

class SkillAnimManager
{
public:
	SkillAnimManager();

	static SkillAnimManager* getInstance();
	//预加载技能特效
	void preLoadAnims(unsigned int skillId);
	void useAnims(unsigned int skillId, unsigned int srcRoleId, unsigned int targetRoleId, const cocos2d::CCPoint& pt,bool continueRun = false );
	void useBuffer(unsigned int bufferId, unsigned int srcRoleId, unsigned int targetRoleId);
	void stopAnims(unsigned int roleId, unsigned int skillId);
	void stopBuffer(unsigned int roleId, unsigned int bufferId);
	//用于魔法盾
	void continueBufferAnims(unsigned int bufferId, unsigned int srcRoleId, unsigned int targetRoleId);
	void update(float dt);
	void removeAnims(SkillEffect *skillEffect);
	void clearAll();
	//此函数仅限特殊特效使用
	bool isSkillStoped(unsigned int skillId, unsigned int roleId);
	unsigned int getSkillIdFromSkillTypeId(unsigned int skillTypeID);
	//删除其他玩家的技能特效数据
	void removeAllRemoteRoleSkill();
	//停止本地玩家的所有技能特效，不显示
	void stopLocalPlayerAllSkillAnims();

	////用于屏蔽/显示某些技能特效
	void setSkillEffectVisible(unsigned int roleId, unsigned int skillId,bool isShow);

	//获取buff的静态数据
	st_buf_proto const* get_buff_proto(unsigned int buff_id);

	st_skill_proto const* getSkillInfoFromDB(unsigned int skillId);

	typedef std::map<unsigned int,int> buff_id_showtack;

	buff_id_showtack const& get_showtag_map()const{return  m_buff_id_to_showtack;}

protected:

	void addSkillEffectToSkillMap(unsigned int roleId, unsigned int skillId, SkillEffect *skillEffect);
	void removeSkillEffectFromSkillMap(unsigned int roleId, unsigned int skillId);
	void removeRoleSkillEffect(unsigned int roleId);
	SkillEffect* findSkillAnim(unsigned int roleId, unsigned int skillId);
	int converBufferIdToSkillId(int bufferId);
	void ClearOldSkillEffect(unsigned int roleid,unsigned int SkillTypeId);
protected:
// 	typedef std::map<unsigned int, SkillInfo> SkillInfoMap;
// 	SkillInfoMap _skillInfoMap;
	
	typedef std::map<unsigned int, SkillEffect*> SkillEffectMap; // <skillId, skilleffect>
	typedef std::map<unsigned int, SkillEffectMap> SkillMap; //<roleid, ...>
	SkillMap _skillMap;
	std::vector<SkillEffect*> _fadeOutSkillList;

	typedef std::map<unsigned int,st_buf_proto> buff_proto_map;
	buff_proto_map				_buff_proto;

	bool init_buff_proto();
	buff_id_showtack	m_buff_id_to_showtack;
};

#endif //SKILLANIMMANAGER_H