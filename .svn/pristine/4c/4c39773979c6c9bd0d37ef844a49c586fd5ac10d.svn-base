#include "RegisterUi.h"
#include "CfgReader.h"
#include "CrossSceneUI.h"
#include "Login.h"
#include "UiTools.h"

using namespace cocos2d::extension;

bool RegisterUi::init()
{
	_attachIme = NULL;
	_user = NULL;
	_password = NULL;

	if(!CCLayer::init())
		return false;

	CCNodeLoaderLibrary * ccNodeLoaderLibrary = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();
	ccNodeLoaderLibrary->registerCCNodeLoader("RegisterUiLoaderLayer", RegisterUiLoader::loader());
	cocos2d::extension::CCBReader * ccbReader = new cocos2d::extension::CCBReader(ccNodeLoaderLibrary);
	CCNode * node = ccbReader->readNodeGraphFromFile((CFGReader::instance()->get_profile_string("Art", "UI", "") + "registerui.ccbi").c_str());
	ccbReader->release();
	if(node != NULL) {
		addChild(node);
		node->setTag(0);
		CCNode *userNode = node->getChildByTag(1);
		CCNode *passwordNode = node->getChildByTag(2);
		CCNode *confirmpwNode = node->getChildByTag(3);

		ccColor3B textColor;
		textColor.r = 0;
		textColor.g = 0;
		textColor.b = 0;

		if(userNode != NULL)
		{
			_user = createInputWithContent(userNode, 25);
			addChild(_user);
		}
		if(passwordNode != NULL)
		{

			_password = createInputWithContent(passwordNode, 25);
			addChild(_password);
		}
		if (confirmpwNode != NULL)
		{

			_cfmpassword = createInputWithContent(confirmpwNode, 25);
			addChild(_cfmpassword);
		}
		return true;
	}
	return false;
}

void RegisterUi::backBtnPressed()
{
	//signalBackPressed.emit();
}

bool RegisterUi::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	CCPoint touchPoint = pTouch->getLocationInView();
	touchPoint = CCDirector:: sharedDirector()->convertToGL(touchPoint);

	//CCRect box = _user->boundingBox();
	if(_user->boundingBox().containsPoint(touchPoint))
	{
		if(_attachIme != _user)
		{
			if(_attachIme != NULL)
			{
				_attachIme->detachWithIME();
			}
			_attachIme = _user;
			_attachIme->attachWithIME();
		}
		return true;
	}
	else if(_password->boundingBox().containsPoint(touchPoint))
	{
		if(_attachIme != _password)
		{
			if(_attachIme != NULL)
			{
				_attachIme->detachWithIME();
			}
			_attachIme = _password;
			_attachIme->attachWithIME();
		}
		return true;
	}
	else if (_cfmpassword->boundingBox().containsPoint(touchPoint))
	{

		if(_attachIme != _cfmpassword)
		{
			if(_attachIme != NULL)
			{
				_attachIme->detachWithIME();
			}
			_attachIme = _cfmpassword;
			_attachIme->attachWithIME();
		}
		return true;
	}
	else
	{
		if(_attachIme != NULL)
		{
			_attachIme->detachWithIME();
			_attachIme = NULL;
		}
	}

	return false;
}

void RegisterUi::onEnter()
{
	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 0,false);
	CCLayer::onEnter();
	schedule(SEL_SCHEDULE(&RegisterUi::updateBtn), 0.2);
}

void RegisterUi::onExit()
{
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCLayer::onExit();
	unschedule(SEL_SCHEDULE(&RegisterUi::updateBtn));
}

const char * RegisterUi::getUserName()
{
	CC_ASSERT(_user != NULL);
	return _user->getString();
} 

const char * RegisterUi::getPassword()
{
	CC_ASSERT(_password != NULL);
	return _password->getString();
}

const char * RegisterUi::getconfirmPassword()
{
	CC_ASSERT(_cfmpassword != NULL);
	return _cfmpassword->getString();
}

void RegisterUi::updateBtn( float dt )
{
	CCControlButton *btn = static_cast<CCControlButton*>(getChildByTag(0)->getChildByTag(4));
	if(_password->getCharCount() == 0 ||
		   _user->getCharCount() == 0 ||
	_cfmpassword->getCharCount() == 0 )  
	{
		btn->setEnabled(false);
	}
	else
	{
		btn->setEnabled(true);
	}
}

void RegisterUi::setUserName( const std::string &userName )
{
	_user->setString(userName.c_str());
}

void RegisterUi::setPassword( const std::string &password )
{
	_password->setString(password.c_str());
}

void RegisterUi::setConfirmPassword( const std::string &confirmpw)
{
	_cfmpassword->setString(confirmpw.c_str());
}

//////////////////////////////////////////////////////////////////////////

cocos2d::SEL_MenuHandler RegisterUiLoaderLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL; 
}

cocos2d::extension::SEL_CCControlHandler RegisterUiLoaderLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "registerPressed", RegisterUiLoaderLayer::registerPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "backPressed", RegisterUiLoaderLayer::backPressed);
	return NULL;
}

bool RegisterUiLoaderLayer::onAssignCCBMemberVariable( CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode )
{
	return false;
}

void RegisterUiLoaderLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	return;
}

void RegisterUiLoaderLayer::registerPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//TODO (1)一键注册,发送消息 (2)判断两次密码是否相同,是否需要信息提示;
}

void RegisterUiLoaderLayer::backPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//signalBackPressed.emit();
}
