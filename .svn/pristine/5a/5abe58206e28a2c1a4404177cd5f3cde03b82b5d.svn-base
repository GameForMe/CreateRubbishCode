#ifndef USER_PRO_UI_H
#define USER_PRO_UI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "ListItem.h"
#include "VerticalList.h"

using namespace cocos2d;
using namespace cocos2d::extension;
#define OFFFLINEEXPUI_NAME_POSX 0

class NoticeBoardUiLayer;

class UserProList : public ListItem
{
	enum eNonticTextTag  { NTT_Text = 0};
public:
	UserProList();
	~UserProList();
	virtual CCSize getContentSize();
	void setData(const std::string &text);

private:
	CCLabelTTF *getLabel(eNonticTextTag tag);
private:
	CCSize _contentSize;
};

class UserProUiLayer;
class UserProUi
{
	friend class UserProUiLayer;
public:
	UserProUi();
	~UserProUi();
	static UserProUi *getInstance();
	void open();
	void close();
	//void destroy();
	UserProUiLayer *getUiLayer();
	//void LoadNoticeListOnce();

	std::string const& get_notice_text(){ return m_vecProString[m_iCurrentPageIndex];}

	//VerticalList<UserProList> *GetNoticeList(){return m_verticalList;}
	//CCScrollView *GetNoticeScroll(){return _scrollView;}
	std::set<std::string> _plist;
	string getCurrentProString();
	string getPageNumString();
	float getLabelViewWidth(){return m_fLabelViewWidth;}
	void goChangeCurrentPage(bool pisNext);

	void refreshUIByType(bool pIsFAQ);
private:
	void initProStrFromXML();
	
	//CCScrollView *				_scrollView;
	//VerticalList<UserProList> *	m_verticalList;

	//bool IsListLoad;
	bool m_isFAQShow;
	int m_iPageCount;
	int m_iCurrentPageIndex;
	float m_fLabelViewWidth;
	std::vector<std::string> m_vecProString;
	std::vector<std::string> m_vecFAQString;
};

class UserProUiLayer
	: public cocos2d::CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eNodeTag
	{
		NT_FAQBtnTag = 2,
		NT_PROBtnTag,
		NT_PageLabelTag,
		NT_ArrowLeftBtnTag,
		NT_ArrowRightBtnTag,
		NT_RefuseProBtnTag,
		NT_AgreeProBtnTag,
		NT_FirstOpenNodeTag,
		
	};
	friend class UserProUi;
public:
	UserProUiLayer();
	~UserProUiLayer();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(UserProUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	CCNode *GetContainerNode(){return _container;}
	
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onExit();

	void onProSwitchBtnPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onTitleBtnPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCloseBtnPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onArrowBtnPressed(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void refreshPageText();
	void initBtnShow(bool isFirstShow);
private:

	CCScrollView *				_scrollView;
	VerticalList<UserProList> *	m_verticalList;

	CCLayer* _frame;
	CCNode *_container;
	LabelFT* _pageFt;
	//void updateData();
	std::string getActBroad();//离线经验公告板上的提示内容
};

#endif