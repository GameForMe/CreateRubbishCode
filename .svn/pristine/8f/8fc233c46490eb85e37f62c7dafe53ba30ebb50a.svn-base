#ifndef REWARDGOTOITEM
#define REWARDGOTOITEM

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
#include "DropDragDelegate.h"
using namespace cocos2d;
using namespace cocos2d::extension;
#include "RewardQuestMgr.h"

class RewardUiGotoItemFrame;
struct ChangeMonsterName;
class RewardGotoItem 
{
	friend class RewardUiGotoItemFrame;

public:
	RewardGotoItem();
	~RewardGotoItem();
	void open();
	void releaseAllFrame();
	RewardUiGotoItemFrame *getUIGotoFrame(){return _uiGoteFrame;}
	void setGoPosition(const CCPoint &pos);

	void addSelected();
	void removeSelected();

	void updateGotoData(int questID,int number);
	void setGotoShow(int questID,int number);
private:
	RewardUiGotoItemFrame *_uiGoteFrame;
	std::set<std::string> _usedPlistFile;
	CCSprite *describeSprite;
	CCSpriteFrame* Frame;
	bool _isOpenUI;
};

class RewardUiGotoItemFrame 
	: public CCSprite
	, public CCTouchDelegate
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class RewardGotoItem;
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(RewardUiGotoItemFrame, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void onGotoBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onFinishBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	CCSprite *getGotoBg(){return gotoBg;};

	void runToNPC(int roleID,int type);

	virtual void onExit(); 

protected:
	RewardGotoItem *_item;
	CCPoint _stPt;
	CCSprite *gotoBg;
	RewardQuestProto *_rewardQuest;//点击时数据处理
	CCNode* _rewardFrameBG;//点击判断区域
};

class RewardQuestGotoItemLoader : public CCSpriteLoader
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(RewardQuestGotoItemLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(RewardUiGotoItemFrame);
};

#endif //REWARDGOTOITEM