#ifndef MOUNTUI_H
#define MOUNTUI_H


#include "UiManager.h"
#include "ProgressBar.h"
#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
#include "AnimationCache.h"
#include "GameActionNode.h"
#include "f_event_system.h"

struct ResetMountUI;
using namespace cocos2d;
using namespace cocos2d::extension;
class TouchSprite;
class CheckButton;
class UiTools;

//#define CFG(int,"max_ride_lv",100) 100
//#define CFG(int,"max_ride_step",100) 8

class MountUi : public UiInterface
{
public:
	MountUi();
	virtual CCNode *openUi();
	void updateData();
	void onRideLVUp();
	void onTog(int times, int exp);
	void onMountResult(s_net_cmd *cmd);
	int GetSelectRide(); //获取当前选择想骑的坐骑
	bool getAutoRide();
	void setAutoRide(bool autoRide);
	void setMountConfig();
	void setMaPaiAction();
	bool _autoRide;
};

class MountUiFrame
	: public CCSprite
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
	, public CCBMemberVariableAssigner
	, public CCTouchDelegate
{
	friend class MountUi;
public:

	enum titleID
	{
		TITLE_CLYS = 48,  //赤狼勇士
		TITLE_ELCS = 49,  //饿狼传说
		TITLE_FZLX = 50,  //风挚雷行
		TITLE_LTWJ = 51,  //雷霆万钧
		TITLE_ZZZW = 52,  //战争之王
		TITLE_HHZL = 53,  //洪荒之力
		TITLE_WFXL = 75,  //威风祥麟
		TITLE_FTZN = 76	  //焚天之怒
	};

	enum eNodeTag
	{
		NT_Photo = 0,
		NT_GradeIcon = 2,
		NT_GradeLab = 3,
		NT_FightNumPosLabel = 4,
		NT_SpeedLab = 5,
		NT_ExpBar = 6,
		NT_GoldLab = 7,
		NT_GiftCertificate = 8,
		NT_Yuanbao = 9,
		NT_EquipIcon = 10,
		NT_EquipIconItemNode = 20 + NT_EquipIcon,
		NT_AttHp = 11,
		NT_AttMp = 12,
		NT_AttMz = 13,
		NT_AttSb = 14,
		NT_AttBj = 15,
		NT_AttMb = 16,

		NT_NEXT_AttHp = 21,
		NT_NEXT_AttMp = 22,
		NT_NEXT_AttMz = 23,
		NT_NEXT_AttSb = 24,
		NT_NEXT_AttBj = 25,
		NT_NEXT_AttMb = 26,

		NT_MAPAI_AttHp = 31,
		NT_MAPAI_AttMp = 32,
		NT_MAPAI_AttMz = 33,
		NT_MAPAI_AttSb = 34,
		NT_MAPAI_AttBj = 35,
		NT_MAPAI_AttMb = 36,

		NT_AttHpDif = NT_AttHp * 4,
		NT_AttMpDif = NT_AttMp * 4,
		NT_AttMzDif = NT_AttMz * 4,
		NT_AttSbDif = NT_AttSb * 4,
		NT_AttBjDif = NT_AttBj * 4,
		NT_AttMbDif = NT_AttMb * 4,


		NT_RideBtn = 17,
		NT_LevUpEffect = 18,
		NT_TogTimes = 19,
		NT_AutoRide=40,
		NT_AutoRideSp = 53,

		NT_UPSGIN_1 = 61,
		NT_UPSGIN_2 = 62,
		NT_UPSGIN_3 = 63,
		NT_UPSGIN_4 = 64,
		NT_UPSGIN_5 = 65,
		NT_UPSGIN_6 = 66,

		NT_FightNumSP = 80,							//战斗力特效	80
		NT_FightNumSE,								//战斗力字体	81
		NT_BattlePointLab,							//战斗力数值	82
		
		NT_StarBegin = 100,
		NT_StarEnd = 109,
		NT_MpLeftCntFather = 202,
		NT_MpLeftCnt = 20,
		NT_SpeedWord = 19,//移动速度文本tag值
		NT_Today_PeiYang_CiShu  = 19, //今日培养次数tag值
		NT_Introduce_1 = 555,
		NT_Introduce_2 = 556,
		NT_Introduce_3 = 557,
		NT_ChengHao = 558,
		NT_MaPai = 559,
		NT_MaPaiTip = 600,
		NT_MaPaiDesc = 601,

		MP_Hp=303,
		MP_Mp=304,
		MP_Mz=305,
		MP_Sb=306,
		MP_Bj=307,
		MP_Mb=308,

		NT_JinBiPeiYang = 1000,
		NT_CloseBtn = 1002,
	};

	MountUiFrame();
	~MountUiFrame();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MountUiFrame, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode) ;
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onUnloadBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onRideBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGoldRaiseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onQmjbBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onUpgradeBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onYjjcBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onRightBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onLeftBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onChengHaoBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onMaPaiBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void togGold();
	void togLqpy();
	void togQmjb();
	void togYjjc();
	void togGetMaPai();
	void noticeRecharge();

	unsigned int onMountResult(s_net_cmd *cmd);

	void togGoldTip(bool state);
	void togLqpyTip(bool state);
	void togQmjbTip(bool state);
	void togYjjcTip(bool state);

	//该函数会刷新到最新等级的坐骑界面
	void updateData();

	//该函数刷新当前等级的坐骑界面
	void updateDataBydwMountStage(bool changeSpeed = false);
	void onRideLVUp();
	void onTog(int times, int exp);

	GameActionNode* getFightSupeerEffect();					//创建一个战斗力特效

	CCRect GetBtnPos(int nTag);
	void onAutoSetCheckRide(CheckButton *checkBtn, bool check);
	void updateCheckBtn();
	void updateHideSomeControls();
	void updateLeftAndRightBtn();       //检测两边箭头是否需要隐藏

protected:
	
	void setAttrabute(CCNode* node,eNodeTag att, int val, int dif);
	void setMountGrade(int grade);
	void setMountStar(int star);
	void setExp(int cur, int max);
	void setExpStr(std::string str);
	void setRes(INT64 gold, INT64 liquan, INT64 yuanbao);
	void setEquipId(int id);
	void setBattlePoint(int bt);
	void setSpeed(int speed);
	void setPhoto(const std::string &photo);
	void setTogTimes(int times);
	void showTogTimes(bool bShow){mpCntRoot->setVisible(bShow);}
	void setWidgetVisible(bool widgetVisible);  //设置属性增长等控件是否可见
	void setIntroduceLabel(RoleManager::RideData rideData);  //设置坐骑能力显示框
	void setLabelString();        //设置坐骑属性显示Label
	int getState();               //获得当前坐骑等级在第几页
	void setMaPaiAttrabute(eNodeTag att,int val);   //设置马牌属性显示数字
	void setMaPaiLabelTouch(CCTouch * pTouch,LabelFT* maPaiLabel);    //点击马牌属性显示Label提示tips
	void setMaPaiAction(); //设置马牌第一次使用后特效
	void clearMaPaiAction(); //清除马牌特效
	void resetMountUI(ResetMountUI* res);
	void setCurShowRide(); //当前界面显示的坐骑
	void setRideButtonState(); //设置骑乘按钮状态
// 	void setNextRideLv();
// 	unsigned int getNextRideLv() {return _nextRideLv;};

	void runLevelUpAnimation(bool show = true);
private:
	unsigned int get_max_ride_lv(bool is_zhuzai)const;
	int ride_rich_max_lv(int cur_lv)const;
private:
	CCNode*		mpCntRoot;
	CCLabelTTF*	mpLeftCnt;
	CheckButton* _checkBtn;//自动骑乘选择
	CCNode*		_autoNode;//自动骑乘文字
	CCNode*     _maPaiTip;//马牌tips
	CCNode*     _maPaiDesc;//马牌介绍

	CCSpriteFrame* m_TFrame;
	int _dwMountStage;//vvv
	CCSprite* m_BGFrame;//vvv
//	CCSprite* m_Title;//vvv
/*	unsigned int _nextRideLv;*/
	ProgressBar *_expProgress;
	LabelFT* _nextRideLable;
	AnimationCache::AnimateList _animateList;
	bool ShowUIInfo();//vvv
	std::string mountName[12];
	GameActionNode* _fightNumAcNode;					//战斗力特效
	std::set<std::string> _plist;					//保存特效plist名称
	CCLabelBMFont* _fightNumBLabel;					//战斗力艺术字
	CCPoint movieBeginPoint;
	CCPoint movieEndPoint;

	GameActionNode* maPaiActionNode;             //马牌特效
	CCLabelTTF* m_weijihuotishi;   //未激活提示
	LabelFT* m_weijihuoFT;

	CCSprite* upsign_1;
	CCSprite* upsign_2;
	CCSprite* upsign_3; 
	CCSprite* upsign_4;
	CCSprite* upsign_5;
	CCSprite* upsign_6;
	CCNode* m_weijihuoFrame;
};

#endif //MOUNTUI_H