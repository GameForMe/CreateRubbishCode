#include "TeamStateUi.h"
#include "UiResourceMgr.h"
#include "CfgReader.h"
#include "UiLoader.h"
#include "UiManager.h"
#include "UiTools.h"
#include "TeamProto.h"
#include "TCPClient.h"
#include "SQLCommand.h"
#include "DBMgr.h"
#include "WorldPacket.h"
#include "CommonMsgDefine.h"
#include "TeamMgr.h"
#include "FubenDuoRenUI.h"
#include "MessageBoxUi.h"
#include "World.h"
#include "StringMgr.h"
#include "ServerTime.h"
#include "SecondVerifyMgr.h"
TeamStateUi::TeamStateUi()
{

}

TeamStateUi::~TeamStateUi()
{

}

CCNode * TeamStateUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["TeamStateUiLayer"] = UiNodeLoader<TeamStateUiLayer>::loader();
	CCNode *uiNode = readUiFromCCBI("zudui", nodeLoaders, _loadSpriteSheet);
	CC_ASSERT(uiNode != NULL);

	return uiNode;
}

TeamStateUiLayer * TeamStateUi::getUiLayer()
{
	return getUiNodeByTag<TeamStateUiLayer>(WCT_TeamStateUi);
}

void TeamStateUi::updateData()
{
	TeamStateUiLayer *uiLayer = getUiLayer();
	if(uiLayer != NULL)
	{
		uiLayer->updateData();
	}
}

TeamStateUiLayer::TeamStateUiLayer()
{
	initData();

}

TeamStateUiLayer::~TeamStateUiLayer()
{

}

cocos2d::SEL_MenuHandler TeamStateUiLayer::onResolveCCBCCMenuItemSelector( CCObject *pTarget, const char *pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler TeamStateUiLayer::onResolveCCBCCControlSelector( CCObject *pTarget, const char *pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", TeamStateUiLayer::onCloseBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onPreparedOnPressed", TeamStateUiLayer::onPreparedOnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "ontichuPressed", TeamStateUiLayer::ontichuPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "ontichu1Pressed", TeamStateUiLayer::ontichu1Pressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "ontichu2Pressed", TeamStateUiLayer::ontichu2Pressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "ontichu3Pressed", TeamStateUiLayer::ontichu3Pressed);
	return NULL;
}

void TeamStateUiLayer::onNodeLoaded( cocos2d::CCNode *pNode, cocos2d::extension::CCNodeLoader *pNodeLoader )
{
	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 1, true);

	m_MainFrame = (CCSprite*)getChildByTag(NT_Frame);
	if (m_MainFrame == NULL)
	{
		return;
	}
	m_Itemlabel_FubenTitle =dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(1));

	m_Team1 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(2));
	m_Team2 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(3));
	m_Team3 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(4));
	m_Team4 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(5));
	m_Team5 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(6));

	m_Class1 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(8));
	m_Class2 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(9));
	m_Class3 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(10));
	m_Class4 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(11));
	m_Class5 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(12));

	m_Rating1 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(13));
	m_Rating2 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(14));
	m_Rating3 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(15));
	m_Rating4 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(16));
	m_Rating5 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(17));

	m_Photo1 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(18));
	m_Photo2 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(19));
	m_Photo3 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(20));
	m_Photo4 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(21));
	m_Photo5 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(22));

	m_level1 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(23));
	m_level2 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(24));
	m_level3 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(25));
	m_level4 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(26));
	m_level5 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(27));

	m_Name1 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(28));
	m_Name2 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(29));
	m_Name3 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(30));
	m_Name4 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(31));
	m_Name5 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(32));

	m_Prepared1 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(33));
	m_Prepared2 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(34));
	m_Prepared3 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(35));
	m_Prepared4 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(36));
	m_Prepared5 = dynamic_cast<CCSprite*>(m_MainFrame->getChildByTag(37));

	m_Preparedbutton = dynamic_cast<CCControlButton*>(m_MainFrame->getChildByTag(38));

	m_Kick2 = dynamic_cast<CCControlButton*>(m_MainFrame->getChildByTag(39));
	m_Kick3 = dynamic_cast<CCControlButton*>(m_MainFrame->getChildByTag(40));
	m_Kick4 = dynamic_cast<CCControlButton*>(m_MainFrame->getChildByTag(41));
	m_Kick5 = dynamic_cast<CCControlButton*>(m_MainFrame->getChildByTag(42));

	m_Time2 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(43));
	m_Time3 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(44));
	m_Time4 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(45));
	m_Time5 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(46));
	m_Time1 = dynamic_cast<CCLabelTTF*>(m_MainFrame->getChildByTag(47));
	m_Time1->setVisible(false);
	/*SetFubenTitle();
	setTeamRoleClass();*/
	m_nTime2 = 30;
	m_nTime3 = 30;
	m_nTime4 = 30;
	m_nTime5 = 30;
	m_nTime1 = 10;
	updateData();
	//距离下一次守将时间	
	CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&TeamStateUiLayer::setCurTime), this, 1.0f, false);
	scheduleUpdate();

	bisJuJue = false;

	if (IS_UI_OPEN(WCT_FubenDuoRenUI))
	{
		FubenDuoRenUiLayer* pUI = getUiNodeByTag<FubenDuoRenUiLayer>(WCT_FubenDuoRenUI);
		if (pUI)
		{
			pUI->setItemNodeClick(false);
		}
	}	
}

void TeamStateUiLayer::onExit()
{
	if (IS_UI_OPEN(WCT_FubenDuoRenUI))
	{
		FubenDuoRenUiLayer* pUI = getUiNodeByTag<FubenDuoRenUiLayer>(WCT_FubenDuoRenUI);
		if (pUI)
		{
			pUI->setItemNodeClick(true);
		}
	}
	CCLayer::onExit();
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&TeamStateUiLayer::setCurTime), this);
}

bool TeamStateUiLayer::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	return true;
}

void TeamStateUiLayer::ccTouchEnded( CCTouch *pTouch, CCEvent *pEvent )
{

}

void TeamStateUiLayer::onCloseBtnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	onClose();
	//CLOSE_UI(WCT_TeamStateUi);
}

void TeamStateUiLayer::onPreparedOnPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	onPrepared();
}

void TeamStateUiLayer::SetFubenTitle()
{
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT title FROM fubendata WHERE id = ?1");
	cmd->set_integer32(1 , TeamMgr::getInstance()->getFubenID());		//[bing] 多人副本type == 2
	c_sql_table* table = c_db_manager::getSingleton()->create_table();
	std::string strFuBenTitle = "";
	while(table->retrieve_row())
	{
		int idx = table->get_index("title");
		strFuBenTitle = table->get_text(idx);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);
	if ( m_Itemlabel_FubenTitle == NULL)
	{
		return;
	}
	m_Itemlabel_FubenTitle->setString(strFuBenTitle.c_str());

}

void TeamStateUiLayer::setTeamRoleClass()
{
	
	const TeamMgr::teammates_vector* teammate_vec;
	//TeamMgr::getInstance()->getTeamAllPlayData(teammate_list_all);
	//TeamMgr::getInstance()->swapTeamLeaderPosFirst(TeamMgr::getInstance()->getLeaderID(),teammate_list_all);
	tagTeammateData LocalTeamData;
	TeamMgr::getInstance()->getTeammateLocalPlayerData(LocalTeamData);
	teammate_vec = TeamMgr::getInstance()->getTeamPlayData();
	TeamInfo teaminfo;
	for (int i = 0;i < 5;i++)
	{
		STeam_Set_State teamstate = TeamMgr::getInstance()->getState(i);
		for (size_t j = 0;j < teammate_vec->size();j++)
		{
			if (teamstate.roleId == teammate_vec->at(j).uRoleID)
			{
				teaminfo.bIsSelf = (TeamMgr::getInstance()->getLocalID() == teammate_vec->at(j).uRoleID)?true :false;
				teaminfo.bySex =  teammate_vec->at(j).bySex;
				teaminfo.nclass = teammate_vec->at(j).eClassEx;
				teaminfo.nlevel = teammate_vec->at(j).nLevel;
				teaminfo.nZhanLi = teammate_vec->at(j).nRating;
				teaminfo.strname = teammate_vec->at(j).strName.c_str();
				teaminfo.uRoleID = teammate_vec->at(j).uRoleID;
				teaminfo.dwJointime =  teamstate.dwJointime;
				teaminfo.nPrepared =  teamstate.state;
				m_TeamVect.push_back(teaminfo);
				break;
			}
			else if (teamstate.roleId == LocalTeamData.uRoleID )
			{
				teaminfo.bIsSelf = (TeamMgr::getInstance()->getLocalID() ==  LocalTeamData.uRoleID)?true :false;
				teaminfo.bySex =   LocalTeamData.bySex;
				teaminfo.nclass =  LocalTeamData.eClassEx;
				teaminfo.nlevel =  LocalTeamData.nLevel;
				teaminfo.nZhanLi =  LocalTeamData.nRating;
				teaminfo.strname =  LocalTeamData.strName.c_str();
				teaminfo.uRoleID = LocalTeamData.uRoleID;
				teaminfo.dwJointime =  teamstate.dwJointime;
				teaminfo.nPrepared =  teamstate.state;
				m_TeamVect.push_back(teaminfo);
				break;
			}
		}

	}
	if (m_Preparedbutton == NULL)
	{
		return;
	}
	m_Preparedbutton->setEnabled(true);

	/*	TeamMgr::teammates_vector::iterator it = teammate_list_all.begin();
	TeamInfo teaminfo;
	for (int i = 0; i < teammate_list_all.size();i++)
	{
	teaminfo.bIsSelf = (TeamMgr::getInstance()->getLocalID() == it->uRoleID)?true :false;
	teaminfo.bySex =  it->bySex;
	teaminfo.nclass = it->eClassEx;
	teaminfo.nlevel = it->nLevel;
	teaminfo.nZhanLi = it->nRating;
	teaminfo.strname = it->strName.c_str();
	teaminfo.uRoleID = it->uRoleID;
	teaminfo.dwJointime =  it->dwJointime;
	m_TeamVect.push_back(teaminfo);
	it++;
	}*/	

	for (size_t j = 0 ; j < m_TeamVect.size();j++)
	{			
		//设置本地玩家准备按钮状态（置灰）
		if ( m_TeamVect[j].uRoleID == TeamMgr::getInstance()->getLocalID() && m_TeamVect[j].nPrepared == 1 &&  m_TeamVect[j].uRoleID != TeamMgr::getInstance()->getLeaderID())
		{
			m_Preparedbutton->setEnabled(false);
		}
		//记录本地玩家状态
		if ( m_TeamVect[j].uRoleID == TeamMgr::getInstance()->getLocalID())
		{
			nLocalPrepared = m_TeamVect[j].nPrepared;
		}
	}
	for (size_t i = 0;i < m_TeamVect.size();i++)
	{
		CCSpriteFrame* frame = getRoleClassSprite(m_TeamVect[i].nclass);	
		if (frame == NULL)
		{
			return;
		}
		getTeam(i)->setDisplayFrame(getRoleTeamSprite(1));
		getClass(i)->setDisplayFrame(frame);
		std::stringstream ss_Zhanli;
		ss_Zhanli<<m_TeamVect[i].nZhanLi;
		getRating(i)->setString(ss_Zhanli.str().c_str());
		std::stringstream ss_level;
		ss_level<<m_TeamVect[i].nlevel;
		getLevel(i)->setString(ss_level.str().c_str());
		getName(i)->setString(m_TeamVect[i].strname.c_str());
		getPhoto(i)->setDisplayFrame(getRolePhotoSprite(m_TeamVect[i].nclass,m_TeamVect[i].bySex));
		getPrepared(i)->setDisplayFrame(getRolePreparedSprite(m_TeamVect[i].nPrepared));
		if ( i != 0)//拒绝显示踢出按钮 倒计时
		{
			if (m_TeamVect[i].nPrepared != 1 && TeamMgr::getInstance()->getLeaderID() == TeamMgr::getInstance()->getLocalID())
			{
				getKick(i)->setVisible(true);
			}
			else
			{
				getKick(i)->setVisible(false);
			}
		
			if (m_TeamVect[i].nPrepared == 0)//拒绝显示踢出按钮
			{
				getTime(i)->setVisible(true);

			}
			else
			{
				getTime(i)->setVisible(false);
			}
		}
		if (m_TeamVect[i].bIsSelf)
		{
			getTeam(i)->setDisplayFrame(getRoleTeamSprite(2));
		}

		getClass(i)->setVisible(true);
		getRating(i)->setVisible(true);
		getLevel(i)->setVisible(true);
		getName(i)->setVisible(true);
		getPhoto(i)->setVisible(true);	
	}
		
	for(int i = m_TeamVect.size();i < 5;i++)
	{
		getTeam(i)->setDisplayFrame(getRoleTeamSprite(0));
		getClass(i)->setVisible(false);
		getRating(i)->setVisible(false);
		getLevel(i)->setVisible(false);
		getName(i)->setVisible(false);
		getPhoto(i)->setVisible(false);
		getPrepared(i)->setDisplayFrame(getRolePreparedSprite(3));
		if (i!= 0)
		{
			getKick(i)->setVisible(false);
			getTime(i)->setVisible(false);
		}
		
	}

	////如果是自己高亮
	//for (int i = 0;i < 5;i++)
	//{
	//	if(bIsSelf[i])
	//	{
	//		getTeam(i)->setDisplayFrame(getRoleTeamSprite(2));
	//		break;
	//	}
	//}
	if (TeamMgr::getInstance()->getLeaderID() == TeamMgr::getInstance()->getLocalID())
	{
		m_Preparedbutton->setBackgroundSpriteFrameForState(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("zudui_jinrufubenbtnn"), CCControlStateNormal);
		m_Preparedbutton->setBackgroundSpriteFrameForState(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName("zudui_jinrufubenbtnh"), CCControlStateHighlighted);
	}
}

CCSpriteFrame* TeamStateUiLayer::getRoleClassSprite( int nClass )
{
	std::string strclassname = "";
	if (nClass == EV_Warrior)
	{
		strclassname = "zudui_zhan";
	}
	else if (nClass == EV_Mage)
	{
		strclassname = "zudui_fa";
	}
	else if (nClass == EV_Taoist)
	{
		strclassname = "zudui_dao";
	}
	return CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(strclassname.c_str());
}

CCSpriteFrame* TeamStateUiLayer::getRoleTeamSprite( int nstate )
{
	std::string strclassname = "";
	if (nstate == 0)//无队员
	{
		strclassname = "zudui_wurendikuang";
	}
	else if (nstate == 1)//有队员
	{
		strclassname = "zudui_duiyuandikuang";
	}
	else if (nstate == 2)//自己
	{
		strclassname = "zudui_zijidikuang";
	}
	return CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(strclassname.c_str());
}

CCSpriteFrame* TeamStateUiLayer::getRolePhotoSprite( int nClass ,unsigned char bySex)
{
	std::string strclassname = "";
	if (nClass == EV_Warrior && bySex == 1)
	{
		strclassname = "rendui_zhanshiman";
	}
	else if (nClass == EV_Warrior && bySex == 0)
	{
		strclassname = "rendui_zhanshiwoman";
	}
	else if (nClass == EV_Mage &&  bySex == 1 )
	{
		strclassname = "rendui_fashiman";
	}
	else if (nClass == EV_Mage &&  bySex == 0 )
	{
		strclassname = "rendui_fashiwoman";
	}
	else if (nClass == EV_Taoist && bySex == 1)
	{
		strclassname = "rendui_daoshiman";
	}
	else if (nClass == EV_Taoist && bySex == 0)
	{
		strclassname = "rendui_daoshiwoman";
	}
	return CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(strclassname.c_str());
}

CCSpriteFrame* TeamStateUiLayer::getRolePreparedSprite( int nstate )
{
	std::string strclassname = "";
	if (nstate == 0)//等待中 倒计时
	{
		strclassname = "zudui_shijian";
	}
	else if (nstate == 1)//已准备
	{
		strclassname = "zudui_yizhunbei";
	}
	else if (nstate == 2)
	{
		strclassname = "zudui_jujue";
	}
	else if (nstate == 3)//虚位以待
	{
		strclassname = "zudui_xuweiyidai";
	}
	return CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(strclassname.c_str());
}

CCSprite* TeamStateUiLayer::getTeam( int n)
{
	if (n == 0)
	{
		return m_Team1;
	}
	else if (n == 1)
	{
		return m_Team2;
	}
	else if (n == 2)
	{
		return m_Team3;
	}
	else if (n == 3)
	{
		return m_Team4;
	}
	else if (n == 4)
	{
		return m_Team5;
	}

	return NULL;
}

CCSprite* TeamStateUiLayer::getClass( int n )
{
	if (n == 0)
	{
		return m_Class1;
	}
	else if (n == 1)
	{
		return m_Class2;
	}
	else if (n == 2)
	{
		return m_Class3;
	}
	else if (n == 3)
	{
		return m_Class4;
	}
	else if (n == 4)
	{
		return m_Class5;
	}

	return NULL;
}

CCLabelTTF* TeamStateUiLayer::getRating( int n )
{
	if (n == 0)
	{
		return m_Rating1;
	}
	else if (n == 1)
	{
		return m_Rating2;
	}
	else if (n == 2)
	{
		return m_Rating3;
	}
	else if (n == 3)
	{
		return m_Rating4;
	}
	else if (n == 4)
	{
		return m_Rating5;
	}

	return NULL;
}

CCLabelTTF* TeamStateUiLayer::getLevel( int n )
{
	if (n == 0)
	{
		return m_level1;
	}
	else if (n == 1)
	{
		return m_level2;
	}
	else if (n == 2)
	{
		return m_level3;
	}
	else if (n == 3)
	{
		return m_level4;
	}
	else if (n == 4)
	{
		return m_level5;
	}

	return NULL;
}

CCLabelTTF* TeamStateUiLayer::getName( int n )
{
	if (n == 0)
	{
		return m_Name1;
	}
	else if (n == 1)
	{
		return m_Name2;
	}
	else if (n == 2)
	{
		return m_Name3;
	}
	else if (n == 3)
	{
		return m_Name4;
	}
	else if (n == 4)
	{
		return m_Name5;
	}
	return NULL;
}

CCSprite* TeamStateUiLayer::getPhoto( int n )
{
	if (n == 0)
	{
		return m_Photo1;
	}
	else if (n == 1)
	{
		return m_Photo2;
	}
	else if (n == 2)
	{
		return m_Photo3;
	}
	else if (n == 3)
	{
		return m_Photo4;
	}
	else if (n == 4)
	{
		return m_Photo5;
	}
	return NULL;
}

CCSprite* TeamStateUiLayer::getPrepared( int n )
{
	if (n == 0)
	{
		return m_Prepared1;
	}
	else if (n == 1)
	{
		return m_Prepared2;
	}
	else if (n == 2)
	{
		return m_Prepared3;
	}
	else if (n == 3)
	{
		return m_Prepared4;
	}
	else if (n == 4)
	{
		return m_Prepared5;
	}
	return NULL;
}




void TeamStateUiLayer::updateData()
{
	initData();
	SetFubenTitle();
	setTeamRoleClass();
	//检查所有人状态如果都准备，则将队长倒计时
	checkAllPreapredState();
}

void TeamStateUiLayer::initData()
{


	m_TeamVect.clear();
	nLocalPrepared = 0;
	m_bisAllPrepared = false;
	m_isGotoFuben = false;

	
}

void TeamStateUiLayer::onClose()
{
	if (TeamMgr::getInstance()->getLeaderID() == TeamMgr::getInstance()->getLocalID())//自己是队长
	{
		MessageBoxUi *messageBox = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(7252).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
		messageBox->signalOkBtnPressed.connect(this, &TeamStateUiLayer::OnCloseLeaderMsgOK);
		World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
		
		//todo :发队员关闭组队界面消息
	}
	else
	{
		//准备
		//提示 不能关闭
		if (nLocalPrepared == 1)
		{
			MessageBoxUi *messageBox = MessageBoxUi::createWithOneBtn(TEXT_UTF8_TISHI,GET_STR(7251).c_str(), TEXT_UTF8_QUEDING);
			World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
		}
		//未准备
		//提示拒绝
		else if (nLocalPrepared == 0)
		{
			MessageBoxUi *messageBox = MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(7253).c_str(), TEXT_UTF8_QUEDING, TEXT_UTF8_QUXIAO);
			messageBox->signalOkBtnPressed.connect(this, &TeamStateUiLayer::OnClosePlayerMsgOK);
			World::getInstance()->getScene()->addChild(messageBox, WZ_MESSAGEBOX, WCT_MessageBox);
		}
	}
}

void TeamStateUiLayer::OnCloseLeaderMsgOK()
{
	//队长发送关闭组队消息
	//拒绝
	NET_SIC_team_set_state msg;
	msg.state = 2;
	msg.m_value = 3;
	TCP_CLIENT->send_net_cmd(&msg, NP_NORMAL, false);		//发送
	CLOSE_UI(WCT_TeamStateUi);
}

void TeamStateUiLayer::OnClosePlayerMsgOK()
{
	//队员发送关闭组队消息
	//拒绝
	NET_SIC_team_set_state msg;
	msg.state = 2;
	msg.m_value = 2;
	TCP_CLIENT->send_net_cmd(&msg, NP_NORMAL, false);		//发送
	CLOSE_UI(WCT_TeamStateUi);
	bisJuJue = true;
}

CCControlButton* TeamStateUiLayer::getKick( int n )
{
	if (n == 1)
	{
		return m_Kick2;
	}
	else if (n == 2)
	{
		return m_Kick3;
	}
	else if (n == 3)
	{
		return m_Kick4;
	}
	else if (n == 4)
	{
		return m_Kick5;
	}

	return NULL;
}

CCLabelTTF* TeamStateUiLayer::getTime( int n )
{
	if (n == 0)
	{
		return m_Time1;
	}
	else if (n == 1)
	{
		return m_Time2;
	}
	else if (n == 2)
	{
		return m_Time3;
	}
	else if (n == 3)
	{
		return m_Time4;
	}
	else if (n == 4)
	{
		return m_Time5;
	}

	return NULL;
}

void TeamStateUiLayer::update( float dt )
{
	if ( m_TeamVect.size() <= 0 ||  m_TeamVect.size() > 5)
	{
		return;
	}
	for (size_t i = 1;i < m_TeamVect.size();i++)
	{
		if ( getUpdateTime(i) == 0 && m_TeamVect[i].uRoleID == TeamMgr::getInstance()->getLocalID() && !bisJuJue)
		{
			//发送拒绝消息
			NET_SIC_team_set_state msg;
			msg.state = 2;
			msg.m_value = 2;
			TCP_CLIENT->send_net_cmd(&msg, NP_NORMAL, false);		//发送
			bisJuJue = true;
			break;
		}
	}

	//发送进入副本消息
	tagDWORDTime nowTime = ServerTime::getInstance()->cal_current_server_dword_time();
	int ntime =  CalcTimeDiff(nowTime,m_AllPreparedTime);
	if (m_bisAllPrepared == true && ntime > 10)
	{
		onPrepared();
		m_bisAllPrepared = false;
	}
	
}

void TeamStateUiLayer::setCurTime(float dt)
{
	tagDWORDTime nowTime = ServerTime::getInstance()->cal_current_server_dword_time();
	unsigned int dwDiff;
	for (size_t i = 1;i < m_TeamVect.size();i++)
	{
		if (m_TeamVect[i].nPrepared == 0)
		{
			tagDWORDTime dwtime = m_TeamVect[i].dwJointime;
			dwDiff = CalcTimeDiff(nowTime, m_TeamVect[i].dwJointime);
			int ntime = 30 - dwDiff;
			if (ntime < 0)
			{
				ntime = 0;
			}
			setUpdateTime(i,ntime);
		}
	}
	if (m_bisAllPrepared)
	{
		dwDiff = CalcTimeDiff(nowTime,m_AllPreparedTime);
		int ntime = 10 - dwDiff;
		if (ntime < 0)
		{
			ntime = 0;
		}
		setUpdateTime(0,ntime);

	}
}

int TeamStateUiLayer::getUpdateTime( int n )
{
	if (n == 1)
	{
		return m_nTime2;
	}
	else if (n == 2)
	{
		return m_nTime3;
	}
	else if (n == 3)
	{
		return m_nTime4;
	}
	else if (n == 4)
	{
		return m_nTime5;
	}

	return NULL;
}

void TeamStateUiLayer::setUpdateTime( int n,int ntime )
{
	std::stringstream ss_time;
	if (n == 0)
	{
		m_nTime1 = ntime;	
		ss_time<<m_nTime1;
	}
	
	if (n == 1)
	{
		m_nTime2 = ntime;	
		ss_time<<m_nTime2;
	}
	else if (n == 2)
	{
		m_nTime3 = ntime;
		ss_time<<m_nTime3;
	}
	else if (n == 3)
	{
		m_nTime4 = ntime;
		ss_time<<m_nTime4;
	}
	else if (n == 4)
	{
		m_nTime5 = ntime;
		ss_time<<m_nTime5;
	}
	getTime(n)->setString(ss_time.str().c_str());
}

void TeamStateUiLayer::ontichuPressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if (m_TeamVect.size() < 2)
	{
		return;
	}
	unsigned int uRoleid = m_TeamVect[1].uRoleID;
	TeamMgr::getInstance()->KickMember(uRoleid);
}

void TeamStateUiLayer::ontichu1Pressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if (m_TeamVect.size() < 3)
	{
		return;
	}
	unsigned int uRoleid = m_TeamVect[2].uRoleID;
	TeamMgr::getInstance()->KickMember(uRoleid);
}

void TeamStateUiLayer::ontichu2Pressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if (m_TeamVect.size() < 4)
	{
		return;
	}
	unsigned int uRoleid = m_TeamVect[3].uRoleID;
	TeamMgr::getInstance()->KickMember(uRoleid);
}

void TeamStateUiLayer::ontichu3Pressed( cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	if (m_TeamVect.size() < 5 )
	{
		return;
	}
	unsigned int uRoleid = m_TeamVect[4].uRoleID;
	TeamMgr::getInstance()->KickMember(uRoleid);
}

bool TeamStateUiLayer::checkAllPreapredState()
{
	if (m_TeamVect.size() <= 0 || m_TeamVect.size() > 5)
	{
		return false;
	}
	for(size_t i = 0;i < m_TeamVect.size();i++)
	{
		if (m_TeamVect.at(i).nPrepared != 1)
		{
			m_bisAllPrepared = false;
			return false;
		}
		
	}
	m_AllPreparedTime = ServerTime::getInstance()->cal_current_server_dword_time();
	getTime(0)->setVisible(true);
	getPrepared(0)->setDisplayFrame(getRolePreparedSprite(0));
	m_bisAllPrepared = true;
	return true;
}

void TeamStateUiLayer::onPrepared()
{
	//队长发送进入副本，队员发送准备状态
	if (TeamMgr::getInstance()->getLeaderID() == TeamMgr::getInstance()->getLocalID())
	{
		c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT mapid FROM fubendata WHERE id = ?1");
		cmd->set_integer32(1 , TeamMgr::getInstance()->getFubenID());		//[bing] 多人副本type == 2
		c_sql_table* table = c_db_manager::getSingleton()->create_table();
		unsigned int nMapID = 0;
		while(table->retrieve_row())
		{
			int idx = table->get_index("mapid");
			nMapID = table->get_integer32(idx);
		}
		c_db_manager::getSingleton()->destroy_table(table);
		c_db_manager::getSingleton()->end_operation(cmd);

		WorldPacket SIC_Msg(NET_C2G_ENTER_FUBEN);		//组装消息头
		SIC_Msg << (unsigned char)4;			//类型 1 = 进入副本 2 = 扫荡 3 = 扫荡10次 4 = 进入多人副本
		SIC_Msg << nMapID;
		TCP_CLIENT->send_net_cmd((const s_net_cmd*)SIC_Msg.contents(), NP_NORMAL, false);		//发送
	}
	else
	{
		//准备
		NET_SIC_team_set_state msg;
		msg.state = 1;
		msg.m_value = 1;
		TCP_CLIENT->send_net_cmd(&msg, NP_NORMAL, false);		//发送
	}
}




