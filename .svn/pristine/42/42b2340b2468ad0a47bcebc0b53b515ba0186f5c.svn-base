#ifndef EQUIPLEVELUPUIMGR_H
#define EQUIPLEVELUPUIMGR_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiTools.h"
#include "item.h"
#include "CmdAdapter.h"
#include "ItemDefine.h"
using namespace cocos2d;
using namespace cocos2d::extension;

#define MAX_EQUIP_LEVEL 3 //装备最大等级

struct s_net_cmd;

struct uplevelEquipAttr
{
	int attrType;
	signed int attrData;
};

struct UplevelEquip
{//结果(DWORD)[0=成功 + 属性类型(INT) + 附加值(INT32),非0=错误编号]
	unsigned int isSuccess;
	int attrCount;
	uplevelEquipAttr TypeAndData[MAX_BASE_ATT];
};

class EquipLevelUpUiMgr
{
public:
	EquipLevelUpUiMgr();
	~EquipLevelUpUiMgr();
	unsigned int setEquipLevelUpResultData(s_net_cmd* cmd);
	static EquipLevelUpUiMgr* getInstance();
	void setEquipment(f_equipment* equip){_originalEquip = equip;};
	f_equipment* getEquipment(){return _originalEquip;};
	void setUplevelEquip( s_net_cmd* cmd );           //获取升级后装备信息
	void getBuyStuffResult( s_net_cmd* cmd);           //获取购买材料信息
	UplevelEquip* getUplevelEquip(){return &_uplevelEquipment;};
	void removeUplevelEquip();
	void setLevelupPotency(bool canUp);				//设置升级可行性
	bool getLevelupPower() {return m_bCanUp;}		//获取升级许可
	void noticeRecharge();
private:
	bool m_bCanUp;									//是否可以继续升级
	f_equipment* _originalEquip; //原装备
	UplevelEquip _uplevelEquipment;   //下一级装备
};

#endif //EQUIPLEVELUPUIMGR_H