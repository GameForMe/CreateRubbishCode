#include "TradingSellLeftItemList.h"
#include "UiTools.h"
#include "TradingUI.h"
#include "UiManager.h"
#include "TCPClient.h"
#include "CfgReader.h"
#include "ListControl.h"
#include "LocalPlayer.h"
#include "CommonClient.h"
#include "TradingProto.h"
#include "PackageManager.h"
#include "TradingEquipItemTipUI.h"
#include "Signals.h"


cocos2d::CCSprite* TradingSellLeftItemList::m_pItemOldSelect = NULL;
TradingSellLeftItemList::TradingSellLeftItemList()
	:m_pItemCCNode(NULL)
	,m_pItemName(NULL)
	,m_pPriceNum(NULL)
	,m_pPriceFirst(NULL)
	,m_pItemSelect(NULL)
	,m_pItemnode(NULL)
	,m_pItem(NULL)			
	,m_n64Serial(0)
	,m_pNewItemName(NULL)
	,m_pNewPriceNum(NULL)
{
	
}
	
TradingSellLeftItemList::~TradingSellLeftItemList()
{	
	 CC_SAFE_DELETE(m_pItem);
}		

cocos2d::extension::SEL_CCControlHandler TradingSellLeftItemList::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	SIMPLE_SELECTORRESOLVER_CCCONTROL_GLUE(TradingSellLeftItemList,OnSellLeftItemClick);
	return NULL;
}

bool TradingSellLeftItemList::onAssignCCBMemberVariable( CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode )
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCNode*,m_pItemCCNode)
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pItemName);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pPriceNum);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*,m_pPriceFirst);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*,m_pItemSelect)

	return false;
}

void TradingSellLeftItemList::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{

	m_pNewItemName = Helper::replaceLabelTTFWithLabelFTAndRemove(m_pItemName);
	CC_ASSERT(NULL != m_pNewItemName);

	m_pNewPriceNum =  Helper::replaceLabelTTFWithLabelFTAndRemove(m_pPriceNum);
	CC_ASSERT(NULL != m_pNewPriceNum);
}

void TradingSellLeftItemList::OnSellLeftItemClick( CCObject * pSender, CCControlEvent pCCControlEvent )
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if(NULL == player)
		return ;

	if(m_pItemOldSelect != m_pItemSelect)
	{
		if(NULL != m_pItemSelect)
			m_pItemSelect->setVisible(true);

		if(NULL != m_pItemOldSelect)
			m_pItemOldSelect->setVisible(false);
	}

	m_pItemOldSelect = m_pItemSelect;

	if(!TradingMgr::getInstance()->m_bTradingDownMsgIsReceive)
		return;

	TradingUILayer * ui = getUiNodeByTag<TradingUILayer>(WCT_TradingUI);
	if(NULL != ui && !ui->GetSellLeftTouchMove())
		OPEN_UI(WCT_TradingTipUI);	

	TradingEquipItemTipUILayer * uitip = getUiNodeByTag<TradingEquipItemTipUILayer>(WCT_TradingTipUI);
	if(NULL == uitip || NULL == m_pItem)
		return ;

	uitip->initWithItem(m_pItem,&m_sItemData);
	uitip->hideCompose(false);
	uitip->SetBtnImage(ETT_BtnTypePriceDown);
}

void TradingSellLeftItemList::hideCompose(bool value)
{
	if(NULL != m_pItemnode)
		m_pItemnode->hideCompose(value);
}

void TradingSellLeftItemList::refreshData(const tagTradingItemDataMsg item)
{
	const ItemTypeData &itemData = PackageManager::getInstance()->getItemTypeData(item.m_ItemInfo.dw_data_id);

	if(NULL == m_pItem)
	{
		if(MIsEquipment(item.m_ItemInfo.dw_data_id))
			m_pItem = new f_equipment(item.m_ItemInfo);
		else
			m_pItem = new f_item(item.m_ItemInfo);
	}

	m_n64Serial =  item.m_ItemInfo.n64_serial;
	
	if(NULL == m_pItemnode)
		m_pItemnode = ItemNode::create();

	CC_ASSERT(NULL != m_pItemnode);
	CC_ASSERT(NULL != m_pItemCCNode);
	m_pItemnode->hideItemOpBtn();
	m_pItemnode->setPosition(ccp(m_pItemCCNode->getContentSize().width /2,m_pItemCCNode->getContentSize().height /2));
	m_pItemnode->initWithItem(m_pItem);
	if(!MIsEquipment(item.m_ItemInfo.dw_data_id))
		m_pItemnode->setNum(item.nNumber);
	m_pItemCCNode->addChild(m_pItemnode);
	
	m_pNewItemName->setString(itemData.name.c_str());
	std::stringstream oss;
	oss << item.nNumber * item.nUnitPrice;
	m_pNewPriceNum->setString(oss.str().c_str());

	m_sItemData = item;
}

TradingSellLeftItemList* TradingSellLeftItemList::createItem( const char* szFile,CCObject*pOwner,UiInterface* holder )
{
	CCNodeLoaderLibrary* lib  = CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
	//REG_AUTO_LOADER(TradingSellLeftItemList);
	CCBReader* reader = new CCBReader(lib);
	reader->autorelease();
	std::string strFullPath  = CFGReader::instance()->get_ui_ccbi_filepath(szFile);
	CCNode* node = reader->readNodeGraphFromFile(strFullPath.c_str(),pOwner);
	TradingSellLeftItemList* item = dynamic_cast<TradingSellLeftItemList*>(node);

	if (holder)
		holder->mergeSheet(reader->getLoadedSpriteSheet());

	return item;
}