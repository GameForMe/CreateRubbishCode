#include "ConsumptionUi.h"
#include "CfgReader.h"
#include "World.h"
#include "BaseDefine.h"
#include "UiResourceMgr.h"
#include "UiTools.h"
#include "ItemTip.h"
#include "ToolTip.h"
#include "UiManager.h"
#include "UiLoader.h"
#include "Loading.h"
#include "EquipTipUi.h"
#include "LocalPlayer.h"
#include "StoreRechargeUi.h"
#include "ItemNode.h"
#include "PackageManager.h"
#include "RoleManager.h"
#include "DBMgr.h"
#include "RewardMgr.h"
#include "GongfaTip.h"

ConsumptionUiItem::ConsumptionUiItem()
	:_uiFrame(NULL)
{
	CCNodeLoaderLibrary * ccNodeLoaderLibrary = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();
	ccNodeLoaderLibrary->registerCCNodeLoader("ConsumptionUiItemFrame", ConsumptionUiItemLoader::loader());
	cocos2d::extension::CCBReader * ccbReader = new cocos2d::extension::CCBReader(ccNodeLoaderLibrary);
	_uiFrame = dynamic_cast<ConsumptionUiItemFrame*>(ccbReader->readNodeGraphFromFile((CFGReader::instance()->get_profile_string("Art", "UI", "") + "consumptionuiitem.ccbi").c_str()));
	_usedPlistFile = ccbReader->getLoadedSpriteSheet();
	UiResourceMgr::getInstance()->retainPlistFile(_usedPlistFile);
	ccbReader->release();
	if(_uiFrame != NULL)
	{
		_uiFrame->retain();
		_uiFrame->_item = this;
//		CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(_uiFrame, 2, true);
	}

}

ConsumptionUiItem * ConsumptionUiItem::getInstace()
{
	static ConsumptionUiItem instance;
	return &instance;
}


ConsumptionUiItem::~ConsumptionUiItem()
{
	if(_uiFrame != NULL)
	{
//		CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(_uiFrame);
		_uiFrame->release();
		_uiFrame = NULL;
	}

	UiResourceMgr::getInstance()->releasePlistFile(_usedPlistFile);
	_usedPlistFile.clear();
}

cocos2d::CCSize ConsumptionUiItem::getContentSize()
{
	if(_uiFrame != NULL)
	{
		return _uiFrame->getContentSize();
	}

	return CCSize();
}

void ConsumptionUiItem::setPosition( const CCPoint &pos )
{
	if(_uiFrame != NULL)
	{
		_uiFrame->setPosition(pos);
	}
}

void ConsumptionUiItem::setData(const CostInfo &costinfo)
{
	_costInfo = costinfo;
	setIcon(costinfo.iconname);
	setItem(costinfo);
	CCControlButton* btn = dynamic_cast<CCControlButton*>(_uiFrame->getChildByTag(CUIT_ReciveBtn));
	btn->setZoomOnTouchDown(true);
	if (PackageManager::getInstance()->IsConsumeEnoughYB(costinfo.state))
	{
		setButtonSpriteFrame(btn,"consumptionui_recivebtnn","consumptionui_recivebtnh","consumptionui_recivebtnn");
		btn->setTouchEnabled(true);
	}
	else
	{
		setButtonSpriteFrame(btn,"consumptionui_recivebtnd","consumptionui_recivebtnd","consumptionui_recivebtnd");
		//btn->setTouchEnabled(false);
	}
	if (PackageManager::getInstance()->IsGetRewardAlready(costinfo.state))
	{
		showReciveIcon();
		setButtonSpriteFrame(btn,"consumptionui_recivebtnd","consumptionui_recivebtnd","consumptionui_recivebtnd");
		btn->setTouchEnabled(false);
	}
}

void ConsumptionUiItem::setItem(const CostInfo &costinfo)
{
	for (int i = 0; i < ITEMNODENUM ;  i++)
	{
		ItemNode * node =dynamic_cast<ItemNode *>(_uiFrame->getChildByTag(CUIT_ItemNodeBegin + i));
		CC_ASSERT(node != NULL);
		PackageManager::getInstance()->getItem(costinfo.ItemId[i]);
		//f_equipment* itemequip = dynamic_cast<f_equipment*>(item);
		node->stopAnimation();
		node->setDataId(costinfo.ItemId[i]);
		node->setPosition(_uiFrame->getItemPos(i));
		node->setNum(costinfo.ItemNum[i]); //显示礼包中某些物品所需个数;
		node->runAnimation("qianghua15");
		const ItemTypeData &typeData =PackageManager::getInstance()->getItemTypeData(costinfo.ItemId[i]);
		ePackageItemType eItemType = typeData.type;
		if (eItemType == PIT_Kungfu)
		{
			node->setLevel(1);
		}
		node->setVisible(true);
	}
}

void ConsumptionUiItem::setIcon( const std::string &frameName )
{
	if(_uiFrame != NULL)
	{
		CCSprite *iconSprite = dynamic_cast<CCSprite*>(_uiFrame->getChildByTag(CUIT_CostNumNode));
		CC_ASSERT(iconSprite != NULL);
		iconSprite->setDisplayFrame(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(frameName.c_str()));
	}
}

void ConsumptionUiItem::showItemTip( const CCPoint &pos, int tag )
{
	if(MIsEquipment(_costInfo.ItemId[tag]))
	{
			const ItemTypeData &typeData =PackageManager::getInstance()->getItemTypeData(_costInfo.ItemId[tag]);
			ePackageItemType eItemType = typeData.type;
			if (PIT_Kungfu == eItemType || eItemType == PIT_KungfuExp)
			{
				//功法ui显示;
				GongfaTip::getInstace()->open();
				GongfaTip::getInstace()->setPosition(pos);
				GongfaTip::getInstace()->setData(_costInfo.ItemId[tag]);
			}
			else
			{
				EquipTipUiLayer *ui = EquipTipUi::create();
				ui->showUi(pos, _costInfo.ItemId[tag]);
			}
	}
	else
	{
		ItemTip::getInstace()->open();
		ItemTip::getInstace()->setDataId(_costInfo.ItemId[tag]);
		ItemTip::getInstace()->setPosition(pos);
		ItemTip::getInstace()->hideOpBtn();
	}
}

void ConsumptionUiItem::showReciveIcon()
{
	for (int i = 0; i < ITEMNODENUM ;  i++)
	{
		ItemNode * node =dynamic_cast<ItemNode *>(_uiFrame->getChildByTag(CUIT_ItemNodeBegin + i));
		node->showReciveIcon("rendui_lingqu");
	}
}

///////////////////////////////////////////////////////////

cocos2d::SEL_MenuHandler ConsumptionUiItemFrame::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler ConsumptionUiItemFrame::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onReciveBtnPressed", ConsumptionUiItemFrame::onReciveBtnPressed);
	return NULL;
}

void ConsumptionUiItemFrame::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	for(int i = 1; i <= ITEMNODENUM; i ++)
	{
		CCNode* n = this->getChildByTag(i);
		CC_ASSERT(n != NULL);
		_itemPos[i - 1] = n->getPosition();

		ItemNode * node = ItemNode::create();
		node->setPosition(_itemPos[i - 1]);
		node->setTag(CUTF_ItemNodeBegin + i - 1);
		node->setBlank();
		addChild(node,1);
		// 
	}
}

void ConsumptionUiItemFrame::onEnter()
{
	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this,2,true);
	CCSprite::onEnter();
}

void ConsumptionUiItemFrame::onExit()
{
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCSprite::onExit();
}

bool ConsumptionUiItemFrame::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	if ( !isVisible() || !isRunning() || !hasVisibleParents() )
	{
		return false;
	}
	int tag1 = _item->getItemNode1Tag();
	int tag2 = _item->getItemNode2Tag();
	CCNode *node1 = getChildByTag(tag1);
	CCNode *node2 = getChildByTag(tag2);

	if(isTouchOnNodeContent(node1, pTouch))
	{
		CCScene *scene = UiMgr::getInstance()->getCurScene();
		_stPt = scene->convertTouchToNodeSpace(pTouch);
		return true;
	}

	if(isTouchOnNodeContent(node2, pTouch))
	{
		CCScene *scene = UiMgr::getInstance()->getCurScene();
		_stPt = scene->convertTouchToNodeSpace(pTouch);
		return true;
	}

	if (isTouchOnNodeContent(this,pTouch))
	{
		CCScene *scene = UiMgr::getInstance()->getCurScene();
		_stPt = scene->convertTouchToNodeSpace(pTouch);
		return true;
	}
	return false;
}

void ConsumptionUiItemFrame::ccTouchEnded( CCTouch *pTouch, CCEvent *pEvent )
{
	int tag1 = _item->getItemNode1Tag();
	int tag2 = _item->getItemNode2Tag();
	CCNode *node1 = getChildByTag(tag1);
	CCNode *node2 = getChildByTag(tag2);

	if(isTouchOnNodeContent(node1, pTouch))
	{
		CCScene *scene = UiMgr::getInstance()->getCurScene();
		CCPoint pt = scene->convertTouchToNodeSpace(pTouch);
		if(ccpDistance(_stPt, pt) < TOUCH_MOVE_DIS)
		{
			_item->showItemTip(pt,tag1 - 1);
		}
	}

	if(isTouchOnNodeContent(node2, pTouch))
	{
		CCScene *scene = UiMgr::getInstance()->getCurScene();
		CCPoint pt = scene->convertTouchToNodeSpace(pTouch);
		if(ccpDistance(_stPt, pt) < TOUCH_MOVE_DIS)
		{
			_item->showItemTip(pt,tag2 - 1);
		}
	}
}

void ConsumptionUiItemFrame::onReciveBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//向服务器发送领取消息;
	RewardMgr::getInstance()->getYBConsumeReplyReward(_item->getItemState());	
}

// int ConsumptionUiItemFrame::getItemUnderPoint( const CCPoint &point )
// {
// 	for(int i = 0 ; i < ITEMNODENUM; i ++)
// 	{
// 		float x = _itemPos[i].x;
// 		float y = _itemPos[i].y;
// 		CCRect rect(x - ITEMNODE_CONTENTWIDTH / 2, y - ITEMNODE_CONTENTHEIGHT / 2, ITEMNODE_CONTENTWIDTH, ITEMNODE_CONTENTHEIGHT);
// 		if(rect.containsPoint(point))
// 		{
// 			return i;
// 		}
// 	}
// 	return -1;
// }

/////////////////////////////////


ConsumptionUi::ConsumptionUi()
{

}

ConsumptionUi::~ConsumptionUi()
{

}

class ConsumptionItemFrameLayer : public CCLayer
{
public:
	CREATE_FUNC(ConsumptionItemFrameLayer);
	bool init() { return true; }

	virtual void onEnter()
	{
		//CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 3 , true);
		setTouchPriority(3);
		setTouchEnabled(true);
		CCLayer::onEnter();
	}

	virtual void onExit()
	{
		//CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
		CCLayer::onExit();
	}

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
	{
		if ( !isVisible() || !isRunning() || !hasVisibleParents())
		{
			return false;
		}
		if(isTouchOnNodeContent(this, pTouch))
			return true;
		return false;
	}
};

CCNode * ConsumptionUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["ConsumptionUiLayer"] = UiLayerLoader<ConsumptionUiLayer>::loader();
	nodeLoaders["ConsumptionItemFrameLayer"] = UiLayerLoader<ConsumptionItemFrameLayer>::loader();
	CCNode *uiNode = readUiFromCCBI("consumptionui", nodeLoaders, _loadSpriteSheet);
	if(uiNode)
	{
		ConsumptionUiLayer *uiLayer = dynamic_cast<ConsumptionUiLayer*>(uiNode);
		CC_ASSERT(uiLayer != NULL);
		uiLayer->updateData();
		uiLayer->updateCost();
	}
	return uiNode;
}

ConsumptionUiLayer* ConsumptionUi::getUiLayer()
{
	return getUiNodeByTag<ConsumptionUiLayer>(WCT_ConsumptionUi);
}

void ConsumptionUi::updateData()
{
	ConsumptionUiLayer *uiLayer = getUiLayer();
	if(uiLayer != NULL)
	{
		uiLayer->updateData();
	}
}

void ConsumptionUi::updateCost()
{
	ConsumptionUiLayer *uiLayer = getUiLayer();
	if(uiLayer != NULL)
	{
		uiLayer->updateCost();
	}
}

// void ConsumptionUi::updateReciveData()
// {
// 	ConsumptionUiLayer *uiLayer = getUiLayer();
// 	if(uiLayer != NULL)
// 	{
// 		uiLayer->updateReciveData();
// 	}
// }

//////////////////////////////////////////////////////

cocos2d::SEL_MenuHandler ConsumptionUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler ConsumptionUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCloseBtnPressed", ConsumptionUiLayer::onCloseBtnPressed);
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onCostBtnPressed", ConsumptionUiLayer::onCostBtnPressed);
	return NULL;
}

void ConsumptionUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	_forwardUpSprite = NULL;
	_forwardDownSprite = NULL;
	_forwardUpEffect = NULL;
	_forwardDownEffect = NULL;

	_frame = dynamic_cast<CCSprite*>(getChildByTag(CUT_Frame));
	CC_ASSERT(_frame != NULL);
	_contentLayer = dynamic_cast<CCLayer*>(_frame->getChildByTag(CUT_Container));
	CC_ASSERT(_contentLayer != NULL);

	_scrollView = CCScrollView::create(_contentLayer->getContentSize());
	_contentLayer->addChild(_scrollView);

	_container = CCNode::create();
	//_container->retain();
	_container->setContentSize(_contentLayer->getContentSize());
	_scrollView->setContainer(_container);
	_scrollView->setTouchEnabled(true);
	_scrollView->setBounceable(true);
	_scrollView->setContentSize(_container->getContentSize());
	_scrollView->setDirection(kCCScrollViewDirectionVertical);
	_scrollView->setContentOffset(_scrollView->minContainerOffset());
	CC_ASSERT(_container != NULL && _scrollView != NULL);

	_forwardUpSprite = dynamic_cast<CCNode*>(_frame->getChildByTag(CUT_Up));
	_forwardDownSprite = dynamic_cast<CCNode*>(_frame->getChildByTag(CUT_Down)) ;
	CC_ASSERT(_forwardUpSprite != NULL && _forwardDownSprite != NULL);
	runAnimation();

//	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 1, true);
}

void ConsumptionUiLayer::onEnter()
{
	setTouchPriority(1);
	setTouchEnabled(true);
	CCLayer::onEnter();
}

void ConsumptionUiLayer::onExit()
{
	removeAllItem();
//	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
	CCLayer::onExit();
}

bool ConsumptionUiLayer::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	if ( !isVisible() || !isRunning() || !hasVisibleParents() )
	{
		return false;
	}
	CCPoint framePoint = _frame->convertTouchToNodeSpace(pTouch);
	const CCSize &frameSize = _frame->getContentSize();
	CCRect frameRect(0.0f, 0.0f, frameSize.width, frameSize.height);
	if(frameRect.containsPoint(framePoint))
	{
		if(isTouchOnNodeContent(_contentLayer, pTouch))
			return false;

		return true;
	}
	return false;
}

void ConsumptionUiLayer::onCloseBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	CLOSE_UI(WCT_ConsumptionUi);
	stopAnimation();
}

void ConsumptionUiLayer::onCostBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	OPEN_UI(WCT_STOREUI);
}

void ConsumptionUiLayer::addContentItem( CCNode *item )
{
	CC_ASSERT(_container != NULL && item != NULL);
	_container->addChild(item);
}

void ConsumptionUiLayer::removeContentItem( CCNode *item )
{
	CC_ASSERT(_container != NULL && item != NULL);
	_container->removeChild(item);
}

float ConsumptionUiLayer::getContentLayerHeight()
{
	if(_contentLayer != NULL)
	{
		return _contentLayer->getContentSize().height;
	}
	return 0;
}

CCNode * ConsumptionUiLayer::getContainer()
{
	return _container;
}

void ConsumptionUiLayer::resetScrollPosition()
{
	if(_scrollView != NULL)
	{
		_scrollView->setContentOffset(_scrollView->minContainerOffset());
	}
}

CCLabelTTF* ConsumptionUiLayer::getCostNeedLabel()
{
	CC_ASSERT(_frame != NULL);
	return dynamic_cast<CCLabelTTF*>(_frame->getChildByTag(CUT_CostNeed));
}

void ConsumptionUiLayer::addItem( ConsumptionUiItem *item )
{
	if(item != NULL)
	{
		addContentItem(item->getUiFrame());
		_items.push_back(item);
	}
}

void ConsumptionUiLayer::removeItem( unsigned int itemId )
{
	for(ConsumptionUiItemList::iterator iter = _items.begin(); iter != _items.end(); ++ iter)
	{
		ConsumptionUiItem *item = *iter;
		if(item->getId(0) == itemId)
		{
			removeContentItem(item->getUiFrame());
			delete item;
			_items.erase(iter);
			break;
		}
		if(item->getId(1) == itemId)
		{
			removeContentItem(item->getUiFrame());
			delete item;
			_items.erase(iter);
			break;
		}
	}
}

void ConsumptionUiLayer::removeAllItem()
{
	for(ConsumptionUiItemList::iterator iter = _items.begin(); iter != _items.end(); ++ iter)
	{
		ConsumptionUiItem *item = *iter;
		removeContentItem(item->getUiFrame());
		delete item;
	}
	_items.clear();
}

void ConsumptionUiLayer::updateList()
{
	CCNode *container = getContainer();
	if(container == NULL)
		return;

	//得到总高度;
	int itemCount = _items.size();
	int lineCount = itemCount / 1 + (itemCount % 1 == 0 ? 0 : 1);
	float height = CONSUMPTIONUI_ITEM_HEIGHT * lineCount + CONSUMPTIONUI_ITEM_SPACE * (lineCount - 1);
	if(height < getContentLayerHeight())
		height = getContentLayerHeight();

	CCSize containerSize = container->getContentSize();
	container->setContentSize(CCSize(containerSize.width, height));

	int index = 0;
	for(ConsumptionUiItemList::iterator iter = _items.begin(); iter != _items.end(); ++ iter)
	{
		ConsumptionUiItem *item = *iter;
		int posX = (index % 1) * (CONSUMPTIONUI_ITEM_WIDTH + CONSUMPTIONUI_ITEM_SPACE);
		int posY = height - (index / 1) * (CONSUMPTIONUI_ITEM_HEIGHT + CONSUMPTIONUI_ITEM_SPACE);
		item->setPosition(ccp(posX, posY));
		index ++;
	}

	resetScrollPosition();
}

void ConsumptionUiLayer::updateData()
{
	if (!_items.empty())
		removeAllItem();
	_cost.clear();
	for (int i= 0; i < COSTITEMNUM ; i++ )
	{
		CostInfo info = getCostInfo(i);
		_cost.push_back(info);
	}

	if (!_cost.empty())
	{
		for (costInfoVector::const_iterator iter = _cost.begin(); iter != _cost.end(); iter++)
		{
			const CostInfo &dataInfo = *iter;
			ConsumptionUiItem *item = new ConsumptionUiItem;
			item->setData(dataInfo);
			addItem(item);
		}
		updateList();
	}

}

// void ConsumptionUiLayer::updateReciveData()
// {
// 	removeAllItem();
// 	_cost.clear();
// 
// 	for (int i= 0; i < COSTITEMNUM ; i++ )
// 	{
// 		CostInfo info = getCostInfo(i);
// 		_cost.push_back(info);
// 	}
// 
// 	if (!_cost.empty())
// 	{
// 		for (costInfoVector::const_iterator iter = _cost.begin(); iter != _cost.end(); iter++)
// 		{
// 			const CostInfo &dataInfo = *iter;
// 			ConsumptionUiItem *item = new ConsumptionUiItem;
// 			item->setData(dataInfo);
// 			addItem(item);
// 		}
// 		updateList();
// 	}
// }


void ConsumptionUiLayer::updateCost()
{
	CCLabelTTF *costNeedLabel = getCostNeedLabel();
	CC_ASSERT(costNeedLabel != NULL);
	CCString *str = NULL;
	int myCost = PackageManager::getInstance()->GetToalConsumeYB(); ////得到消耗元宝数;
	for (costInfoVector::const_iterator iter = _cost.begin(); iter != _cost.end(); iter++)
	{
		const CostInfo &dataInfo = *iter;
		if (dataInfo.cost > myCost  )
		{
			int costNeed = dataInfo.cost - myCost;
			if (costNeed <= 0)
				return;
			str = CCString::createWithFormat("%d",costNeed);
			if(costNeedLabel != NULL)
			{
				costNeedLabel->setString(str->getCString());
			}
			break;
		}
	}
	if (myCost >= 100000)
	{
		costNeedLabel->setString("");
	}

}

void ConsumptionUiLayer::runAnimation()
{
	/*if (_forwardUpEffect == NULL)
	{
		AnimationCache::AnimateList anims;
		AnimationCache::createDefList(1, anims);
		AnimationCache::getInstance()->getSinEffect(0,"fuwuqi", anims);
		BSAnimate *animste = anims[0];
		_forwardUpEffect = CCSprite::create();
		//_forwardUpEffect->setAnchorPoint(ccp(0.0f, 1.0f));
		_forwardUpEffect->setPosition(_forwardUpSprite->getPosition());
		_frame->addChild(_forwardUpEffect);
		_forwardUpEffect->runAction(CCRepeatForever::create(animste));
	}
	if (_forwardDownEffect == NULL)
	{
		AnimationCache::AnimateList anims;
		AnimationCache::createDefList(1, anims);
		AnimationCache::getInstance()->getSinEffect(0,"fuwuqi", anims);
		BSAnimate *animste2 = anims[0];
		_forwardDownEffect = CCSprite::create();
		//_forwardDownEffect->setAnchorPoint(ccp(0.0f, 0.0f));
		_forwardDownEffect->setPosition(_forwardDownSprite->getPosition());
		_frame->addChild(_forwardDownEffect);
		_forwardDownEffect->setFlipY(true);
		_forwardDownEffect->runAction(CCRepeatForever::create(animste2));
	}*/
}

void ConsumptionUiLayer::stopAnimation()
{
	if (_forwardUpEffect != NULL)
	{
		_forwardUpEffect->stopAllActions();
		_forwardUpEffect->removeFromParent();
		_forwardUpEffect = NULL;
	}
	if (_forwardDownEffect != NULL)
	{
		_forwardDownEffect->stopAllActions();
		_forwardDownEffect->removeFromParent();
		_forwardDownEffect = NULL;
	}
}

CostInfo ConsumptionUiLayer::getCostInfo( int index )
{
	CostInfo retInfo;
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return retInfo;
	if (index < 0 || index > COSTITEMNUM)//防止异常
	{
		return retInfo;
	}
	c_sql_command* cmd = c_db_manager::getSingleton()->begin_operation("SELECT * FROM CostInfo WHERE id = ?1");
	cmd->set_integer32(1,index);
	c_sql_table* table = c_db_manager::getSingleton()->create_table();

	while(table->retrieve_row())
	{
		unsigned int idx = table->get_index("cost");
		retInfo.cost = table->get_integer32(idx);
		idx = table->get_index("id");
		retInfo.state = table->get_integer32(idx);
		idx = table->get_index("iconname");
		retInfo.iconname = table->get_text(idx);
		idx = table->get_index("item1");
		retInfo.ItemId[0] = table->get_integer32(idx);
		idx = table->get_index("num1");
		retInfo.ItemNum[0] = table->get_integer32(idx);
		idx = table->get_index("item2");
		retInfo.ItemId[1] = table->get_integer32(idx);
		idx = table->get_index("num2");
		retInfo.ItemNum[1] = table->get_integer32(idx);
	}
	c_db_manager::getSingleton()->destroy_table(table);
	c_db_manager::getSingleton()->end_operation(cmd);

	return retInfo;
}
