#ifndef WORLDMAPUI_H
#define WORLDMAPUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
using namespace cocos2d;
using namespace cocos2d::extension;
#include "Signals.h"
#include "ListItem.h"
#include "VerticalList.h"
#include "AnimationCache.h"
#include "MapManager.h"

#define WORLD_MAP_SCALE 0.25f

class CheckButton;

class WorldMapUi : public UiInterface
{
	friend class WorldMapUiLayer;
public:
	WorldMapUi();
	virtual CCNode *openUi();

protected:
	bool _filterCheck[3];
};

class WorldMapUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eFrameTag
	{
		FT_Current = 0,
		FT_Area,
		FT_World,
		FT_FrameNum
	};

	enum eCurrentTag
	{
		CT_MapContent = 0,
		CT_MapName = 1,
		CT_NPCCheck = 2,
		CT_MonsterCheck,
		CT_TransCheck,
		CT_AimListContent = 5,
		BTN_NPC=10,
		BTN_CHUANSONG=11,
		BTN_BOSS=12,
		CT_NPCListContent =13,
		CT_ChuandongContent=14,
		CT_BossContent=15,
	};


	class AimListItem : public ListItem
	{
		enum eNodeTag
		{
			NT_Name = 0,
			NT_Tiao = 1,
			NT_Select=2,
		};
	public:
		AimListItem();
		virtual ~AimListItem();
		void setData(const std::string &name, const CCPoint &pos, const std::string &colour = "white",unsigned int trigger_to_map_id=INVALID);
		virtual CCSize getContentSize();
		virtual void onTouch(CCTouch *touck);
		virtual void onSelectChanged(bool select);
		virtual float getItemHeight();
		virtual float getItemWidth();
		virtual CCPoint getPosition();
	private:
		CCPoint _pos;
		ccColor3B _labColor;

		unsigned int	_trigger_param;
	};
	struct miniMapTrigger
	{
		int mapName;
		std::string nameStr;
		CCRect rect;

		std::string go_through_map_name;
	};

	

public:
	WorldMapUiLayer();
	~WorldMapUiLayer();
	//std::vector<CCLabelTTF*> _miniMapText;
	std::vector<LabelFT*> _miniMapText;
	CCSprite* mapSprite;
	CCSprite* mapSpriteTmp;
	int _mapIndex;
	std::map<int, miniMapTrigger> _triggerMap;
	std::vector<CCSprite*> _teamSprite;
	
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(WorldMapUiLayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCurBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAreaBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onWorldBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	void onCloseBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onCurBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onWorldBtnPressed1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//世界地图的按钮组
	void onGotoBtnPressedm1(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGotoBtnPressedm2(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGotoBtnPressedm6(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGotoBtnPressedm7(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGotoBtnPressedm8(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGotoBtnPressedm9(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void onGotoBtnPressedm11(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void onGotoBtnPressedm13(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGotoBtnPressedm14(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGotoBtnPressedm15(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//沃玛深林
	void onGotoBtnPressedm16(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void onGotoBtnPressedm17(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	//void onGotoBtnPressedm20(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onGotoBtnPressedm3(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//毒蛇山谷
	void onGotoBtnPressedm21(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//丛林迷宫
	void onGotoBtnPressedm24(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//蜈蚣洞
	void onGotoBtnPressedm25(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//祖玛寺庙
	void onGotoBtnPressedm22(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//赤月峡谷
	void onGotoBtnPressedm23(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//牛魔寺庙
	void onGotoBtnPressedm26(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);//封魔谷
	void onnpcBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onchuansongBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onguaiwuBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onAimListFilterChanged(CheckButton*, bool);

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onExit();
	void initScrollViewScene();
	void initSelectMapScrollViewScene(int mapIndex);//在世界地图上选择的地图初始化
	void initLabelData();
	std::string getMapName( const std::string &mapFileName );
	std::string getMapName( unsigned int mapId );
	void addTransfer( const CCPoint &pos, const std::string &name );
	//void setScrollViewOffset(const CCPoint &pos);
	virtual void update(float delta);
	float getMiniOrderAtPoint(const CCPoint &pos);
	unsigned int crc32(const wchar_t* sz_buffer_);
	void setPosition(const CCPoint &pos);
	void setSelectMiniMap(std::string mapName,std::string mapIndex);
	void setCurMiniMap();
	void updateBtnState();
private:
	void showFrame(eFrameTag ft);
	void initMapName();
	void initSelectMapName();
	void updateAimList();
	void updateSelectMapAimList(int mapIndex);
	CCSprite *getSprite();
	void clearLabelData();
private:
	std::vector<AnimsUsed> _miniMapUsedAnims;
	CCScrollView *_mapView;
	CCNode *_frame[FT_FrameNum];
	CCNode *_mapContentNode;
	//CCNode *_containerNode;
	//CCSprite *_containerSprite;
	//CCRenderTexture *_renderTexture;	//[bing] old code 画图渲染方式
	CCPoint _beginOffset;
	eFrameTag _curFrame;
	CCPoint _stPt;

	VerticalList<AimListItem> *_aimList;
	CCNode *_aimListContent;
	CCScrollView *_aimListScrollView;
	std::vector<CCSprite*> _dots;
	int _curSpriteIndex;
	float scaleW;
	float scaleH;
	unsigned int mapId;
	bool npcTouch;
	bool chuansongTouch;
	bool bossTouch;
	CCPoint npcPoint;
	CCPoint chuansongPoint;
	CCPoint bossPoint;
	int currentTag;
	CCControlButton *npcbtn;
	CCControlButton *chuansongbtn;
	CCControlButton *bossbtn;
};

#endif //WORLDMAPUI_H