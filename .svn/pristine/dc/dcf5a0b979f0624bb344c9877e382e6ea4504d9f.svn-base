#ifndef	CONCERNUI_H
#define CONCERNUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include <list>
#include "HearSayProto.h"

using namespace cocos2d;
using namespace cocos2d::extension;

enum enumConcernType
{
	ECT_NoConcern = 0,
	ECT_friend = 1,
	ECT_flower = 2,
	ECT_hongbao = 3,
};

struct ConcernData
{
	unsigned int	roleId;
	enumConcernType type;
	BYTE			sex;
	BYTE			vipLevel;
	std::string		name;
	int				count;
	float			time;
};

struct HearSayCelebrateData
{
	HearSayChannel	hearSay;
	std::string		name;	
};

struct s_net_cmd;
class ConcernMgr
{
private:
	ConcernMgr();
	~ConcernMgr();
public:
	static ConcernMgr* getInstance();
	static void destoryInstance()
	{
		if (m_pConcernMgr)
		{
			delete m_pConcernMgr;
		}
	}
	void Init();
	void Destroy();
	void delayDestroy();//延迟重连需要销毁
	void addData(unsigned int roleId,enumConcernType type,BYTE sex,BYTE vipLevel,const char* name,int count = 0);
	void delBackData();
	ConcernData getBackData(bool isDel = false);
	ConcernData getMidData(bool isDel = false);
	int getSize();
	void update(float dt);

	unsigned int onServerRechargeBeGrab(s_net_cmd *cmd);
	
private:
	static ConcernMgr* m_pConcernMgr;
	std::vector<ConcernData> m_pConcernMap;
	float m_pIntervalTime;
};

class CelebrateMgr
{
private:
	CelebrateMgr();
	~CelebrateMgr();
public:
	static CelebrateMgr* getInstance();
	static void destoryInstance()
	{
		if (m_pCelebrateMgr)
		{
			delete m_pCelebrateMgr;
		}
	}
	void Init();
	void Destroy();
	void delayDestroy();//延迟重连需要销毁
	void addData(NET_SIS_HearSayChannel* msg);
	void addData(unsigned int roleId,unsigned int yuanbao);
	void delBackData();
	void delFrontData();
	HearSayCelebrateData* getBackData();
	HearSayCelebrateData* getFrontData();
	void update(float dt);
	void SysMsgSetCelebrateShow(bool isShow);
	bool isCanGrabHongBao();
	void setCanGrabHongBao(bool isCan);

	
	void Parse_EquipIdent_To_String(NET_SIS_HearSayChannel* msg);
	void Parse_RideUp_To_String(NET_SIS_HearSayChannel* msg);
	void Parse_EquipStrength_To_String(NET_SIS_HearSayChannel* msg);
	void Parse_Kungfu_To_String(NET_SIS_HearSayChannel* msg);
	void Parse_Get_Recharge_Reward_String(NET_SIS_HearSayChannel* msg);
	void Parse_EquipFusion_To_String(NET_SIS_HearSayChannel* msg);

	unsigned int onServerAddYuanbao(s_net_cmd *cmd);
	unsigned int onServerLevelUp(s_net_cmd *cmd);
	unsigned int onServerGrabRecharge(s_net_cmd *cmd);

private:
	static CelebrateMgr* m_pCelebrateMgr;
	std::vector<HearSayCelebrateData> m_pCelebrateMap;
	float m_pIntervalTime;
	bool m_pCelebrateCanShow;
	bool m_pCelebrateIsShow;
	bool m_pCanGrabHongBao;
};
#endif //CONCERNUI_H