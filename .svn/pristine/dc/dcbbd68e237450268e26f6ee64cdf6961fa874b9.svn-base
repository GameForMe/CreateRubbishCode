#include "TradingGetItemList.h"
#include "CommonClient.h"
#include "ListControl.h"
#include "CfgReader.h"
#include "UiTools.h"
#include "StringMgr.h"
#include "ServerTime.h"
#include "RoleManager.h"
#include "LocalPlayer.h"
#include "PackageManager.h"
#include "NumericalIniMgr.h"
#include "TradingUI.h"

cocos2d::CCSprite* TradingGetItemList::m_pItemOldSelect = NULL;
INT64 TradingGetItemList::m_n64_serial = 0;
DWORD TradingGetItemList::m_dwItemId = 0;
INT32 TradingGetItemList::m_nNum	= 0;
TradingGetItemList::TradingGetItemList()
	:m_pItemName(NULL)
	,m_pItemTime(NULL)
	,m_pItemPrice(NULL)
	,m_pItemState(NULL)
	,m_pItemSelect(NULL)
	,m_pNewItemName(NULL)
	,m_pNewItemTime(NULL)
	,m_pNewItemPrice(NULL)
	,m_pNewItemState(NULL)
{

}

TradingGetItemList::~TradingGetItemList()
{	

}		

cocos2d::extension::SEL_CCControlHandler TradingGetItemList::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	SIMPLE_SELECTORRESOLVER_CCCONTROL_GLUE(TradingGetItemList,OnGetItemClick);
	return NULL;
}

bool TradingGetItemList::onAssignCCBMemberVariable( CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode )
{
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pItemName);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pItemTime);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pItemPrice);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCLabelTTF*,m_pItemState);
	SIMPLE_MEMBERVARIABLEASSIGNER_GLUE_WEEK(CCSprite*,m_pItemSelect);

	return false;
}

void TradingGetItemList::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	m_pNewItemName = Helper::replaceLabelTTFWithLabelFTAndRemove(m_pItemName);
	CC_ASSERT(NULL != m_pNewItemName);

	m_pNewItemTime = Helper::replaceLabelTTFWithLabelFTAndRemove(m_pItemTime);
	CC_ASSERT(NULL != m_pNewItemTime);

	m_pNewItemPrice = Helper::replaceLabelTTFWithLabelFTAndRemove(m_pItemPrice);
	CC_ASSERT(NULL != m_pNewItemPrice);

	m_pNewItemState = Helper::replaceLabelTTFWithLabelFTAndRemove(m_pItemState);
	CC_ASSERT(NULL != m_pNewItemState);
}

void TradingGetItemList::setOverTime(float at)
{
	if( 0 >= (long)GetOverTime())
	{
		CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&TradingGetItemList::setOverTime), this);	
		m_pNewItemState->setTextColor(Helper::converColor3B_2_4B(ccc3(185, 185, 185)));
		m_pNewItemState->setString(GET_STR(9278).c_str());
		SetTimeText();
	}
	else
	{
		std::string strtxt  = "";
        int hour	  = (int)(GetOverTime() /(60 * 60));
        int minutes  = (int)((GetOverTime() / 60) % 60);
        int secondes = (int)(GetOverTime() % 60);
		char scripttime[20];
		sprintf(scripttime,"%02d:%02d:%02d",hour,minutes,secondes);
		getItemTime()->setString(scripttime);
	}															
}

long TradingGetItemList::GetOverTime()
{
	if(m_sItem.tOvertime.isInitData() || ETT_TradingOverTime == m_sItem.nState)
		return 0;

	tagDWORDTime dwTmpTime = IncreaseTime(m_sItem.tOvertime, (NumericalIniMgr::getInstance()->get_trading_update_over_time()));
	DWORD time = CalcTimeDiff(dwTmpTime,ServerTime::getInstance()->cal_current_server_dword_time());
	return time;
}

void TradingGetItemList::onExit()
{
	CCDirector::sharedDirector()->getScheduler()->unscheduleSelector(SEL_SCHEDULE(&TradingGetItemList::setOverTime), this);
	CCNode::onExit();
}


void TradingGetItemList::OnGetItemClick( CCObject * pSender, CCControlEvent pCCControlEvent )
{
	if(m_pItemOldSelect != m_pItemSelect)
	{
		if(NULL != m_pItemSelect)
			m_pItemSelect->setVisible(true);

		if(NULL != m_pItemOldSelect)
			m_pItemOldSelect->setVisible(false);
	}

	m_pItemOldSelect = m_pItemSelect;

	TradingGetItemList::m_n64_serial = m_sItem.n64Serial;																	
	TradingGetItemList::m_dwItemId = m_sItem.dwItemId;
	TradingGetItemList::m_nNum = m_sItem.nNumber;
}

void TradingGetItemList::SetItemSelect( bool value )
{
	 if(NULL != m_pItemSelect)
		 m_pItemSelect->setVisible(value);
}

void TradingGetItemList::SetTimeText()
{
	if(NULL != m_pNewItemTime)
		m_pNewItemTime->setString(GET_STR(73).c_str());
}

void TradingGetItemList::refreshData(tagTradingGetItemDataMsg* item)
{
	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if(NULL == player)
		return ;

	m_sItem = *item;
	const ItemTypeData &itemData = PackageManager::getInstance()->getItemTypeData(item->dwItemId);

	std::stringstream oss;
	oss << item->nUnitPrice * item->nNumber;
	m_pNewItemPrice->setString(oss.str().c_str());

	switch (item->nState)
	{
	case ETT_TradingDown:
		{
			m_pNewItemState->setString(GET_STR(9277).c_str());
			break;
		}
	case ETT_TradingSell:
		{
			m_pNewItemState->setTextColor(Helper::converColor3B_2_4B(ccc3(244, 96, 24)));
			m_pNewItemState->setString(GET_STR(9279).c_str());
			break;
		}
	case ETT_TradingBuy:
		{
			m_pNewItemState->setTextColor(Helper::converColor3B_2_4B(ccc3(19, 195, 1)));
			m_pNewItemState->setString(GET_STR(9280).c_str());
			break;
		}
	case ETT_TradingBuySell:
		{
			if(item->dwUpRoleID == player->getId())
			{
				m_pNewItemState->setTextColor(Helper::converColor3B_2_4B(ccc3(244, 96, 24)));
				m_pNewItemState->setString(GET_STR(9279).c_str()); //ÒÑ³öÊÛ
			}
			else
			{
				m_pNewItemState->setTextColor(Helper::converColor3B_2_4B(ccc3(19, 195, 1)));
				m_pNewItemState->setString(GET_STR(9280).c_str());
			}
		}
		break;
	case ETT_TradingOverTime:
		{
			m_pNewItemState->setTextColor(Helper::converColor3B_2_4B(ccc3(185, 185, 185)));
			m_pNewItemState->setString(GET_STR(9278).c_str());
			break;
		}
	default:

		break;
	}

	if(ETT_TradingBuySell == item->nState || ETT_TradingBuy == item->nState || ETT_TradingSell == item->nState || ETT_TradingOverTime == item->nState)
		m_pNewItemTime->setString(GET_STR(73).c_str());
	else
	{
		setOverTime(0);
		CCDirector::sharedDirector()->getScheduler()->scheduleSelector(SEL_SCHEDULE(&TradingGetItemList::setOverTime), this, 1.0f, false);
	}

	std::stringstream oss1;
	oss1 << item->nNumber;
	std::string finalText = itemData.name + "*" + oss1.str();
	m_pNewItemName->setString(finalText.c_str());
}

void TradingGetItemList::UpdateState(DWORD dwUpRoleID,tradingState nState)
{
	if(NULL == m_pNewItemState)
		return;

	LocalPlayer* player = RoleManager::getInstance()->getLocalPlayer();
	if(NULL == player)
		return ;

	switch (nState)
	{
	case ETT_TradingDown:
		m_pNewItemState->setString(GET_STR(9277).c_str());
		break;
	case ETT_TradingSell:
		m_pNewItemState->setString(GET_STR(9279).c_str());
		break;
	case ETT_TradingBuy:
		m_pNewItemState->setString(GET_STR(9280).c_str());
		break;
	case ETT_TradingBuySell:
		{
			if(dwUpRoleID == player->getId())
				m_pNewItemState->setString(GET_STR(9279).c_str());
			else
				m_pNewItemState->setString(GET_STR(9280).c_str());
		}
		break;
	case ETT_TradingOverTime:
		m_pNewItemState->setString(GET_STR(9278).c_str());
		break;
	default:

		break;
	}
}

TradingGetItemList* TradingGetItemList::createItem( const char* szFile,CCObject*pOwner,UiInterface* holder )
{
	CCNodeLoaderLibrary* lib  = CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary();
	
	CCBReader* reader = new CCBReader(lib);
	reader->autorelease();
	std::string strFullPath  = CFGReader::instance()->get_ui_ccbi_filepath(szFile);
	CCNode* node = reader->readNodeGraphFromFile(strFullPath.c_str(),pOwner);
	TradingGetItemList* item = dynamic_cast<TradingGetItemList*>(node);

	if (holder)
		holder->mergeSheet(reader->getLoadedSpriteSheet());

	return item;
}
