#ifndef CFGREADER_H_INCLUDE
#define CFGREADER_H_INCLUDE
#include <map>
#include <vector>
#include <string>
class CFGReader
{
private:
	std::map<std::string , std::map<std::string , std::string> > m_sc_map;
private:
	CFGReader();
	~CFGReader();
public:
	static CFGReader *instance();
	std::string get_profile_string(const std::string& section_, const std::string& key_, const std::string& defstr_) const;

	std::string get_ui_ccbi_filepath(const std::string& filename);
private:
	void _prase(const unsigned char* buf_);
	void trim(std::string& str);
	void tokenize(const std::string& str , const std::string& lif, std::vector<std::string>& ret);
};

class CFGReader2
{
private:
	std::map<std::string , std::map<std::string , std::string> > m_sc_map;
public:
	CFGReader2(){}
	CFGReader2(const char* filename_);
	~CFGReader2();
public:
	std::string get_profile_string(const std::string& section_, const std::string& key_, const std::string& defstr_) const;
	void set_profile_string(const std::string& section_ , const std::string& key_, const std::string& value_);
	void write(const char* filename);
private:
	void _prase(const unsigned char* buf_);
};

class CFGReader3
{
private:
	std::map<std::string , std::map<std::string , std::string> > m_sc_map;
public:
	CFGReader3(){}
	CFGReader3(const char* filename_);
	~CFGReader3();
public:
	std::string get_profile_string(const std::string& section_, const std::string& key_, const std::string& defstr_) const;
	void set_profile_string(const std::string& section_ , const std::string& key_, const std::string& value_);
	void write(const char* filename);
	void tokenize(const std::string& src , const std::string& white , std::vector<std::string>& ret);
private:
	void _prase(const char* buf_);
};


#endif