#include "DelayUi.h"
#include "World.h"

DelayUi* DelayUi::instance = NULL;

DelayUi * DelayUi::getInstace()
{
	if (instance == NULL)
	{
		instance = new DelayUi;
	}
	return instance;
}

void DelayUi::open()
{
	CCScene* scene = World::getInstance()->getScene();
	if (scene == NULL)
		return;
	if (_delayLayer == NULL)
	{
		_delayLayer = DelayLayer::create();
		_delayLayer->initWithColor(ccc4(0,0,0,100));
		CCSize size = scene->getContentSize();
		_delayLayer->setContentSize(size);
		//_delayLayer->setPosition(ccp(size.width/2,size.height/2));
		//_delayLayer->setAnchorPoint(ccp(0.5,0.5));
		_delayLayer->setPosition(ccp(0.0,0.0));
		_delayLayer->setAnchorPoint(ccp(0.0,0.0));
		_delayLayer->setZOrder(WZ_Delay);
		scene->addChild(_delayLayer);
	}
	else
	{
		_delayLayer->setVisible(true);
	}
}

void DelayUi::close()
{
	_isDelay = false;
	if (_delayLayer != NULL)
	{
		if (_canDestroy)
		{
			_delayLayer->setDisableClick(false);
			_delayLayer->removeFromParentAndCleanup(true);
			_delayLayer = NULL;
		}
		else
		{
			_delayLayer->setVisible(false);
		}
	}
}

void DelayUi::questOpen()
{
	if (_isInQuest)
		return;
	_isInQuest = true;
	CCScene* scene = World::getInstance()->getScene();
	if (scene == NULL)
		return;
	if (_delayLayer == NULL)
	{
		_delayLayer = DelayLayer::create();
		_delayLayer->initWithColor(ccc4(0,0,0,0));
		CCSize size = scene->getContentSize();
		_delayLayer->setContentSize(size);
		_delayLayer->setPosition(ccp(0.0,0.0));
		_delayLayer->setAnchorPoint(ccp(0.0,0.0));
		_delayLayer->setZOrder(WZ_WaitLoading);
		_delayLayer->setDisableClick(true);
		scene->addChild(_delayLayer);
	}
	else
	{
		_delayLayer->setDisableClick(true);
		_delayLayer->setVisible(true);
	}
}

void DelayUi::questClose()
{
	if (_isInQuest == false)
		return;
	_isInQuest = false;
	if (_delayLayer && _isDelay == false)
	{
		_delayLayer->setDisableClick(false);

		if (_canDestroy)
		{
			_delayLayer->removeFromParentAndCleanup(true);
			_delayLayer = NULL;
		}
		else
		{
			_delayLayer->setDisableClick(false);
		}
	}
}

bool DelayUi::isOpen()
{
	if (_delayLayer && _delayLayer->isVisible())
	{
		return true;
	}
	return false;
}

DelayUi::DelayUi()
{
	_delayLayer = NULL;
	_canDestroy = true;
	_isDelay = false;
	_isInQuest = false;
}

DelayUi::~DelayUi()
{
	if (_delayLayer)
	{
		_delayLayer->removeFromParentAndCleanup(true);
	}

}

DelayLayer* DelayUi::getDelayLayer()
{
	return _delayLayer;
}

void DelayUi::setDelay( bool state)
{
	_isDelay = state;
}

void DelayUi::showDelay( bool needShow )
{
	if (_delayLayer)
	{
		_delayLayer->showDelay(needShow);
	}
}

void DelayUi::setDisableClick( bool state )
{
	_delayLayer->setDisableClick(state);
}

void DelayUi::setCanDestroy( bool isCan )
{
	_canDestroy = isCan;
}

void DelayUi::setOpacity( int index )
{
	if(_delayLayer)
	{
		_delayLayer->setOpacity(index);
	}
}

bool DelayLayer::init()
{
	_delaySp = NULL;
	_isShow = false;
	_isDisableClick = false;
	return true;
}

DelayLayer::~DelayLayer()
{

}

bool DelayLayer::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	if ( !isVisible() || !isRunning() || !hasVisibleParents() )
	{
		return false;
	}
	return true;
}

void DelayLayer::showDelay( bool state )
{
	if (_isShow == state)
	{
		return;
	}
	_isShow = state;
	if (_delaySp == NULL && state == true)
	{
		//CCScene* scene = World::getInstance()->getScene();
		//if (scene)
		//{
		//	CCSize size = scene->getContentSize();
		//	setPosition(ccp(size.width/2,size.height/2));
		//	setAnchorPoint(ccp(0.5,0.5));
		//	scene->addChild(this);
		//	_delaySp = CCSprite::create("Art/ICON/SingleUI/loading.png");
		//	_delaySp->setPosition(ccp(size.width/2,size.height/2));
		//	_delaySp->setAnchorPoint(ccp(0.5,0.5));
		//	scene->addChild(_delaySp);
		//}
		CCSize size = getContentSize();
		_delaySp = CCSprite::create("Art/ICON/SingleUI/loading.png");
		_delaySp->setPosition(ccp(size.width/2,size.height/2));
		_delaySp->setAnchorPoint(ccp(0.5,0.5));
		addChild(_delaySp);
	}
	if (_delaySp)
	{
		_delaySp->stopAllActions();
		if (state)
		{
			CCRotateBy* rotate = CCRotateBy::create(2,360);
			_delaySp->runAction(CCRepeatForever::create(rotate));
			_delaySp->setVisible(true);
			setVisible(true);
			setDisableClick(true);
			//setTouchPriority(-100);
		}
		else
		{
			_delaySp->setVisible(false);
			setVisible(false);
			setDisableClick(false);
			//setTouchPriority(100);
		}
	}
}

void DelayLayer::setDisableClick( bool state )
{
	if (_isDisableClick == state)
		return;
	_isDisableClick = state;
	setTouchEnabled(state);
//	if (state)
//		CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, -1, true);		
//	else
//		CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
}

void DelayLayer::onEnter()
{
	setTouchPriority(-1);
//	setTouchEnabled(true);
	CCLayerColor::onEnter();
}

void DelayLayer::onExit()
{
	CCLayerColor::onExit();

	//setDisableClick(false);
}
