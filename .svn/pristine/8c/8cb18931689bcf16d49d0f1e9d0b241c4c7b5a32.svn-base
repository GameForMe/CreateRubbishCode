#ifndef DARONGLU_H_
#define DARONGLU_H_


#include "cocos2d.h"
#include "cocos-ext.h"
#include "BaseDefine.h"
#include "UiInterface.h"
#include "UiTools.h"
#include "item.h"
#include "ItemNode.h"
#include "FrameSprite.h"
#include "ItemMarixLayer.h"
#include "ProgressBar.h"
#include "AnimationCache.h"

#define NT_DARONGLU_NODE_BEGIN_TAG 8
#define MAX_EXP 10000
#define MAX_OUT_EXP1 10000
#define MAX_OUT_EXP2 20000
#define MAX_OUT_EXP3 30000

#define E_Fuion_Need_Bag_Size_Not_Enough  -100 //熔炼所需背包空间不足
#define E_Item_CreateFailed  -357 //创建物品失败

using namespace cocos2d;
using namespace cocos2d::extension;

struct DaRongLuIconInfo
{
	int Id;
	int IconId;
	std::string IconName;
	int IconVisible;		
};
struct DaRongLuCailiaoInfo
{
	
	int Id;
	int BaseExp;
	int MaxExp;
	int Quality;
	DaRongLuCailiaoInfo()
	{
		Id = 0;
		BaseExp = 0;
		MaxExp = 0;
		Quality = 0;
	}
};

struct DarongluGetData
{
	INT64 dataId;
	int num;
};
struct DarongluIndexListData
{
	int index;
	int nItemId;
	int num;
};
class DaRongLuUiMgr
{
public:
	DaRongLuUiMgr();
	~DaRongLuUiMgr();
	static DaRongLuUiMgr* GetInstance();	
	void onSelect( unsigned int idx );
	void onNpcTalk( unsigned int dw_data_id, INT64 n64NPCID );
	int newExp;
	int times;
	float degree;
	void openFenUi();
};

class DaRongLuUi : public UiInterface
{
public:
	DaRongLuUi();
	~DaRongLuUi();
	void updateFusionQianData();
	CCNode* openUi();
};
class DarongluUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	friend class DaRongLuUi;
public:
	DarongluUiLayer():_expProgress(NULL){}
	~DarongluUiLayer() {CC_SAFE_DELETE(_expProgress);}
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(DarongluUiLayer, create);
	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	void onCloseBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onRongLianPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onShowQuliatyPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onPuTongPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onZhuoYuePressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onWanMeiPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onYouXiuPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onWuPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onShiShiPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onHelpBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onOkPressedBtn(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	virtual void onExit();
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	//virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	void SetData(CCSprite* node,CCLabelTTF* label,int dw_id,int num);
	virtual void onEnter();
protected:
	void UpdateDisplay();
	void InitIconDisplay();
	void InitFusionUi();
	void RefreshFusionCailiaoUi(int flag);
	void UpdateFusionData();
	void SetJiangYanZhi(int flag);
	void onClickDropEndItem(short nIdx );
	void onDoubleClickDropEndItem(short nIdx );
	void runDegreesEffect();
	void stopDegreeEffect();
	void SetFusionQianData();
	unsigned int setEquipFusionResultDate(s_net_cmd* cmd);
	void noticeRecharge();
	void requestEquipFusionDegrees(float dt);
	void RefreshEquipFusionDegrees(float dt);
	unsigned int setEquipFusionDegreesResultData(s_net_cmd* cmd);
	void GetEquipQuality();
	void CalcEquipJingYanZhi(); //计算经验值
	void CalcAllJingYanZhi(int nIdx); //计算所有经验值
	void runFusionEffect();
	void stopFusionEffect(ItemNode* node);
	void setFusionQuality(ItemNode* node,int equipQuality);
	void RefreshItemNodeLayer(float dt);
	void RefreshItemLayer(float dt);
	void RefreshExproBar(float dt);
private:	
	CCNode* _frame;
	FrameSprite* _helpSprite;
	CCNode* _node1;
	CCNode* _node2;
	CCNode* _node3;
	CCNode* _node4;
	CCNode* _node5;
	CCNode* _node6;
	CCNode* _nodeCailiao;
	CCLabelTTF* _label1;
	CCLabelTTF* _label2;
	CCLabelTTF* _label3;
	CCLabelTTF* _label4;
	CCLabelTTF* _label5;
	CCLabelTTF* _label6;
	CCLabelTTF* _label7;
	CCLabelTTF* _labelSelectName;
	CCSprite* _spriteBarIn; //进度条填充图
	CCSprite* _spriteBarOut;//进度条外框
	CCSprite* _spriteJingYanZhi; // X1 X2 ...X10
	FrameSprite* _spriteMenu; //选择菜单栏
	CCControlButton* _btnNull;
	CCControlButton* _btnYouXiu;
	CCControlButton* _btnZhuoYue;
	CCControlButton* _btnWanMei;
	CCControlButton* _btnShiShi;
	CCControlButton* _btnChuanShuo;
	CCControlButton* _btnRongLian;
	float _time_spase;
	int typeIndex;	
protected:
	std::vector<DaRongLuIconInfo> _daRongLuIconVec;
	std::vector<DaRongLuCailiaoInfo> _daRongLuCailiaoVec;
	std::map<unsigned int, float> _daRongLuQualityVec;	
	std::vector<DarongluIndexListData> _darongIndexList;
	std::vector<DarongluGetData> itemIdLists;
	std::map<short, f_item*> _items;
	std::map<short, f_item*> _newItems;
	CCNode *_contentLayer;
	CCScrollView *_scrollView;
	CCNode *_container;	
	ItemMarixLayer* itemFusionLayer;
	unsigned int dwAddExp;
	ProgressBar* _expProgress;  //装备融合经验条
	CCSprite* _degreeSpriteEffect;
	AnimationCache::AnimateList _anilist;
};

#endif //FRAGMENTCOMPOUNDUI_H

