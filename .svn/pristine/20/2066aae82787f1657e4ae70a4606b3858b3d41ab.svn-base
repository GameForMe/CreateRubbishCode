#include "BSpriteReader.h"
//#include "FileInputStream.h"
#include "BSAnimate.h"

BSPriteReader::BSPriteReader( const char *fileName, const std::string &name, eAnimsType animType, AnimationCache::AnimateList *animList, int nValue1, int nValue2 )
	: _fileName(fileName)
	, _name(name)
	, _animType(animType)
	, _nValue1(nValue1)
	, _nValue2(nValue2)
	,nRetainCnt(0)
	,mbCB(LoadedCallback())
{
	if(animList)
		addAnimatList(*animList);
}

BSPriteReader::~BSPriteReader()
{

	std::for_each(m_animate_list_array.begin(),
		m_animate_list_array.end(),
		[](AnimationCache::AnimateList& list)
	{
		std::for_each(list.begin(),
						list.end(),
						[](BSAnimate* one)
						{
						  if(one) one->release();
						});
	});
}

void BSPriteReader::addAnimatList( AnimationCache::AnimateList &animList )
{
	std::for_each(animList.begin(),
				  animList.end(),
				  [](BSAnimate* one)
	{
		if(one) one->retain();
	});

	m_animate_list_array.push_back(animList);
}

void BSPriteReader::setparma( const char *fileName, const std::string &name, eAnimsType animType, AnimationCache::AnimateList *animList, int nValue1, int nValue2 )
{
	_fileName = fileName;
	_name = name;
	_animType = animType;
	_nValue1 = nValue1;
	_nValue2 = nValue2;

	if(animList)
		addAnimatList(*animList);
}
