/**************************************************************************************/
//   Copyright (C) 2009-2012 Marilyn Dafa
//   This file is part of the "Overdrive2D Engine".
//   For conditions of distribution and use, see copyright notice in config.h
/**************************************************************************************/
#ifndef RESPONSE_H_INCLUDE
#define RESPONSE_H_INCLUDE
#include <string>
#include <map>
#include <vector>
#include <deque>
enum e_http_state
{
	HS_IDLE , 
	HS_REQ_STARTED , 
	HS_REQ_SENT
};

enum e_http_struct
{
	HS_STATUSLINE,
	HS_HEADERS,
	HS_BODY,
	HS_CHUNKLEN,
	HS_CHUNKEND,
	HS_TRAILERS,
	HS_COMPLETE
};


class c_response
{
private:
	std::map<std::string,std::string> m_headers;
	std::string m_method;
	std::string	m_version_str;
	std::string m_line_buf;
	std::string m_header_accum;
	std::string m_reason;
	std::string m_localfile;
	e_http_struct m_state;
	FILE* m_file;
	int m_version;
	int m_status;
	int m_bytes_read;
	int m_chunk_left;
	int m_length;	
	bool	m_chunked;
	bool	m_will_close;
public:
	c_response(const char* method_, const char* localfile_);
	~c_response();
public:
	inline bool is_completed() const { return m_state == HS_COMPLETE; }
	inline bool is_closed() const { return m_will_close; }
public:
	int pump(const unsigned char* data_, int datasz_);
	void close();
private:
	const char* _get_header(const char* name_) const;
	void _flush_header();
	bool _process_status_line(std::string const& line_);
	void _process_header_line(std::string const& line_);
	void _process_trailer_line(std::string const& line_);
	void _process_chunk_lenline(std::string const& line_);
	int _process_data_chunked(const unsigned char* data_, int count_);
	int _process_data_non_chunked(const unsigned char* data_, int count_);
	void _begin_body();
	bool _check_close();
	void _finish();
};

#endif