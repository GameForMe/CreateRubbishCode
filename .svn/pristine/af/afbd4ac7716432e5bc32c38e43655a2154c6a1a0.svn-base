#include "QuickConfig.h"

#include	<boost/lexical_cast.hpp>

using namespace std;
void str_erase(string& input,string const& val)
{
	while (1)
	{
		string::size_type pos = input.find(val);
		if (pos != string::npos)
		{
			input.erase(pos);
		}
		else
			break;
	}
}

QuickConfig::QuickConfig()
	:reader(NULL)
{
	//std::string cfgFile = CCFileUtils::sharedFileUtils()->getWritablePath() + "ClientConfig.cfg";
	//_cfg = new CFGReader2(cfgFile.c_str());
}

QuickConfig::~QuickConfig()
{
	SAFE_DELETE(reader);
}

std::string QuickConfig::getString( const std::string& section_, const std::string& key_, const std::string& defstr_ )const
{
	CC_ASSERT(reader);
	return reader->get_profile_string(section_, key_, defstr_);
}

int QuickConfig::getInt( const std::string& section_, const std::string& key_, int def_ )const
{
	CC_ASSERT(reader);

	std::string _default = boost::lexical_cast<std::string>(def_);
	std::string tmp =  reader->get_profile_string(section_, key_, _default).c_str();
	//回车和换行都填充为0.不然会出现bad_cast
	str_erase(tmp,"\r");
	str_erase(tmp,"\n");

	return boost::lexical_cast<int>(tmp);
}

float QuickConfig::getFloat( const std::string& section_, const std::string& key_, float def_ )const
{
	CC_ASSERT(reader);

	std::string _default = boost::lexical_cast<std::string>(def_);
	std::string tmp =  reader->get_profile_string(section_, key_, _default);
	
	//回车和换行都填充为0.不然会出现bad_cast
	str_erase(tmp,"\r");
	str_erase(tmp,"\n");

	return boost::lexical_cast<float>(tmp);
}

void QuickConfig::load( std::string const& file )
{
#if (CC_TARGET_PLATFORM != CC_PLATFORM_ANDROID)
	std::string cfgFile = CCFileUtils::sharedFileUtils()->fullPathForFilename(file.c_str());
#else
	std::string cfgFile = CCFileUtils::sharedFileUtils()->getWritablePath() + file;
#endif
	SAFE_DELETE(reader);

	reader = new CFGReader2(cfgFile.c_str());
}
