#ifndef TEAMUI_H__
#define TEAMUI_H__

#include "cocos2d.h"
#include "cocos-ext.h"
#include "UiInterface.h"
#include "NormalLayer.h"
#include <vector>

class TeamUiPanel;
class TeamUi : public UiInterface
{
public:
	TeamUi(){}
	~TeamUi(){}
	virtual CCNode *openUi();
	TeamUiPanel *getUiLayer();
};

class TeammateHeadView;
class CoverButton;
class RadioMutex;
class RadioButton;
class LabelEx;
class ListControl;
struct TeammateStateRefresh;
struct tagTeammateData;
struct ChangeFilterSettingTargetType;
struct RefreshTeamFilter;
struct team_target_change;
struct match_state_change;
struct refresh_team_list;
class TeammateMenu;
struct CreateTeamSucc;

class TeamUiPanel: public NormalLayer
{
public:
	static TeamUiPanel* createFromCCBI(const char* szFile,CCObject* pOwner=NULL,UiInterface* holder=NULL);
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(TeamUiPanel, create);

	TeamUiPanel();
	~TeamUiPanel();

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName){return NULL;}
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	void refreshNum(int nMin,int nMax);
	void refreshFilter();
	void refreshTeammate();
	void refreshPanelState();

	virtual void close();

	virtual void onEnter();
	virtual void onExit();
private:
	void onSetting(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onClickPlayer(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onInvite(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onForbid(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onTrans(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onCreate(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onClose(CCObject * pSender, CCControlEvent pCCControlEvent);
	//menu
	void onAddFriend(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onAssignLeader(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onKick(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onProfile(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onPrivateTalk(CCObject * pSender, CCControlEvent pCCControlEvent);

	void onLeave(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onDismiss(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onMatch(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onCancelMatch(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onBroadcast(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onTeamInfo(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onRequestList(CCObject * pSender, CCControlEvent pCCControlEvent);

	void initTeammateHead();

	void onEnventTeamStateChange(TeammateStateRefresh* pEvent);
	void onEventChangeFilterSettingTargetType(ChangeFilterSettingTargetType* pEvent);
	void onEventCreateTeamSucc(CreateTeamSucc* pEvent);
	void on_event_team_target_change(team_target_change* event);
	void on_event_match_state_change(match_state_change* event);
	void on_event_refresh_team_list(refresh_team_list* event);

	void setEmpty(size_t nIndex,bool bForbid);
	void setTeammate(size_t nViewIndex,tagTeammateData const& data);
	void setLpToPos(size_t pos);

	void updateTargetString(/*std::string const& target*/);
	void closeMenu();
	void doBeforeMenuClose();

	void onMsgboxOK();
	void check_red_point();
	void refresh_list();
	void on_sure_dismiss_team();


private:
	CCLabelTTF*		mpNum;
	CCLabelTTF*     mpTarget;
	CCLabelTTF*		mpLv;
	CCLabelTTF*		mpClass;
	CCLabelTTF*		mpShoes;

	CoverButton*	mpInviteBtn;
	CoverButton*	mpForbidBtn;
	CCLabelBMFont*	mpForbidText;

	CoverButton*	mpFlyBtn;	// 寻找队长
	
	//CCNode*			mpSettingBtn;
	TeammateMenu*		mpMenu;

	CCLabelBMFont*	mpCreateText;

	std::vector<CCNode*>			mpHeadRoot;
	std::vector<TeammateHeadView*>		mpHeads;

	unsigned int			mdwSelTeammateIdD;

	bool						mbCreateLock;

	CCSprite*	mpRedFlag;	//队长旗子

	bool						mbClosed;

	// ------------------------------------------
	RadioMutex*				m_mutex_button;
	RadioButton*			m_apply_list_button;
	CCControlButton*		m_dismiss_button;
	CoverButton*			m_leave_button;
	CCControlButton*		m_match_button;
	CCControlButton*		m_cancel_match_button;
	LabelEx*				m_target_text;
	ListControl*			m_list;
	CCSprite*				m_red_point;
	CCNode*					m_no_apply_cue;
	CCNode*					m_list_node;
	CCNode*					m_team_node;
	
};
#endif // TEAMUI_H__
