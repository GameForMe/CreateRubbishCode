#ifndef TASKSAMPLEUI_H
#define TASKSAMPLEUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "Signals.h"
#include "TouchSprite.h"
#include "BaseDefine.h"
#include "TeamMgr.h"
#include "VerticalList.h"
#include "ListItem.h"
#include "AnimationCache.h"
#include "GameActionNode.h"
#include <vector>
//#include "ActionNode.h"
using namespace cocos2d;
using namespace cocos2d::extension;

#define GROUPMEMBERHEADWIDTH		50
#define GROUPMEMBERHEADHEIGHT	50
#define GROUPMEMBERLINESPACE	4
#define TASKTRACEITEMSPACE 20
class TargetTouchItem
{
	CCNode *  m_node;
	map<std::string,LabelFT *> m_labels;//存储label
    vector<CCNode *> m_nodes;
	CCSize m_size;
	bool isUpDown;  //是否是上下结构
public:
	TargetTouchItem();
	~TargetTouchItem();
	CCNode * getNode(){return m_node;};
	void setPosition(CCPoint pos){ if(m_node)m_node->setPosition(pos);};
	void setVisible(bool visible){if(m_node)m_node->setVisible(visible);};
	CCSize getSize(){return m_node->getContentSize();};
	void addToParent(CCNode * content);
	void removeFromParent();
	void appendText(string str,char * key=NULL,ccColor3B color=ccc3(255,255,255),bool isUD = false);
	void appendSprite(char * iconName,float scale=1.0,bool isUD = false);
	void updateDisplay();
	void updateDisplayByUpAndDown();
	void removeAll();
	void updateText( char * key,string _value, bool isUD = false);
	void updateTextAndColor( char * key,string _value,ccColor3B pColor, bool isUD = false);
	void runEffect(bool effect);
	void showHand(bool show);
	c_signal<void> signalItem;
	AnimationCache::AnimateList m_anims;
	CCSprite * m_effectSprite;
	GameActionNode * m_hand;
	
};
	 
enum questState
{
	NOACCEPT = 0,
	ACCEPTING = 1,
	Q_COMPLETE = 2
};
enum groupState
{
	EGS_Null,		//无队
	EGS_Team,		//有队
	EGS_TeamLeader,	//队长
};
enum QuestType
{
	Quest_Type_Main,//主线
	Quest_Type_BiQi,//比奇任务
	Quest_Type_Daily,//日常
	Quest_Type_Sub,//支线
	Quest_Type_Huan,//环任务
	Quest_Type_XuanShang,//悬赏任务
	Quest_Type_NULL,
};
class TaskTraceItem : public ListItem
{
public:
	enum eTaskTraceZorder
	{ 
		TTZ_Bottom = 0,
		TTZ_LabelTTF,
		TTZ_ended,
	};

	enum eTaskTraceLabelTag
	{ 
		TTLT_TITLE = 0, 
		TTLT_INFO,
		TTLT_EFFECT,
		TTLT_BG = 999,

	};
	TaskTraceItem()
	{
		id = INVALID_SHORT_ID;
		_questType = Quest_Type_NULL;
		viewHeight = 0.0f;
		_wenzidiSprite = NULL;
		_title = "";
		_canAccpet = true;
	}
	virtual CCSize getContentSize();
	static TaskTraceItem *create(const char *title, const char *info, float viewWidth,questState state,bool isMain = false,bool isAccpet = true);
	void init(const char *title, const char *info, float viewWidth,questState state,bool isMain,bool isAccpet);
	void setTitle(const char *title,questState state, bool bCanAccpet = true,bool isMain = false);
	void setInfo(const char *info , questState state);
	void setHighLight(bool isHighLight);
	void setId(unsigned short Id)
	{
		id = Id;
	}
	void setQuestType(QuestType questType)
	{
		_questType = questType;
	}
	void setViewHeight(float ViewHeight)
	{
		viewHeight = ViewHeight;
	}
	void setInfo(std::string Info)
	{
		info = Info;
	}
	const unsigned short getId()
	{
		return id;
	}
	const QuestType getQuestType()
	{
		return _questType;
	}
	const float getViewHeight()
	{
		return viewHeight;
	}
	const std::string getInfo()
	{
		return info;
	}
	const std::string getTitle()
	{
		return _title;
	}
	const bool getCanAccept()
	{
		return _canAccpet;
	}
	CCSprite* getDiSprite()
	{
		return _wenzidiSprite;
	}
	void setIsRunEffect(bool tag)
	{
		isRunEffect = tag;
	}
	void setTaskSE(bool isBegan);						//显示特效
private:
	void updateContent(CCSprite* sprite);
	void update_title_color(LabelFT* label,int state);
private:
	bool isRunEffect;
	unsigned short id;
	QuestType _questType;
	float viewHeight;
	std::string info;
	CCSize _contentSize;
	CCSprite *_wenzidiSprite;
	std::string _title;
	bool _canAccpet;
};

/*struct node
{
	bool operator()(const TaskTraceItem &t1,const TaskTraceItem &t2)
	{
		return t1.getId()>t2.getId();
	}
};
*/
class GroupPlayerItem
{
	enum eGroupItemTag
	{
		GIT_BG = 0,
		GIT_Name,
		GIT_Hp,
		GIT_Head,
		GIT_EmptySlot,	
		GIT_NotEmpty =99,
	};
public:
	GroupPlayerItem();
	~GroupPlayerItem();
	unsigned int getPlayerId() const  { return _data.uRoleID; }
	void setData(const tagTeammateData * data);
	float getContentHeight();
	void addToParent(CCNode *parent);
	void removeFromParent();
	void setHp(int cur, int max);
	void setName(const std::string &name,bool bOffline= true);
	void setPosition(const CCPoint &pos);
	CCPoint getPosition();
	void showTeamHead(const char *name,bool isOnline);
	void setTeamLeaderFlag(unsigned int playerId);
	void clearTeamLeaderFlag();
	void setMatch(bool is_match);

	void init();
protected:
	CCProgressTimer *initHProgressBar(CCSprite * sprite);
	void refreshClass();

	void setEmpty(bool bEmpty);
private:
	tagTeammateData _data;
	CCNode *_node;

	CCSprite*		mpClass;
	CCLabelTTF*	mpName;
	LabelFT*    mpNameft;
	CCProgressTimer*		mpHpBar;
	CCNode*		mpNotEmpty;
	CCNode*		mpEmpty;
	LabelFT*    mpMatchCue;
	CCSprite*	mpAddPic;

	CCSprite *_teamLeaderSprite;
};

class ListControl;
struct CreateTeamSucc;
struct ChangeMonsterName;
class TaskTraceUi : public CCLayer
{
	friend class TaskTraceUiLayer;
	enum eTraceUiState { TUS_TaskTrack, TUS_Group, TUS_SENode = 2 };
	enum eTaskID{
		TaskID_Zhi_Min   = 101,			//支线最小ID
		TaskID_Zhi_Max   = 500,			//支线最大ID
		TaskID_JunXu_Min = 501,			//军需最小ID
		TaskID_JunXu_Max = 799,			//军需最大ID
		TaskID_BiQi_Min  = 800,         //比奇任务最小ID
		TaskID_BiQi_Max  = 999,         //比起任务最大ID
		TaskID_Main_Min  = 1000,		//主线最小ID
		TaskID_Main_Max  = 2000,		//主线最大ID
		TaskID_Huan_Min = 2001,   //环任务最小ID
		TaskID_Huan_Max = 3000, //环任务最大ID
		TaskID_Xunshang_Min = 10000,   //悬赏最小ID
		TaskID_Xunshang_Max = 10080   //悬赏最大ID
	};
	enum eTianLaoTag//勇闯天牢 界面显示对应ID
	{
		TLTAG_BOSSBG      = 1001,
		TLTAG_ITEMBG      = 1002,
		TLTAG_GONEXTBG	  = 1003,
		TLTAG_COMMON_INFO = 10001,//显示具体信息的tag值
	};
public:
	~TaskTraceUi();

	CREATE_FUNC(TaskTraceUi);
	bool init();
	virtual void onEnter();
	virtual void onExit();
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
/*	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);*/
	void appendTask(unsigned short taskId, const char *title, const char *info, int num, bool needReset,bool CanAccpet = true);//任务列表
	void appendTask(unsigned short taskId,const char *title,const char* info,int currentNum,int totalNum, bool needReset, bool CanAccpet = true);//悬赏任务列表
	void modifyTaskInfo(unsigned short taskId, int num, bool finished);
	//void insertText(unsigned int index, const char *str);
	void addGroupMember(unsigned int playerId);
	void removeGroupMember(unsigned int playerId);
	void removeAllMember();
	void modifyMemberData(const tagTeammateData * data);
	void erase(unsigned short taskId);
	void clear();
	void onTouchTaskLabel(TouchSprite *, bool);
	void onTouchGroupLable(TouchSprite *, bool);
	void updateGroupList();

	void refreshAllGroupList();

	void updateTeamLeaderQiZhi();
	void showUi(bool show);
	void froceShowUi(bool show);
	void hideUi(bool show);
	bool ShowState()
	{
		return _showState;
	}
	inline void setTaskUiForceHide(bool isForceHide){_isForceHide = isForceHide;};
	inline bool getIsForceHide(){return _isForceHide;}
	void showFightRecord(bool isShow = false);
	void resetScrollPosition();
	//new player guide
	CCRect getGuidePos();
	bool getGuidePos( unsigned short taskID, CCRect& rc );

	//检查列表内是否存在主线任务
	bool HasMainQuest();

	AnimationCache::AnimateList& getAnimate(){return _anims;}

//	void setTaskSE(bool hasBegan);
	void initGroupState();
	void updateGroupState(int state);
	void changeTaskUIInFuben(const char* title, bool isChange, bool isChangeState = true);

	void changeShowTianlaoInfo(bool isKillBoss = false);//显示勇闯天牢的活动信息
	void changeTianlaoBoss(bool isKillBoss);
	void changeTianlaoItemNums();
	void changeTianlaoCanGoNext();
	void onTouchTianlaoItem(eTianLaoTag tlTag);

	void clearMemberGroup();
	void updateTaskList(bool needReset);

	void appendTargetItem(TargetTouchItem * item);
	void showTargetItems(bool show);
	void removeTargetItems();

	void appendShowNode(CCNode* pNode);
	void removeShowNodes();
	void getQuestIdNameList(std::map<unsigned short, string>& id_name_map);
	inline std::list<TaskTraceItem*>& getQuestItemList(){return _tasks;}

SIGNALS:
	c_signal<void, unsigned short> signalSelectItem;
protected:
	void onHideBtnPressed();
	void onShowBtnPressed();

	void hideFinished();
	TaskTraceItem getItemUnderPoint(const CCPoint &pos);
	bool getMemberUnderPoint(const CCPoint &pos, unsigned int& teammateID);
	void setUiState(eTraceUiState state);
/*	void getTouchShowState(const CCPoint &pos);*/
private:
	GroupPlayerItem *getGroupMemberItem(unsigned int roleId);
	
	void initGroupSlotIfNess();
//	ActionNode* getTaskAcNode();						//创建任务特效
	//void insertTask(unsigned int index, const TaskInfo &task);
	void onCreateTeam(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onQuickTeam(CCObject * pSender, CCControlEvent pCCControlEvent);

	void onTeamStateChange(CreateTeamSucc* pEvent);
	void on_sure_create_team();
protected:
	CCScrollView *_scrollView;
	CCSprite *_frame;
	CCSprite *_taskselect;
//	ActionNode* _taskAcNode;							//任务提示特效
	bool m_bIsSERuning;									//是否有主线任务特效正在执行
	bool m_bNeedSE;										//是否需要显示主线任务特效
	CCNode *_taskContainer;
	CCNode *_groupContainer;
	CCControlButton* mpCreateTeamBtn;						//创建队伍按钮
	CCControlButton* mpMatchTeamBtn;						//快捷组队按钮

	CCControlButton *_showBtn;
	CCControlButton *_hideBtn;
	CCLayer *_contentLayer;
	std::list<TaskTraceItem*> _tasks; //悬赏任务列表
	//VerticalList<TaskTraceItem>* _tasksTask;//任务列表
	typedef std::vector<GroupPlayerItem*> GroupItemList;

	std::list<TargetTouchItem*> _targetTouchItems;//副本可点击列表

	std::vector<CCNode*> _vecShowNode;


	GroupItemList _groupMembers;
	CCPoint _beginTouch;
	eTraceUiState _trackUiState;
	TouchSprite *_taskSprite;
	TouchSprite *_groupSprite;
	CCSprite* _flagSprite;
	CCSprite* _targetSprite;//任务目标，坚持到时间结束之类的
	const static int HIDE_SPEED = 600;
	const static int INFO_STR_LEN = 128;
	bool _showState;
	bool _isShowFightRecord;  //是否显示战报按钮
	AnimationCache::AnimateList _anims;

	int _xuanshangCurrentNum;
	int _xuanshangFinishNum;
	
	bool _isForceHide;
	TaskTraceItem *_curTouchedItem;
	bool _isBegined;

	//勇闯天牢显示信息
	bool _isInTLInstance;
};

class TaskTraceUiLayer 
	: public CCLayer
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCBMemberVariableAssigner
	, public cocos2d::extension::CCNodeLoaderListener
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(TaskTraceUiLayer, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
	virtual void onExit();

	void onHideBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onShowBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	
private:
	std::set<std::string> _plist;					//保存特效资源plist名称
};

class TaskTraceUiLoader : public cocos2d::extension::CCLayerLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(TaskTraceUiLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(TaskTraceUiLayer);
};


#endif //TASKSAMPLEUI_H