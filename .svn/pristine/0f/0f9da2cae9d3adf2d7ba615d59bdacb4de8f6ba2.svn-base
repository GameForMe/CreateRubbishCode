#ifndef ITEMNODE_H
#define ITEMNODE_H

#include "cocos2d.h"
#include "cocos-ext.h"
#include "BaseDefine.h"
#include "ItemDefine.h"

#include "item.h"

using namespace cocos2d;
using namespace cocos2d::extension;

class f_item;
class f_equipment;
struct tagEquipViewInfo;
struct tagEquipSpec;
#include "GameActionNode.h"


#define ITEMNODE_CONTENTWIDTH 54
#define ITEMNODE_CONTENTHEIGHT 54

enum eVisualPattern					//itemNode特殊显示用		【Ji：】
{
	IT_GongfaNoarmal,				//功法普通  (绿色)
	IT_GongfaBlue,					//功法蓝色
	IT_GongfaPurple,				//功法紫色
	IT_GongfaGold,					//功法金色
	IT_GongfaOrange,				//功法橘色
	IT_GongfaFusion,				//功法融合
	IT_GongfaDefault,				//功法缺省,扩展用
};
enum professionTag
{
	PROFESSION0,  //NULL
	PROFESSION1, //战士
	PROFESSION2, //法师
	PROFESSION3, //道士
	PROFESSION4, //战士套装
	PROFESSION5, //法师套装
	PROFESSION6, //道士套装
	PROFESSION7, //战士散件
	PROFESSION8, //法师散件
	PROFESSION9, //道士散件
	PROFESSION10,//通用
	PROFESSION11,//通用套件
	PROFESSION12 //通用散件
};

struct GongfaLockStateUpdate;

class ItemNode : public CCNode, public CCTouchDelegate
{
public:
	enum ItemTag
	{
		IT_MAIN = 0,
		IT_LABEL,
		IT_LEVELLABEL,
		IT_LOCK,
		IT_Bind, //绑定;
		IT_SinEffect,  //装备特效;
		IT_QualityBox, //品质框;
		IT_LessBtn,	//减少按钮
		IT_Select,	//选择
		IT_GongfaSurround,			//功法环绕特效
		IT_EStar,					//装备显示星星tag
		IT_Compose = 15,					//合成碎片
		IT_UpDown,					//上下箭头
		IT_Meng,					//蒙版
		IT_LEVELUP,					//可升级
		IT_NoSale,					//不能出售
		IT_StrengLabel,
		IT_IsposySprite,
		IT_AddNewItem,
		IT_BottomDes,
		IT_GongFaLevel,
		IT_GongFaEffect,
		IT_GongFaBg,
		IT_GongfaLock,
	};
public:
	ItemNode();
	~ItemNode();

	CREATE_FUNC(ItemNode);
	bool init();
	void initWithItem( f_item *item,bool isShowLock = true);
	void initWithItem(const tagEquipViewInfo *equipInfo);
	void setBlank();
	void setBlock();
	void setIsEquipUI(eWroldChildTag euipui){ _isEquipTipui = euipui;}
	void clearBagItem();
	void VisibleBlock(bool bVisible);
	void setLock(bool lock);
	std::string getLockIcon();
	void setSelect(bool bSet);
	void setDataId(unsigned int id, unsigned char EQuality = 0);
	unsigned int GetDataId()
	{
		return _dataId;
	}

	unsigned int GetTypeId(){
		return m_dwTypeId;
	}
	void setNum(int num, bool bSkipSame = true,bool bmillonShow = false);
	void setNum(int num, int totalNum , bool bSkipSame = true);//只给融合粉使用
	int getNum()
	{
		return _num;
	}
	int getTotalNum()
	{
		return _totalNum;
	}
	void setLevel(int lv); //针对功法;
	void showGongFaLevel(bool _show);//功法level第二种显示
	void showGongFaEffect(bool _show);//显示装备上攻法的特效
	void showGongFaBg(bool _show);//显示功法的背景
	void showBottomDes(std::string des);//显示功法底部的加成描述
	void setBind(bool bind/* = true*/,bool is_gongfa =false);
	void setCompose(unsigned int ntypeid,int num,bool bsame = true);
	void copy(ItemNode &node);
	void setBlankSpriteFrame(const std::string &frameName) { _blankSpriteFrame = frameName; }
	std::string getBlankSpriteFrame() const { return _blankSpriteFrame; } 
	void setBlockSpriteFrameName(const std::string &frameName) { _blockSpriteFrame = frameName; }
	void runAnimation(const char *animName);
	void runAddAnimation(const char *animName);
	void stopAnimation();
	void runSpecialAnima(int id, const char *animName);
	void removeQualityBox();								//去掉装备品质框
	void changeItemNumPositon();
	void changeShortCutItemNumPositon();
	void showReciveIcon(const char *spritename);
	void removeReciveIcon();
	void runMoveAction(const CCPoint &start, const CCPoint &end,int index,bool mulitpe);
	CCSprite* getItemSprite(unsigned int id);
	void animCallback(CCNode* node);
	void FadeItemNode( float dt );
	void SetToDropDragItemNode()
	{
		m_bIsDropDragItem = true;
	}
	void SetShowNum(bool bSet);
	void SetLessBtn(bool bSet);	//设置或取消减少按钮
	void onLessBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);	//减少按钮触发事件
	void showGongfaSE(eVisualPattern seType);				//播放功法特效		【J】
	void showGongfaSE(std::string effect);
	
	void getSurroundSE(const char* seName, float fScale = 1.0f);				//获取环绕特效		【J】
	void enableSurroundSE();							//激活ItemNode环绕特效(当itemNode被隐藏然后再被显示的时候用来激活环绕特效)
	void setEQuality(unsigned char equipQuality);		//设置node品质框	【J】
	
	int GetQuality(){return m_cEQuality;}

	void set_quanlity_modification(unsigned char val){m_quanlit_modification = val;}
	unsigned char get_modifiaction_quanlity()const{return m_quanlit_modification;}

	void setnewQualityBG(unsigned int itemTypeid,bool bFrame);		//为每个物品增加品质背景显示
	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);

	virtual void onEnter();
	virtual void onExit();

	void setClickable(bool isClickable, int touchPriority = -1);				//设置可点击状态
	void setTouchPriority(int touchPriority);				//设置触摸事件响应优先级
	void showEquipConsolidatedSE(int conLv);			//播放装备强化特效	(为了扩展,外部可调用,例如读表的强化等级)
	void hideItemOpBtn();								//屏蔽tips操作按钮
	void hideItemOpBtnEx();
	void unlockVirtualTouchEnded();						//开启虚拟命中(itemNode生效一次后在touchended里毙掉)	2014.12.24【J】
	void setMainVisible(bool isVisible);
	void removeSurroundSE();

	void setItemID(INT64 id);
	void setConType(int type);
	int getConType();
	INT64 getItemID();
	INT64 getFitemID();
	void setEquipStarLevel(int sLv);			//设置装备星级
	void setEquipItemEffect( f_item *item,EItemConType conType );//设置优劣装备特效
	void setStorageItemEffect(f_equipment *equip);
	int getEquipNaiJiuLi(f_equipment *equip);                //获取装备当前的耐久力
	void removeEquipItemEffect();
	void removeEffectLayer();
	void removeEquipLevelUpEffect();
	void setEquipItemLevelUpEffect();
	void setQualityFrameShowState(bool isShow){m_bIsShowQualityFrame = isShow;}

	void setItemSaleEffect( f_item *item = NULL,bool isShow = true);//设置物品是否可出售特效
	CCSprite * getItemsprite(){return m_pItemSprite;}
	void stBlockState(bool state){_block = state;}
	bool GetButtonState(){return m_pLessBtn != NULL;}
	void setShowPosyUpstar(bool value);
	void setInlayButtonShow(bool state);
	void setDelayButtonShow(bool state);
	void ShowNumText(bool value);
	void hideBlank(bool value);
	void hideCompose(bool value);
	void SetItemData();
	f_item* getItemPtr()
	{
		if (_cacheType == 0)
		{
			return NULL;
		}

		return _cacheType==1?&_cacheItem:&_cacheEquip;
	}
	void setItemSpriteScale(float scale);//缩小item图标

	void set_guide_to_buy(bool val){_guide_to_buy = val;}

	void on_event_bind_state_update(GongfaLockStateUpdate* evt);

	void set_need_show_lock(bool val){m_need_show_lock=  val;}
	void set_gf_lock(bool val);
	
	void setScrollViewRect(CCScrollView* pView);
private:
	void removeEStar();
	void showItemLv(bool isShowing);			//设置物品等级显示
private:
	bool m_need_show_lock;		//是否需要显示bind

	bool _block;
	bool m_bHasStar;							//是否为包含星级的装备
	bool m_bIsClickable;						//是否开启点击事件
	int m_touchPriority;                          //ItemNode的点击事件的优先级
	bool m_bIsShowItemOpBtn;					//是否显示itemtip的操作按钮
	bool m_showInlayButton; //是否显示镶嵌按钮
	bool m_showDelayButton; //是否显示摘下按钮
	bool m_bIsShowEquipSelf;					//是否为显示自身装备
	bool m_bIsFakeScore;						//虚假命中,然后显示tips
	unsigned int _dataId;
	int _num;
	int _totalNum;
	int _lv;
	float m_fEStarXPos;							//用来存放装备星级星星x坐标
	unsigned char m_cEQuality;					//如果是装备,保存装备品质
	unsigned char m_quanlit_modification;		//品质的修正
	bool _lock;
	std::string _blankSpriteFrame;
	std::string _blockSpriteFrame;
	std::string m_cQidx;						//用来保存装备品质背景等级
	CCSprite* _sprite;
	CCSprite* m_pItemSprite;
	CCSprite *_qualitybox;
	CCSprite *_reciveIcon;
	CCControlButton* m_pLessBtn;

	bool			_guide_to_buy;
	//f_item* m_fItem;							//保存物品信息

	f_item			_cacheItem;
	f_equipment		_cacheEquip;
	int				_cacheType;	//0没有 1物品 2装备

	unsigned int m_dwTypeId;					//保存物品种类id
	CCPoint _tchPoint;							//点击坐标
	bool _touchScroll;
	bool m_bShowNum;	//强制显示num 也就是等于0也显示
	bool m_bIsShowQualityFrame;
	bool m_bIsDropDragItem;	//[bing] 拖拽物因为只需要ICON图 否则会连同背景框都拖拽 所以区分一下吧
	int m_ConType;
	INT64 m_ItemID;

	LabelFT *_strengLabel;//强化图片标志
	CCSprite *_isposySprite[MAX_EQUIPHOLE_NUM];//是否镶嵌

	GameActionNode* _levelUpAcNode;	
	std::string m_levelUpSEName;
	eWroldChildTag _isEquipTipui;
	bool m_hide_equip_opt_button;

	CCRect m_rScrollViewRect;//屏幕坐标
	bool m_bIsAddToScrollView;
};


#endif //ITEMNODE_H