#ifndef CREATEROLEUI_H
#define CREATEROLEUI_H

#include "cocos2d.h"
#include "cocos-ext.h"
using namespace cocos2d;
using namespace cocos2d::extension;

#include "Signals.h"
#include "BaseDefine.h"
#include "AnimationCache.h"

class TouchSprite;
class GameActionNode;
#define MAX_NAME_WORD  6//名字字符最大数目
class CreateRoleUi
	: public CCLayer
	, public CCTextFieldDelegate
	, public cocos2d::extension::CCBSelectorResolver
	, public cocos2d::extension::CCNodeLoaderListener
{
	enum eNodeTag
	{
		NT_WarriorHeadNan = 0,
		NT_WarriorHeadNv = 1,
		NT_MageHeadNan = 2,
		NT_MageHeadNv = 3,
		NT_TaoistHeadNan = 4,
		NT_TaoistHeadNv = 5,
		NT_WarriroLab = 6,
		NT_MageLab =7,
		NT_TaoistLab = 8,
		NT_DescText = 9,
		NT_RolePhoto = 10,
		NT_NameInput = 11,
		NT_SelHead = 12,
		NT_InputNode = 16,
		NT_BeginBtn = 17,
	};

public:
	CreateRoleUi();
	~CreateRoleUi();
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(CreateRoleUi, create);

	virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	//当用户启动虚拟键盘是的回调
	virtual bool onTextFieldAttachWithIME(CCTextFieldTTF *pSender);
	//当用户进行输入是的回调函数
	virtual bool onTextFieldInsertText(CCTextFieldTTF *pSender, const char* text, int nLen);
	//当用户关闭虚拟键盘时的回调
	virtual bool onTextFieldDetachWithIME(CCTextFieldTTF * sender);
	//当用户删除文字时的回调
	virtual bool onTextFieldDeleteBackward(CCTextFieldTTF *pSender, const char* text, int nLen);

	void onBackBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onRandNameBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
	void onBeginBtnPressed(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);

	eRoleType getSelectRoleType() { return _selRoleType; }
	std::string getRoleName() { return _inputLabel->getString(); }

	void setRoleName(const std::string &roleName);

	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
	virtual void onEnter();
	virtual void onExit();

	void updateBtn(float dt);
	void runSelectAction(float dt);
	void setBtnTouch(bool isToush);
protected:
	void onHeadWarriorNanTouch(TouchSprite*, bool);
	void onHeadWarriorNvTouch(TouchSprite*, bool);
	void onHeadMageNanTouch(TouchSprite*, bool);
	void onHeadMageNvTouch(TouchSprite*, bool);
	void onHeadTaoistNanTouch(TouchSprite*, bool);
	void onHeadTaoistNvTouch(TouchSprite*, bool);

private:
	int selectTemp;
	int lastTemp;
	void setSelectHead(eRoleType tag);
	void setMaskPos(int index);
	void setSelHeadFrame(const std::string &frameName, eNodeTag tag);
	void setPhotoFrame(const std::string &frameName);
	void setTextFrame(const std::string &frameName);
	void setRoleAction( eNodeTag e );
	TouchSprite *getTouchSprite(eNodeTag tag);

public:
	c_signal<void> signalBeginBtnClicked;
	c_signal<void> signalBackBtnClicked;
	c_signal<void> signalRandNameBtnClicked;
private:
	eRoleType _selRoleType;
	CCNode *_inputNode;
	CCTextFieldTTF *_inputLabel;
	GameActionNode* m_RoleFrame;
	GameActionNode* m_BeginAcNode;					//开始按钮特效
	GameActionNode* m_SelectAcNode;				//选择框特效职业
	GameActionNode* m_FireLiftEffect;
	GameActionNode* m_FireRightEffect;
	std::set<std::string> _plist;
	CCSprite* m_pShadow;
	CCSprite* selJobWarrior;
	CCSprite* selJobMage;
	CCSprite* selJobTaoist;
	CCSprite* ding;//鼎
	int m_Sex;//临时性别
	AnimationCache::AnimateList m_pAnimateFireM;
	AnimationCache::AnimateList m_pAnimateFireW;
	int cur_number;
	int cur_world_number;
};

#endif //CREATEROLE_H