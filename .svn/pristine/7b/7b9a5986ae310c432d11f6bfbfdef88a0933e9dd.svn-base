#include "cocos2d.h"
#include "TCPClient.h"
#include "MessageBoxUi.h"
#include "TeamMgr.h"
#include "BaseDefine.h"
#include "PlayerNameMgr.h"
#include "RoleInfoProto.h"
#include "CmdAdapter.h"
PlayerNameMgr::PlayerNameMgr()
{

}
PlayerNameMgr::~PlayerNameMgr()
{
	//TCP_CLIENT->unregister_net_cmd("NET_SIS_get_name_by_nameid" , this , &PlayerNameMgr::onServerGetPlayName);
	m_playerName.clear();
}
void PlayerNameMgr::Init()
{
	//TCP_CLIENT->register_net_cmd("NET_SIS_get_name_by_nameid" , this , &PlayerNameMgr::onServerGetPlayName);
}
/*unsigned int PlayerNameMgr::onServerGetPlayName(s_net_cmd *cmd)
{
	NET_SIS_get_name_by_nameid* msg = (NET_SIS_get_name_by_nameid*)cmd;
	if (msg->bResult)
	{
		//先判断是否已经存在该name id
		PlayerNameMap::iterator iter = m_playerName.find(msg->dwNameID);
		if (iter != m_playerName.end())
		{
			return 0;
		}
		std::string tmpStr;
		char vStr[128];
		memset(vStr, 0, sizeof(char) * 128);
		Utf16ToUtf8(msg->szName, vStr, 128, 0);
		tmpStr.assign(vStr);
		m_playerName.insert(std::make_pair(msg->dwNameID,tmpStr));
	}
	return 0;
}*/
PlayerNameMgr* PlayerNameMgr::getInstance()
{
	static PlayerNameMgr mgr;
	return &mgr;
}
bool PlayerNameMgr::HasPlayerName(unsigned int roleID)
{
	PlayerNameMap::iterator iter = m_playerName.find(roleID);
	if (iter != m_playerName.end())
	{
		return true;
	}
	return false;
}
void PlayerNameMgr::AddPlayerName(unsigned int roleID,std::string roleName)
{
	if (!IS_VALID(roleID))
		return;
	if (HasPlayerName(roleID))
	{
		return;
	}
	m_playerName.insert(std::make_pair(roleID,roleName));
}
bool PlayerNameMgr::GetPlayerNameByID(unsigned int roleID,std::string &strName)
{
	PlayerNameMap::iterator iter = m_playerName.find(roleID);
	if (iter != m_playerName.end())
	{
		strName = iter->second;
		return true;
	}
	return false;
}

bool PlayerNameMgr::HasGuildName(unsigned int guildID)
{
	GuildNameMap::iterator iter = m_guildName.find(guildID);
	if (iter != m_guildName.end())
	{
		return true;
	}
	return false;
}
void PlayerNameMgr::AddGuildName(unsigned int guildID,std::string guildName)
{
	if (!IS_VALID(guildID))
		return;
	if (HasGuildName(guildID))
	{
		return;
	}
	m_guildName.insert(std::make_pair(guildID,guildName));
}
bool PlayerNameMgr::GetGuildNameByID(unsigned int guildID,std::string &strName)
{
	GuildNameMap::iterator iter = m_guildName.find(guildID);
	if (iter != m_guildName.end())
	{
		strName = iter->second;
		return true;
	}
	return false;
}