/**
 *	@file		PlacardManager.cpp
 *	@author		guantiejun
 *	@date		2016/04/10
 *	@version	
 *	@brief		公告说明管理类
 */

#include "PlacardManager.h"
#include "CommonNoticeUi.h"
#include "CommonClient.h"
#include "UiManager.h"
#include "client_common_define.h"

PlacardManager::PlacardManager()
: m_placard_id(0)
{

}

PlacardManager::~PlacardManager()
{
	m_placard_info.clear();
}

void PlacardManager::Init()
{

}

void PlacardManager::Destroy()
{

}

PlacardManager* PlacardManager::getInstance()
{
	static PlacardManager Mgr;
	return &Mgr;
}

bool PlacardManager::init_placard_info()
{
	m_placard_info.clear();

	f_data_set dataset;
	std::list<std::string> fields;
	bool ret =dataset.load("Config/PlacardText.xml","id",&fields);
	CC_ASSERT(ret);

	std::for_each(fields.begin(),fields.end(),[&](std::string const& one)
	{
		PlacardInfo data;
		data.id = dataset.get_int("id",one.c_str(),0);
		data.title = dataset.get_string("title",one.c_str(),0);
		data.text = dataset.get_string("text",one.c_str(),"");

		m_placard_info.push_back(data);
	});

	return true;
}

void PlacardManager::open_placard_node(int id)
{
	CC_ASSERT(id > 0 && id <= (int)m_placard_info.size());

	m_placard_id = id;
	OPEN_UI(COMMON_NOTICE_UI);

	CommonNoticeUiLayer* layer = GET_UI(CommonNoticeUi, COMMON_NOTICE_UI)->getUiLayer();
	if(layer)
	{
		layer->refresh_list(id);
	}
}

void PlacardManager::get_title_and_text(std::string& title, std::string& text)
{
	CC_ASSERT(m_placard_id > 0 && m_placard_id <= (int)m_placard_info.size());
	BOOST_FOREACH(PlacardInfo const& one, m_placard_info)
	{
		if(one.id == m_placard_id)
		{
			title = one.title;
			text = one.text;
			return;
		}
	}
}