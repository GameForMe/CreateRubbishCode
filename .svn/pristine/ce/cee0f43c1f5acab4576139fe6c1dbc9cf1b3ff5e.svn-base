#include "SelectFunctionUi.h"
#include "Base.h"
#include "MovingBackground.h"
#include "ClientUpdate.h"
#include "cocos2d.h"
#include "Login.h"
#include "CfgReader.h"
#include "ClientCfg.h"
#include "tools.h"
#include "UiManager.h"
#include "RoleManager.h"
#include "MasterPrenticeMgr.h"
#include "LocalPlayer.h"
#include "ToolTip.h"
#include "SocialMgr.h"
#include "TeamMgr.h"
#include "RoleManager.h"
#include "ChatUi.h"
#include "RemoteRoleStateMgr.h"
#include "SonghuaUi.h"
#include "ExchangeBusinessMgr.h"
#include "AudioPlayer.h"
#include "GuildMgr.h"
#include "AudioProto.h"
using namespace cocos2d;



SelectFunctionUi::SelectFunctionUi()
{

}

SelectFunctionUi::~SelectFunctionUi()
{

}

CCNode* SelectFunctionUi::openUi()
{
	std::map<std::string, CCNodeLoader*> nodeLoaders;
	nodeLoaders["SelectFunctionUiLayer"] = UiLayerLoader<SelectFunctionUiLayer>::loader();
	CCNode* pNode = readUiFromCCBI("selectFunctionUi", nodeLoaders, _loadSpriteSheet);
	return pNode;
}

void SelectFunctionUi::setPlayerId( int roleId )
{
	 SelectFunctionUiLayer *ui = getUiLayer();
	 if (ui!=NULL)
	 {
		  ui->setPlayerId(roleId);
	 }
}

SelectFunctionUiLayer* SelectFunctionUi::getUiLayer()
{
	return getUiNodeByTag<SelectFunctionUiLayer>(WCT_SelectFunction);
}

void SelectFunctionUi::showShiTu( bool show )
{
	SelectFunctionUiLayer *ui = getUiLayer();
	if (ui!=NULL)
	{
		ui->showShiTu();
	}
}

cocos2d::SEL_MenuHandler SelectFunctionUiLayer::onResolveCCBCCMenuItemSelector( CCObject * pTarget, const char* pSelectorName )
{
	return NULL;
}

cocos2d::extension::SEL_CCControlHandler SelectFunctionUiLayer::onResolveCCBCCControlSelector( CCObject * pTarget, const char* pSelectorName )
{
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this,"onBaiShiBtnPressed", SelectFunctionUiLayer::onBaiShiBtnPressed);//拜师
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this,"onShouTuBtnPressed", SelectFunctionUiLayer::onShouTuBtnPressed);//收徒
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onGuanZhuBtnPressed", SelectFunctionUiLayer::onGuanZhuBtnPressed);//关注
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onLaHeiBtnPressed", SelectFunctionUiLayer::onLaHeiBtnPressed);//拉黑
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onZuDuiBtnPressed", SelectFunctionUiLayer::onZuDuiBtnPressed);//组队
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onLookUpBtnPressed", SelectFunctionUiLayer::onLookUpBtnPressed);//查看
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onSiliaoBtnPressed", SelectFunctionUiLayer::onSiliaoBtnPressed);//私聊
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onShunagxiuBtnPressed", SelectFunctionUiLayer::onShunagxiuBtnPressed);//双休
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onSonghuaBtnPressed", SelectFunctionUiLayer::onSonghuaBtnPressed);//送花
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onTradeBtnPressed", SelectFunctionUiLayer::onTradeBtnPressed);//交易
	CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onRuHuiBtnPressed", SelectFunctionUiLayer::onRuHuiBtnPressed);//入会

	return NULL;
}

void SelectFunctionUiLayer::onNodeLoaded( cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader )
{
	_frame=dynamic_cast<CCSprite*>(getChildByTag(0));
	_baishibtn = dynamic_cast<CCControlButton*>(_frame->getChildByTag(14));
	_shoutubtn = dynamic_cast<CCControlButton*>(_frame->getChildByTag(15));
	CC_ASSERT(_baishibtn != NULL && _shoutubtn != NULL);
	_baishibtn->setVisible(false);
	_shoutubtn->setVisible(false);
	showShiTu();
	CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, -1, true);
	setAllChildernButtonPriority(this,-1);
}

void SelectFunctionUiLayer::onExit()
{
	CCLayer::onExit();
	CCDirector::sharedDirector()->getTouchDispatcher()->removeDelegate(this);
}

void SelectFunctionUiLayer::onEnter()
{
	CCLayer::onEnter();
}

bool SelectFunctionUiLayer::ccTouchBegan( CCTouch *pTouch, CCEvent *pEvent )
{
	CCPoint framePoint = _frame->convertTouchToNodeSpace(pTouch);
	const CCSize &frameSize =_frame->getContentSize();
	CCRect frameRect(0.0f, 0.0f, frameSize.width, frameSize.height);
	if(frameRect.containsPoint(framePoint)) 
	{
		return true;
	}
	else
	{
		CLOSE_UI(WCT_SelectFunction);
	}
	return false;
}

void SelectFunctionUiLayer::ccTouchEnded( CCTouch *pTouch, CCEvent *pEvent )
{

}

void SelectFunctionUiLayer::onBaiShiBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//发送拜师请求;
	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	Role *role = RoleManager::getInstance()->findRole(roleId);
	if(role != NULL)
	{
		MasterPrenticeMgr::getInstance()->Send_add_master(roleId);
	}
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onShouTuBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	//发送收徒qingqiu;
	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	Role *role = RoleManager::getInstance()->findRole(roleId);
	if(role != NULL)
	{
		MasterPrenticeMgr::getInstance()->Send_add_prentice(roleId);
	}
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onGuanZhuBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	Role *role = RoleManager::getInstance()->findRole(roleId);
	if(role != NULL)
	{
		LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
		if(!ploc)
			return;
		if (ploc->isInRoleStateAny(RA_Stall) /*|| ploc->isInRoleStateAny(RA_Exchange)*/)//摆摊交易中禁止操作
		{
			ToolTip::getInstance()->push(GET_STR(7209));
			return;
		}
		SocialMgr::getInstance()->onAddFriend(roleId);
	}
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onLaHeiBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	Role *role = RoleManager::getInstance()->findRole(roleId);
	if(role != NULL)
	{
		LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
		if(!ploc)
			return;
		if (ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))//摆摊交易中禁止操作
		{
			ToolTip::getInstance()->push(GET_STR(7209));
			return;
		}
		SocialMgr::getInstance()->onAddBlack(roleId);
	}
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onZuDuiBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	Role *role = RoleManager::getInstance()->findRole(roleId);
	if(role != NULL)
	{
		LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
		if(!ploc)
			return;
		if (ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))//摆摊交易双修中禁止操作
		{
			ToolTip::getInstance()->push(GET_STR(7209));
			return;
		}

		if(TeamMgr::getInstance()->is_inteam())
		{
			stTeamTargetInfo const& info = TeamMgr::getInstance()->get_team_target_info();
			if(info.is_have_target())
			{
				int role_level = role->getLevel();
				if(!info.is_level_fill(role_level))
				{
					ToolTip::getInstance()->push(STRING_TABLE["team_error_55"]);
					CLOSE_UI(WCT_SelectFunction);
					return;
				}
			}
		}

		TeamMgr::getInstance()->MakeTeammate(roleId);
	}
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onLookUpBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	Role *role = RoleManager::getInstance()->findRole(roleId);
	if(role != NULL)
	{
		LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
		if(!ploc)
			return;
		if (ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))//摆摊交易中禁止操作
		{
			ToolTip::getInstance()->push(GET_STR(7209));
			return;
		}
		RemoteRoleStateMgr::getInstance()->RefreshRemoteRoleAllInfo(roleId);
	}
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onSiliaoBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	unsigned int roleId = RoleManager::getInstance()->get_select_role_id();
	Role *role = RoleManager::getInstance()->findRole(roleId);
	if(role != NULL)
	{
		LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
		if(!ploc)
			return;
		if (ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))//摆摊交易中禁止操作
		{
			ToolTip::getInstance()->push(GET_STR(7209));
			return;
		}
		GET_UI(ChatUi, WCT_ChatUi)->sendMessageTo(role->getId(), convertName(role->getName()));
		//showBtnGroup(NT_BtnGroupJiaohu,false);
		CLOSE_UI(WCT_ROLEEQUIPUI);
	}
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onShunagxiuBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return;
	if (ploc->isRoleInStaticState())//摆摊交易双修中禁止操作
	{
		ToolTip::getInstance()->push(GET_STR(7209));
		return;
	}
	SocialMgr::getInstance()->InvitePlayerCompractice(RoleManager::getInstance()->get_select_role_id());
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onSonghuaBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return;
	if (ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))//摆摊交易中禁止操作
	{
		ToolTip::getInstance()->push(GET_STR(7209));
		return;
	}
	OPEN_UI(WCT_SonghuaUi);
	GET_UI(SonghuaUi, WCT_SonghuaUi)->setRoleId(RoleManager::getInstance()->get_select_role_id());
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onTradeBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if(!ploc)
		return;
	if (ploc->isRoleInStaticState())//摆摊交易双修中禁止操作
	{
		ToolTip::getInstance()->push(GET_STR(7209));
		return;
	}
	//TradeUi::getInstace()->open();
	ExchangeBusinessMgr::getInstance()->InvitePlayerExchange(RoleManager::getInstance()->get_select_role_id());
	CLOSE_UI(WCT_SelectFunction);
}

void SelectFunctionUiLayer::onRuHuiBtnPressed( cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent )
{
	LocalPlayer *ploc = RoleManager::getInstance()->getLocalPlayer();
	if (!ploc)
		return;
	if (ploc->isInRoleStateAny(RA_Stall) || ploc->isInRoleStateAny(RA_Exchange))
	{
		ToolTip::getInstance()->push(GET_STR(7209));
		return;
	}

	int nOpenLevel = GetFunOpenLevel(EFOL_Guild);

	//如果等级不够,则不可以创建公会
	if( ploc->getLevel() < nOpenLevel )
	{
		ToolTip::getInstance()->push(GET_STR(7141).c_str());
		return;
	}
	else
	{
		unsigned int roleId  = RoleManager::getInstance()->get_select_role_id();
		Role* role=RoleManager::getInstance()->findRole(roleId);
		if(role == NULL)
		{
			CLOSE_UI(WCT_SelectFunction);
			return;
		}
		if(RoleManager::getInstance()->getLocalPlayer()->getGuildID() == 0xffffffff)
		{
			AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_4);
			//OPEN_UI(WCT_GuildListUi);
			//目标id
			if(role->getGuildID() == 0xffffffff){
				ToolTip::getInstance()->push(GET_STR( 9109 ));
			}else{
				MessageBoxUi* GuildBox=MessageBoxUi::createWithTwoBtn(TEXT_UTF8_TISHI,GET_STR(9123).c_str(),GET_STR(9124).c_str(),GET_STR(9125).c_str());
				World::getInstance()->getScene()->addChild(GuildBox,WZ_MESSAGEBOX);
				GuildBox->signalOkBtnPressed.connect(SelectFunctionUiLayer::create(),&SelectFunctionUiLayer::setRuihuiBySelectRoleHead);
				//GuildMgr::getInstance()->setRuihuiBySelectRoleHead(roleId);
			}
		}
		else
		{
			AudioPlayer::getSigletonPtr()->playerSoundUIEffect(SOUND_4);
			if(role->getGuildID() == 0xffffffff){
				GuildMgr::getInstance()->sendRequestPlayerJoinGuild(ploc->getId(),roleId,ploc->getGuildID());
			}else{
				ToolTip::getInstance()->push(GET_STR(9127));
			}
			//OPEN_UI(WCT_GuildFrameUi);
		} 
	}	
	CLOSE_UI(WCT_SelectFunction);
}
void SelectFunctionUiLayer::setRuihuiBySelectRoleHead(){
	unsigned int roleId  = RoleManager::getInstance()->get_select_role_id();
	GuildMgr::getInstance()->setRuihuiBySelectRoleHead(roleId);
}
void SelectFunctionUiLayer::setPlayerId(int roleId)
{
	_roleId=roleId;
}

void SelectFunctionUiLayer::showShiTu()
{
	unsigned int roleId  = RoleManager::getInstance()->get_select_role_id();
	LocalPlayer* ploc = RoleManager::getInstance()->getLocalPlayer();
	if (roleId != INVALID_ID)
	{
		//目标角色
		Role *role = RoleManager::getInstance()->findRole(roleId);
		if( role != NULL )
		{
			if (ploc->getLevel() > role->getLevel())
			{
				_baishibtn->setVisible(false);
				_shoutubtn->setVisible(true);
			}
			else
			{
				_baishibtn->setVisible(true);
				_shoutubtn->setVisible(false);
			}
		}
	}
}
