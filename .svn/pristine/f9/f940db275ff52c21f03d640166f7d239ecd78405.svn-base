#ifndef BOSSSKILLMAMAGER_H
#define BOSSSKILLMAMAGER_H

#include <string>
#include "BaseDefine.h"
#include "AnimationCache.h"
#include "cocos2d.h"
using namespace cocos2d;

struct BossSkillData
{
	int id;
	int type;
	int scale; //100正常
	int radiu;
	std::string animFile;
	std::string soundFile;
	int fileType;

	int aroundType;//0环绕式 1正常释放
	int effectType; //0自己  1目标 

	BossSkillData()
		: id(-1)
		, type(1)
		, scale(100)
		, radiu(120)
		, fileType(1)
		,aroundType(0)
		,effectType(0)
	{

	}

	~BossSkillData()
	{

	}
};

class BossSkillAnim
{
public:
	BossSkillAnim();
	~BossSkillAnim();
	void run(const CCPoint &pos, const CCPoint &targetPos, eOctDir dir, const BossSkillData&data);

	class BossSkillCallback : public CCObject
	{
	public:
		static BossSkillCallback *getInstance()
		{
			static BossSkillCallback instance;
			return &instance;
		}

		void animationCallback(CCNode*node, void *d)
		{
			BossSkillAnim* anim = (BossSkillAnim*)d;
			anim->animationCallback(node);
		}
	};

protected:
	void animationCallback(CCNode *node);

private:
	std::vector<CCSprite*> _sprites;
	std::vector<AnimsUsed> _usedAnim;

	bool									_bHasEffect;
};

class BossSkillManager
{
	friend class BossSkillAnim;
public:
	static BossSkillManager *getInstance();
	//void runSkillAnimation(int skillId, const CCPoint &pos, const CCPoint *targetPos,eFourDirEx dir);
	void runSkillAnimation(int skillId, const CCPoint &pos, const CCPoint *targetPos,eOctDir dir);
	void destroyAll();
protected:
	BossSkillManager();
	~BossSkillManager();

	void initSkillData();
	BossSkillData const* getBossSkillData(int skillId);
	void removeSkillAnim(BossSkillAnim *anim);
private:
	std::map<int, std::shared_ptr<BossSkillData> > _skillDataMap;
	std::vector<BossSkillAnim*> _skillAnims;
	BossSkillData _invalidData;
};

#endif //BOSSSKILLMAMAGER_H