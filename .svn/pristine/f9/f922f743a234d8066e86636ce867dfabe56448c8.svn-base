#ifndef AVATARATT_H
#define AVATARATT_H

#include <memory.h>

#pragma pack(push, 1)

//序章身份
enum  EPreChapStatus
{
	EPCS_OutKungSword = 0,		//外功剑术角色
	EPCS_InKungEeriness,		//阴柔内功
	EPCS_OutKungBow,			//外功弓术
	EPCS_InKungSing,			//内功音律
	EPCS_End,
};

// 性别
enum ERoleSex
{
	ERS_Woman		= 0,
	ERS_Man			= 1,
};

//在角色创建的时候指定的属性，在游戏中一般不会改变
#define DressMdIDInvalid		255		// 不能>255,否则数据库保存会出问题(tinyint)
struct tagAvatarAtt
{
	//unsigned short			wHairMdlID;			// 发型
	//unsigned short			wHairTexID;			// 发色
	//unsigned short			wFaceMdlID;			// 面部五官
	//unsigned short			wFaceDetailTexID;	// 面部细节
	//unsigned short			wDressMdlID;		// 服装样式
	unsigned char			bySex;				// 0:girl，1:boy(便于以后扩展)
	//unsigned char			byClass;			// 角色职业
	//unsigned char			byVisualize;		// 角色形象
	tagAvatarAtt() { memset(this, 0, sizeof(*this)); }
};

//换装属性
//Avatar系统共由多少个模型组成 
//enum EAvatarElement		
//{
//	EAE_Start	= 0,
//
//	EAE_Head	= 0,	// 头
//	EAE_Face	= 1,	// 面部
//	EAE_Upper	= 2,	// 上身
//	EAE_Lower	= 3,	// 下身
//	EAE_Glove	= 4,	// 手
//	EAE_Boot	= 5,	// 脚
//	EAE_Back	= 6,	// 背部
//	EAE_RWeapon	= 7,	// 主手武器
//	EAE_LWeapon	= 8,	// 副手武器
//
//	EAE_End		= 8,
//};

enum EAvatarElement		
{
	EAE_Start	= 0,

	EAE_Upper	= 0,	// 衣服
	EAE_Back	= 1,	// 翅膀
	EAE_RWeapon	= 2,	// 武器

	EAE_End		= 2,
};


const int X_AVATAR_ELEMENT_NUM	= EAE_End - EAE_Start + 1;

// 装备挂载特效
enum EEquipEffect
{
	EEE_Null		= 0,	// 无
	EEE_Simple		= 1,	// 第一套特效
	EEE_Complex		= 2,	// 第二套特效
	EEE_All
};

// 装备外观
struct tagEquipDisplay
{
	unsigned int			dw_data_id;
	unsigned char			byDisplayPos;	// 模型位置
	//unsigned char			byFlareVal;		// 光晕值
	//unsigned char			byEquipEffect;	// 挂载效果
	//signed char			n8ColorID;		// 颜色

	void Set(unsigned char byDisplayPos, unsigned int dw_data_id, unsigned char byFlareVal, signed char n8ColorID)
	{
		this->byDisplayPos	= byDisplayPos;
		/*this->byFlareVal	= byFlareVal;
		this->n8ColorID		= n8ColorID;*/
		this->dw_data_id		= dw_data_id;
	}

	void Set(unsigned char byEquipEffect)
	{
		//this->byEquipEffect	= byEquipEffect;
	}
};

const unsigned char X_DEFAULT_FLARE_VAL	= 0;

// 装备外观
struct tagAvatarEquip
{
	tagEquipDisplay		AvatarEquip[X_AVATAR_ELEMENT_NUM];
	unsigned int				dwSuitEffectID;						// 套装特效编号

	void Set(unsigned char byDisplayPos, unsigned int dw_data_id, unsigned char byFlareVal, signed char n8ColorID)
	{
		AvatarEquip[byDisplayPos].Set(byDisplayPos, dw_data_id, byFlareVal, n8ColorID);
	}

	void Set(unsigned char byDisplayPos, unsigned char byEquipEffect)
	{
		AvatarEquip[byDisplayPos].Set(byEquipEffect);
	}

	int IsNull(unsigned char byDisplayPos) const
	{
		return (AvatarEquip[byDisplayPos].dw_data_id == -1 ||
			AvatarEquip[byDisplayPos].dw_data_id == 0);
	}
};

const int SIZE_AVATAR_EQUIP = sizeof(tagAvatarEquip);

// 装备显示设置
struct tagDisplaySet
{
	bool	bWingDisplay		: 1;	// 是否显示翅膀
	bool	bMagicArmDisplay	: 1;	// 是否显示幻武
	bool	bFashionDisplay		: 1;	// 是否显示时装
	bool	bMagicSoulDisplay	: 1;	// 是否显示魔魂
	//bool	bHideHead		: 1;	// 是否隐藏头部
	//bool	bHideFace		: 1;	// 是否隐藏面部
	//bool	bHideBack		: 1;	// 是否隐藏背部
	//bool	bFlyBack		: 1;	// 是否显示翅膀

	tagDisplaySet(BYTE byData = 0) 
	{ 
		memcpy(this, &byData, sizeof(*this));
	}
	operator BYTE(){ return *(BYTE*)this; }

	void Set(bool bHead, bool bFace, bool bBack, bool bFly)
	{
			/*bHideHead = bHead;
		bHideFace = bFace;
		bHideBack = bBack;
		bFlyBack = bFly;*/
	}
};

#pragma pack(pop)


#endif//AVATARATT_H

