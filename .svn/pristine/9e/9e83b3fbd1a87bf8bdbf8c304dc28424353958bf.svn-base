#ifndef MINIMAPNODE_H
#define MINIMAPNODE_H

#include "MaskRenderNode.h"
#include "tagDWORDTime.h"

#if 1
struct CloseMap;
class MiniMapNode : public CCNode
{
public:
	MiniMapNode();
	CREATE_FUNC(MiniMapNode);
	bool init();
	virtual void update(float dt);
	virtual void onEnter();
	virtual void onExit();

protected:
	CCSprite *getSprite();
private:
	void onEventCloseMap(CloseMap* pEvent);
	void clearAll();
	void hideAll();
private:
	CCSprite *_local;
	std::vector<CCSprite*> _dots;
	int _curSpriteIndex;
	tagDWORDTime _severtime;
	float _scripttime;
	float _btnexsittime;
//	float _sbkLeveTime; 
//	bool _timeEnd;
//	bool _timeBegin;

	CCSpriteBatchNode*  mpBatchNode;
};
#else
class MiniMapNode : public MaskRenderNode
{
public:
	CREATE_FUNC(MiniMapNode);
	bool init();
	void setFocusPoint(const CCPoint &focusPoint);
	void setMapSize(int width, int height);
private:
	const static int _mapBorder = 22;
	int _mapWidth;
	int _mapHeight;
};
#endif

// class FightLayer : public CCLayer
// {
// public:
// 	CREATE_FUNC(FightLayer);
// 	bool init();
// 	virtual void onEnter();
    /**
     *  @js NA
     *  @lua NA
     */
//  virtual void onExit();
// 	virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
//	virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
// private:
// 	CCSprite* sprite;
// };

#endif //MINIMAPNODE_H