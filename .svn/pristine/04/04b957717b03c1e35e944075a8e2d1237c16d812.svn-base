/**
 *	@file		WingFlyUpUi.h
 *	@author		guantiejun
 *	@date		2016/04/18
 *	@version	
 *	@brief		³á°ò·ÉÉý½çÃæ
 */

#ifndef FMB_FLY_UP_UI_H
#define FMB_FLY_UP_UI_H

#include "UiInterface.h"
#include "NormalLayer.h"

using namespace cocos2d;
using namespace cocos2d::extension;

const int total_role_base_att = 5;

class WingFlyUpUiLayer;
class CheckButton;
class f_equipment;
class ProgressBar;
class LabelEx;
struct fly_up_back_event;

class WingFlyUpUi : public UiInterface
{
public:
	WingFlyUpUi();
	~WingFlyUpUi();

	virtual CCNode *openUi();
	WingFlyUpUiLayer *getUiLayer();
};

class WingFlyUpUiLayer: public NormalLayer
{
public:
	WingFlyUpUiLayer();
	~WingFlyUpUiLayer();

	CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(WingFlyUpUiLayer, create);

	virtual SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
	virtual SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);
	virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
	virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);

	virtual void onEnter();
	virtual void onExit();

	inline void set_wing_id(INT64 wing_id) {m_wing_id = wing_id;}
	inline INT64 get_wing_id(){return m_wing_id;}

	void refresh_node();

private:
	void onFly(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onClose(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onCue(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onAdd(CCObject * pSender, CCControlEvent pCCControlEvent);
	void onSub(CCObject * pSender, CCControlEvent pCCControlEvent);

	void on_sure_open_recharge();
	void refresh_num(int num);
	void create_wing_effetc(f_equipment* equip);
	void fly_up_back(fly_up_back_event* event);
	void play_success_effect(int times, int exp);
	void play_success_end(CCNode* node);
	void send_fly_up_to_server();
	void set_button_enable(bool is_enable);

private:
	ProgressBar* m_percent;

	CCNode* m_left_node;
	CCNode* m_right_node;
	CCNode* m_effect_node_1;
	CCNode* m_effect_node_2;
	LabelFT* m_wing_name;

	CCNode*	m_add_area;
	CCNode*	m_bottom_area;
	LabelEx* m_label_ex;

	LabelFT* m_fly_level;
	LabelFT* m_percent_show;
	CCSprite* m_percent_pic;
	CCNode* m_percent_pic_back;
	LabelFT* m_base_att_total;
	LabelFT* m_base_att_add_total;

	LabelFT* m_base_name[total_role_base_att];
	LabelFT* m_base_value[total_role_base_att];
	LabelFT* m_add_base_value[total_role_base_att];

	//LabelFT* m_buff_add_point_1;
	//LabelFT* m_buff_add_point_2;
	//LabelFT* m_buff_time;

	// -----------------------------------------------------------
	CCNode*	m_item_node;
	LabelFT* m_item_num;
	LabelFT* m_item_name;
	LabelFT* m_gold_num;
	LabelFT* m_fly_num_label;
	CheckButton* m_use_gold;
	CCControlButton* m_fly_button;

	// -----------------------------------------------------------
	INT64 m_wing_id;
	int m_fly_num;
	int m_fly_show_num;
	bool m_is_auto_send;
	int m_wing_cur_level;
	int m_wing_last_level;
};

#endif