#include "EquipLevelUpNoticeMgr.h"
#include "UiLoader.h"
#include "World.h"

//////////////////////////////////////////////////////////////////////////

EquipLevelupNoticeUiMgr * EquipLevelupNoticeUiMgr::getInstance()
{
	static EquipLevelupNoticeUiMgr instance;
	return &instance;
}

EquipLevelupNoticeUiMgr::EquipLevelupNoticeUiMgr()
{
	needItemNum[0] = 0;
	needItemNum[1] = 0;
	needItemNum[2] = 0;
}

EquipLevelupNoticeUiMgr::~EquipLevelupNoticeUiMgr()
{

}

void EquipLevelupNoticeUiMgr::onCloseEvent()
{
	if (getOpenUiId() != 0)
	{
		OPEN_UI(getOpenUiId());
		setOpenUiId((eWroldChildTag)0);
		CLOSE_UI(WCT_EQUIPLEVELUPNOTICEUI);
	}
}

void EquipLevelupNoticeUiMgr::initEquipNoticeData()
{
	m_equip_notice_data.clear();

	f_data_set data;
	std::list<std::string> fields;

	bool ret = data.load("Config/db/equiplevelnotice.xml","itemid",&fields);
	CC_ASSERT(ret);

	std::for_each(fields.begin(),fields.end(),[&](std::string const& one)
	{
		EquipLevelNoticeData noticeData;
		noticeData.itemId = data.get_int("itemid",one.c_str());
		noticeData.fubenNum = data.get_int("number",one.c_str());
		noticeData.fubenTag = data.get_int("tag",one.c_str());
		noticeData.iconId = data.get_int("iconid",one.c_str());
		noticeData.isHero = data.get_int("ishero",one.c_str());
		noticeData.fubenId = data.get_int("fubenid",one.c_str());

		m_equip_notice_data[noticeData.itemId] = noticeData;
	});
}

const EquipLevelNoticeData* EquipLevelupNoticeUiMgr::get_equip_level_notice_data(int itemID)
{
	if (m_equip_notice_data.size()<=0)
	{
		initEquipNoticeData();
	}
	auto itor = m_equip_notice_data.find(itemID);
	if (itor == m_equip_notice_data.end())
	{
		return NULL;
	}
	CC_ASSERT(itor!=m_equip_notice_data.end());
	return &itor->second;
}
