#ifndef LABELEX_H
#define LABELEX_H
/********************************************************************
	created:	2015/08/05
	created:	5:8:2015   11:21
	filename: 	C:\chuanqi\trunk\Client\code\source\LabelEx.h
	file path:	C:\chuanqi\trunk\Client\code\source
	file base:	LabelEx
	file ext:	h
	author:		gh
	
	purpose:	可支持图片和多彩文字的label
*********************************************************************/

#if !defined(NOMINMAX) && defined(_MSC_VER)
#	define NOMINMAX // required to stop windows.h messing up std::min
#endif

#include "cocos2d.h"
#include "cocos-ext.h"

#include "CommonDefine.h"

struct LabelParseState;

typedef boost::function<void(float)> ExpandCallback;

class LabelEx : public cocos2d::CCNode
{
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(LabelEx, create);

	LabelEx();
	virtual ~LabelEx();

	void setup(float row_height, bool pack_mode,ExpandCallback cb = NULL);
	virtual void set_text(const std::string& text);	
	const cocos2d::CCSize& get_label_size() const { return m_label_size; }
	bool is_top_down() const { return m_top_down; }
	void set_top_down(bool val) { m_top_down = val; }

	static std::string get_words_from_utf8_str(const std::string& utf8_str, int num_word);
	static int get_words_num(const std::string& utf8_str);

private:
	void setExpandCB(ExpandCallback cb){mExpandCB = cb;}

	struct LabelItem
	{
		std::string		text;
		int				font_size;
		cocos2d::ccColor3B		font_color;
		std::string		frame_name;

		cocos2d::CCPoint			pos;
		cocos2d::CCSize			size;
		bool			shadow;

		LabelItem()
			: font_size(18)
			, font_color(cocos2d::ccWHITE)
			, pos(cocos2d::CCPointZero)
			, size(cocos2d::CCSizeZero)
			, shadow(true)
		{}
	};
	typedef std::vector<LabelItem> ItemList;
	typedef std::vector<CCNode*> NodeList;

	ItemList	m_items;
	cocos2d::CCNode*		m_root;
	NodeList	m_nodes;
	float		m_row_height;
	bool		m_pack_mode;
	cocos2d::CCSize		m_label_size;
	bool		m_top_down;

	void reset();
	void parse(const std::string& text);
	void build_nodes();

	void add_text_item(LabelParseState* state, bool new_line);
	void add_frame_item(LabelParseState* state, const char* frame_name);
	static size_t parse_mark(LabelEx* label, LabelParseState* state, const char* str, size_t i, size_t* word_count = NULL);
	static float parse_height(const char*& str, float default_val = 20.0f);

	cocos2d::CCNode* grab_root();

	ExpandCallback			mExpandCB;
};

class LabelExLoader : public cocos2d::extension::CCNodeLoader {
public:
	CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(LabelExLoader, loader);
protected:
	CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(LabelEx);
};
#endif //LABELEX_H