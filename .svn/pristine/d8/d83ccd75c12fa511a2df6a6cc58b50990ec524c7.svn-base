#include "ServerTime.h"

ServerTime::ServerTime()
	: m_synchronized(false)
{
}

void ServerTime::synchronism_time(unsigned int dwServerTime)
{
	m_server_time = dwServerTime;
	m_client_time = GetCurrentDWORDTime();
	m_synchronized = true;
}

EWeek ServerTime::get_current_week_day() const
{
	tagDWORDTime dwServerTime = cal_current_server_dword_time();

	return get_week_day(dwServerTime);
}

EWeek ServerTime::get_week_day( tagDWORDTime& time ) const
{
	unsigned int dwWeek = WhichWeekday(time);
	return (EWeek)dwWeek;
}

unsigned short ServerTime::get_current_year() const
{
	tagDWORDTime dwServerTime = cal_current_server_dword_time();
	return (2000 + static_cast<unsigned short>(dwServerTime.year));
}

unsigned char ServerTime::get_current_month() const
{
	tagDWORDTime dwServerTime = cal_current_server_dword_time();
	return static_cast<unsigned char>(dwServerTime.month);
}

unsigned char ServerTime::get_current_day() const
{
	tagDWORDTime dwServerTime = cal_current_server_dword_time();
	return static_cast<unsigned char>(dwServerTime.day);
}

unsigned char ServerTime::get_current_hour() const
{
	tagDWORDTime dwServerTime = cal_current_server_dword_time();
	return static_cast<unsigned char>(dwServerTime.hour);
}

unsigned char ServerTime::get_current_minute() const
{
	tagDWORDTime dwServerTime = cal_current_server_dword_time();
	return static_cast<unsigned char>(dwServerTime.min);
}

unsigned char ServerTime::get_current_second() const
{
	tagDWORDTime dwServerTime = cal_current_server_dword_time();
	return static_cast<unsigned char>(dwServerTime.sec);
}

tagDWORDTime ServerTime::cal_current_server_dword_time() const
{
	if( !m_synchronized ) 
		return GetCurrentDWORDTime();
	unsigned int dwDiff = CalcTimeDiff(GetCurrentDWORDTime(), m_client_time);
	tagDWORDTime dwServerTime = IncreaseTime(m_server_time, dwDiff);
	return dwServerTime;
}

//得到和hour点还相差多少的时间
tagDWORDTime ServerTime::get_dis_hour_Time(tagDWORDTime startTime,int hour) 
{  
	tagDWORDTime  destTime;

	if(6 <= startTime.hour)
	{
		destTime = IncreaseTime(startTime, 24 * 60 * 60);
		destTime.hour = hour;
		destTime.min = 0;
		destTime.sec = 0;
	}
	else
	{
		destTime = startTime;
		destTime.hour = hour;
		destTime.min = 0;
		destTime.sec = 0;
	}

	return destTime;
}

ServerTime* ServerTime::getInstance()
{
	static ServerTime inst;
	return &inst;
}
