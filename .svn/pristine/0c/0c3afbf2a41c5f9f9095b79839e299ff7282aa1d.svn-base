#ifndef EXCHANGEMGR_H_INCLUDE
#define EXCHANGEMGR_H_INCLUDE
#include <string>
#include <map>
#include <vector>
#include "CmdAdapter.h"
#include "BaseDefine.h"
#include "ItemDefine.h"

struct sConvertExchange
{
	sConvertExchange():index(0)
	{

	}

	unsigned char	index;
	unsigned char	vocationLimit;
	unsigned char	showLevel;
	unsigned int	id;
	unsigned int	needItem[CONVERT_EXC_NUM];
	unsigned int	needNum[CONVERT_EXC_NUM];
	std::string		info;
};

typedef std::map<unsigned char,sConvertExchange> ExchangeMAP;
typedef std::map<unsigned int,ExchangeMAP> nExchangeMAP;

class ExchangeMgr
{
	struct sExchange
	{
		unsigned int id;
		std::string name;
		std::string info;//操作无法完成时，给的提示信息 gx add
	};

private:
	std::map<unsigned int , std::vector<sExchange> > _exMap;
	unsigned int _npcID;
	unsigned int _npcSID;
	unsigned int _indexID;//gx add 在书页兑换时，临时保存索引ID

	//std::map<unsigned char,sConvertExchange> _convertExMap;
	nExchangeMAP _convertExMap;
public:
	ExchangeMgr();
	~ExchangeMgr();
public:
	static ExchangeMgr* getInstance();
	void Init();
	void Destroy();
	void doTransScript(unsigned int npcid , unsigned int sid);
	void onSelect(unsigned int idx);
	void doMoBaiScript(unsigned int npcid , unsigned int sid);
	void onSelectForBaiBaoYuanBao(unsigned int idx);
	void setIndex(int index);
	unsigned int onProduce(s_net_cmd* cmd);
	void sendProduceMsg(unsigned int send_id, INT64 n64NPCID, int index);
	void confirmTrans();//gx add 兑换书页时，二次确认使用
	unsigned int onthird_recharge_reward(s_net_cmd* cmd);
	void canSendProduce(unsigned int npcId, int idx);

	void loadSkillExchange();
	void skillExchange(unsigned int idx);

	void loadConvertExchange();
	void addExchangeMAP(unsigned int npcId, sConvertExchange& data);
	bool haveConvertExchange(unsigned int npcId, unsigned char idx);
	bool canConvertExchange(sConvertExchange const& data)const;
	unsigned int onServerConvertExchangeResult( s_net_cmd *cmd );

	bool isMoBaiNpc(int npcId);
};
#endif