#ifndef ITEM_H
#define ITEM_H

#include "ItemDefine.h"

#pragma pack(push, 1)

enum e_item_state// 物品当前状态
{
	eis_inoperable	=	0x1,	// 不可操作的
	eis_unmovable	=	0x2,	// 不可移动的
	eis_unwearable	=	0x4,	// 不可装备的
	eis_unuseable	=	0x8,	// 不可使用的
	eis_undroppable	=	0x10,	// 不可丢弃的
	eis_unvendible	=	0x20,	// 不可出售的
	eis_untradeable	=	0x40,	// 不可交易的
	eis_unstackable	=	0x80,	// 不可堆叠的
};

/** class Item
	brief 游戏中单堆物品类
*/
class f_item
{
public:
	unsigned int				m_item_state;		// 物品状态，记录各种状态
	tagItem						m_data;				// 物品基本结构
	bool                        b_locked;          // is locked
	unsigned int                 m_last_item_state;   // last item status before locked

public:
	f_item();
	virtual ~f_item();
	/** \构造函数
	*/
	f_item(const tagItem &Data);
	
	/** \拷贝构造函数
	*/
	f_item(const f_item&);


		//---------------------------------------------------
	// 获取
	//--------------------------------------------------- 
	/** \获取基本数据
	*/
	const tagItem* get_data(){return &m_data;}
	/** \获取原始数据
	*/
	EItemConType get_container_type(){return m_data.eConType;}
	/** \获取位置
	*/
	short get_pos(){return m_data.n16Index;}
	/** \获取物品ID
	*/
	long long get_item_id(){return m_data.n64_serial;}
	/** \获取种类ID
	*/
	unsigned int get_item_type_id() const  {return m_data.dw_data_id;}
	/**	\获取物品数量
	*/
	int	get_item_number() const  {return m_data.n16Num;}
	/** \获取物品tips
	*/
	const char* get_item_tips();
	/** \获取物品绑定状态
	*/
	bool is_item_binded() const {return m_data.IsBind()?true:false;}

	/** \物品是否为主动绑定
	*/
	bool item_is_active_binded(){return m_data.IsLock()?true:false;}

	/** \物品的绑定状态
	*/
	unsigned char get_item_bind_status(){return m_data.byBind;}


	/** \获取绑定的服务器时间
	*/
	tagDWORDTime const& get_bind_time()const {return m_data.dwBindTime;}

	/** \获取物品得到时间
	*/
	tagDWORDTime const& get_gain_time()const {return m_data.dw1stGainTime;}

	/** \获取物品是否锁定
	*/
	bool is_item_locked() const {return m_data.bLock;}
	/** \获取物品当前使用次数
	*/
	int get_item_use_times(){return m_data.nUseTimes;}
	/** \获取物品制造者ID
	*/
	unsigned int get_item_creator_id(){return m_data.dwCreatorID;}
	// 是否镶嵌
	virtual bool is_posy() { return false;}
	// 是否强化
	virtual bool is_upstar() { return false;}
	//---------------------------------------------------
	// 赋值
	//--------------------------------------------------- 
	/** \设置物品ID
	*/
	void set_item_id(INT64 id_){m_data.n64_serial = id_;}
	/** \设置物品容器
	*/
	void set_container_type(EItemConType type){m_data.eConType = type;}
	/** \设置位置
	*/
	void set_pos(short pos_){m_data.n16Index = pos_;}

	/** \设置物品数量
	*/
	void set_item_number(short num_){m_data.n16Num = num_;}
	/** \设置使用次数
	*/
	void set_item_use_times(int times_){m_data.nUseTimes = times_;}
	
	//---------------------------------------------------
	// 状态判断
	//--------------------------------------------------- 
	/** \设置是否可操作
	*/
	void set_operable(bool operable_);
	/** \获取是否可操作
	*/
	bool is_operable();
	
	/** \设置是否可移动
	*/
	void set_movable(bool movable_);
	/** \获取是否可移动
	*/
	bool is_movable();

	/**\ 设置是否可装备
	*/
	void set_wearable(bool wearable_);
	/**\ 获取是否可装备
	*/
	bool is_wearable();

	/**\ 设置是否可使用
	*/
	void set_useable(bool useable_);
	/**\ 获取是否可使用
	*/
	bool is_useable();

	/**\ 设置是否可丢弃
	*/
	void set_droppable(bool droppable_);
	/**\ 获取是否可丢弃
	*/
	bool is_droppable();

	/**\ 设置是否可售出
	*/
	void set_vendible(bool vendible_);
	/**\ 获取是否可售出
	*/
	bool is_vendible();

	/**\ 设置是否可交易
	*/
	void set_tradeable(bool tradeable_);
	/**\ 获取是否可交易
	*/
	bool is_tradeable();

	/**\ 设置是否可堆叠
	*/
	void set_stackable(bool stackable_);
	/**\ 获取是否可堆叠
	*/
	bool is_stackable(short &quantity_);
    /**\ lock the item
         first, save the current item status, then set all item attribute disabled
    */
    void lock();
    /**\ unlock the item
         first, pop the last item status, then set all item attribute enabled
    */
    void unlock();

    bool is_locked() const {
		return b_locked;
	}

	void update_bind(EBindStatus type_, unsigned int time_){ m_data.UpdateBind(type_,time_);}

	//[bing] 得到物品name
	std::string GetItemName()const;
};



/** \class	Equipment
	\brief	游戏中的单件装备类
*/
class f_equipment : public f_item
{
public:
	tagEquipSpec				m_equipex;				// 装备扩展结构
protected:
	std::map<ERoleAttribute, int>	m_equip_att_map;		// 装备属性加成列表
	std::map<ERoleAttribute, int>	m_equip_att_pct_map;	// 装备属性百分比加成列表

public:
	f_equipment();
	virtual ~f_equipment();

	f_equipment(const tagEquip &Data);

	f_equipment(const f_equipment&);

	f_equipment& update(const tagEquip&);

	/** \装备属性变化
	*/
	void update_equipment(tagEquipSpec Data);
	
	/** \获取装备扩展结构
	*/
	const tagEquipSpec* get_equip()const{return &m_equipex;}
	/** \当前装备最大镶嵌数
	*/
	unsigned char get_equip_max_hole_num();

	/** \当前装备当前宝石数
	*/
	unsigned char get_equip_gem_num() const
	{
		int nNum = 0;
		for(int i=0; i<m_equipex.byHoleNum; ++i)
		{
			if(m_equipex.dwHoleGemID[i] > 0)
				nNum++;
		}
		return nNum;
	}
	/** \获取物品品级
	*/
	virtual unsigned char get_item_quality() const{return m_equipex.byQuality;} 
	// 是否强化
	virtual bool is_upstar();

	virtual bool is_posy()const;

	//获取装备强化等级
	int get_equip_consolidate_level() { return m_equipex.byConsolidateLevel; }

	/** \获取装备是否鉴定
	*/
	bool is_not_idetified(){return m_equipex.byQuality == (unsigned char)(-1);}

	/** \获取装备五行数值
	*/
	//unsigned char get_equip_wuxing(EWuXing eType){return m_equipex.byLongfuAtt[eType];}
	/** \计算强化升星等级影响;
	*/
	int calculate_consolidate(short base_value_, unsigned char consolidate_level_, float param_);
	/** \获取武器近战最小攻击
	*/
	int get_equip_min_damage(int level_);
	/** \获取武器近战最大攻击
	*/
	int get_equip_max_damage(int level_);
	/** \获取武器武远程最小攻击
	*/
	//short GetEquipMinDmgIn(){return CalConsolidate(m_equipex.n16MinDmgIn, m_equipex.byConsolidateLevel, CONSOLIDATE_PARAM);}
	/** \获取武器武远程最大攻击
	*/
	//short GetEquipMaxDmgIn(){return CalConsolidate(m_equipex.n16MaxDmgIn, m_equipex.byConsolidateLevel, CONSOLIDATE_PARAM);}
	/** \获取近战防具护甲值
	*/
	short get_equip_armor();
	/** \获取远程防具护甲值
	*/
	//short GetEquipArmorIn(){return CalConsolidate(m_equipex.n16ArmorIn, m_equipex.byConsolidateLevel, CONSOLIDATE_PARAM);}
	/** \获取武器暂新度
	*/
	int get_equip_newness();

	/** \获取装备属性加成
	*/
	void get_equip_attribute(std::map<ERoleAttribute, int>& map_){map_ = m_equip_att_map;}
	/** \获取装备属性百分比加成
	*/
	void get_equip_attribute_pct(std::map<ERoleAttribute, int>& map_){map_ = m_equip_att_pct_map;}
	/** \获取装备已镶嵌宝石ID
	*/
	unsigned int get_equip_hold_gem_id(int index_){return m_equipex.dwHoleGemID[index_];}
	//bool IsCanDye(){return ((const tagEquipProto*)m_pProto)->bCanDye;}
	/**\获取打孔成功率
	*/
	short get_chise_prop(short yuanbao_num_);
	/** \获取打孔游戏币需求
	*/
	INT64 get_chisel_price();
	/** \获取镶嵌游戏币需求
	*/
	short get_inlay_price();
	/** \获取摘除游戏币需求
	*/
	short get_unbeset_price();
	/**\获取强化成功率
	*/
	int get_shengxing_prop(unsigned int number_);
	/**\获取强化金钱
	*/
	INT64 get_shengxing_money();
	/** \获取强化星数
	*/
	int get_star_num() {
		return m_equipex.nStarLv; 
	}

	int get_fusionexp() { return m_equipex.nFusionExp; }

	//获取战斗力
	int get_fightli() { return m_equipex.nRating; }

	// begin add by gtj  11.06.20 
	inline void set_equip_hole_gem_id(unsigned int hole_id_, int i_){m_equipex.dwHoleGemID[i_] = hole_id_;}
	inline void set_equip_hole_num(int i_){m_equipex.byHoleNum = i_;}
	inline void set_equip_consolidate_level(int i_){m_equipex.byConsolidateLevel = i_;}
	// end add by gtj  11.06.20 
	INT64	get_repair_price();

	float get_repair_quality_param()
	{
		float fParam = 0.0f;
		switch(m_equipex.byQuality)
		{
		case EIQ_Quality0: fParam = 1.0f; break;
		case EIQ_Quality1: fParam = 1.1f; break;
		case EIQ_Quality2: fParam = 1.2f; break;
		case EIQ_Quality3: fParam = 1.3f; break;
		case EIQ_Quality4: fParam = 1.5f; break;
		}

		return fParam;
	}

	int get_indentify_att_num()const;

	bool is_gf_locked()const {return m_equipex.byGFLock == EGFLS_GongFa;}

	int get_modified_quanlity()const;
protected:
	/** \插入属性加成列表
	*/
	void add_equip_attribute(ERoleAttribute att_, int increase_);
};

#pragma pack(pop)

#endif //ITEM_H