#include "UIUtil.h"


UIUtil::UIUtil()
{

}

UIUtil::~UIUtil()
{

}

CCNode* UIUtil::createEftFormFile( const char* szEftFile )
{
	return createNodeFromFile(szEftFile);
}

CCNode* UIUtil::createNodeFromFile( const char* szFileName )
{
	return createNodeFormCCBFileWithParentSize(szFileName,getDefualtSize());
}

CCNode* UIUtil::createNodeFormCCBFileWithParentSize( const char* szFile,const CCSize& size )
{
	CCBReader* reader = new CCBReader(CCNodeLoaderLibrary::sharedCCNodeLoaderLibrary());
	reader->autorelease();

	return reader->readNodeGraphFromFile(szFile,NULL,size);
}

cocos2d::CCSize UIUtil::getDefualtSize()
{
	return CCDirector::sharedDirector()->getVisibleSize();
}

CCNode* UIUtil::childNodeAlign( CCNode* parent,CCNode* child,e_horizontal_align ha,e_vertical_align va,const CCPoint& offset,bool align_without_add/* =false*/ )
{
	CCSize parentSize = parent->getContentSize();
	CCPoint ptOffset = offset;

	if(!align_without_add)
		parent->addChild(child);

	CCPoint ptAnchor = ccp(0,0);
	CCPoint ptPos  = ccp(ptOffset.x,parentSize.height - ptOffset.y);

	switch (ha)
	{
	case eha_left: ptAnchor.x =0;ptPos.x +=0;break;
	case eha_center: ptAnchor.x =0.5;ptPos.x +=parentSize.width/2;break;
	case eha_right: ptAnchor.x =0;ptPos.x +=parentSize.width;break;
	}

	switch (va)
	{
	case eva_top:		ptAnchor.y=1.0f;ptPos.y -=0;break;
	case eva_center:		ptAnchor.y=0.5f;ptPos.y -=parentSize.height/2;break;
	case eva_bottom:		ptAnchor.y=0.0f;ptPos.y -=parentSize.height;break;
	}

	CCControlButton*  btn = dynamic_cast<CCControlButton*>(child);
	if (btn)
	{
		ptAnchor = ccp(0.5f,0.5f);
		if(ha == eha_left) ptPos.x += child->getContentSize().width/2;
		if(ha == eha_right) ptPos.x -= child->getContentSize().width/2;
		if(ha == eva_top) ptPos.y -= child->getContentSize().height/2;
		if(ha == eva_bottom) ptPos.y += child->getContentSize().height/2;
	}

	child->setAnchorPoint(ptAnchor);
	child->setPosition(ptPos);

	return child;
}

CCNode* UIUtil::reAttachToParent( CCNode* target,CCNode* parent,e_horizontal_align ha,e_vertical_align va,const CCPoint& offset )
{
	CC_ASSERT(target);
	CC_ASSERT(parent);
	if (target->getParent())
	{
		target->removeFromParent();
	}

	childNodeAlign(parent,target,ha,va,offset);

	return target;
}
