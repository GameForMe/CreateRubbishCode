/*
-----------------------------------------------------------------------------
This source file is part of OGRE
    (Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org/

Copyright (c) 2000-2012 Torus Knot Software Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------
*/
/*

    Although the code is original, many of the ideas for the profiler were borrowed from 
"Real-Time In-Game Profiling" by Steve Rabin which can be found in Game Programming
Gems 1.

    This code can easily be adapted to your own non-Ogre project. The only code that is 
Ogre-dependent is in the visualization/logging routines and the use of the Timer class.

    Enjoy!

*/
#include "CommonDefine.h"

#ifndef __Profiler_H__
#define __Profiler_H__

#ifdef CC_PROFILE_ENABLE
#	define CCProfile( a ) profile_util::cc_profile _OgreProfileInstance( (a) )
#	define CCProfileBegin( a ) profile_util::cc_profiler::getSingleton().beginProfile( (a) )
#	define CCProfileEnd( a ) profile_util::cc_profiler::getSingleton().endProfile( (a) )
#	define CCProfileGroup( a, g ) profile_util::cc_profile _OgreProfileInstance( (a), (g) )
#	define CCProfileBeginGroup( a, g ) profile_util::cc_profiler::getSingleton().beginProfile( (a), (g) )
#	define CCProfileEndGroup( a, g ) profile_util::cc_profiler::getSingleton().endProfile( (a), (g) )
#	define CCProfileBeginGPUEvent( g ) profile_util::cc_profiler::getSingleton().beginGPUEvent(g)
#	define CCProfileEndGPUEvent( g ) profile_util::cc_profiler::getSingleton().endGPUEvent(g)
#	define CCProfileMarkGPUEvent( e ) profile_util::cc_profiler::getSingleton().markGPUEvent(e)
#else
#   define CCProfile( a )
#   define CCProfileBegin( a )
#   define CCProfileEnd( a )
#	define CCProfileGroup( a, g ) 
#	define CCProfileBeginGroup( a, g ) 
#	define CCProfileEndGroup( a, g ) 
#	define CCProfileBeginGPUEvent( e )
#	define CCProfileEndGPUEvent( e )
#	define CCProfileMarkGPUEvent( e )
#endif

namespace profile_util {
	typedef std::string String;
	typedef unsigned int uint32;
	typedef unsigned int uint;
	typedef float Real;

	class cc_timer;

	/** \addtogroup Core
	*  @{
	*/
	/** \addtogroup General
	*  @{
	*/
	/** List of reserved profiling masks
	*/
	enum ProfileGroupMask
	{
		/// User default profile
		OGREPROF_USER_DEFAULT = 0x00000001,
		/// All in-built Ogre profiling will match this mask
		OGREPROF_ALL = 0xFF000000,
		/// General processing
		OGREPROF_GENERAL = 0x80000000,
		/// Culling
		OGREPROF_CULLING = 0x40000000,
		/// Rendering
		OGREPROF_RENDERING = 0x20000000
	};

    /** An individual profile that will be processed by the cc_profiler
        @remarks
            Use the macro OgreProfile(name) instead of instantiating this profile directly
        @remarks
            We use this cc_profile to allow scoping rules to signify the beginning and end of
            the profile. Use the cc_profiler singleton (through the macro OgreProfileBegin(name)
            and OgreProfileEnd(name)) directly if you want a profile to last
            outside of a scope (i.e. the main game loop).
        @author Amit Mathew (amitmathew (at) yahoo (dot) com)
    */
	class cc_profile		
	{

        public:
            cc_profile(const String& profileName, uint32 groupID = (uint32)OGREPROF_USER_DEFAULT);
            ~cc_profile();

        protected:

            /// The name of this profile
            String mName;
			/// The group ID
			uint32 mGroupID;
			
    };

	/** Represents the total timing information of a profile
		since profiles can be called more than once each frame
	*/
    struct cc_profile_frame 
	{

        /// The total time this profile has taken this frame
        uint32	frameTime;

        /// The number of times this profile was called this frame
        uint	calls;

        /// The hierarchical level of this profile, 0 being the main loop
        uint	hierarchicalLvl;

    };

	/// Represents a history of each profile during the duration of the app
    struct cc_profile_history 
	{
        /// The current percentage of frame time this profile has taken
        Real	currentTimePercent; 
		/// The current frame time this profile has taken in milliseconds
		Real	currentTimeMillisecs;

        /// The maximum percentage of frame time this profile has taken
        Real	maxTimePercent; 
		/// The maximum frame time this profile has taken in milliseconds
		Real	maxTimeMillisecs; 

        /// The minimum percentage of frame time this profile has taken
        Real	minTimePercent; 
		/// The minimum frame time this profile has taken in milliseconds
		Real	minTimeMillisecs; 

        /// The number of times this profile has been called each frame
        uint	numCallsThisFrame;

        /// The total percentage of frame time this profile has taken
        Real	totalTimePercent;
		/// The total frame time this profile has taken in milliseconds
		Real	totalTimeMillisecs;

        /// The total number of times this profile was called
        /// (used to calculate average)
        uint32	totalCalls; 

        /// The hierarchical level of this profile, 0 being the root profile
        uint	hierarchicalLvl;

	};

	class cc_profile_logger
	{
	public:
		virtual ~cc_profile_logger() { }
		virtual void logMessage(const String& msg) = 0;
	};

	/// Represents an individual profile call
	class cc_profile_instance
	{
		friend class cc_profiler;
	public:
		cc_profile_instance(void);
		virtual ~cc_profile_instance(void);

		typedef std::map<String,cc_profile_instance*> ProfileChildren;

		void logResults(cc_profile_logger* l);
		void reset();

		inline bool watchForMax(void) { return history.currentTimePercent == history.maxTimePercent; }
		inline bool watchForMin(void) { return history.currentTimePercent == history.minTimePercent; }
		inline bool watchForLimit(Real limit, bool greaterThan = true)
		{
			if (greaterThan)
				return history.currentTimePercent > limit;
			else
				return history.currentTimePercent < limit;
		}

		bool watchForMax(const String& profileName);
		bool watchForMin(const String& profileName);
		bool watchForLimit(const String& profileName, Real limit, bool greaterThan = true);
                                
		/// The name of the profile
		String          name;

		/// The name of the parent, null if root
		cc_profile_instance* parent;

		ProfileChildren children;

		cc_profile_frame frame;
		uint32 frameNumber;

		cc_profile_history history;

		/// The time this profile was started
		uint32           currTime;

		/// Represents the total time of all child profiles to subtract
		/// from this profile
		uint32           accum;

		/// The hierarchical level of this profile, 0 being the root profile
		uint            hierarchicalLvl;
	};

	/** cc_profile_session_listener should be used to visualize profile results.
		Concrete impl. could be done using Overlay's but its not limited to 
		them you can also create a custom listener which sends the profile
		informtaion over a network.
    */
	class cc_profile_session_listener
	{
	public:
		enum DisplayMode
		{
			/// Display % frame usage on the overlay
			DISPLAY_PERCENTAGE,
			/// Display milliseconds on the overlay
			DISPLAY_MILLISECONDS
		};

		cc_profile_session_listener() : mDisplayMode(DISPLAY_MILLISECONDS) {}
		virtual ~cc_profile_session_listener() {}

		/// Create the internal resources
		virtual void initializeSession() = 0;

		/// All internal resources should be deleted here
		virtual void finializeSession() = 0;

		/** If the profiler disables this listener then it
			should hide its panels (if any exists) or stop
			sending data over the network
		*/
		virtual void changeEnableState(bool enabled) {}; 
		
		/// Here we get the real profiling information which we can use 
		virtual void displayResults(const cc_profile_instance& instance, uint32 maxTotalFrameTime) {};

		/// Set the display mode for the overlay. 
		void setDisplayMode(DisplayMode d) { mDisplayMode = d; }
	
		/// Get the display mode for the overlay. 
		DisplayMode getDisplayMode() const { return mDisplayMode; }
	
	protected:
		/// How to display the overlay
		DisplayMode mDisplayMode;
	};

    /** The profiler allows you to measure the performance of your code
        @remarks
            Do not create profiles directly from this unless you want a profile to last
            outside of its scope (i.e. the main game loop). For most cases, use the macro
            OgreProfile(name) and braces to limit the scope. You must enable the cc_profile
            before you can used it with setEnabled(true). If you want to disable profiling
            in Ogre, simply set the macro OGRE_PROFILING to 0.
        @author Amit Mathew (amitmathew (at) yahoo (dot) com)
        @todo resolve artificial cap on number of profiles displayed
        @todo fix display ordering of profiles not called every frame
    */
    class cc_profiler
	{
		static cc_profiler* msSingleton;
        public:
            cc_profiler();
            ~cc_profiler();

            /** Sets the timer for the profiler */
            void setTimer(cc_timer* t);

            /** Retrieves the timer for the profiler */
            cc_timer* getTimer();

			void setLogger(cc_profile_logger* l);
			cc_profile_logger* getLogger();

            /** Begins a profile
            @remarks 
                Use the macro OgreProfileBegin(name) instead of calling this directly 
                so that profiling can be ignored in the release version of your app. 
            @remarks 
                You only use the macro (or this) if you want a profile to last outside
                of its scope (i.e. the main game loop). If you use this function, make sure you 
                use a corresponding OgreProfileEnd(name). Usually you would use the macro 
                OgreProfile(name). This function will be ignored for a profile that has been 
                disabled or if the profiler is disabled.
            @param profileName Must be unique and must not be an empty string
			@param groupID A profile group identifier, which can allow you to mask profiles
            */
            void beginProfile(const String& profileName, uint32 groupID = (uint32)OGREPROF_USER_DEFAULT);

            /** Ends a profile
            @remarks 
                Use the macro OgreProfileEnd(name) instead of calling this directly so that
                profiling can be ignored in the release version of your app.
            @remarks
                This function is usually not called directly unless you want a profile to
                last outside of its scope. In most cases, using the macro OgreProfile(name) 
                which will call this function automatically when it goes out of scope. Make 
                sure the name of this profile matches its corresponding beginProfile name. 
                This function will be ignored for a profile that has been disabled or if the
                profiler is disabled.
			@param profileName Must be unique and must not be an empty string
			@param groupID A profile group identifier, which can allow you to mask profiles
            */
            void endProfile(const String& profileName, uint32 groupID = (uint32)OGREPROF_USER_DEFAULT);

            /** Mark the beginning of a GPU event group
             @remarks Can be safely called in the middle of the profile.
             */
            void beginGPUEvent(const String& event);

            /** Mark the end of a GPU event group
             @remarks Can be safely called in the middle of the profile.
             */
            void endGPUEvent(const String& event);

            /** Mark a specific, ungrouped, GPU event
             @remarks Can be safely called in the middle of the profile.
             */
            void markGPUEvent(const String& event);

            /** Sets whether this profiler is enabled. Only takes effect after the
                the frame has ended.
                @remarks When this is called the first time with the parameter true,
                it initializes the GUI for the cc_profiler
            */
            void setEnabled(bool enabled);

            /** Gets whether this profiler is enabled */
            bool getEnabled() const;

            /** Enables a previously disabled profile 
            @remarks Can be safely called in the middle of the profile.
            */
            void enableProfile(const String& profileName);

            /** Disables a profile
            @remarks Can be safely called in the middle of the profile.
            */
            void disableProfile(const String& profileName);

			/** Set the mask which all profiles must pass to be enabled. 
			*/
			void setProfileGroupMask(uint32 mask) { mProfileMask = mask; }
			/** Get the mask which all profiles must pass to be enabled. 
			*/
			uint32 getProfileGroupMask() const { return mProfileMask; }

            /** Returns true if the specified profile reaches a new frame time maximum
            @remarks If this is called during a frame, it will be reading the results
            from the previous frame. Therefore, it is best to use this after the frame
            has ended.
            */
            bool watchForMax(const String& profileName);

            /** Returns true if the specified profile reaches a new frame time minimum
            @remarks If this is called during a frame, it will be reading the results
            from the previous frame. Therefore, it is best to use this after the frame
            has ended.
            */
            bool watchForMin(const String& profileName);

            /** Returns true if the specified profile goes over or under the given limit
                frame time
            @remarks If this is called during a frame, it will be reading the results
            from the previous frame. Therefore, it is best to use this after the frame
            has ended.
            @param limit A number between 0 and 1 representing the percentage of frame time
            @param greaterThan If true, this will return whether the limit is exceeded. Otherwise,
            it will return if the frame time has gone under this limit.
            */
            bool watchForLimit(const String& profileName, Real limit, bool greaterThan = true);

            /** Outputs current profile statistics to the log */
            void logResults();

            /** Clears the profiler statistics */
            void reset();

            /** Sets the cc_profiler so the display of results are updated every n frames*/
            void setUpdateDisplayFrequency(uint freq);

            /** Gets the frequency that the cc_profiler display is updated */
            uint getUpdateDisplayFrequency() const;

			/**
			@remarks
				Register a cc_profile_session_listener from the cc_profiler
			@param listener
				A valid listener derived class
			*/
			void addListener(cc_profile_session_listener* listener);

			/**
			@remarks
				Unregister a cc_profile_session_listener from the cc_profiler
			@param listener
				A valid listener derived class
			*/
			void removeListener(cc_profile_session_listener* listener);

            /** Override standard Singleton retrieval.
            @remarks
            Why do we do this? Well, it's because the Singleton
            implementation is in a .h file, which means it gets compiled
            into anybody who includes it. This is needed for the
            Singleton template to work, but we actually only want it
            compiled into the implementation of the class based on the
            Singleton, not all of them. If we don't change this, we get
            link errors when trying to use the Singleton-based class from
            an outside dll.
            @par
            This method just delegates to the template version anyway,
            but the implementation stays in this single compilation unit,
            preventing link errors.
            */
            static cc_profiler& getSingleton(void);
            /** Override standard Singleton retrieval.
            @remarks
            Why do we do this? Well, it's because the Singleton
            implementation is in a .h file, which means it gets compiled
            into anybody who includes it. This is needed for the
            Singleton template to work, but we actually only want it
            compiled into the implementation of the class based on the
            Singleton, not all of them. If we don't change this, we get
            link errors when trying to use the Singleton-based class from
            an outside dll.
            @par
            This method just delegates to the template version anyway,
            but the implementation stays in this single compilation unit,
            preventing link errors.
            */
            static cc_profiler* getSingletonPtr(void);

        protected:
			friend class cc_profile_instance;

			typedef std::vector<cc_profile_session_listener*> TProfileSessionListener;
			TProfileSessionListener mListeners;

            /** Initializes the profiler's GUI elements */
            void initialize();

			void displayResults();

			/** Processes frame stats for all of the mRoot's children */
			void processFrameStats(void);
            /** Processes specific cc_profile_instance and it's children recursively.*/
            void processFrameStats(cc_profile_instance* instance, Real& maxFrameTime);

            /** Handles a change of the profiler's enabled state*/
            void changeEnableState();

			// lol. Uses typedef; put's original container type in name.
			typedef std::set<String> DisabledProfileMap;
			typedef cc_profile_instance::ProfileChildren ProfileChildren;

			cc_profile_instance* mCurrent;
			cc_profile_instance* mLast;
			cc_profile_instance mRoot;

            /// Holds the names of disabled profiles
            DisabledProfileMap mDisabledProfiles;

            /// Whether the GUI elements have been initialized
            bool mInitialized;

            /// The number of frames that must elapse before the current
            /// frame display is updated
            uint mUpdateDisplayFrequency;

            /// The number of elapsed frame, used with mUpdateDisplayFrequency
            uint mCurrentFrame;

            /// The timer used for profiling
            cc_timer* mTimer;

            /// The total time each frame takes
            uint32 mTotalFrameTime;

            /// Whether this profiler is enabled
            bool mEnabled;

            /// Keeps track of the new enabled/disabled state that the user has requested
            /// which will be applied after the frame ends
            bool mNewEnableState;

			/// Mask to decide whether a type of profile is enabled or not
			uint32 mProfileMask;

			/// The max frame time recorded
			uint32 mMaxTotalFrameTime;

			/// Rolling average of millisecs
			Real mAverageFrameTime;
			bool mResetExtents;

			cc_profile_logger* mLogger;

    }; // end class
	/** @} */
	/** @} */

} // end namespace

#endif
